var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUser1620299822480.html",[0,0.234,1,3.864]],["body/classes/AdminUser1620299822480.html",[0,0.215,1,4.999,2,0.625,3,0.056,4,0.056,5,0.05,6,5.785,7,3.552,8,2.265,9,2.978,10,0.229,11,1.085,12,3.455,13,2.051,14,2.633,15,2.573,16,2.573,17,3.684,18,0.572,19,4.337,20,1.18,21,0.007,22,1.048,23,0.385,24,0.803,25,1.066,26,1.668,27,2.573,28,4.337,29,0.167,30,0.853,31,3.319,32,3.863,33,2.719,34,5.031,35,3.863,36,4.742,37,3.863,38,0.056,39,0.004,40,1.684,41,0.992,42,1.677,43,2.691,44,7.665,45,2.978,46,2.532,47,4.337,48,4.337,49,2.235,50,1.75,51,4.337,52,3.552,53,3.863,54,4.337,55,5.265,56,3.319,57,3.99,58,3.552,59,4.999,60,2.978,61,3.34,62,4.41,63,2.73,64,2.45,65,4.337,66,1.75,67,0.004,68,0.003]],["title/classes/Answer.html",[0,0.234,69,2.432]],["body/classes/Answer.html",[0,0.202,2,0.587,3,0.053,4,0.053,5,0.047,10,0.215,18,0.836,21,0.007,22,0.699,23,0.52,24,0.768,29,0.216,30,0.801,38,0.053,39,0.003,40,1.61,41,1.934,67,0.004,68,0.003,69,3.008,70,3.627,71,1.556,72,3.369,73,0.768,74,4.357,75,6.077,76,3.338,77,5.587,78,5.117,79,2.639,80,2.704,81,2.704,82,2.01,83,3.535,84,4.071,85,3.635,86,3.213,87,4.071,88,4.071,89,4.071,90,3.674,91,3.83,92,2.041,93,4.071,94,5.93,95,4.004,96,4.071,97,1.935,98,3.369,99,1.986,100,2.638,101,1.886,102,3.011,103,1.935,104,1.886,105,1.935,106,1.886,107,1.935,108,2.941,109,2.671,110,1.452,111,3.627,112,3.627,113,3.624,114,2.227,115,4.294,116,5.199,117,2.671,118,3.334,119,1.841,120,4.071,121,4.071,122,1.756,123,3.116,124,2.796,125,3.116]],["title/classes/Answer1622421768424.html",[0,0.234,126,3.864]],["body/classes/Answer1622421768424.html",[0,0.202,2,0.587,3,0.053,4,0.053,5,0.047,8,2.166,9,2.876,10,0.36,11,1.037,12,3.384,13,2.009,14,2.517,15,2.46,16,2.46,17,3.63,18,0.639,20,1.129,21,0.006,22,1.354,23,0.43,24,0.768,25,1.019,26,1.621,27,2.46,29,0.112,30,0.801,38,0.053,39,0.003,40,1.61,43,2.751,66,2.752,67,0.004,68,0.003,69,4.605,73,0.768,78,2.796,86,3.402,95,1.986,122,3.797,126,6.102,127,6.637,128,3.627,129,0.787,130,2.253,131,1.607,132,4.071,133,4.071,134,4.071,135,2.796,136,3.91,137,2.796,138,4.685,139,4.685,140,2.796,141,3.453,142,2.796,143,2.796,144,2.671,145,5.835,146,5.199,147,4.466,148,5.835,149,2.796,150,4.94,151,2.796,152,4.972,153,3.62,154,4.132,155,5.835,156,4.972,157,4.132,158,4.071,159,4.796,160,5.835,161,4.071,162,5.835,163,3.627,164,3.516,165,4.008]],["title/controllers/AnswerController.html",[166,1.945,167,3.611]],["body/controllers/AnswerController.html",[0,0.205,3,0.053,4,0.053,5,0.047,10,0.218,11,1.046,13,2.161,18,0.643,20,1.329,21,0.007,22,1.18,23,0.409,24,0.904,25,1.2,26,1.281,29,0.242,38,0.053,39,0.003,40,2.068,41,2.02,42,1.594,46,2.269,66,1.663,67,0.004,68,0.003,69,3.036,82,1.545,166,1.7,167,4.507,168,1.82,169,3.673,170,2.409,171,3.351,172,3.707,173,6.87,174,4.123,175,4.539,176,6.12,177,5.661,178,4.123,179,4.123,180,3.351,181,2.596,182,4.507,183,4.123,184,4.123,185,6.268,186,4.255,187,4.123,188,2.409,189,3.441,190,2.832,191,5.889,192,2.832,193,5.147,194,2.498,195,0.897,196,4.045,197,4.045,198,2.409,199,1.911,200,2.125,201,2.832,202,3.156,203,2.596,204,3.567,205,2.706,206,2.832,207,4.718,208,3.673,209,3.673,210,4.823,211,3.673,212,3.377,213,4.123,214,4.123,215,2.498,216,2.188,217,1.265,218,4.123,219,3.377,220,4.123,221,4.123,222,1.77,223,4.123,224,2.498,225,2.706,226,2.979,227,4.123,228,3.156,229,4.123]],["title/classes/AnswerGrade.html",[0,0.234,144,3.096]],["body/classes/AnswerGrade.html",[0,0.222,2,0.644,3,0.058,4,0.058,5,0.051,10,0.236,18,0.862,21,0.007,23,0.51,24,0.82,29,0.197,30,0.879,38,0.058,39,0.003,40,1.72,41,1.777,67,0.004,68,0.003,69,4.637,71,1.661,72,2.02,73,0.82,74,3.699,75,5.552,76,2.834,77,5.104,78,4.28,79,2.818,80,2.888,81,2.888,82,2.071,83,4.348,85,3.789,86,2.688,90,2.812,91,2.932,92,1.563,94,4.503,95,3.04,97,2.123,98,4.12,99,2.179,100,2.775,101,2.07,102,3.169,103,2.123,104,2.07,105,2.123,106,2.07,107,2.123,115,3.923,144,4.09,230,5.104,231,3.659,232,3.926,233,4.467,234,4.467,235,4.467,236,4.467,237,4.467,238,4.467,239,4.467,240,3.98,241,5.104,242,4.467]],["title/classes/AnswerGradeRepository.html",[0,0.234,243,3.408]],["body/classes/AnswerGradeRepository.html",[0,0.337,2,0.977,3,0.088,4,0.088,5,0.078,21,0.006,29,0.241,30,1.608,38,0.088,39,0.004,67,0.005,68,0.004,71,2.18,144,4.449,243,5.908,244,6.04,245,6.04,246,4.66,247,3.598,248,2.796,249,2.796,250,2.796,251,6.78,252,4.656,253,6.78]],["title/modules/AnswerModule.html",[254,1.618,255,3.408]],["body/modules/AnswerModule.html",[0,0.269,3,0.07,4,0.07,5,0.062,21,0.007,29,0.253,38,0.07,39,0.004,67,0.005,68,0.004,110,1.929,167,6.057,168,3.132,195,1.177,207,6.148,208,4.819,243,5.125,254,2.715,255,6.825,256,2.571,257,2.506,258,2.711,259,2.711,260,2.571,261,3.967,262,2.711,263,4.819,264,4.819,265,4.819,266,5.874,267,6.148,268,3.555,269,2.711,270,2.711,271,5.409,272,4.007,273,5.409,274,3.549,275,2.333,276,3.908,277,4.819,278,4.819,279,4.819,280,3.908,281,4.819,282,5.409,283,5.409]],["title/classes/AnswerRepository.html",[0,0.234,276,3.408]],["body/classes/AnswerRepository.html",[0,0.339,2,0.984,3,0.088,4,0.088,5,0.079,21,0.006,29,0.241,30,1.615,38,0.088,39,0.005,67,0.005,68,0.005,69,3.519,71,2.189,212,5.592,246,4.674,247,3.624,248,2.815,249,2.815,250,2.815,276,5.933,284,6.083,285,6.828]],["title/classes/AnswerScoreCheck1624750140568.html",[0,0.234,286,3.864]],["body/classes/AnswerScoreCheck1624750140568.html",[0,0.248,2,0.719,3,0.064,4,0.064,5,0.057,8,2.495,9,3.205,10,0.264,11,1.194,12,3.607,13,2.141,14,2.899,15,2.834,16,2.834,17,3.798,18,0.712,20,1.3,21,0.006,22,1.458,23,0.414,24,0.884,25,1.174,26,1.77,27,2.834,29,0.137,30,0.981,38,0.064,39,0.003,43,2.542,67,0.004,68,0.003,69,4.193,73,0.884,78,6.008,86,2.152,90,3.14,112,4.444,113,2.968,122,3.279,123,3.818,124,3.426,125,3.818,129,0.965,130,1.648,131,1.97,136,3.678,153,3.567,164,3.465,286,6.663,287,7.247,288,4.444,289,4.988,290,4.988,291,4.988,292,6.226,293,2.729,294,3.14]],["title/injectables/AnswerService.html",[207,3.24,295,1.098]],["body/injectables/AnswerService.html",[0,0.148,3,0.038,4,0.038,5,0.034,10,0.157,11,0.822,13,2.093,18,0.684,20,1.336,21,0.007,22,1.186,23,0.377,24,0.909,25,1.207,26,1.715,29,0.24,30,0.586,33,2.784,38,0.038,39,0.002,40,2.017,41,1.851,43,2.463,46,1.871,49,2.92,50,2.575,66,1.202,67,0.003,68,0.002,69,4.062,74,2.92,76,2.728,82,1.274,94,2.153,110,1.649,111,2.655,118,2.441,119,1.348,141,2.143,172,2.911,176,4.119,177,4.383,181,2.911,185,5.694,195,0.648,203,1.876,207,3.175,209,2.655,210,3.787,211,2.655,212,2.441,217,1.959,222,1.883,243,5.509,248,3.25,249,1.229,250,1.229,275,1.286,276,5.281,277,2.655,278,2.655,279,2.655,295,1.076,296,1.129,297,2.655,298,5.664,299,4.188,300,2.702,301,1.865,302,2.981,303,4.8,304,5.004,305,2.981,306,2.981,307,4.885,308,2.981,309,2.981,310,3.034,311,2.981,312,2.981,313,3.034,314,2.981,315,3.431,316,1.582,317,3.034,318,2.047,319,2.153,320,2.281,321,2.441,322,2.981,323,2.981,324,2.981,325,2.369,326,2.981,327,2.981,328,2.981,329,1.876,330,2.981,331,2.981,332,2.981,333,2.981,334,2.281,335,2.981,336,2.981,337,3.787,338,2.441,339,2.981,340,4.623,341,2.981,342,2.981,343,2.441,344,2.281,345,2.981,346,2.655,347,2.981,348,2.981,349,2.981,350,4.623,351,2.981,352,2.981,353,2.981,354,2.281,355,2.981,356,2.981,357,2.981,358,2.981]],["title/controllers/AppController.html",[166,1.945,359,3.611]],["body/controllers/AppController.html",[0,0.312,3,0.081,4,0.081,5,0.072,10,0.331,11,1.385,18,0.73,21,0.007,25,1.362,29,0.172,38,0.081,39,0.004,67,0.005,68,0.004,82,1.754,129,1.641,166,3.215,168,2.769,188,3.665,195,1.364,222,2.008,359,5.967,360,5.588,361,8.875,362,8.875,363,7.797,364,6.272,365,6.272,366,6.272,367,6.272,368,6.272,369,6.272,370,6.272,371,6.272]],["title/modules/AppModule.html",[254,1.618,372,3.611]],["body/modules/AppModule.html",[0,0.209,3,0.054,4,0.054,5,0.048,21,0.007,29,0.257,38,0.054,39,0.003,67,0.004,68,0.003,76,1.66,168,2.636,195,0.915,254,2.382,255,5.994,256,1.998,257,1.948,258,2.107,259,2.107,260,1.998,261,2.107,262,2.107,266,5.444,267,5.698,268,2.993,269,2.107,270,2.107,272,3.923,274,2.759,275,1.813,280,3.037,281,3.745,359,5.315,372,7.435,373,3.745,374,3.745,375,5.698,376,5.222,377,5.994,378,5.994,379,5.994,380,5.994,381,5.698,382,4.204,383,4.57,384,4.961,385,2.547,386,4.891,387,3.443,388,3.218,389,4.204,390,3.745,391,3.745,392,3.745,393,4.204,394,4.204,395,4.204,396,4.204,397,4.204,398,4.204,399,4.204,400,4.204,401,4.204,402,2.887,403,4.204,404,2.457]],["title/classes/Auth.html",[0,0.234,60,2.301]],["body/classes/Auth.html",[0,0.25,2,0.726,3,0.065,4,0.065,5,0.058,10,0.266,18,0.839,21,0.007,23,0.509,29,0.185,30,0.991,38,0.065,39,0.003,40,1.868,41,1.153,55,5.249,57,4.318,60,3.302,61,4.182,67,0.004,68,0.003,71,1.804,72,3.694,73,0.89,79,3.061,80,3.137,81,3.137,82,2.017,85,3.728,92,2.367,97,2.396,98,3.694,99,2.459,100,2.955,101,2.336,102,3.374,103,2.396,104,2.336,105,2.396,106,2.336,107,2.396,113,3.607,114,2.758,129,1.697,405,4.491,406,5.128,407,3.824,408,5.04,409,5.04,410,5.04,411,3.642,412,5.04]],["title/classes/Auth1619445806509.html",[0,0.234,413,3.864]],["body/classes/Auth1619445806509.html",[0,0.199,2,0.576,3,0.052,4,0.052,5,0.046,8,2.137,9,2.846,10,0.463,11,1.023,12,3.363,13,1.996,14,2.483,15,2.427,16,2.427,17,3.614,18,0.632,20,1.113,21,0.006,22,1.344,23,0.427,24,0.757,25,1.006,26,1.607,27,2.427,29,0.109,30,0.786,34,3.364,36,3.055,38,0.052,39,0.003,40,2.038,43,2.689,46,2.586,55,2.744,57,2.257,60,3.293,61,3.15,63,2.515,64,2.257,67,0.004,68,0.003,73,0.757,86,2.483,95,1.949,122,4.02,129,0.773,130,2.694,131,1.577,136,3.34,137,3.954,138,5.601,139,5.601,140,3.954,141,2.668,142,3.954,143,3.954,149,3.954,150,3.364,151,3.954,164,3.807,171,2.809,293,4.462,407,3.813,413,6.049,414,6.58,415,3.559,416,3.995,417,3.995,418,3.995,419,5.352,420,5.757,421,3.057,422,5.129,423,5.757,424,5.757,425,5.129,426,4.715]],["title/controllers/AuthController.html",[166,1.945,427,3.611]],["body/controllers/AuthController.html",[0,0.297,3,0.077,4,0.077,5,0.069,10,0.316,11,1.345,18,0.56,20,1.156,21,0.007,22,1.027,23,0.326,24,0.787,25,1.045,26,1.646,29,0.239,38,0.077,39,0.004,60,2.917,61,4.14,67,0.005,68,0.004,82,1.345,166,2.466,168,2.64,170,3.494,188,4.851,189,3.494,195,1.301,198,3.494,199,2.771,216,3.174,217,1.835,222,1.54,427,5.791,428,5.327,429,5.327,430,6.314,431,5.98,432,5.226,433,4.577,434,5.327,435,5.98,436,5.98,437,5.98,438,5.98]],["title/classes/AuthDto.html",[0,0.234,439,3.24]],["body/classes/AuthDto.html",[0,0.406,2,0.977,3,0.088,4,0.088,5,0.078,10,0.358,18,0.635,21,0.006,23,0.37,29,0.186,38,0.088,39,0.004,61,4.804,67,0.005,68,0.004,73,1.076,82,1.525,129,1.582,439,5.616,440,6.04,441,4.449,442,6.78,443,5.616,444,5.366,445,3.142]],["title/modules/AuthModule.html",[254,1.618,375,3.24]],["body/modules/AuthModule.html",[0,0.224,3,0.058,4,0.058,5,0.052,21,0.007,29,0.255,38,0.058,39,0.003,67,0.004,68,0.003,168,2.765,195,0.979,200,4.794,254,2.472,256,2.138,257,2.085,258,2.255,259,2.255,260,2.138,261,3.611,262,3.611,268,3.139,269,2.255,270,2.255,272,4.07,274,2.952,275,1.94,375,6.576,381,5.823,383,5.514,384,5.112,385,2.725,388,3.443,391,4.008,402,3.09,404,2.629,427,5.514,432,5.855,433,3.443,446,4.008,447,4.008,448,4.008,449,4.008,450,6.72,451,6.126,452,4.499,453,4.499,454,3.443,455,3.443,456,4.499,457,3.25,458,4.008,459,4.499,460,4.499,461,4.499,462,4.499,463,4.499,464,4.499]],["title/classes/AuthRepository.html",[0,0.234,457,3.408]],["body/classes/AuthRepository.html",[0,0.339,2,0.984,3,0.088,4,0.088,5,0.079,21,0.006,29,0.241,30,1.615,38,0.088,39,0.005,60,3.331,67,0.005,68,0.005,71,2.189,246,4.674,247,3.624,248,2.815,249,2.815,250,2.815,457,5.933,465,6.083,466,6.083,467,6.828]],["title/injectables/AuthService.html",[295,1.098,432,2.97]],["body/injectables/AuthService.html",[0,0.178,3,0.046,4,0.046,5,0.041,10,0.189,11,0.945,13,2.087,18,0.702,20,1.449,21,0.007,22,1.287,23,0.428,24,0.986,25,1.226,26,1.816,29,0.241,30,0.705,31,2.744,33,2.735,36,1.903,38,0.046,39,0.002,43,2.609,46,1.184,49,2.742,50,2.146,55,4.356,56,2.744,57,3.005,60,3.656,61,3.839,67,0.004,68,0.002,82,0.807,195,0.78,217,1.946,222,1.634,248,2.893,249,1.478,250,1.478,275,1.547,295,1.238,296,1.358,301,2.146,315,2.172,316,1.903,325,2.354,404,2.095,429,4.739,430,5.147,432,3.349,434,3.194,439,5.959,454,2.744,457,5.672,458,3.194,466,3.194,468,3.194,469,5.32,470,5.32,471,5.32,472,3.586,473,8.127,474,5.254,475,3.586,476,5.32,477,5.414,478,3.586,479,5.32,480,3.586,481,3.586,482,5.32,483,3.586,484,2.744,485,2.937,486,2.937,487,3.194,488,2.026,489,2.937,490,3.586,491,3.586,492,2.937,493,3.586,494,3.586,495,3.586,496,3.586,497,3.586,498,5.32,499,3.586,500,3.586,501,3.586,502,3.586,503,3.586,504,5.32,505,3.586,506,2.744,507,3.586,508,3.586,509,3.586,510,3.586,511,3.586]],["title/classes/Auxiliary1620477175799.html",[0,0.234,512,3.864]],["body/classes/Auxiliary1620477175799.html",[0,0.278,2,0.285,3,0.026,4,0.026,5,0.023,8,1.233,9,1.81,10,0.34,11,0.59,12,2.498,13,1.483,14,1.433,15,1.401,16,1.401,17,2.896,18,0.402,20,0.643,21,0.006,22,1.04,23,0.234,24,0.437,25,0.58,26,1.093,27,1.401,29,0.054,30,0.39,38,0.026,39,0.001,40,2.106,43,2.933,66,2.597,67,0.002,68,0.001,73,0.437,76,2.393,86,3.471,90,3.524,95,0.966,113,3.101,122,4.105,129,0.383,130,2.695,131,0.782,136,4.215,137,4.162,138,5.736,139,5.736,140,4.162,141,3.608,142,4.162,143,4.162,149,4.162,150,4.975,151,4.162,153,3.727,154,3.9,156,4.8,157,3.9,159,4.631,164,4.348,171,2.956,232,2.74,292,5.273,293,4.964,294,5.445,407,2.425,419,3.976,426,4.585,512,4.115,513,4.477,514,1.622,515,1.765,516,1.981,517,1.765,518,2.805,519,3.163,520,2.401,521,2.401,522,3.846,523,3.285,524,2.96,525,2.425,526,2.092,527,1.622,528,1.765,529,4.045,530,1.665,531,1.765,532,2.508,533,3.163,534,1.621,535,3.323,536,3.272,537,1.765,538,2.543,539,3.323,540,2.543,541,2.948,542,2.543,543,1.361,544,1.431,545,3.323,546,4.252,547,2.013,548,3.101,549,3.846,550,2.936,551,4.378,552,2.543,553,3.323,554,1.516,555,2.96,556,2.722,557,2.96,558,1.765,559,2.96,560,1.765,561,2.96]],["title/classes/Auxiliary1624416663574.html",[0,0.234,562,3.864]],["body/classes/Auxiliary1624416663574.html",[0,0.185,2,0.328,3,0.029,4,0.029,5,0.026,8,1.385,9,1.998,10,0.412,11,0.663,12,2.677,13,1.589,14,1.61,15,1.573,16,1.573,17,3.053,18,0.444,20,0.722,21,0.006,22,1.038,23,0.258,24,0.491,25,0.652,26,1.192,27,1.573,29,0.062,30,0.448,38,0.029,39,0.002,40,1.03,43,2.986,66,3.148,67,0.002,68,0.002,73,0.491,86,3.55,90,2.349,95,1.112,113,1.648,122,3.853,129,0.441,130,2.264,131,0.9,135,3.255,136,4.281,137,1.565,138,3.255,139,3.255,140,1.565,141,3.691,142,1.565,143,1.565,147,5.475,149,3.255,150,5.277,151,3.255,152,5.654,153,4.302,154,4.727,156,5.379,157,4.727,159,5.035,163,3.325,164,4.178,165,4.913,232,3.601,419,1.495,514,1.866,515,2.03,517,2.03,521,2.696,522,2.856,525,2.678,526,2.349,529,4.69,530,1.87,531,3.325,534,1.112,536,4.18,537,3.325,538,4.968,540,4.968,541,2.563,544,5.168,547,1.38,548,2.696,550,4.18,554,1.744,556,3.056,557,4.881,558,3.325,559,4.881,560,3.325,561,4.881,562,4.487,563,4.881,564,2.279,565,6.045,566,2.349,567,3.325,568,6.373,569,3.732,570,3.732,571,5.475,572,3.732,573,3.732,574,3.056,575,2.03,576,3.732,577,3.732,578,3.325,579,4.881,580,3.732,581,3.732,582,3.732]],["title/modules/AuxiliaryModule.html",[254,1.618,376,2.97]],["body/modules/AuxiliaryModule.html",[0,0.237,3,0.062,4,0.062,5,0.055,21,0.007,29,0.253,38,0.062,39,0.003,67,0.004,68,0.003,195,1.037,254,2.548,256,2.265,257,2.209,258,2.389,259,2.389,260,2.265,261,3.722,262,3.722,268,3.266,269,2.389,270,2.389,272,2.693,274,3.128,275,2.056,376,6.046,583,4.246,584,4.246,585,4.246,586,6.451,587,6.451,588,6.451,589,6.451,590,4.766,591,4.708,592,4.246,593,4.708,594,4.246,595,4.708,596,4.246,597,4.708,598,4.246,599,4.766,600,4.766,601,4.766,602,4.766,603,4.246]],["title/interfaces/BatchUser.html",[307,3.611,604,1.302]],["body/interfaces/BatchUser.html",[3,0.088,4,0.088,5,0.079,10,0.361,21,0.006,23,0.448,38,0.088,39,0.005,41,2.173,67,0.005,68,0.005,73,1.08,180,4.458,224,5.536,307,6.285,604,1.884,605,2.815,606,6.083,607,4.933]],["title/injectables/CaslAbilityFactory.html",[295,1.098,608,3.408]],["body/injectables/CaslAbilityFactory.html",[0,0.221,3,0.057,4,0.057,5,0.051,10,0.235,11,1.104,18,0.416,20,0.86,21,0.007,22,0.764,23,0.39,24,0.585,25,0.777,29,0.246,33,2.091,38,0.057,39,0.003,40,1.227,42,2.402,46,2.922,50,1.794,67,0.004,68,0.003,69,4.203,74,4.354,109,2.918,110,1.586,130,1.469,159,2.599,195,0.967,222,1.145,224,3.763,225,4.698,232,2.011,295,1.445,296,1.684,518,1.719,542,4.754,608,4.488,609,5.088,610,3.642,611,6.212,612,6.212,613,4.447,614,6.378,615,6.212,616,6.212,617,6.212,618,5.534,619,3.962,620,4.447,621,4.447,622,4.447,623,3.642,624,3.962,625,4.447,626,4.447,627,3.297,628,3.054,629,2.694,630,3.054,631,3.962,632,3.642,633,3.962,634,3.962,635,5.534,636,3.962,637,4.447,638,5.534,639,4.447,640,8.154,641,5.534,642,4.447,643,7.159,644,4.447,645,4.447,646,7.159,647,4.447,648,4.447,649,4.447]],["title/modules/CaslModule.html",[254,1.618,450,3.408]],["body/modules/CaslModule.html",[0,0.311,3,0.081,4,0.081,5,0.072,21,0.006,29,0.213,38,0.081,39,0.004,67,0.005,68,0.004,195,1.36,254,2.906,256,2.971,257,2.897,258,3.133,259,3.133,260,2.971,261,4.246,262,4.246,268,3.9,269,3.133,270,3.133,450,6.812,608,7.061,650,5.569,651,5.569,652,5.569,653,6.251,654,6.251,655,6.251]],["title/classes/CopyQuestionGroupDto.html",[0,0.234,656,3.408]],["body/classes/CopyQuestionGroupDto.html",[0,0.39,2,0.913,3,0.082,4,0.082,5,0.073,10,0.335,18,0.734,21,0.006,23,0.428,29,0.173,38,0.082,39,0.004,41,2.038,67,0.005,68,0.004,73,1.032,76,3.365,82,1.765,110,3.039,180,4.157,445,2.935,656,5.667,657,7.592,658,4.576,659,5.162,660,5.35,661,6.334,662,5.643]],["title/modules/CoreModule.html",[254,1.618,377,3.408]],["body/modules/CoreModule.html",[0,0.289,3,0.075,4,0.075,5,0.067,21,0.006,29,0.237,38,0.075,39,0.004,67,0.005,68,0.004,195,1.265,254,2.812,256,2.765,257,2.696,258,2.916,259,2.916,260,2.765,261,4.108,262,4.108,268,3.727,269,2.916,270,2.916,272,3.286,377,6.788,383,5.691,385,3.524,663,5.182,664,5.182,665,5.182,666,6.166,667,6.993,668,5.817,669,6.624,670,5.817,671,5.817,672,5.817]],["title/classes/Course.html",[0,0.234,532,2.757]],["body/classes/Course.html",[0,0.245,2,0.712,3,0.064,4,0.064,5,0.057,10,0.261,18,0.835,21,0.007,23,0.501,29,0.207,30,0.971,38,0.064,39,0.003,40,1.842,41,1.13,42,1.909,67,0.004,68,0.003,71,1.779,72,3.663,73,0.878,79,3.018,80,3.093,81,3.093,82,2.006,85,3.256,92,2.335,97,2.347,98,3.663,99,2.409,100,2.924,101,2.288,102,3.339,103,2.347,104,2.288,105,2.347,106,2.288,107,2.347,113,3.339,114,2.701,117,3.24,129,1.567,406,4.734,407,3.771,532,3.901,533,4.761,534,3.689,536,4.945,673,4.398,674,7.562,675,4.937,676,2.789,677,4.937,678,4.937,679,4.202,680,4.398,681,4.937,682,4.937]],["title/classes/CreateAnswerDto.html",[0,0.234,177,3.24]],["body/classes/CreateAnswerDto.html",[0,0.352,2,0.779,3,0.07,4,0.07,5,0.062,10,0.286,18,0.787,21,0.007,23,0.497,24,1.105,29,0.194,38,0.07,39,0.004,41,2.048,67,0.005,68,0.004,73,0.933,77,6.482,78,5.436,82,1.89,94,5.718,118,4.43,119,2.446,130,1.787,131,2.136,177,5.436,346,4.819,445,2.506,660,4.91,683,7.771,684,4.43,685,7.914,686,5.409,687,5.409,688,5.409,689,5.409,690,5.409,691,7.093,692,5.409,693,5.409,694,4.43,695,4.794,696,4.43,697,5.409,698,5.409,699,5.409,700,5.409,701,5.409,702,5.409,703,5.409]],["title/classes/CreateAuthDto.html",[0,0.234,477,3.408]],["body/classes/CreateAuthDto.html",[0,0.322,2,0.934,3,0.084,4,0.084,5,0.075,10,0.342,18,0.745,21,0.006,23,0.434,29,0.178,38,0.084,39,0.004,57,4.496,61,4.354,67,0.005,68,0.004,71,2.121,73,1.047,82,1.79,98,3.598,129,1.539,430,6.167,439,4.453,441,4.255,477,5.749,704,5.776,705,5.776,706,5.776,707,4.962,708,6.483,709,5.776,710,6.483]],["title/classes/CreateExamAgreementDto.html",[0,0.234,711,3.408]],["body/classes/CreateExamAgreementDto.html",[0,0.417,2,0.881,3,0.079,4,0.079,5,0.07,10,0.323,18,0.572,21,0.007,23,0.457,24,1.009,29,0.241,38,0.079,39,0.004,67,0.005,68,0.004,71,1.629,73,1.009,82,1.375,199,2.833,224,3.703,445,2.833,518,3.242,543,5.759,695,4.648,711,5.543,712,6.284,713,4.678,714,4.322,715,5.446,716,6.113,717,5.006,718,4.198,719,5.543,720,4.678,721,5.006,722,6.113]],["title/classes/CreateExamDto.html",[0,0.234,723,3.24]],["body/classes/CreateExamDto.html",[0,0.375,2,0.708,3,0.063,4,0.063,5,0.057,10,0.259,18,0.815,21,0.007,23,0.501,24,1.063,29,0.207,38,0.063,39,0.003,67,0.004,68,0.003,73,0.875,82,1.959,92,2.327,100,3.367,119,2.221,129,1.563,441,4.365,443,5.18,444,4.95,445,2.276,520,5.449,534,3.68,694,4.023,695,4.569,712,7.294,714,3.429,718,3.374,719,4.806,723,4.569,724,4.023,725,6.72,726,5.773,727,5.773,728,4.408,729,4.376,730,4.912,731,4.912,732,6.652,733,4.912,734,4.912,735,4.261,736,4.912,737,5.091,738,4.912,739,4.912,740,4.806,741,7.542,742,2.462,743,2.276,744,4.912]],["title/classes/CreateQuestion.html",[0,0.234,745,3.24]],["body/classes/CreateQuestion.html",[0,0.428,2,0.833,3,0.075,4,0.075,5,0.067,10,0.305,18,0.541,21,0.007,23,0.446,24,0.974,29,0.236,38,0.075,39,0.004,40,2.255,41,1.695,67,0.005,68,0.004,71,1.541,73,0.974,82,1.301,92,2.591,110,2.642,171,2.821,199,2.68,329,3.64,445,2.68,659,3.503,660,4.328,695,4.487,717,4.736,718,3.971,737,5.669,740,5.351,745,5.918,746,5.351,747,4.736,748,5.151,749,5.782,750,5.151,751,6.599,752,6.599,753,3.64,754,4.178,755,5.151,756,3.971,757,5.151]],["title/classes/CreateQuestionDto.html",[0,0.234,753,2.97]],["body/classes/CreateQuestionDto.html",[0,0.324,2,0.687,3,0.062,4,0.062,5,0.055,10,0.252,18,0.783,21,0.006,23,0.471,24,1.135,29,0.179,38,0.062,39,0.003,41,1.491,67,0.004,68,0.003,73,0.857,82,1.881,110,3.078,129,1.669,199,2.209,441,3.128,443,5.1,444,4.873,445,2.209,534,3.179,659,4.499,660,4.34,695,4.836,714,4.115,719,4.708,746,6.235,753,4.102,758,3.648,759,6.616,760,6.616,761,6.082,762,6.082,763,4.766,764,4.246,765,4.766,766,4.766,767,4.766,768,4.766,769,5.337,770,6.517,771,7.112,772,6.517,773,6.517,774,5.806,775,6.517,776,6.517,777,6.517,778,6.517,779,6.517,780,6.517,781,4.766,782,4.766,783,4.766,784,6.517,785,6.517,786,4.766]],["title/classes/CreateQuestionGroupDto.html",[0,0.234,787,3.24]],["body/classes/CreateQuestionGroupDto.html",[0,0.436,2,0.793,3,0.071,4,0.071,5,0.063,10,0.291,18,0.792,21,0.006,23,0.461,24,1.183,29,0.151,38,0.071,39,0.004,41,1.641,67,0.005,68,0.004,73,0.944,76,3.463,82,1.902,110,3.128,129,1.387,180,3.893,441,3.61,443,4.926,444,4.707,445,2.549,534,3.893,547,4.834,658,3.975,660,4.191,695,5.123,714,4.359,719,5.766,729,6.39,746,6.337,748,4.901,787,4.926,788,5.501,789,5.501,790,5.501,791,5.501]],["title/classes/CreateQuestionsDto.html",[0,0.234,756,3.24]],["body/classes/CreateQuestionsDto.html",[0,0.428,2,0.833,3,0.075,4,0.075,5,0.067,10,0.305,18,0.541,21,0.007,23,0.446,29,0.236,38,0.075,39,0.004,40,1.596,41,1.323,67,0.005,68,0.004,71,1.541,73,0.974,82,1.301,92,2.591,110,2.642,171,2.821,199,2.68,329,5.144,445,2.68,659,3.503,660,4.328,695,4.487,717,4.736,718,3.971,737,5.669,740,5.351,745,5.918,746,5.351,747,4.736,750,5.151,751,6.599,752,6.599,753,3.64,754,4.178,755,5.151,756,5.087,757,5.151,792,5.782,793,5.782,794,5.782,795,5.782]],["title/classes/CreateUserDto.html",[0,0.234,796,2.97]],["body/classes/CreateUserDto.html",[0,0.388,2,0.76,3,0.068,4,0.068,5,0.061,10,0.279,18,0.779,21,0.007,23,0.494,29,0.248,34,4.569,36,4.149,38,0.068,39,0.003,57,2.98,63,4.922,67,0.005,68,0.003,71,1.406,73,0.918,82,1.872,119,2.385,129,1.609,199,2.445,445,3.233,477,3.811,489,4.321,630,5.37,632,4.321,694,4.321,796,4.392,797,7.708,798,4.321,799,7.818,800,5.275,801,6.403,802,5.275,803,6.977,804,5.275,805,4.922,806,6.977,807,5.275,808,4.7,809,5.275,810,5.275,811,5.275,812,5.34,813,5.275,814,5.275]],["title/interfaces/CsvLine.html",[604,1.302,815,3.408]],["body/interfaces/CsvLine.html",[3,0.078,4,0.078,5,0.069,10,0.319,21,0.006,23,0.492,24,1.001,38,0.078,39,0.004,67,0.005,68,0.004,73,1.001,129,1.903,604,1.666,605,2.489,769,7.17,815,5.499,816,5.377,817,5.377,818,7.799,819,7.17,820,7.17,821,7.799,822,7.799,823,7.799]],["title/injectables/CustomLogger.html",[295,1.098,824,3.408]],["body/injectables/CustomLogger.html",[0,0.349,3,0.091,4,0.091,5,0.081,21,0.006,29,0.192,38,0.091,39,0.005,67,0.006,68,0.005,71,2.227,195,1.529,295,1.944,296,2.662,824,6.036,825,6.26,826,6.124,827,8.355,828,7.027]],["title/classes/Exam.html",[0,0.234,518,1.824]],["body/classes/Exam.html",[0,0.148,2,0.43,3,0.038,4,0.038,5,0.034,10,0.157,11,0.822,18,0.864,21,0.007,23,0.511,24,0.608,25,0.521,29,0.209,30,0.586,38,0.038,39,0.002,40,1.276,41,1.296,42,1.788,67,0.003,68,0.002,71,1.232,72,3.448,73,0.608,74,3.29,79,2.886,80,2.958,81,2.958,82,2.052,83,1.806,85,3.72,86,1.994,95,3.114,97,1.417,98,3.448,99,1.454,100,3.306,101,2.143,102,2.501,103,1.417,104,2.143,105,1.417,106,2.143,107,1.417,109,1.956,110,1.063,113,3.48,114,1.631,115,2.911,117,1.956,129,1.234,130,1.527,222,1.191,518,2.468,519,4.018,520,4.092,522,4.885,526,3.566,530,3.822,534,2.763,627,3.387,628,2.047,629,1.806,676,2.612,679,3.566,714,2.383,725,5.046,726,4.335,727,4.335,728,3.31,742,1.494,829,2.655,830,5.046,831,4.639,832,4.639,833,5.227,834,3.34,835,4.335,836,4.335,837,2.981,838,3.34,839,3.175,840,2.981,841,2.981,842,2.981,843,2.981,844,2.981,845,2.981,846,2.981,847,5.658,848,2.981,849,4.188,850,2.981,851,2.981,852,2.981,853,1.956,854,1.956,855,1.956,856,4.639,857,2.981,858,2.153,859,2.981,860,2.981,861,2.981,862,2.981,863,2.981,864,4.119,865,3.539,866,2.153,867,2.281,868,2.981,869,1.806,870,2.981,871,1.742,872,2.981,873,2.981,874,2.981,875,2.281,876,2.441,877,2.441,878,2.981,879,2.981]],["title/classes/Exam1620478273991.html",[0,0.234,880,3.864]],["body/classes/Exam1620478273991.html",[0,0.262,2,0.76,3,0.068,4,0.068,5,0.061,8,2.589,9,3.296,10,0.279,11,1.24,12,3.665,13,2.176,14,3.009,15,2.942,16,2.942,17,3.841,18,0.732,20,1.349,21,0.006,22,1.486,23,0.426,24,0.918,25,1.219,26,1.81,27,2.942,29,0.145,30,1.038,38,0.068,39,0.003,43,2.181,67,0.005,68,0.003,73,0.918,90,4.392,122,3.009,129,1.02,130,2.305,131,2.083,136,3.155,152,4.227,518,2.698,524,7.412,525,2.98,550,4.077,880,6.814,881,7.412,882,4.7,883,5.275,884,5.275,885,5.275]],["title/classes/ExamAgreement.html",[0,0.234,74,2.432]],["body/classes/ExamAgreement.html",[0,0.171,2,0.495,3,0.044,4,0.044,5,0.04,10,0.181,11,0.915,18,0.857,21,0.007,23,0.511,24,0.677,25,0.6,29,0.202,30,0.675,38,0.044,39,0.002,40,1.421,41,1.683,42,1.327,46,2.646,67,0.003,68,0.002,71,1.373,72,3.622,73,0.677,74,2.654,79,3.105,80,3.182,81,3.182,82,2.045,83,3.119,85,3.589,86,2.961,91,3.379,92,2.401,95,3.35,97,1.631,98,3.622,99,1.674,100,2.987,101,2.386,102,2.728,103,1.631,104,2.386,105,1.631,106,2.386,107,1.631,108,6.201,113,3.537,114,1.878,115,3.89,117,2.252,129,1.328,130,2.268,180,3.014,222,0.884,224,3.743,407,1.939,518,3.097,519,3.241,526,3.89,542,4.729,543,4.244,714,3.982,742,1.72,839,3.536,853,2.252,854,2.252,855,2.252,866,2.48,871,2.006,886,3.058,887,5.061,888,6.866,889,3.432,890,3.432,891,3.432,892,3.432,893,5.315,894,3.432,895,3.432,896,3.432,897,3.432,898,3.432,899,3.432,900,3.432,901,2.811,902,3.432,903,3.432,904,3.432,905,2.811,906,3.432,907,2.627]],["title/classes/ExamAgreement1622332886234.html",[0,0.234,908,3.864]],["body/classes/ExamAgreement1622332886234.html",[0,0.215,2,0.625,3,0.056,4,0.056,5,0.05,8,2.265,9,2.978,10,0.229,11,1.085,12,3.455,13,2.051,14,2.633,15,2.573,16,2.573,17,3.684,18,0.661,20,1.18,21,0.006,22,1.387,23,0.385,24,0.803,25,1.066,26,1.668,27,2.573,29,0.119,30,0.853,38,0.056,39,0.003,43,2.747,66,2.462,67,0.004,68,0.003,73,0.803,86,1.871,113,1.915,122,3.046,129,0.839,130,1.433,131,1.712,136,3.975,141,2.829,150,4.48,153,3.748,154,3.697,156,4.643,157,3.697,159,4.48,164,3.641,293,4.809,294,5.533,419,2.846,541,6.037,542,5.867,544,3.133,548,5.103,550,3.567,554,3.319,578,3.863,908,6.278,909,6.829,910,3.863,911,4.337,912,4.337,913,4.337,914,4.337,915,6.104,916,6.104]],["title/classes/ExamAgreementAnonymousDefault1622334780336.html",[0,0.234,917,3.864]],["body/classes/ExamAgreementAnonymousDefault1622334780336.html",[0,0.258,2,0.748,3,0.067,4,0.067,5,0.06,8,2.562,9,3.27,10,0.274,11,1.226,12,3.648,13,2.166,14,2.977,15,2.91,16,2.91,17,3.828,18,0.726,20,1.335,21,0.006,22,1.478,23,0.423,24,0.908,25,1.206,26,1.798,27,2.91,29,0.142,30,1.021,38,0.067,39,0.003,43,2.157,67,0.005,68,0.003,73,0.908,90,4.345,122,2.977,129,1.004,130,2.28,131,2.049,136,3.121,293,3.777,294,4.345,525,2.932,541,4.741,543,5.677,550,4.034,917,6.77,918,7.364,919,4.624,920,5.19,921,5.19,922,5.19]],["title/controllers/ExamAgreementController.html",[166,1.945,923,3.611]],["body/controllers/ExamAgreementController.html",[0,0.223,3,0.058,4,0.058,5,0.052,10,0.237,11,1.111,13,2.074,18,0.585,20,1.209,21,0.007,22,1.074,23,0.392,24,0.823,25,1.092,26,1.693,29,0.247,38,0.058,39,0.003,40,1.725,41,1.646,46,2.57,67,0.004,68,0.003,74,3.709,82,1.407,109,2.945,166,1.851,168,1.982,170,2.623,186,3.243,188,4.205,189,4.205,190,3.083,192,3.083,193,4.294,194,2.719,195,0.976,196,4.294,197,4.294,198,2.623,199,2.08,200,2.314,201,3.083,203,2.825,204,3.787,205,2.945,206,3.083,215,2.719,216,2.382,217,1.377,222,1.61,226,3.243,304,4.722,321,3.676,488,2.536,518,2.782,711,5.622,721,5.121,871,4.205,923,4.785,924,5.893,925,3.999,926,6.41,927,7.195,928,3.999,929,5.622,930,4.488,931,5.57,932,4.488,933,6.932,934,5.622,935,3.676,936,4.488,937,2.825,938,3.083,939,3.083,940,3.676,941,3.676,942,4.488,943,4.488,944,4.488]],["title/classes/ExamAgreementDto.html",[0,0.234,720,3.611]],["body/classes/ExamAgreementDto.html",[0,0.391,2,0.916,3,0.082,4,0.082,5,0.073,10,0.336,18,0.736,21,0.006,23,0.429,29,0.215,38,0.082,39,0.004,41,2.04,67,0.005,68,0.004,73,1.034,82,1.768,180,4.164,199,2.945,224,5.17,445,2.945,660,4.987,713,4.864,720,6.016,945,6.99,946,6.355,947,8.534,948,6.355]],["title/classes/ExamAgreementObservation1622417032753.html",[0,0.234,949,3.864]],["body/classes/ExamAgreementObservation1622417032753.html",[0,0.261,2,0.758,3,0.068,4,0.068,5,0.061,8,2.585,9,3.292,10,0.278,11,1.238,12,3.663,13,2.174,14,3.004,15,2.936,16,2.936,17,3.839,18,0.731,20,1.347,21,0.006,22,1.484,23,0.426,24,0.916,25,1.217,26,1.808,27,2.936,29,0.144,30,1.035,38,0.068,39,0.003,43,2.177,67,0.005,68,0.003,73,0.916,113,2.323,122,2.269,129,1.017,130,1.738,131,2.077,136,3.149,153,2.792,164,2.712,293,3.811,294,4.384,519,3.312,541,4.783,887,5.704,949,6.806,950,7.404,951,4.687,952,5.261,953,5.261,954,5.261]],["title/classes/ExamAgreementRepository.html",[0,0.234,955,3.408]],["body/classes/ExamAgreementRepository.html",[0,0.337,2,0.977,3,0.088,4,0.088,5,0.078,21,0.006,29,0.241,30,1.608,38,0.088,39,0.004,67,0.005,68,0.004,71,2.18,74,3.495,109,4.449,246,4.66,247,3.598,248,2.796,249,2.796,250,2.796,938,4.656,955,5.908,956,5.553,957,6.04,958,6.78]],["title/injectables/ExamAgreementService.html",[295,1.098,304,3.096]],["body/injectables/ExamAgreementService.html",[0,0.146,3,0.038,4,0.038,5,0.034,10,0.155,11,0.812,13,2.085,18,0.71,20,1.466,21,0.007,22,1.302,23,0.439,24,0.998,25,1.269,26,1.853,29,0.233,30,0.899,33,2.131,38,0.038,39,0.002,40,1.548,41,1.569,43,1.978,46,2.266,49,2.891,50,2.263,66,1.184,67,0.003,68,0.002,74,3.263,79,1.327,82,1.262,100,2.808,109,1.926,123,2.246,175,3.834,180,1.432,195,0.639,203,2.876,217,1.402,222,1.871,224,3.398,225,2.998,248,3.233,249,1.21,250,1.21,275,1.266,295,1.063,296,1.112,300,2.67,301,1.843,304,2.998,315,2.767,316,1.558,320,6.001,325,1.696,404,1.715,484,2.246,488,1.658,492,2.404,518,2.808,711,4.573,721,3.742,742,1.471,835,2.246,836,4.845,866,2.121,871,4.812,893,2.121,907,3.497,926,4.997,928,2.615,929,4.573,931,4.997,933,5.639,934,4.573,937,1.848,938,2.016,939,3.138,955,4.573,959,2.615,960,4.569,961,4.569,962,4.569,963,5.609,964,1.778,965,4.936,966,2.935,967,2.767,968,4.569,969,2.935,970,2.935,971,4.569,972,4.07,973,2.935,974,3.742,975,4.569,976,2.935,977,4.569,978,2.935,979,2.935,980,2.935,981,2.935,982,2.404,983,2.615,984,2.935,985,2.935,986,2.935,987,3.742,988,3.301,989,2.935,990,2.615,991,2.404,992,5.609,993,2.615,994,4.07,995,2.935,996,2.935,997,3.138,998,2.935,999,3.497,1000,2.935]],["title/interfaces/ExamAgreementUser.html",[604,1.302,929,3.408]],["body/interfaces/ExamAgreementUser.html",[3,0.086,4,0.086,5,0.077,10,0.353,11,1.441,18,0.626,21,0.006,23,0.365,25,1.168,38,0.086,39,0.004,40,2.504,41,1.997,67,0.005,68,0.004,73,1.067,202,6.206,604,1.845,605,2.757,607,4.83,714,4.18,871,4.739,929,5.858,1001,9.074,1002,6.686]],["title/controllers/ExamController.html",[166,1.945,1003,3.611]],["body/controllers/ExamController.html",[0,0.177,3,0.046,4,0.046,5,0.041,10,0.188,11,0.939,13,2.281,18,0.733,20,1.444,21,0.007,22,1.282,23,0.454,24,0.982,25,1.367,26,1.935,29,0.237,38,0.046,39,0.002,40,2.159,41,1.946,42,1.374,46,1.745,66,1.433,67,0.003,68,0.002,82,1.76,141,2.923,166,1.465,168,1.568,170,2.076,171,2.577,172,3.326,175,4.231,181,2.236,182,4.043,186,3.817,188,3.087,189,3.087,190,2.44,192,2.44,193,4.797,194,2.152,195,0.773,196,3.629,197,4.797,198,2.076,199,1.646,200,1.831,201,2.44,203,2.236,204,2.152,205,2.331,206,2.44,215,2.152,216,1.885,217,1.09,222,2.015,226,2.567,228,2.719,299,4.583,300,3.087,310,2.331,313,2.331,488,2.007,518,2.886,547,2.152,723,5.374,937,2.236,939,2.44,941,2.91,965,3.971,1003,4.043,1004,3.165,1005,4.043,1006,3.165,1007,2.91,1008,3.553,1009,2.719,1010,3.553,1011,4.327,1012,3.553,1013,3.165,1014,3.553,1015,4.557,1016,3.553,1017,3.553,1018,6.014,1019,3.553,1020,3.165,1021,4.327,1022,2.567,1023,2.567,1024,3.165,1025,3.553,1026,3.553,1027,3.553,1028,3.553,1029,3.553,1030,3.553,1031,3.553,1032,2.91,1033,3.553,1034,3.553,1035,3.553]],["title/modules/ExamModule.html",[254,1.618,266,3.096]],["body/modules/ExamModule.html",[0,0.215,3,0.056,4,0.056,5,0.05,21,0.007,29,0.257,38,0.056,39,0.003,67,0.004,68,0.003,168,2.69,195,0.941,254,2.42,256,2.057,257,2.005,258,2.169,259,2.169,260,2.057,261,3.536,262,3.536,266,6.278,268,3.054,269,2.169,270,2.169,272,3.443,274,2.84,275,1.866,304,6.062,321,3.544,376,5.272,603,3.855,743,2.824,923,5.399,940,4.991,955,4.403,965,5.815,982,4.991,983,3.855,1003,5.399,1020,3.855,1036,3.855,1037,3.855,1038,3.855,1039,4.327,1040,5.495,1041,5.495,1042,5.751,1043,4.327,1044,5.399,1045,4.327,1046,4.403,1047,3.855,1048,4.403,1049,3.855,1050,3.544,1051,6.094,1052,4.327,1053,4.327,1054,3.855,1055,3.855,1056,3.855,1057,3.855,1058,3.544]],["title/classes/ExamPersonalResult.html",[0,0.234,1015,3.408]],["body/classes/ExamPersonalResult.html",[0,0.316,2,0.916,3,0.082,4,0.082,5,0.073,10,0.336,18,0.799,21,0.006,23,0.465,29,0.174,38,0.082,39,0.004,67,0.005,68,0.004,73,1.034,518,3.658,547,5.401,987,6.99,1015,5.679,1022,4.591,1059,6.824,1060,5.661,1061,6.99,1062,7.603,1063,6.355,1064,6.355,1065,6.355]],["title/classes/ExamRepository.html",[0,0.234,1046,3.408]],["body/classes/ExamRepository.html",[0,0.168,2,0.486,3,0.044,4,0.044,5,0.039,10,0.178,11,0.903,13,1.878,18,0.572,20,1.182,21,0.007,22,1.05,23,0.333,24,0.804,25,1.068,26,1.48,29,0.225,30,0.999,33,1.71,38,0.044,39,0.002,45,3.49,46,1.114,50,2.05,67,0.003,68,0.002,71,1.354,100,2.823,122,2.192,123,5.588,175,4.122,203,2.123,222,1.575,224,3.078,225,2.213,246,3.245,247,1.79,248,1.39,249,1.39,250,1.39,325,2.269,518,2.967,526,3.199,527,4.161,728,4.266,742,2.547,743,2.833,835,5.208,836,4.679,847,2.762,849,3.334,866,3.671,867,2.581,871,2.969,893,2.436,905,2.762,907,2.581,938,2.316,939,2.316,994,4.527,1022,2.436,1046,3.671,1061,4.161,1066,3.004,1067,6.114,1068,5.081,1069,6.114,1070,3.372,1071,5.208,1072,3.372,1073,5.081,1074,5.081,1075,5.574,1076,4.527,1077,6.114,1078,7.301,1079,6.114,1080,5.081,1081,5.007,1082,6.114,1083,6.114,1084,5.447,1085,6.063,1086,5.081,1087,5.081,1088,5.081,1089,5.081,1090,3.372,1091,3.372,1092,7.673,1093,3.372,1094,6.522,1095,3.004,1096,2.436,1097,3.372,1098,2.762,1099,5.081,1100,3.372,1101,3.372,1102,3.372,1103,3.372,1104,3.372,1105,3.372,1106,5.081,1107,5.081,1108,3.372,1109,3.372,1110,3.372,1111,3.372,1112,3.372,1113,5.081,1114,3.372,1115,3.372,1116,3.372,1117,5.081,1118,3.372,1119,3.372,1120,3.372]],["title/injectables/ExamService.html",[295,1.098,965,2.97]],["body/injectables/ExamService.html",[0,0.129,3,0.034,4,0.034,5,0.03,10,0.138,11,0.739,13,2.166,18,0.726,20,1.401,21,0.007,22,1.244,23,0.41,24,0.953,25,1.265,26,1.798,29,0.236,30,0.512,33,2.677,38,0.034,39,0.003,40,1.787,41,1.774,43,2.424,46,0.861,49,2.144,50,1.678,66,1.051,67,0.003,68,0.002,73,0.547,82,1.333,130,0.861,131,1.029,141,1.927,171,2.029,172,2.618,175,3.59,181,2.618,195,0.567,203,1.64,217,2.118,222,1.778,248,3.279,249,1.074,250,1.074,275,1.124,295,0.968,296,0.987,299,3.889,300,2.431,301,1.678,310,2.729,313,2.729,315,3.144,316,1.383,317,2.729,318,1.79,319,1.882,325,2.878,354,1.994,488,1.472,518,3.14,530,2.085,547,1.578,587,4.976,723,5.167,728,4.034,742,1.306,830,3.705,831,3.406,866,1.882,871,1.523,893,1.882,905,2.134,907,1.994,937,1.64,939,1.79,964,1.578,965,2.618,967,2.519,987,3.406,990,3.705,993,2.321,997,1.79,999,4.956,1005,3.183,1006,3.705,1013,3.705,1015,1.882,1018,5.745,1021,3.406,1022,1.882,1023,1.882,1024,2.321,1041,3.889,1046,4.281,1047,2.321,1050,2.134,1061,3.406,1062,3.705,1098,2.134,1121,2.321,1122,4.251,1123,4.159,1124,4.624,1125,2.606,1126,2.606,1127,2.606,1128,2.606,1129,2.606,1130,4.159,1131,2.606,1132,3.705,1133,2.606,1134,2.606,1135,2.606,1136,2.606,1137,2.606,1138,2.321,1139,2.606,1140,4.251,1141,2.606,1142,2.606,1143,2.606,1144,2.606,1145,2.606,1146,2.606,1147,2.606,1148,2.321,1149,2.606,1150,2.606,1151,2.134,1152,2.606,1153,4.159,1154,4.159,1155,2.606,1156,2.321,1157,2.606,1158,2.606,1159,2.606,1160,2.606,1161,2.606,1162,2.321,1163,2.134]],["title/classes/ExamTarget.html",[0,0.234,849,3.096]],["body/classes/ExamTarget.html",[0,0.241,2,0.699,3,0.063,4,0.063,5,0.056,10,0.256,18,0.846,21,0.007,23,0.514,29,0.205,30,0.954,38,0.063,39,0.003,40,1.82,41,1.11,67,0.004,68,0.003,71,1.758,72,4.013,73,0.868,79,3.636,80,3.727,81,3.727,82,2.032,85,2.366,92,2.307,95,3.923,97,2.305,98,4.013,99,2.366,100,3.355,101,3.056,102,3.308,103,2.305,104,3.056,105,2.305,106,3.056,107,2.305,108,4.765,113,2.912,114,2.654,119,2.193,407,3.726,411,3.504,735,4.752,742,2.431,743,2.248,849,4.328,853,3.183,854,3.183,855,3.183,1164,4.321,1165,4.85,1166,4.85]],["title/classes/ExamTarget1622326106015.html",[0,0.234,1167,3.864]],["body/classes/ExamTarget1622326106015.html",[0,0.176,2,0.511,3,0.046,4,0.046,5,0.041,8,1.958,9,2.656,10,0.449,11,0.937,12,3.224,13,1.914,14,2.276,15,2.224,16,2.224,17,3.505,18,0.59,20,1.02,21,0.006,22,1.281,23,0.426,24,0.694,25,0.922,26,1.518,27,2.224,29,0.097,30,0.697,33,1.194,38,0.046,39,0.002,40,1.456,43,2.877,62,2.562,66,2.128,67,0.003,68,0.002,73,0.694,86,2.717,95,2.574,113,1.566,122,3.589,129,0.686,130,2.081,131,1.4,136,3.913,137,2.435,138,4.327,139,4.327,140,2.435,141,2.92,142,2.435,143,2.435,149,3.624,150,4.569,151,3.624,153,3.344,154,3.196,156,4.227,157,3.196,159,3.083,164,4.174,171,3.074,293,4.916,294,4.922,407,2.003,426,4.321,546,4.393,548,5.041,554,2.714,579,4.7,728,2.072,743,3.234,1076,7.412,1081,5.715,1167,5.715,1168,5.715,1169,2.904,1170,3.546,1171,3.546,1172,3.546,1173,2.994,1174,3.158,1175,4.7,1176,5.276,1177,3.546,1178,3.159,1179,6.978,1180,5.276,1181,5.276,1182,5.276,1183,5.276,1184,3.546]],["title/classes/ExamTargetAdd1622378888497.html",[0,0.234,1185,3.864]],["body/classes/ExamTargetAdd1622378888497.html",[0,0.235,2,0.682,3,0.061,4,0.061,5,0.054,8,2.406,9,3.119,10,0.25,11,1.152,12,3.551,13,2.108,14,2.797,15,2.734,16,2.734,17,3.756,18,0.693,20,1.254,21,0.007,22,1.432,23,0.497,24,0.853,25,1.133,26,1.731,27,2.734,29,0.13,30,0.931,33,1.592,38,0.061,39,0.003,43,2.487,62,3.418,66,1.909,67,0.004,68,0.003,73,0.853,95,3.163,122,2.797,129,0.915,130,1.563,131,1.868,136,2.932,232,2.932,293,4.048,294,4.082,338,3.875,532,3.789,550,3.789,743,2.192,1075,3.875,1081,6.518,1173,3.082,1174,3.25,1178,4.215,1185,6.518,1186,6.518,1187,3.875,1188,4.731,1189,4.731,1190,4.731,1191,6.059,1192,4.731,1193,4.731]],["title/controllers/ExamTargetController.html",[166,1.945,1044,3.611]],["body/controllers/ExamTargetController.html",[0,0.252,3,0.065,4,0.065,5,0.058,10,0.268,11,1.207,13,1.875,18,0.636,20,0.98,21,0.007,22,0.87,23,0.37,24,0.667,25,1.187,26,1.478,29,0.246,38,0.065,39,0.003,42,2.627,46,2.244,67,0.004,68,0.003,82,1.528,119,2.291,129,0.98,166,2.089,168,2.237,170,2.961,175,4.959,194,3.069,195,1.102,197,4.665,198,2.961,199,2.348,200,2.612,201,3.48,203,3.19,204,3.069,205,3.325,206,3.48,215,3.069,216,2.689,217,1.555,222,1.75,518,1.959,735,2.863,742,2.54,743,3.551,924,6.276,939,3.48,940,4.15,941,4.15,1009,3.878,1041,4.458,1044,5.199,1050,4.15,1124,4.514,1156,4.514,1194,4.514,1195,6.793,1196,7.294,1197,5.067,1198,5.067,1199,5.067,1200,6.052,1201,5.067,1202,6.793,1203,5.067,1204,5.067,1205,5.067,1206,5.067,1207,5.067,1208,5.067]],["title/interfaces/ExamTargetManagerDto.html",[604,1.302,1209,3.864]],["body/interfaces/ExamTargetManagerDto.html",[3,0.088,4,0.088,5,0.078,10,0.359,21,0.006,23,0.371,24,1.078,29,0.186,38,0.088,39,0.004,67,0.005,68,0.004,73,1.078,119,3.077,604,1.878,605,2.805,728,5.334,735,5.157,742,3.41,743,3.798,945,5.572,1209,6.712,1210,6.061]],["title/classes/ExamTargetNode.html",[0,0.234,1211,3.096]],["body/classes/ExamTargetNode.html",[0,0.264,2,0.767,3,0.069,4,0.069,5,0.061,10,0.281,11,1.247,18,0.782,20,1.029,21,0.007,22,0.913,23,0.509,24,0.7,25,0.929,29,0.146,33,2.361,38,0.069,39,0.004,42,2.057,67,0.005,68,0.004,73,0.923,119,2.405,129,1.518,222,2.15,714,2.742,735,4.435,742,2.666,743,4.129,834,5.069,1059,6.64,1211,5.693,1212,4.356,1213,6.008,1214,7.015,1215,7.85,1216,5.319,1217,5.319,1218,7.015,1219,5.319,1220,4.755,1221,5.319,1222,5.319,1223,5.319,1224,5.319,1225,5.319,1226,4.356,1227,5.319,1228,7.85,1229,5.319]],["title/injectables/ExamTargetNodeFactory.html",[295,1.098,1040,3.096]],["body/injectables/ExamTargetNodeFactory.html",[0,0.287,3,0.075,4,0.075,5,0.067,10,0.305,11,1.316,18,0.541,20,1.118,21,0.007,22,0.993,23,0.404,24,0.761,25,1.01,29,0.224,33,1.946,38,0.075,39,0.004,50,2.333,67,0.005,68,0.004,119,2.615,195,1.258,222,1.489,295,1.723,296,2.19,604,1.596,735,4.185,742,2.898,743,3.993,1023,4.178,1040,4.861,1200,5.151,1211,5.655,1213,4.425,1226,6.066,1230,6.066,1231,4.736,1232,7.407,1233,6.599,1234,6.818,1235,5.782,1236,4.736,1237,5.151,1238,5.151,1239,5.151,1240,5.151,1241,5.151]],["title/interfaces/ExamTargetNodeSchema.html",[604,1.302,1234,3.611]],["body/interfaces/ExamTargetNodeSchema.html",[0,0.289,3,0.075,4,0.075,5,0.067,10,0.307,21,0.007,23,0.498,24,0.978,29,0.224,33,1.958,38,0.075,39,0.004,50,2.347,67,0.005,68,0.004,73,0.978,119,2.63,195,1.265,222,1.498,295,1.73,604,1.605,605,2.399,735,4.879,742,2.916,743,3.798,1023,4.203,1040,3.818,1211,5.378,1213,6.61,1226,6.09,1230,4.764,1231,4.764,1233,5.182,1234,6.986,1236,4.764,1237,5.182,1238,5.182,1239,5.182,1240,5.182,1241,5.182]],["title/classes/ExamTargetRepository.html",[0,0.234,1048,3.408]],["body/classes/ExamTargetRepository.html",[0,0.337,2,0.977,3,0.088,4,0.088,5,0.078,21,0.006,29,0.241,30,1.608,38,0.088,39,0.004,67,0.005,68,0.004,71,2.18,246,4.66,247,3.598,248,2.796,249,2.796,250,2.796,849,4.449,867,5.189,938,4.656,956,5.553,1048,5.908,1242,6.04,1243,6.78]],["title/injectables/ExamTargetService.html",[295,1.098,1041,3.096]],["body/injectables/ExamTargetService.html",[0,0.204,3,0.053,4,0.053,5,0.047,10,0.217,11,1.045,13,2.016,18,0.771,20,1.137,21,0.007,22,1.01,23,0.374,24,0.985,25,1.308,26,1.792,29,0.232,33,1.979,38,0.053,39,0.003,43,1.838,50,2.372,67,0.004,68,0.003,73,0.774,119,1.86,129,1.327,195,0.895,217,1.805,222,1.928,275,1.775,295,1.368,296,1.558,301,2.372,316,2.184,320,6.49,325,3.218,334,4.5,728,2.404,735,3.877,742,2.062,743,3.469,849,2.7,867,3.149,938,2.826,964,2.492,967,3.562,982,3.37,997,2.826,1041,3.859,1042,5.142,1048,5.409,1049,3.665,1054,3.665,1055,3.665,1084,5.238,1148,3.665,1196,6.67,1244,3.665,1245,6.862,1246,7.486,1247,5.88,1248,7.486,1249,6.862,1250,5.88,1251,4.114,1252,4.114,1253,5.88,1254,4.114,1255,4.114,1256,3.37,1257,4.114,1258,4.114,1259,5.88,1260,5.88,1261,4.5,1262,4.114,1263,4.114,1264,5.88,1265,4.114,1266,4.114,1267,4.114,1268,4.114,1269,4.114,1270,4.114]],["title/injectables/ExamTargetTree.html",[295,1.098,1042,3.24]],["body/injectables/ExamTargetTree.html",[0,0.245,3,0.064,4,0.064,5,0.057,10,0.261,11,1.186,18,0.708,20,1.291,21,0.007,22,1.146,23,0.486,24,0.878,25,0.862,29,0.222,33,1.662,38,0.064,39,0.003,49,2.545,50,1.992,67,0.004,68,0.003,73,0.878,119,2.232,129,1.463,195,1.074,217,2.321,222,1.272,295,1.553,296,1.87,301,1.992,315,2.991,325,2.807,735,2.789,742,2.475,743,4.259,1023,3.567,1040,5.316,1042,4.584,1056,4.398,1057,4.398,1211,5.553,1213,5.109,1220,4.581,1236,4.044,1271,7.217,1272,4.398,1273,7.562,1274,6.675,1275,6.675,1276,6.675,1277,4.937,1278,6.675,1279,4.937,1280,4.937,1281,4.937,1282,4.937,1283,4.937,1284,4.937,1285,4.937,1286,4.937,1287,4.937]],["title/classes/ExamTitle1621036457247.html",[0,0.234,1288,3.864]],["body/classes/ExamTitle1621036457247.html",[0,0.264,2,0.764,3,0.068,4,0.068,5,0.061,8,2.599,9,3.305,10,0.28,11,1.244,12,3.671,13,2.179,14,3.02,15,2.952,16,2.952,17,3.845,18,0.734,20,1.354,21,0.006,22,1.488,23,0.427,24,0.921,25,1.223,26,1.814,27,2.952,29,0.145,30,1.043,38,0.068,39,0.004,43,2.188,67,0.005,68,0.004,73,0.921,122,3.02,129,1.026,130,1.752,131,2.095,136,3.166,152,4.242,518,2.708,519,5.249,534,3.416,550,4.092,1288,6.829,1289,7.428,1290,4.726,1291,5.304,1292,5.304,1293,5.304]],["title/interfaces/ExamUser.html",[175,2.858,604,1.302]],["body/interfaces/ExamUser.html",[3,0.086,4,0.086,5,0.077,10,0.353,21,0.006,23,0.515,29,0.183,38,0.086,39,0.004,40,2.504,41,1.997,67,0.005,68,0.004,73,1.067,119,3.023,175,4.912,202,5.117,604,1.845,605,2.757,607,4.83,805,5.712,1294,6.686]],["title/controllers/ExportationController.html",[166,1.945,1295,3.611]],["body/controllers/ExportationController.html",[0,0.286,3,0.074,4,0.074,5,0.066,10,0.305,11,1.314,13,1.997,18,0.54,20,1.115,21,0.007,22,0.99,23,0.314,24,0.758,25,1.007,29,0.236,38,0.095,39,0.004,41,1.867,67,0.005,68,0.004,82,1.297,166,2.377,168,2.545,170,3.369,180,3.606,188,3.369,190,3.959,193,5.077,194,3.492,195,1.254,196,5.077,198,3.369,199,2.672,200,2.972,201,3.959,215,3.492,217,1.769,219,4.722,222,1.485,301,2.326,325,2.14,1295,5.658,1296,5.136,1297,7.27,1298,5.136,1299,7.392,1300,5.765,1301,5.077,1302,5.136,1303,5.765,1304,5.765,1305,4.412,1306,5.765]],["title/modules/ExportationModule.html",[254,1.618,378,3.408]],["body/modules/ExportationModule.html",[0,0.295,3,0.077,4,0.077,5,0.068,21,0.007,29,0.238,38,0.077,39,0.004,67,0.005,68,0.004,168,3.328,195,1.293,254,2.84,256,2.825,257,2.754,258,2.979,259,2.979,260,2.825,261,4.149,262,4.149,268,3.778,269,2.979,270,2.979,378,6.737,1295,6.335,1301,6.667,1302,5.294,1307,5.294,1308,5.294,1309,5.294,1310,5.943,1311,5.943,1312,5.446,1313,5.294]],["title/classes/ExportationRepository.html",[0,0.234,1312,3.408]],["body/classes/ExportationRepository.html",[0,0.239,2,0.694,3,0.062,4,0.062,5,0.055,10,0.254,11,1.166,13,1.827,17,1.985,18,0.451,20,0.931,21,0.007,22,0.827,23,0.262,24,0.633,25,0.841,26,1.427,29,0.18,30,0.947,33,2.209,38,0.062,39,0.003,41,1.708,43,2.05,45,3.306,46,1.59,67,0.004,68,0.003,69,2.481,76,1.901,78,3.306,146,4.288,180,3.201,222,1.69,293,2.634,518,1.861,541,3.306,543,3.306,546,3.03,551,3.478,769,3.943,771,4.288,774,4.288,815,3.478,818,4.288,819,3.943,820,3.943,821,4.288,822,4.288,823,4.288,1075,6.87,1312,4.74,1314,4.288,1315,6.561,1316,6.561,1317,4.814,1318,4.288,1319,4.288,1320,6.561,1321,4.814,1322,4.814,1323,4.814,1324,6.65,1325,4.814,1326,6.561,1327,4.814,1328,4.814,1329,4.814,1330,4.814,1331,4.814,1332,4.814,1333,4.814,1334,4.814,1335,4.814,1336,4.814,1337,4.814,1338,4.814,1339,3.684,1340,4.814,1341,4.814,1342,7.464,1343,4.814,1344,4.814,1345,4.814,1346,4.814,1347,4.814,1348,4.814,1349,4.814,1350,4.814,1351,4.814,1352,4.814,1353,4.814,1354,4.814,1355,4.814,1356,4.814,1357,4.814,1358,4.814,1359,4.814,1360,6.561,1361,4.814]],["title/injectables/ExportationService.html",[295,1.098,1301,3.24]],["body/injectables/ExportationService.html",[0,0.211,3,0.055,4,0.055,5,0.049,10,0.224,11,1.068,13,2.036,18,0.711,20,1.468,21,0.007,22,1.303,23,0.414,24,0.998,25,1.219,26,1.307,29,0.228,33,2.8,38,0.078,39,0.003,41,1.596,43,1.878,49,2.186,50,2.815,67,0.004,68,0.003,92,1.483,100,1.64,119,1.918,129,1.162,180,2.069,195,0.923,217,1.844,222,1.797,295,1.398,296,1.606,301,2.424,315,2.569,325,3.244,815,4.341,964,2.569,967,3.64,1297,5.353,1298,5.353,1301,4.127,1312,5.484,1313,3.778,1318,3.778,1319,3.778,1324,5.353,1362,3.778,1363,6.008,1364,6.008,1365,6.978,1366,5.213,1367,4.241,1368,6.008,1369,6.216,1370,4.241,1371,4.241,1372,6.008,1373,7.137,1374,4.241,1375,4.241,1376,3.778,1377,3.778,1378,4.241,1379,3.474,1380,4.241,1381,4.241,1382,4.241,1383,4.241,1384,4.241,1385,4.241,1386,4.241,1387,4.241,1388,4.241,1389,4.241,1390,4.241,1391,4.241,1392,4.241,1393,4.241,1394,4.241,1395,4.241,1396,4.241,1397,4.341,1398,4.241,1399,4.241,1400,3.246,1401,4.241,1402,3.246]],["title/classes/FFEntity.html",[0,0.234,72,2.133]],["body/classes/FFEntity.html",[0,0.293,2,0.851,3,0.076,4,0.076,5,0.068,10,0.312,18,0.813,21,0.006,23,0.474,29,0.206,30,1.162,38,0.076,39,0.004,40,2.278,41,1.718,67,0.005,68,0.004,71,2.001,72,3.395,73,0.988,79,3.395,80,3.479,81,3.479,82,1.954,97,3.923,98,3.732,100,3.191,101,2.737,102,4.046,103,2.807,104,2.737,105,2.807,106,2.737,107,2.807,1403,5.262,1404,5.906,1405,5.906]],["title/interfaces/FileSendDto.html",[604,1.302,1406,3.408]],["body/interfaces/FileSendDto.html",[3,0.08,4,0.08,5,0.072,10,0.329,21,0.006,23,0.497,38,0.08,39,0.004,41,1.935,67,0.005,68,0.004,73,1.022,129,1.857,604,1.72,605,2.569,1406,5.61,1407,5.551,1408,5.551,1409,8.394,1410,8.855,1411,8.855,1412,8.855,1413,8.855]],["title/interfaces/FindExamByUserDto.html",[604,1.302,1071,3.611]],["body/interfaces/FindExamByUserDto.html",[3,0.084,4,0.084,5,0.075,10,0.345,21,0.006,23,0.436,29,0.219,38,0.084,39,0.004,67,0.005,68,0.004,73,1.051,119,2.951,518,3.57,604,1.801,605,2.691,728,5.259,735,5.085,742,3.271,743,3.025,798,5.346,1022,4.716,1071,6.116,1098,7.371,1414,5.815]],["title/classes/FindPersonalDto.html",[0,0.234,1415,3.611]],["body/classes/FindPersonalDto.html",[0,0.317,2,0.919,3,0.082,4,0.082,5,0.073,10,0.337,18,0.737,21,0.006,23,0.429,29,0.216,38,0.082,39,0.004,41,1.802,46,3.086,67,0.005,68,0.004,73,1.036,110,3.048,180,4.17,901,5.222,1415,6.028,1416,7.614,1417,5.68,1418,6.376,1419,6.541,1420,6.376,1421,5.68,1422,5.222]],["title/injectables/FirebaseAdmin.html",[295,1.098,1423,2.858]],["body/injectables/FirebaseAdmin.html",[0,0.163,3,0.042,4,0.042,5,0.038,8,1.217,10,0.173,11,0.884,18,0.857,20,0.962,21,0.007,22,1.239,23,0.328,24,0.655,25,1.545,26,1.082,29,0.184,38,0.042,39,0.002,49,2.565,50,2.007,60,3.274,64,1.853,66,2.707,67,0.003,68,0.002,73,0.655,129,1.298,195,0.714,217,1.845,222,2.278,295,1.158,296,1.242,301,1.323,325,2.231,404,1.917,605,1.353,834,3.595,1423,3.014,1424,7.046,1425,8.202,1426,2.922,1427,5.356,1428,6.71,1429,4.433,1430,5.496,1431,6.71,1432,6.71,1433,6.71,1434,6.71,1435,6.71,1436,6.71,1437,6.71,1438,5.136,1439,5.521,1440,3.28,1441,4.224,1442,4.976,1443,3.28,1444,4.976,1445,3.28,1446,4.433,1447,4.976,1448,3.28,1449,3.28,1450,2.687,1451,4.976,1452,3.28,1453,3.28,1454,4.433,1455,3.28,1456,4.976,1457,3.28,1458,4.976,1459,3.28,1460,4.976,1461,3.28,1462,4.433,1463,3.28,1464,4.976,1465,3.28,1466,4.976,1467,3.28,1468,4.976,1469,3.28,1470,4.433,1471,6.012,1472,3.28,1473,3.28,1474,3.28,1475,3.28,1476,3.396,1477,2.511,1478,2.922,1479,3.28,1480,3.28,1481,3.28,1482,2.687,1483,3.28,1484,2.511,1485,3.28,1486,3.28,1487,3.28,1488,4.976,1489,4.976,1490,3.28,1491,3.28,1492,3.28,1493,3.28,1494,3.28,1495,3.28,1496,3.28,1497,3.28,1498,3.28,1499,3.28,1500,3.28,1501,3.28,1502,3.28,1503,3.28]],["title/modules/FirebaseAdminModule.html",[254,1.618,1504,3.408]],["body/modules/FirebaseAdminModule.html",[0,0.224,3,0.058,4,0.058,5,0.052,11,0.801,18,0.587,20,1.213,21,0.007,22,1.077,23,0.342,24,0.825,25,1.096,29,0.214,38,0.058,39,0.003,67,0.004,68,0.003,195,0.981,217,1.925,222,1.616,254,2.812,256,2.143,257,2.09,258,2.26,259,2.26,260,2.143,261,4.253,262,4.108,268,3.144,269,2.26,270,2.26,272,2.548,325,2.328,402,3.097,404,2.635,605,1.859,1122,6.949,1423,5.716,1424,5.52,1439,5.52,1441,4.909,1476,2.548,1477,5.52,1478,4.017,1504,6.513,1505,4.017,1506,4.017,1507,4.017,1508,5.52,1509,4.509,1510,4.017,1511,5.588,1512,4.509,1513,7.301,1514,4.017,1515,5.588,1516,5.355,1517,4.509,1518,5.588,1519,4.509,1520,4.509,1521,5.588,1522,4.509,1523,5.588,1524,4.509,1525,4.509,1526,4.509,1527,4.017]],["title/interfaces/FirebaseAsyncModuleOptions.html",[604,1.302,1516,3.24]],["body/interfaces/FirebaseAsyncModuleOptions.html",[3,0.079,4,0.079,5,0.071,10,0.325,13,1.506,21,0.006,23,0.42,24,1.013,26,1.338,29,0.211,38,0.099,39,0.004,64,3.475,67,0.005,68,0.004,71,2.053,73,1.013,129,1.49,195,1.338,254,2.111,402,6.054,404,5.151,604,2.126,605,2.537,1441,4.849,1476,4.352,1482,5.038,1484,4.708,1516,5.291,1528,4.708,1529,5.038,1530,6.863,1531,6.309,1532,5.48,1533,5.038,1534,5.48,1535,5.48]],["title/interfaces/FirebaseAuthDecodedToken.html",[604,1.302,1536,3.611]],["body/interfaces/FirebaseAuthDecodedToken.html",[3,0.084,4,0.084,5,0.075,10,0.342,21,0.006,23,0.469,24,1.181,38,0.084,39,0.004,60,3.163,67,0.005,68,0.004,73,1.047,129,1.814,506,6.872,604,1.789,605,2.673,714,4.438,1528,4.962,1536,6.09,1537,5.31,1538,5.776,1539,7.999,1540,7.999]],["title/injectables/FirebaseAuthService.html",[295,1.098,1541,3.408]],["body/injectables/FirebaseAuthService.html",[0,0.199,3,0.052,4,0.052,5,0.046,10,0.211,11,1.024,13,1.654,18,0.788,20,1.578,21,0.007,22,1.401,23,0.459,24,1.074,25,1.369,26,1.936,29,0.203,33,1.347,38,0.052,39,0.003,43,1.251,60,1.953,64,3.257,67,0.004,68,0.003,73,0.758,122,1.727,129,1.761,195,0.871,204,3.493,217,2.074,222,2.102,295,1.341,296,1.516,301,1.615,325,2.508,344,4.413,506,5.997,1423,4.746,1446,5.136,1476,3.818,1536,3.064,1537,4.722,1539,3.566,1540,3.566,1541,4.166,1542,6.219,1543,3.566,1544,6.757,1545,4.882,1546,5.766,1547,6.02,1548,5.766,1549,4.413,1550,5.766,1551,4.003,1552,6.757,1553,4.003,1554,5.766,1555,4.003,1556,5.766,1557,4.003,1558,4.003,1559,6.586,1560,6.757,1561,4.003,1562,5.766,1563,4.003,1564,3.566,1565,3.566,1566,4.003,1567,4.003,1568,4.003,1569,4.003,1570,4.003,1571,4.003,1572,4.003,1573,4.003,1574,3.064,1575,4.003,1576,4.003,1577,4.003,1578,4.003,1579,4.003]],["title/injectables/FirebaseCloudMessagingService.html",[295,1.098,1580,3.408]],["body/injectables/FirebaseCloudMessagingService.html",[0,0.264,3,0.068,4,0.068,5,0.061,10,0.28,11,1.244,18,0.734,20,1.354,21,0.006,22,1.202,23,0.427,24,0.921,25,0.927,26,1.523,29,0.215,38,0.068,39,0.004,64,3.956,67,0.005,68,0.004,73,0.921,129,1.516,195,1.154,217,2.406,222,1.366,295,1.629,296,2.009,301,2.14,325,2.909,1423,5.251,1439,6.381,1450,4.344,1462,6.239,1476,4.429,1542,6.024,1549,5.36,1564,6.239,1580,5.059,1581,6.829,1582,4.726,1583,7.839,1584,7.839,1585,7.003,1586,5.304,1587,6.381,1588,7.839,1589,7.839,1590,5.304,1591,5.304,1592,5.304,1593,5.304]],["title/injectables/FirebaseFirestoreService.html",[295,1.098,1594,3.611]],["body/injectables/FirebaseFirestoreService.html",[0,0.274,3,0.071,4,0.071,5,0.064,10,0.291,11,1.277,18,0.748,20,1.39,21,0.007,22,1.234,23,0.436,24,0.945,25,0.964,29,0.232,38,0.071,39,0.004,64,4.06,67,0.005,68,0.004,73,0.945,129,1.546,195,1.2,217,2.452,222,1.421,295,1.672,296,2.09,301,2.226,325,2.966,1423,5.318,1430,6.934,1454,6.402,1476,4.515,1542,6.116,1549,5.5,1594,5.5,1595,4.915,1596,7.186,1597,7.186,1598,7.186,1599,5.517,1600,5.517,1601,7.119,1602,5.517,1603,5.517,1604,5.517,1605,5.517,1606,5.517]],["title/modules/FirebaseModule.html",[254,1.618,1607,3.408]],["body/modules/FirebaseModule.html",[0,0.212,3,0.055,4,0.055,5,0.049,11,0.759,13,1.045,18,0.565,20,1.168,21,0.007,22,1.037,23,0.329,24,0.794,25,1.055,29,0.228,38,0.055,39,0.003,67,0.004,68,0.003,92,2.111,195,0.929,217,1.853,222,1.555,254,2.86,256,2.029,257,1.979,258,2.14,259,2.14,260,2.029,261,4.179,262,4.179,268,3.026,269,2.14,270,2.14,272,3.411,325,2.24,433,3.268,669,5.378,1122,6.829,1366,4.81,1439,4.62,1441,4.792,1476,2.412,1504,3.085,1508,3.268,1510,3.804,1511,5.378,1513,7.155,1514,3.804,1515,5.378,1516,5.228,1518,6.239,1523,5.378,1527,5.378,1541,6.76,1565,3.804,1580,6.76,1581,3.497,1594,5.36,1607,6.658,1608,3.804,1609,3.804,1610,3.804,1611,4.269,1612,4.269,1613,4.269,1614,5.378,1615,4.269,1616,4.269,1617,4.269,1618,4.269,1619,4.269,1620,4.269]],["title/interfaces/FirebaseModuleOptions.html",[604,1.302,1441,2.97]],["body/interfaces/FirebaseModuleOptions.html",[3,0.077,4,0.077,5,0.069,10,0.316,13,1.464,21,0.006,23,0.453,24,1.148,26,1.301,29,0.207,38,0.098,39,0.004,64,3.378,67,0.005,68,0.004,71,1.594,73,0.995,129,1.778,195,1.301,254,2.052,402,4.107,404,3.494,604,2.088,605,2.466,1441,5.226,1476,4.275,1482,7.146,1484,6.677,1516,4.107,1528,4.577,1529,4.898,1530,5.327,1532,5.327,1533,7.146,1534,7.395,1535,5.327]],["title/injectables/FirebaseStorageService.html",[295,1.098,1366,3.24]],["body/injectables/FirebaseStorageService.html",[0,0.249,3,0.065,4,0.065,5,0.078,10,0.265,11,1.199,12,2.781,13,1.866,18,0.714,20,1.305,21,0.007,22,1.158,23,0.416,24,0.887,25,0.876,26,1.467,29,0.223,33,1.688,38,0.065,39,0.003,42,1.939,43,1.567,64,3.811,67,0.004,68,0.003,73,0.887,92,1.754,129,1.474,195,1.091,217,2.339,222,1.292,295,1.569,296,1.899,301,2.023,325,2.829,696,4.107,1220,4.086,1366,4.633,1397,3.623,1400,5.162,1402,5.162,1423,5.153,1438,6.239,1470,6.009,1476,4.306,1542,5.89,1549,5.162,1621,4.467,1622,5.834,1623,6.745,1624,5.014,1625,6.239,1626,5.014,1627,5.014,1628,5.014,1629,5.014,1630,5.014,1631,4.467,1632,5.014,1633,5.014,1634,5.014,1635,4.467,1636,5.014,1637,5.014,1638,5.014]],["title/interfaces/FirebaseStorageUploadDto.html",[604,1.302,1625,3.611]],["body/interfaces/FirebaseStorageUploadDto.html",[3,0.082,4,0.082,5,0.073,10,0.336,21,0.006,23,0.486,24,1.034,38,0.082,39,0.004,67,0.005,68,0.004,73,1.034,129,1.805,604,1.754,605,2.62,714,4.399,1397,6.442,1400,6.824,1402,6.824,1409,7.603,1438,4.864,1625,6.016,1631,7.944,1639,5.661,1640,5.661]],["title/injectables/FirebaseUploader.html",[295,1.098,1641,3.611]],["body/injectables/FirebaseUploader.html",[0,0.267,3,0.069,4,0.069,5,0.062,8,1.996,10,0.284,11,1.256,13,1.932,18,0.662,20,1.367,21,0.007,22,1.214,23,0.385,24,0.93,25,0.94,26,1.537,29,0.239,38,0.069,39,0.004,67,0.005,68,0.004,92,1.881,129,1.367,130,1.777,131,2.124,195,1.17,216,2.854,217,1.651,222,1.385,295,1.644,296,2.037,301,2.17,1220,4.781,1366,5.757,1379,4.405,1397,3.886,1400,4.116,1402,4.116,1406,6.057,1622,5.409,1641,5.409,1642,7.032,1643,4.792,1644,5.378,1645,5.378,1646,7.067,1647,6.296,1648,5.378,1649,4.792,1650,5.378,1651,5.378,1652,4.792,1653,4.792,1654,4.638,1655,4.792,1656,5.378,1657,5.378,1658,5.378,1659,5.378]],["title/classes/Grade.html",[0,0.234,232,2.133]],["body/classes/Grade.html",[0,0.199,2,0.578,3,0.052,4,0.052,5,0.046,10,0.212,18,0.844,21,0.007,22,0.992,23,0.501,29,0.231,30,0.789,38,0.052,39,0.003,40,1.593,41,1.794,42,1.551,67,0.004,68,0.003,69,2.068,71,1.539,72,3.346,73,0.76,79,2.611,80,2.676,81,2.676,82,2.028,83,3.498,85,2.817,86,3.192,97,1.907,98,3.346,99,1.957,100,2.616,101,1.859,102,2.987,103,1.907,104,1.859,105,1.907,106,1.859,107,1.907,113,2.987,114,2.195,115,4.259,117,2.633,144,4.856,230,3.285,232,2.611,252,2.755,337,5.541,530,4.218,536,4.918,568,5.144,571,4.419,676,2.266,679,3.635,680,3.574,832,5.541,864,6.027,865,5.178,1173,3.517,1174,3.709,1660,3.574,1661,6.765,1662,6.765,1663,6.765,1664,4.011,1665,4.011,1666,4.011,1667,5.774,1668,4.011,1669,4.011,1670,4.011,1671,4.011,1672,4.011,1673,4.011,1674,4.011,1675,4.011,1676,4.011]],["title/classes/GradeIndex1624560625346.html",[0,0.234,1677,3.864]],["body/classes/GradeIndex1624560625346.html",[0,0.352,2,0.777,3,0.07,4,0.07,5,0.062,8,2.628,9,3.332,10,0.418,11,1.258,12,3.688,13,2.189,14,3.054,15,2.985,16,2.985,17,3.857,18,0.74,20,1.369,21,0.006,22,1.497,23,0.431,24,0.931,25,1.237,26,1.826,27,2.985,29,0.148,30,1.061,38,0.07,39,0.004,43,2.213,67,0.005,68,0.004,73,0.931,129,1.043,130,1.782,131,2.13,135,3.704,165,3.704,546,4.457,548,3.897,1677,6.873,1678,7.476,1679,4.805,1680,5.393,1681,5.393,1682,5.393,1683,7.08]],["title/classes/GradeRepository.html",[0,0.234,591,3.408]],["body/classes/GradeRepository.html",[0,0.258,2,0.748,3,0.067,4,0.067,5,0.06,10,0.274,11,1.226,18,0.486,20,1.004,21,0.007,22,0.891,23,0.283,24,0.683,25,0.907,26,1.502,29,0.247,30,1.358,33,1.747,38,0.067,39,0.003,46,2.843,67,0.005,68,0.003,71,1.84,222,1.337,224,4.181,225,3.406,232,2.347,246,4.116,247,2.754,248,2.14,249,2.14,250,2.14,530,4.526,536,3.033,591,4.987,832,5.653,1094,5.653,1173,3.281,1174,3.459,1419,6.326,1422,4.251,1684,4.624,1685,6.149,1686,6.149,1687,5.19,1688,4.624,1689,3.972,1690,4.251,1691,4.251,1692,4.624,1693,5.19,1694,5.19,1695,6.149,1696,5.19,1697,5.19,1698,5.19,1699,5.19,1700,4.251,1701,5.19,1702,5.19]],["title/injectables/GradeService.html",[295,1.098,586,3.24]],["body/injectables/GradeService.html",[0,0.266,3,0.069,4,0.069,5,0.062,10,0.283,11,1.251,18,0.737,20,1.362,21,0.007,22,1.209,23,0.429,24,0.926,25,1.23,26,1.82,29,0.244,38,0.069,39,0.004,46,1.767,67,0.005,68,0.004,195,1.164,217,1.641,222,1.814,232,2.418,275,2.307,295,1.638,296,2.026,299,5.489,301,2.841,316,2.839,325,1.985,530,4.627,586,4.836,591,6.447,592,4.765,1419,6.402,1422,4.381,1685,6.273,1686,6.273,1688,4.765,1689,4.094,1692,4.765,1703,4.765,1704,5.348,1705,5.348,1706,5.348,1707,5.348,1708,5.348,1709,5.348,1710,5.348]],["title/classes/HttpExceptionFilter.html",[0,0.234,666,3.096]],["body/classes/HttpExceptionFilter.html",[0,0.199,2,0.577,3,0.052,4,0.052,5,0.046,8,2.14,10,0.211,11,1.024,18,0.633,20,1.115,21,0.007,22,1.16,23,0.314,24,0.758,25,0.699,29,0.203,33,2.898,38,0.052,39,0.003,41,1.319,50,2.726,67,0.004,68,0.003,73,0.758,92,1.4,129,1.515,130,1.322,131,1.581,189,2.339,195,0.871,216,2.125,217,2.269,301,1.615,325,2.508,384,5.356,385,2.425,526,4.654,533,2.52,604,1.591,666,3.784,826,5.078,858,2.892,1220,3.493,1339,3.064,1574,5.172,1587,5.172,1711,5.658,1712,3.064,1713,5.534,1714,4.003,1715,5.766,1716,4.722,1717,4.722,1718,6.055,1719,5.172,1720,6.055,1721,4.003,1722,4.003,1723,4.413,1724,4.722,1725,2.892,1726,4.722,1727,3.064,1728,4.166,1729,5.534,1730,4.722,1731,3.279,1732,4.166,1733,3.064,1734,3.279,1735,3.064,1736,3.279,1737,3.279,1738,3.279,1739,3.279,1740,3.279,1741,3.279,1742,3.279,1743,3.279,1744,5.534,1745,3.279,1746,3.064,1747,3.279,1748,3.279,1749,4.722,1750,3.279,1751,3.279,1752,3.279,1753,3.279,1754,3.279,1755,4.722,1756,3.279,1757,3.279,1758,3.279,1759,3.279,1760,3.279,1761,3.279,1762,3.279,1763,3.279,1764,3.279,1765,3.279,1766,3.279,1767,3.279,1768,3.279,1769,3.279,1770,3.279]],["title/interfaces/IClassValidatorException.html",[604,1.302,1732,3.408]],["body/interfaces/IClassValidatorException.html",[0,0.213,3,0.055,4,0.055,5,0.049,8,1.588,10,0.226,21,0.007,22,0.735,23,0.382,29,0.209,33,2.949,38,0.055,39,0.003,41,1.743,50,2.439,67,0.004,68,0.003,73,0.795,92,1.497,129,1.723,189,2.501,195,0.931,216,2.271,217,1.856,325,1.588,384,4.601,385,2.592,526,4.797,533,2.694,604,1.669,605,1.764,666,2.808,826,4.153,1220,3.663,1339,3.275,1574,3.275,1587,6.386,1711,3.275,1712,3.275,1713,4.952,1716,3.504,1717,3.504,1718,4.952,1719,3.275,1720,4.952,1723,4.627,1724,4.952,1725,3.091,1726,4.952,1727,3.275,1728,4.368,1729,6.834,1730,4.952,1731,3.504,1732,5.066,1733,5.832,1734,3.504,1735,3.275,1736,3.504,1737,3.504,1738,3.504,1739,3.504,1740,3.504,1741,3.504,1742,3.504,1743,3.504,1744,5.743,1745,3.504,1746,3.275,1747,3.504,1748,3.504,1749,4.952,1750,3.504,1751,3.504,1752,3.504,1753,3.504,1754,3.504,1755,4.952,1756,3.504,1757,3.504,1758,3.504,1759,3.504,1760,3.504,1761,3.504,1762,3.504,1763,3.504,1764,3.504,1765,3.504,1766,3.504,1767,3.504,1768,3.504,1769,3.504,1770,3.504]],["title/interfaces/IEntity.html",[604,1.302,1771,3.611]],["body/interfaces/IEntity.html",[0,0.142,3,0.037,4,0.037,5,0.033,8,1.062,9,1.888,10,0.151,12,1.847,13,1.096,16,1.206,17,2.275,21,0.007,22,0.948,23,0.244,26,0.974,27,1.206,29,0.171,30,0.563,31,2.19,33,2.924,34,2.617,36,3.596,38,0.037,39,0.002,40,2.484,41,1.262,43,2.926,45,5.615,46,2.374,55,4.288,56,2.19,57,3.117,58,2.343,59,6.151,60,2.185,61,2.45,62,5.426,63,1.801,67,0.003,68,0.002,73,0.589,92,1.001,100,2.134,125,2.19,147,2.19,225,2.939,232,3.249,293,4.888,421,2.19,486,2.343,521,2.067,523,2.19,529,3.987,530,3.602,532,4.2,533,4.524,534,2.185,536,4.2,538,2.19,540,4.223,544,3.236,571,3.427,604,0.79,605,1.18,1173,2.128,1700,5.113,1771,6.48,1772,2.19,1773,2.19,1774,2.549,1775,2.549,1776,2.549,1777,2.343,1778,2.343,1779,2.549,1780,6.257,1781,2.343,1782,2.343,1783,2.343,1784,2.19,1785,2.549,1786,2.549,1787,2.549,1788,2.549,1789,2.549,1790,2.19,1791,2.549,1792,3.99,1793,5.561,1794,6.402,1795,2.549,1796,3.99,1797,6.691]],["title/interfaces/IException.html",[604,1.302,1728,3.408]],["body/interfaces/IException.html",[0,0.2,3,0.052,4,0.052,5,0.046,8,1.495,10,0.213,21,0.007,22,1.273,23,0.459,24,1.076,29,0.203,33,2.902,38,0.052,39,0.003,41,1.696,50,2.336,67,0.004,68,0.003,73,0.762,92,1.409,129,1.745,189,4.333,195,0.876,216,2.138,217,1.777,325,1.495,384,4.45,385,2.44,526,4.668,533,2.536,604,1.598,605,1.661,666,2.644,826,3.978,1220,4.758,1339,3.083,1574,3.083,1587,6.259,1711,3.083,1712,3.083,1713,4.743,1716,3.299,1717,3.299,1718,4.743,1719,3.083,1720,4.743,1723,4.433,1724,4.743,1725,2.91,1726,4.743,1727,3.083,1728,4.899,1729,6.698,1730,6.433,1731,6.073,1732,4.184,1733,3.083,1734,3.299,1735,3.083,1736,3.299,1737,3.299,1738,3.299,1739,3.299,1740,3.299,1741,3.299,1742,3.299,1743,3.299,1744,5.554,1745,3.299,1746,3.083,1747,3.299,1748,3.299,1749,4.743,1750,3.299,1751,3.299,1752,3.299,1753,3.299,1754,3.299,1755,4.743,1756,3.299,1757,3.299,1758,3.299,1759,3.299,1760,3.299,1761,3.299,1762,3.299,1763,3.299,1764,3.299,1765,3.299,1766,3.299,1767,3.299,1768,3.299,1769,3.299,1770,3.299]],["title/modules/InfraModule.html",[254,1.618,379,3.408]],["body/modules/InfraModule.html",[0,0.272,3,0.071,4,0.071,5,0.063,21,0.007,29,0.246,38,0.071,39,0.004,67,0.005,68,0.004,168,3.155,195,1.19,254,2.73,256,2.6,257,2.535,258,2.742,259,2.742,260,2.6,261,3.581,262,3.989,268,3.581,269,2.742,270,2.742,272,4.496,379,6.609,383,5.469,384,5.537,385,3.314,402,3.757,404,3.197,1379,4.48,1521,4.873,1607,6.325,1614,4.873,1641,5.469,1654,6.088,1655,4.873,1798,4.873,1799,4.873,1800,5.47,1801,5.47,1802,6.091,1803,5.47,1804,4.873,1805,5.47,1806,5.47,1807,5.47]],["title/injectables/JwtGuard.html",[200,2.432,295,1.098]],["body/injectables/JwtGuard.html",[0,0.352,3,0.091,4,0.091,5,0.081,21,0.006,29,0.23,38,0.091,39,0.005,67,0.006,68,0.005,71,1.887,195,1.54,200,4.325,295,1.952,296,2.681,1808,6.307,1809,7.079,1810,5.798,1811,7.079]],["title/interfaces/JwtPayload.html",[604,1.302,1812,3.611]],["body/interfaces/JwtPayload.html",[3,0.088,4,0.088,5,0.079,10,0.361,21,0.006,23,0.518,38,0.088,39,0.005,67,0.005,68,0.005,73,1.08,129,1.837,506,6.994,604,1.884,605,2.815,1812,6.285,1813,6.083,1814,6.083]],["title/injectables/JwtStrategy.html",[295,1.098,451,3.408]],["body/injectables/JwtStrategy.html",[0,0.233,3,0.06,4,0.06,5,0.054,10,0.247,11,1.144,13,1.801,18,0.603,20,1.246,21,0.007,22,1.106,23,0.351,24,0.847,25,0.818,26,1.401,29,0.249,33,2.168,36,2.486,38,0.06,39,0.003,43,2.013,46,2.431,49,3.32,50,2.598,60,3.142,61,2.563,67,0.004,68,0.003,71,1.249,92,1.639,195,1.019,217,1.977,222,1.207,295,1.499,296,1.774,301,2.598,325,2.39,384,5.772,385,2.838,388,3.586,432,5.405,433,3.586,451,4.653,454,3.586,455,3.586,474,5.536,485,6.028,487,4.174,1810,3.837,1812,6.066,1815,4.174,1816,6.44,1817,4.685,1818,4.685,1819,6.44,1820,4.685,1821,4.685,1822,4.174,1823,4.685,1824,4.685,1825,4.685,1826,4.174,1827,3.837,1828,4.685,1829,4.685,1830,4.685,1831,4.685,1832,4.685,1833,4.685,1834,4.685,1835,4.685,1836,4.685,1837,4.685,1838,6.44,1839,4.685]],["title/modules/LoggerModule.html",[254,1.618,380,3.408]],["body/modules/LoggerModule.html",[0,0.312,3,0.081,4,0.081,5,0.072,21,0.006,29,0.214,38,0.081,39,0.004,67,0.005,68,0.004,195,1.364,254,2.911,256,2.981,257,2.907,258,3.144,259,3.144,260,2.981,261,4.252,262,4.252,268,3.908,269,3.144,270,3.144,380,6.817,824,7.064,1840,5.588,1841,5.588,1842,5.588,1843,6.272,1844,6.272]],["title/classes/LoginDto.html",[0,0.234,430,3.24]],["body/classes/LoginDto.html",[0,0.383,2,0.887,3,0.079,4,0.079,5,0.071,10,0.325,18,0.721,21,0.006,23,0.42,29,0.23,38,0.079,39,0.004,57,4.751,61,4.215,67,0.005,68,0.004,71,2.053,73,1.013,82,1.733,98,2.782,129,1.627,430,5.291,439,6.054,441,4.037,444,5.055,445,2.851,489,5.038,706,5.48,707,6.437,709,5.48,1845,5.48,1846,6.152,1847,6.152,1848,5.038,1849,6.152,1850,6.152]],["title/injectables/PayloadInterceptor.html",[295,1.098,667,3.408]],["body/injectables/PayloadInterceptor.html",[0,0.302,3,0.078,4,0.078,5,0.07,8,2.254,10,0.321,11,1.358,18,0.569,20,1.175,21,0.007,22,1.043,23,0.331,24,0.799,25,1.061,29,0.229,38,0.078,39,0.004,67,0.005,68,0.004,195,1.321,222,1.565,295,1.778,296,2.301,667,5.521,1256,4.975,1261,4.649,1397,4.388,1851,5.411,1852,7.642,1853,7.642,1854,7.817,1855,8.361,1856,8.774,1857,6.074,1858,8.361,1859,7.642,1860,5.411,1861,6.074,1862,6.074]],["title/classes/Period.html",[0,0.234,530,2.364]],["body/classes/Period.html",[0,0.232,2,0.672,3,0.06,4,0.06,5,0.054,10,0.339,18,0.838,21,0.007,22,1.261,23,0.506,24,0.844,29,0.201,30,0.917,38,0.06,39,0.003,40,1.771,41,1.067,42,1.803,67,0.004,68,0.003,71,1.711,72,3.576,73,0.844,79,2.903,80,2.975,81,2.975,82,2.013,85,3.581,91,4.213,92,2.245,97,2.216,98,3.576,99,2.274,100,3.396,101,2.161,102,3.241,103,2.216,104,2.161,105,2.216,106,2.161,107,2.216,113,3.492,114,2.551,129,1.241,406,3.751,411,3.368,518,3.207,522,6.053,530,3.217,676,2.634,679,4.041,726,6.053,727,6.053,1151,3.818,1863,4.153,1864,7.341,1865,4.662,1866,4.662,1867,4.662,1868,4.662,1869,3.818,1870,4.662,1871,4.662]],["title/classes/PeriodIndex1624547816204.html",[0,0.234,1872,3.864]],["body/classes/PeriodIndex1624547816204.html",[0,0.226,2,0.656,3,0.059,4,0.059,5,0.052,8,2.343,9,3.056,10,0.383,11,1.122,12,3.509,13,2.083,14,2.723,15,2.662,16,2.662,17,3.725,18,0.679,20,1.221,21,0.006,22,1.412,23,0.395,24,0.831,25,1.103,26,1.703,27,2.662,29,0.125,30,0.895,38,0.059,39,0.003,43,2.78,66,2.547,67,0.004,68,0.003,73,0.831,86,2.723,122,2.723,129,0.88,130,1.504,131,1.797,135,3.126,136,3.848,141,2.926,150,4.575,152,5.155,153,3.351,154,3.825,156,4.743,157,3.825,159,4.575,164,3.254,165,3.126,518,3.29,521,3.289,523,3.484,529,6.148,530,3.165,550,3.69,555,6.975,556,5.171,1872,6.412,1873,6.975,1874,4.055,1875,4.552,1876,4.552,1877,4.552,1878,6.314]],["title/classes/PeriodRepository.html",[0,0.234,593,3.408]],["body/classes/PeriodRepository.html",[0,0.339,2,0.984,3,0.088,4,0.088,5,0.079,21,0.006,29,0.241,30,1.615,38,0.088,39,0.005,67,0.005,68,0.005,71,2.189,246,4.674,247,3.624,248,2.815,249,2.815,250,2.815,530,3.422,593,5.933,1689,5.226,1879,6.083,1880,6.828]],["title/injectables/PeriodService.html",[295,1.098,587,3.24]],["body/injectables/PeriodService.html",[0,0.217,3,0.056,4,0.056,5,0.05,10,0.231,11,1.091,13,2.057,18,0.721,20,1.188,21,0.007,22,1.055,23,0.335,24,0.808,25,1.24,26,1.828,29,0.222,30,0.861,33,2.068,38,0.056,39,0.003,43,1.92,49,3.166,50,2.478,67,0.004,68,0.003,100,2.976,195,0.952,217,1.343,222,1.982,275,1.888,295,1.429,296,1.657,299,5.05,301,2.478,315,2.651,316,2.322,325,1.624,343,5.031,530,4.326,587,4.219,593,6.072,594,3.899,726,4.701,727,4.701,835,3.349,836,3.349,838,3.162,1689,3.349,1881,3.899,1882,7.696,1883,7.098,1884,4.376,1885,4.376,1886,4.376,1887,4.376,1888,4.376,1889,7.098,1890,4.376,1891,4.376,1892,4.376,1893,4.376,1894,4.376,1895,4.376,1896,4.376,1897,7.696,1898,6.143,1899,4.376,1900,6.143,1901,4.376,1902,6.143,1903,4.376,1904,4.376,1905,6.143,1906,6.143,1907,4.376,1908,4.376]],["title/classes/PersonalQuestionGroup.html",[0,0.234,1909,3.408]],["body/classes/PersonalQuestionGroup.html",[0,0.304,2,0.628,3,0.056,4,0.056,5,0.05,10,0.23,11,1.088,13,1.733,18,0.573,20,1.184,21,0.007,22,1.051,23,0.334,24,0.806,25,0.761,26,1.332,29,0.245,33,2.383,38,0.056,39,0.005,43,1.914,46,2.339,50,1.757,67,0.004,68,0.003,92,1.524,110,2.525,217,1.879,222,1.824,232,1.97,252,2.992,275,1.879,301,2.47,316,2.312,325,2.272,518,3.403,586,5.921,627,2.312,629,2.639,869,4.289,875,3.334,964,2.639,967,3.709,997,2.992,999,3.334,1151,3.568,1173,3.651,1174,3.85,1369,3.881,1869,3.568,1909,4.424,1910,6.308,1911,3.881,1912,7.08,1913,5.275,1914,4.356,1915,4.356,1916,4.356,1917,3.881,1918,3.881,1919,4.356,1920,4.686,1921,4.424,1922,4.686,1923,3.568,1924,3.568,1925,3.568,1926,3.881,1927,3.334,1928,4.356,1929,4.356,1930,6.123,1931,4.356,1932,4.356,1933,6.123,1934,4.356,1935,4.356,1936,3.881,1937,4.356,1938,4.356]],["title/classes/Professor.html",[0,0.234,1174,2.364]],["body/classes/Professor.html",[0,0.217,2,0.629,3,0.056,4,0.056,5,0.05,10,0.231,18,0.858,21,0.007,23,0.504,26,1.542,29,0.194,30,0.859,34,3.584,36,3.255,38,0.056,39,0.003,40,1.692,41,0.999,42,2.371,46,2.908,63,3.861,67,0.004,68,0.003,71,1.635,72,1.974,73,0.807,74,2.251,79,2.773,80,2.842,81,2.842,82,2.04,85,3.751,92,2.689,95,3.751,97,2.075,98,4.047,99,2.13,100,2.741,101,2.023,102,3.13,103,2.075,104,2.023,105,2.075,106,2.023,107,2.075,129,1.186,130,1.442,222,1.125,232,2.773,241,5.023,252,2.999,406,3.584,407,3.465,623,3.576,630,4.212,676,2.467,805,3.861,834,4.431,865,4.694,1174,3.074,1927,5.426,1939,3.89,1940,7.089,1941,5.023,1942,3.89,1943,5.464,1944,4.366,1945,3.89,1946,3.89,1947,3.89,1948,3.89,1949,3.89,1950,3.89,1951,4.366,1952,4.366]],["title/classes/ProfessorRepository.html",[0,0.234,595,3.408]],["body/classes/ProfessorRepository.html",[0,0.339,2,0.984,3,0.088,4,0.088,5,0.079,21,0.006,29,0.241,30,1.615,38,0.088,39,0.005,67,0.005,68,0.005,71,2.189,246,4.674,247,3.624,248,2.815,249,2.815,250,2.815,595,5.933,1174,3.422,1690,5.592,1953,6.083,1954,6.828]],["title/injectables/ProfessorService.html",[295,1.098,588,3.24]],["body/injectables/ProfessorService.html",[0,0.252,3,0.066,4,0.066,5,0.058,10,0.268,11,1.209,18,0.718,20,1.484,21,0.007,22,1.318,23,0.418,24,1.009,25,1.189,26,1.783,29,0.246,30,0.999,33,1.71,38,0.066,39,0.003,67,0.004,68,0.003,82,1.143,195,1.105,217,1.559,222,1.753,248,3.379,249,2.095,250,2.095,275,2.191,295,1.583,296,1.924,300,3.977,301,2.745,316,2.696,325,1.885,344,3.888,588,4.674,595,5.921,596,4.526,796,5.159,964,3.078,967,4.122,988,3.671,1096,3.671,1174,3.411,1690,4.161,1955,4.526,1956,6.062,1957,5.08,1958,6.062,1959,5.08,1960,6.062,1961,6.04,1962,5.08,1963,4.526,1964,4.526,1965,5.08,1966,4.526,1967,5.08]],["title/classes/Question.html",[0,0.234,76,1.863]],["body/classes/Question.html",[0,0.176,2,0.51,3,0.046,4,0.046,5,0.041,10,0.278,18,0.856,21,0.007,23,0.515,24,0.917,29,0.191,30,0.696,38,0.046,39,0.002,40,1.454,41,1.705,42,1.369,67,0.003,68,0.002,69,3.842,71,1.404,72,3.659,73,0.693,76,2.08,79,3.152,80,3.231,81,3.231,82,2.056,83,2.144,85,3.636,86,3.007,91,4.575,92,2.733,97,1.682,98,3.659,99,1.727,100,3.021,101,2.442,102,2.779,103,1.682,104,2.442,105,1.682,106,2.442,107,1.682,110,3.085,113,3.573,114,2.883,115,3.317,129,1.511,130,2.303,337,5.155,406,3.079,411,2.557,519,4.389,525,2.977,566,3.962,627,3.7,628,2.431,629,2.144,659,3.812,676,2,679,3.317,714,2.716,759,5.607,760,5.607,761,5.155,762,5.155,838,3.807,853,2.323,854,2.323,855,2.323,869,3.812,1968,3.153,1969,3.539,1970,3.539,1971,3.539,1972,3.539,1973,3.539,1974,3.539,1975,3.539,1976,3.539,1977,3.539,1978,3.539,1979,3.539,1980,3.539]],["title/controllers/QuestionController.html",[166,1.945,1981,3.611]],["body/controllers/QuestionController.html",[0,0.153,3,0.04,4,0.04,5,0.036,10,0.163,11,0.844,13,2.269,18,0.723,20,1.493,21,0.007,22,1.326,23,0.476,24,1.016,25,1.349,26,1.875,29,0.229,38,0.04,39,0.002,40,2.046,41,1.972,42,2.238,66,1.245,67,0.003,68,0.002,76,3.229,82,1.737,110,2.843,141,2.683,166,1.272,168,1.362,170,1.803,172,2.99,181,1.943,182,2.362,186,2.229,188,2.775,189,4.102,190,2.119,192,2.119,193,4.82,194,1.869,195,0.671,197,5.475,198,1.803,199,1.43,200,1.591,215,1.869,216,1.638,217,0.947,222,1.989,226,2.229,228,2.362,300,2.775,303,3.644,310,2.025,313,2.025,488,2.683,659,2.877,745,3.976,753,4.666,754,4.182,756,5.475,935,2.527,937,1.943,974,3.889,1007,2.527,1009,2.362,1011,2.527,1032,2.527,1094,2.527,1981,3.635,1982,2.749,1983,5.157,1984,4.231,1985,4.431,1986,2.749,1987,3.086,1988,2.749,1989,3.086,1990,3.086,1991,2.749,1992,4.697,1993,3.086,1994,2.749,1995,4.749,1996,3.086,1997,2.749,1998,3.086,1999,3.086,2000,4.697,2001,2.749,2002,3.086,2003,4.749,2004,5.759,2005,3.086,2006,4.231,2007,5.791,2008,2.527,2009,2.749,2010,2.749,2011,2.362,2012,2.527,2013,2.749,2014,2.749,2015,2.749,2016,3.086,2017,3.086,2018,3.086,2019,3.086,2020,3.086,2021,3.086,2022,3.086,2023,3.086,2024,3.086,2025,3.086,2026,3.086]],["title/classes/QuestionFindDto.html",[0,0.234,1992,3.408]],["body/classes/QuestionFindDto.html",[0,0.401,2,0.957,3,0.086,4,0.086,5,0.076,10,0.351,18,0.622,21,0.006,23,0.362,24,1.062,29,0.182,38,0.086,39,0.004,41,1.847,67,0.005,68,0.004,73,1.062,82,1.494,110,2.88,445,3.077,659,5.271,660,4.719,695,4.891,1992,5.834,2027,7.194,2028,5.915,2029,6.639,2030,6.639]],["title/classes/QuestionGroup.html",[0,0.234,627,2.504]],["body/classes/QuestionGroup.html",[0,0.364,2,0.489,3,0.044,4,0.044,5,0.039,10,0.269,11,0.906,18,0.849,21,0.007,23,0.507,25,0.592,29,0.187,30,0.667,38,0.044,39,0.002,40,1.408,41,1.674,42,1.311,67,0.003,68,0.002,71,1.36,72,3.607,73,0.671,76,2.889,79,3.085,80,3.162,81,3.162,82,2.04,83,2.054,85,3.329,86,2.943,91,3.348,92,1.784,95,1.654,97,1.611,98,3.607,99,1.654,100,2.973,101,2.364,102,2.708,103,1.611,104,2.364,105,1.611,106,2.364,107,1.611,110,2.995,113,3.394,114,2.791,115,3.211,129,0.987,130,2.54,180,3.329,329,3.861,406,2.981,411,2.449,518,3.085,525,2.882,534,2.992,547,3.715,566,3.861,627,2.707,628,5.768,676,1.915,679,3.211,714,3.517,833,5.588,838,4.93,839,4.686,853,2.225,854,2.225,855,2.225,856,5.023,858,2.449,875,2.595,876,2.776,877,2.776,1869,2.776,2031,3.02,2032,3.39,2033,3.39,2034,3.39,2035,3.39,2036,3.02,2037,3.39,2038,3.39,2039,3.39,2040,3.39,2041,3.39,2042,3.39,2043,3.39,2044,3.39,2045,3.39,2046,3.39,2047,3.02,2048,3.39,2049,3.39,2050,3.39,2051,3.39,2052,3.39]],["title/classes/QuestionGroup1620179231630.html",[0,0.234,2053,3.864]],["body/classes/QuestionGroup1620179231630.html",[0,0.298,2,0.609,3,0.054,4,0.054,5,0.049,8,2.223,9,2.935,10,0.223,11,1.064,12,3.425,13,2.033,14,2.584,15,2.525,16,2.525,17,3.662,18,0.652,20,1.158,21,0.006,22,1.373,23,0.38,24,0.788,25,1.046,26,1.648,27,2.525,29,0.116,30,0.831,38,0.054,39,0.003,40,2.09,43,2.596,66,1.703,67,0.004,68,0.003,73,0.788,76,2.991,86,3.002,90,3.771,122,4.054,124,2.9,129,0.817,130,2.822,131,1.667,135,4.114,136,3.757,137,4.114,138,5.706,139,5.706,140,4.114,141,3.226,142,4.114,143,4.114,149,4.114,150,4.427,151,4.114,152,3.628,153,2.241,154,2.558,156,3.628,157,2.558,159,3.5,164,2.177,165,4.114,419,3.931,519,3.771,534,2.06,546,3.771,549,4.584,551,4.328,552,3.232,761,3.458,762,3.458,2053,6.204,2054,6.748,2055,3.762,2056,4.223,2057,4.223,2058,4.223,2059,3.762,2060,3.762]],["title/controllers/QuestionGroupController.html",[166,1.945,2061,3.611]],["body/controllers/QuestionGroupController.html",[0,0.141,3,0.037,4,0.037,5,0.033,10,0.15,11,0.789,13,2.272,18,0.725,20,1.447,21,0.007,22,1.285,23,0.473,24,0.984,25,1.353,26,1.924,29,0.228,38,0.037,39,0.002,40,1.975,41,1.932,42,2.119,46,2.559,66,1.142,67,0.003,68,0.002,76,2.663,82,1.743,110,2.841,141,2.54,166,1.168,168,1.25,170,1.655,171,2.674,172,2.796,180,2.674,181,1.783,182,2.167,186,2.046,188,2.596,189,3.941,190,1.945,192,3.051,193,4.631,194,1.715,195,0.616,196,3.051,197,5.471,198,1.655,199,1.312,200,1.46,204,2.691,205,1.858,206,1.945,215,1.715,216,1.503,217,0.869,219,2.319,222,1.995,226,2.046,228,2.167,299,4.074,300,2.596,310,1.858,313,1.858,488,1.6,627,4.228,629,1.715,656,5.17,787,4.914,869,2.691,901,2.319,935,2.319,937,1.783,1005,4.195,1007,2.319,1009,2.167,1011,2.319,1032,2.319,1921,2.046,1985,4.195,1994,2.523,1997,2.523,2001,2.523,2006,3.957,2007,6.008,2008,2.319,2011,2.167,2015,2.523,2061,3.4,2062,7.097,2063,2.523,2064,4.883,2065,2.523,2066,2.832,2067,5.481,2068,2.832,2069,2.523,2070,2.832,2071,2.832,2072,2.832,2073,2.832,2074,2.832,2075,2.832,2076,2.832,2077,2.832,2078,5.17,2079,2.832,2080,5.597,2081,2.832,2082,3.597,2083,2.523,2084,2.319,2085,5.084,2086,2.523,2087,2.832,2088,2.832,2089,2.832,2090,2.832,2091,2.832,2092,2.832,2093,2.832,2094,2.832,2095,2.832,2096,2.832]],["title/classes/QuestionGroupGrade.html",[0,0.234,1920,3.611]],["body/classes/QuestionGroupGrade.html",[0,0.332,2,0.566,3,0.051,4,0.051,5,0.045,10,0.208,11,1.011,18,0.876,21,0.007,23,0.507,25,0.686,29,0.156,38,0.051,39,0.003,40,1.57,41,1.53,42,1.519,67,0.004,68,0.003,71,1.517,72,3.314,73,0.748,76,2.246,79,3.314,80,3.397,81,3.397,82,2.091,83,2.38,85,3.576,86,2.454,91,2.579,92,1.374,97,1.868,98,4.203,99,1.917,100,3.136,101,2.636,102,2.952,103,1.868,104,2.636,105,1.868,106,2.636,107,1.868,110,2.029,129,0.76,130,2.209,180,2.775,231,3.218,232,3.667,240,3.501,329,3.581,406,2.296,518,2.586,525,2.22,534,2.775,547,3.446,566,3.581,627,4.765,628,3.907,629,2.38,676,2.22,714,2.932,833,5.477,838,4.11,839,3.907,853,2.579,854,2.579,855,2.579,856,3.218,858,2.839,869,3.446,1920,4.354,2036,3.501,2097,3.93,2098,3.93,2099,3.93,2100,3.93,2101,3.93,2102,3.93,2103,3.93,2104,3.93,2105,3.93]],["title/modules/QuestionGroupModule.html",[254,1.618,267,3.24]],["body/modules/QuestionGroupModule.html",[0,0.242,3,0.063,4,0.063,5,0.056,21,0.007,29,0.256,38,0.063,39,0.003,67,0.004,68,0.003,110,1.734,168,2.917,195,1.058,254,2.574,256,2.311,257,2.253,258,2.437,259,2.437,260,2.311,261,3.761,262,3.761,266,5.698,267,6.514,268,3.311,269,2.437,270,2.437,272,3.732,274,3.191,275,2.097,280,3.513,303,5.932,376,5.466,392,4.332,1058,3.982,1909,4.773,1913,3.34,1924,3.982,1925,3.982,1981,5.743,2013,4.332,2061,5.743,2082,5.698,2083,4.332,2084,3.982,2106,4.332,2107,4.862,2108,4.332,2109,4.332,2110,4.862,2111,4.862,2112,4.862,2113,4.862,2114,4.773,2115,4.332,2116,4.332,2117,4.332,2118,4.862]],["title/classes/QuestionGroupRepository.html",[0,0.234,1913,3.24]],["body/classes/QuestionGroupRepository.html",[0,0.336,2,0.974,3,0.087,4,0.087,5,0.078,21,0.006,29,0.24,30,1.605,38,0.087,39,0.004,67,0.005,68,0.004,71,2.175,110,2.409,246,4.653,247,3.586,248,2.786,249,2.786,250,2.786,627,3.586,629,4.093,1913,5.604,1921,4.881,2119,6.019,2120,6.019,2121,6.756]],["title/injectables/QuestionGroupService.html",[295,1.098,2082,3.096]],["body/injectables/QuestionGroupService.html",[0,0.175,3,0.027,4,0.027,5,0.024,10,0.112,11,0.624,13,2.172,18,0.696,20,1.394,21,0.007,22,1.238,23,0.393,24,0.948,25,1.259,26,1.805,29,0.236,30,0.691,33,2.566,38,0.027,39,0.003,40,2.051,41,1.783,42,0.819,43,2.593,46,1.487,49,1.811,50,1.817,66,0.855,67,0.002,68,0.001,76,2.295,82,1.307,110,2.719,124,2.413,141,2.087,171,2.197,172,2.212,180,3.057,181,2.212,195,0.461,217,1.608,222,1.789,248,3.213,249,0.873,250,0.873,275,0.914,295,0.818,296,0.802,299,3.439,300,2.054,301,1.418,303,4.179,310,2.306,313,1.39,315,2.728,316,1.124,317,2.306,318,1.455,319,1.53,325,2.463,329,1.333,334,1.621,338,1.735,354,1.621,488,1.197,518,2.247,525,1.197,566,2.835,627,4.347,629,1.283,656,4.527,787,4.304,831,1.735,839,1.455,869,3.52,875,1.621,876,1.735,877,1.735,937,1.333,964,1.283,965,4.179,967,2.129,988,1.53,991,1.735,997,3.093,999,3.446,1005,3.446,1095,1.887,1162,1.887,1163,1.735,1173,1.67,1174,1.761,1261,1.621,1415,4.011,1695,3.131,1909,3.786,1913,3.599,1917,1.887,1918,1.887,1921,1.53,1922,4.011,1923,1.735,1924,1.735,1925,1.735,1926,1.887,1936,1.887,1985,3.446,2011,1.621,2064,4.012,2065,1.887,2069,1.887,2078,3.786,2080,5.019,2082,2.306,2085,4.292,2086,1.887,2116,1.887,2117,1.887,2122,6.792,2123,1.887,2124,4.503,2125,4.503,2126,2.118,2127,2.118,2128,2.118,2129,2.118,2130,2.118,2131,2.118,2132,2.118,2133,2.118,2134,1.887,2135,2.118,2136,2.118,2137,2.118,2138,2.118,2139,2.118,2140,3.688,2141,2.118,2142,2.118,2143,1.621,2144,1.887,2145,2.118,2146,2.118,2147,3.514,2148,2.118,2149,2.118,2150,2.118,2151,3.514,2152,3.514,2153,3.514,2154,4.503,2155,2.118,2156,2.118,2157,3.514,2158,2.118,2159,2.118,2160,1.887,2161,2.118,2162,2.118,2163,2.118,2164,1.887,2165,2.118,2166,2.118,2167,2.118,2168,2.118,2169,3.514,2170,2.118,2171,2.118,2172,2.118,2173,2.118,2174,2.118]],["title/classes/QuestionGroupTarget1621992475274.html",[0,0.234,2175,3.864]],["body/classes/QuestionGroupTarget1621992475274.html",[0,0.213,2,0.617,3,0.055,4,0.055,5,0.049,8,2.244,9,2.956,10,0.453,11,1.074,12,3.44,13,2.042,14,2.608,15,2.549,16,2.549,17,3.673,18,0.657,20,1.169,21,0.006,22,1.38,23,0.486,24,0.795,25,1.056,26,1.658,27,2.549,29,0.117,30,0.842,38,0.055,39,0.003,43,2.881,46,2.942,67,0.004,68,0.003,73,0.795,95,2.95,113,3.096,122,3.024,129,0.828,130,1.413,131,1.69,136,3.773,153,3.721,164,4.301,171,3.421,292,4.952,293,4.941,294,4.797,419,2.808,425,6.788,546,4.797,743,3.249,1173,2.874,1174,3.03,1175,5.386,2175,6.241,2176,6.788,2177,3.812,2178,4.279,2179,4.279,2180,4.279]],["title/interfaces/QuestionGroupUser.html",[604,1.302,2181,3.864]],["body/interfaces/QuestionGroupUser.html",[3,0.09,4,0.09,5,0.081,10,0.37,21,0.006,23,0.382,38,0.09,39,0.005,40,2.543,41,2.037,67,0.006,68,0.005,73,1.097,110,2.497,604,1.932,605,2.887,607,5.059,869,4.241,2181,6.828,2182,6.238]],["title/classes/QuestionImage1620477869366.html",[0,0.234,2183,3.864]],["body/classes/QuestionImage1620477869366.html",[0,0.213,2,0.618,3,0.055,4,0.055,5,0.049,8,2.247,9,2.96,10,0.227,11,1.076,12,3.443,13,2.044,14,2.612,15,2.553,16,2.553,17,3.675,18,0.657,20,1.171,21,0.006,22,1.381,23,0.383,24,0.797,25,1.058,26,1.659,27,2.553,29,0.117,30,0.843,38,0.055,39,0.003,43,2.823,66,2.443,67,0.004,68,0.003,73,0.797,76,3.567,86,2.612,122,3.601,129,0.829,130,2,131,1.693,136,4.085,141,2.806,150,4.457,152,5.473,153,3.214,154,3.668,156,4.62,157,3.668,159,4.457,164,3.121,419,3.974,519,3.812,549,5.838,550,4.879,551,6.033,552,4.635,2059,6.795,2060,6.795,2183,6.247,2184,6.795,2185,3.82,2186,4.288,2187,4.288,2188,4.288]],["title/classes/QuestionPosition1620488935141.html",[0,0.234,2189,3.864]],["body/classes/QuestionPosition1620488935141.html",[0,0.252,2,0.732,3,0.066,4,0.066,5,0.058,8,2.525,9,3.235,10,0.268,11,1.209,12,3.626,13,2.153,14,2.935,15,2.869,16,2.869,17,3.812,18,0.718,20,1.316,21,0.006,22,1.467,23,0.418,24,0.895,25,1.189,26,1.783,27,2.869,29,0.139,30,0.999,38,0.066,39,0.003,43,2.561,67,0.004,68,0.003,73,0.895,76,2.687,86,2.935,113,3.004,122,2.935,129,0.983,130,2.534,131,2.006,136,3.706,152,4.965,153,3.611,164,3.508,525,3.844,546,4.284,566,5.159,2189,6.712,2190,7.301,2191,4.526,2192,5.08,2193,5.08,2194,5.08]],["title/classes/QuestionPositionIdx1620563708532.html",[0,0.234,2195,3.864]],["body/classes/QuestionPositionIdx1620563708532.html",[0,0.221,2,0.641,3,0.057,4,0.057,5,0.051,8,2.305,9,3.018,10,0.431,11,1.104,12,3.483,13,2.068,14,2.679,15,2.619,16,2.619,17,3.705,18,0.67,20,1.201,21,0.006,22,1.4,23,0.39,24,0.817,25,1.085,26,1.686,27,2.619,29,0.122,30,0.875,38,0.057,39,0.003,43,2.845,66,2.506,67,0.004,68,0.003,73,0.817,76,3.493,86,2.679,122,2.679,129,0.86,130,1.469,131,1.756,135,4.266,136,3.82,141,2.879,150,4.529,152,5.117,153,3.297,154,3.763,156,4.695,157,3.763,159,4.529,164,3.202,165,4.266,546,3.911,549,5.932,550,3.63,551,6.103,552,4.754,566,3.911,567,5.534,2195,6.348,2196,6.905,2197,3.962,2198,4.447,2199,4.447,2200,4.447,2201,6.212]],["title/classes/QuestionRepository.html",[0,0.234,2114,3.408]],["body/classes/QuestionRepository.html",[0,0.338,2,0.981,3,0.088,4,0.088,5,0.078,21,0.006,29,0.241,30,1.612,38,0.088,39,0.004,67,0.005,68,0.004,71,2.185,76,2.687,110,2.427,246,4.667,247,3.611,248,2.805,249,2.805,250,2.805,2012,5.572,2114,5.921,2202,6.061,2203,6.804]],["title/injectables/QuestionService.html",[295,1.098,303,2.97]],["body/injectables/QuestionService.html",[0,0.112,3,0.029,4,0.029,5,0.026,10,0.12,11,0.659,13,2.196,18,0.729,20,1.506,21,0.007,22,1.337,23,0.425,24,1.024,25,1.328,26,1.903,29,0.231,30,0.73,33,2.3,38,0.029,39,0.002,40,2.097,41,1.968,42,0.875,43,2.135,49,1.912,50,1.903,66,0.913,67,0.002,68,0.001,76,3.195,82,1.456,110,2.835,124,2.548,141,1.719,172,2.336,181,2.336,195,0.492,217,1.139,222,2.006,248,3.388,249,0.933,250,0.933,275,0.976,295,0.863,296,0.857,300,2.168,301,1.497,303,2.336,310,2.435,313,2.435,315,2.857,316,1.201,317,2.435,318,1.554,319,1.635,325,2.235,329,4.073,334,1.732,354,1.732,404,1.322,484,1.732,488,2.096,492,1.853,525,1.278,566,3.791,627,2.895,629,1.371,659,4.139,745,3.239,753,4.302,754,3.407,756,4.693,869,2.857,937,1.424,964,1.371,967,2.248,974,3.039,988,1.635,991,4.468,997,2.548,1085,2.016,1132,2.016,1163,1.853,1261,1.732,1559,4.86,1921,1.635,1923,1.853,1983,4.201,1984,3.305,1985,3.609,1986,2.016,1988,2.016,1991,3.305,1992,3.942,2000,3.942,2004,3.942,2009,2.016,2010,2.016,2011,1.732,2012,1.853,2014,2.016,2082,3.952,2084,1.853,2114,3.942,2115,2.016,2134,2.016,2143,1.732,2144,2.016,2160,3.305,2204,2.016,2205,4.716,2206,3.71,2207,3.71,2208,4.716,2209,2.263,2210,2.263,2211,2.263,2212,2.263,2213,2.263,2214,2.263,2215,3.71,2216,2.263,2217,2.263,2218,3.71,2219,2.263,2220,2.263,2221,2.263,2222,2.263,2223,3.863,2224,2.263,2225,2.263,2226,2.263,2227,2.263,2228,3.71,2229,2.263,2230,2.263,2231,3.71,2232,2.263,2233,2.263,2234,2.263,2235,3.71,2236,2.263,2237,3.71,2238,2.263,2239,2.263,2240,3.71,2241,2.016,2242,2.263,2243,2.263,2244,2.263,2245,2.263,2246,2.263]],["title/classes/ReorderQuestionDto.html",[0,0.234,2000,3.408]],["body/classes/ReorderQuestionDto.html",[0,0.389,2,0.91,3,0.081,4,0.081,5,0.073,10,0.334,18,0.733,21,0.006,23,0.427,29,0.173,38,0.081,39,0.004,41,2.035,67,0.005,68,0.004,73,1.03,82,1.761,92,2.738,110,3.035,445,2.926,659,5.155,660,4.973,740,5.656,758,4.832,2000,5.656,2241,7.581,2247,6.969,2248,6.313,2249,5.624,2250,6.313,2251,6.313]],["title/classes/ReorderQuestionGroupDto.html",[0,0.234,2078,3.408]],["body/classes/ReorderQuestionGroupDto.html",[0,0.385,2,0.895,3,0.08,4,0.08,5,0.071,10,0.328,18,0.726,21,0.006,23,0.423,29,0.17,38,0.08,39,0.004,41,2.024,67,0.005,68,0.004,73,1.019,76,3.336,82,1.743,92,2.71,110,3.013,180,4.121,445,2.878,658,4.488,660,5.169,662,5.533,737,4.754,740,5.599,2078,5.599,2164,7.525,2247,6.918,2249,5.533,2252,6.211]],["title/classes/SeedAuxiliary1624412129413.html",[0,0.234,1784,3.611]],["body/classes/SeedAuxiliary1624412129413.html",[0,0.135,2,0.391,3,0.035,4,0.035,5,0.031,8,1.593,9,2.247,10,0.143,11,0.763,12,2.896,13,1.719,14,1.852,15,1.81,16,1.81,17,3.24,18,0.402,20,0.83,21,0.007,22,1.134,23,0.291,24,0.565,25,0.75,26,1.318,27,1.81,29,0.166,30,0.533,31,2.076,33,2.89,34,2.509,36,3.505,38,0.035,39,0.002,40,2.396,41,0.62,43,2.906,45,5.528,46,2.32,55,4.163,56,2.076,57,3.011,58,2.221,59,6.027,60,2.095,61,2.349,62,5.317,63,1.707,67,0.003,68,0.002,92,0.949,100,2.061,125,2.076,147,2.076,225,2.818,232,3.176,293,4.84,421,2.076,486,2.221,521,1.959,523,2.076,529,3.851,530,3.521,532,4.105,533,4.422,534,2.095,536,4.105,538,2.076,540,4.079,544,3.102,571,3.286,604,0.748,1173,2.041,1700,4.964,1771,6.285,1772,4.079,1773,2.076,1774,2.416,1775,2.416,1776,2.416,1777,2.221,1778,2.221,1779,2.416,1780,6.16,1781,2.221,1782,2.221,1783,2.221,1784,3.286,1785,2.416,1786,2.416,1787,2.416,1788,2.416,1789,2.416,1790,2.076,1791,2.416,1792,3.825,1793,5.4,1794,6.258,1795,2.416,1796,3.825,1797,6.556,2253,2.712,2254,2.712]],["title/interfaces/SoftDeleteResult.html",[317,3.096,604,1.302]],["body/interfaces/SoftDeleteResult.html",[3,0.089,4,0.089,5,0.079,10,0.365,21,0.006,23,0.482,38,0.089,39,0.005,41,1.579,66,2.784,67,0.005,68,0.005,73,1.087,317,5.424,318,4.74,604,1.905,605,2.846,972,7.363,2255,5.652,2256,9.171,2257,6.901]],["title/classes/Student.html",[0,0.234,1173,2.242]],["body/classes/Student.html",[0,0.217,2,0.629,3,0.056,4,0.056,5,0.05,10,0.231,18,0.858,21,0.007,23,0.504,26,1.542,29,0.194,30,0.859,34,3.584,36,3.255,38,0.056,39,0.003,40,1.692,41,0.999,42,2.371,46,2.908,63,3.861,67,0.004,68,0.003,71,1.635,72,1.974,73,0.807,74,2.251,79,2.773,80,2.842,81,2.842,82,2.04,85,3.751,92,2.689,95,3.751,97,2.075,98,4.047,99,2.13,100,2.741,101,2.023,102,3.13,103,2.075,104,2.023,105,2.075,106,2.023,107,2.075,129,1.186,130,1.442,222,1.125,232,2.773,241,5.023,252,2.999,406,3.584,407,3.465,623,3.576,630,4.212,676,2.467,805,3.861,834,4.431,865,4.694,1173,2.915,1927,5.426,1941,5.023,1942,3.89,1943,5.464,1945,3.89,1946,3.89,1947,3.89,1948,3.89,1949,3.89,1950,3.89,2258,3.89,2259,7.089,2260,4.366,2261,4.366,2262,4.366]],["title/classes/StudentRepository.html",[0,0.234,597,3.408]],["body/classes/StudentRepository.html",[0,0.339,2,0.984,3,0.088,4,0.088,5,0.079,21,0.006,29,0.241,30,1.615,38,0.088,39,0.005,67,0.005,68,0.005,71,2.189,246,4.674,247,3.624,248,2.815,249,2.815,250,2.815,597,5.933,1173,3.245,1691,5.592,2263,6.083,2264,6.828]],["title/injectables/StudentService.html",[295,1.098,589,3.24]],["body/injectables/StudentService.html",[0,0.252,3,0.066,4,0.066,5,0.058,10,0.268,11,1.209,18,0.718,20,1.484,21,0.007,22,1.318,23,0.418,24,1.009,25,1.189,26,1.783,29,0.246,30,0.999,33,1.71,38,0.066,39,0.003,67,0.004,68,0.003,82,1.143,195,1.105,217,1.559,222,1.753,248,3.379,249,2.095,250,2.095,275,2.191,295,1.583,296,1.924,300,3.977,301,2.745,316,2.696,325,1.885,344,3.888,589,4.674,597,5.921,598,4.526,796,5.159,964,3.078,967,4.122,988,3.671,1096,3.671,1173,3.234,1691,4.161,1956,6.062,1958,6.062,1960,6.062,1961,6.04,1963,4.526,1964,4.526,1966,4.526,2265,4.526,2266,5.08,2267,5.08,2268,5.08,2269,5.08,2270,5.08]],["title/classes/Subject.html",[0,0.234,536,2.757]],["body/classes/Subject.html",[0,0.224,2,0.648,3,0.058,4,0.058,5,0.052,10,0.238,18,0.844,21,0.007,23,0.507,29,0.213,30,0.885,38,0.058,39,0.003,40,1.728,41,1.648,42,1.74,67,0.004,68,0.003,71,1.669,72,3.522,73,0.824,79,2.832,80,2.902,81,2.902,82,2.027,83,2.725,85,3.514,86,2.701,92,2.19,97,2.138,98,3.522,99,2.195,100,2.786,101,2.085,102,3.181,103,2.138,104,2.085,105,2.138,106,2.085,107,2.138,113,3.439,114,2.462,115,3.942,117,2.952,129,1.506,232,3.703,252,3.09,406,4.552,407,3.538,532,5.083,533,4.535,534,3.514,536,3.66,676,2.542,679,3.942,1927,5.514,2271,4.008,2272,7.204,2273,4.499,2274,4.499,2275,4.499,2276,4.499,2277,4.499,2278,4.499,2279,4.499,2280,4.499]],["title/interfaces/SwaggerOptions.html",[604,1.302,2281,3.611]],["body/interfaces/SwaggerOptions.html",[3,0.083,4,0.083,5,0.074,10,0.34,21,0.006,23,0.488,38,0.083,39,0.004,67,0.005,68,0.004,73,1.043,129,1.868,520,6.472,534,4.37,604,1.777,605,2.655,2281,6.065,2282,5.737,2283,7.981,2284,7.981,2285,8.585]],["title/classes/TimestampEntity.html",[0,0.234,102,2.083]],["body/classes/TimestampEntity.html",[0,0.305,2,0.884,3,0.079,4,0.079,5,0.071,10,0.324,18,0.786,21,0.006,23,0.458,29,0.168,30,1.206,38,0.079,39,0.004,67,0.005,68,0.004,71,2.049,73,1.011,79,3.797,80,3.892,81,3.892,82,1.889,100,3.578,101,3.892,102,3.394,104,3.892,106,3.892,2286,5.463,2287,8.398,2288,6.132,2289,6.132,2290,6.132]],["title/classes/UpdateAnswerDto.html",[0,0.234,185,3.408]],["body/classes/UpdateAnswerDto.html",[0,0.349,2,1.013,3,0.091,4,0.091,5,0.081,21,0.006,29,0.229,38,0.091,39,0.005,67,0.006,68,0.005,71,1.873,171,3.428,177,4.826,185,6.036,210,5.756,684,5.756,2291,6.26,2292,5.378,2293,5.756,2294,5.756,2295,7.027]],["title/classes/UpdateExamAgreementDto.html",[0,0.234,934,3.408]],["body/classes/UpdateExamAgreementDto.html",[0,0.414,2,0.867,3,0.078,4,0.078,5,0.069,10,0.318,18,0.711,21,0.006,23,0.477,24,1.15,29,0.208,38,0.078,39,0.004,67,0.005,68,0.004,73,0.999,82,1.709,129,1.469,443,5.218,444,4.985,445,2.788,518,3.219,543,5.718,695,5.043,713,4.605,714,4.291,715,5.361,718,4.133,719,5.489,764,5.361,887,6.819,934,5.489,2296,6.819,2297,6.017,2298,6.017]],["title/classes/UpdateExamDto.html",[0,0.234,1018,3.408]],["body/classes/UpdateExamDto.html",[0,0.349,2,1.013,3,0.091,4,0.091,5,0.081,21,0.006,29,0.229,38,0.091,39,0.005,67,0.006,68,0.005,71,1.873,171,3.428,723,4.826,724,5.756,1018,6.036,1021,5.756,2292,5.378,2293,5.756,2294,5.756,2296,5.756,2299,7.027]],["title/classes/UpdateQuestionDto.html",[0,0.234,2004,3.408]],["body/classes/UpdateQuestionDto.html",[0,0.349,2,1.013,3,0.091,4,0.091,5,0.081,21,0.006,29,0.229,38,0.091,39,0.005,67,0.006,68,0.005,71,1.873,110,2.506,171,3.428,199,3.257,753,4.424,754,5.077,758,5.378,2004,6.036,2292,5.378,2300,5.756,2301,7.027]],["title/classes/UpdateQuestionGroupDto.html",[0,0.234,2080,3.408]],["body/classes/UpdateQuestionGroupDto.html",[0,0.345,2,1.002,3,0.09,4,0.09,5,0.08,21,0.006,29,0.227,38,0.09,39,0.005,67,0.005,68,0.005,71,1.853,76,3.278,110,2.479,171,3.391,658,5.022,787,4.774,2080,5.997,2085,5.693,2292,5.32,2293,5.693,2294,5.693,2300,5.693,2302,6.951]],["title/controllers/UploadController.html",[166,1.945,1802,3.611]],["body/controllers/UploadController.html",[0,0.28,3,0.073,4,0.073,5,0.093,10,0.297,11,1.294,13,1.975,18,0.527,20,1.089,21,0.007,22,0.967,23,0.307,24,0.741,25,0.983,29,0.248,38,0.073,39,0.004,67,0.005,68,0.004,82,1.267,166,2.321,168,2.486,170,3.29,188,4.255,194,3.41,195,1.225,196,5.001,198,3.29,199,2.609,200,2.902,201,3.867,215,3.41,216,2.988,217,1.728,222,1.45,1305,4.309,1622,6.176,1654,4.778,1725,4.068,1802,5.572,1804,5.016,2303,5.016,2304,5.63,2305,8.069,2306,5.63,2307,5.63,2308,5.63,2309,5.63,2310,5.63,2311,5.016,2312,5.963,2313,5.63,2314,5.63,2315,5.63,2316,5.63,2317,5.63,2318,5.63]],["title/classes/UploaderService.html",[0,0.234,1654,3.096]],["body/classes/UploaderService.html",[0,0.32,2,0.928,3,0.083,4,0.083,5,0.074,10,0.34,11,1.408,18,0.603,20,1.245,21,0.006,22,1.106,23,0.351,24,0.847,25,1.125,26,1.724,29,0.176,38,0.083,39,0.004,67,0.005,68,0.004,129,1.66,1220,5.2,1406,6.472,1450,5.274,1622,6.065,1647,7.06,1649,5.737,1652,5.737,1653,5.737,1654,5.201,2319,5.737,2320,8.958,2321,6.44]],["title/classes/User.html",[0,0.234,46,1.558]],["body/classes/User.html",[0,0.191,2,0.554,3,0.05,4,0.05,5,0.044,10,0.203,18,0.846,21,0.007,22,0.66,23,0.52,29,0.211,30,0.756,34,3.859,36,3.504,38,0.05,39,0.003,40,1.545,41,0.879,42,2.165,46,1.849,63,4.157,67,0.004,68,0.003,71,1.492,72,3.756,73,0.736,74,3.739,79,3.28,80,3.362,81,3.362,82,2.033,85,3.539,92,2.537,95,4.302,97,1.827,98,3.756,99,1.875,100,3.112,101,2.594,102,2.915,103,1.827,104,2.594,105,1.827,106,2.594,107,1.827,108,2.777,109,2.522,113,3.553,114,2.103,116,4.987,117,2.522,119,1.738,129,1.403,130,1.849,406,4.239,407,4.098,630,5.295,632,3.148,676,2.171,679,3.524,805,5.066,812,4.284,853,2.522,854,2.522,855,2.522,871,2.246,1941,5.408,2322,3.424,2323,3.843,2324,3.843,2325,3.843,2326,3.843,2327,3.843,2328,3.843,2329,3.843,2330,3.843]],["title/controllers/UserController.html",[166,1.945,2331,3.611]],["body/controllers/UserController.html",[0,0.254,3,0.066,4,0.066,5,0.059,10,0.271,11,1.216,18,0.641,20,1.323,21,0.007,22,1.175,23,0.373,24,0.9,25,1.195,29,0.247,38,0.066,39,0.003,46,3.021,67,0.005,68,0.003,82,1.539,166,2.112,168,2.261,170,2.993,188,4.502,189,2.993,192,3.517,194,3.102,195,1.114,198,2.993,199,2.373,200,2.64,204,4.666,206,3.517,215,4.144,216,2.718,217,1.572,222,1.984,474,4.849,488,2.893,796,5.549,1096,3.7,1545,4.943,1547,4.562,2008,4.194,2331,5.236,2332,4.562,2333,4.194,2334,5.121,2335,5.121,2336,5.121,2337,5.121,2338,5.121,2339,4.194,2340,4.562,2341,5.121,2342,5.121,2343,5.121,2344,5.121,2345,5.121,2346,5.121]],["title/classes/UserDto.html",[0,0.234,1961,3.24]],["body/classes/UserDto.html",[0,0.406,2,0.977,3,0.088,4,0.088,5,0.078,10,0.358,18,0.635,21,0.006,23,0.37,29,0.186,36,4.66,38,0.088,39,0.004,67,0.005,68,0.004,73,1.076,82,1.525,129,1.582,441,4.449,443,5.616,444,5.366,445,3.142,1961,5.616,2347,6.04,2348,6.78]],["title/modules/UserModule.html",[254,1.618,381,3.24]],["body/modules/UserModule.html",[0,0.276,3,0.072,4,0.072,5,0.064,21,0.007,29,0.251,38,0.072,39,0.004,67,0.005,68,0.004,168,3.184,195,1.207,254,2.749,256,2.637,257,2.571,258,2.781,259,2.781,260,2.637,261,4.016,262,4.016,268,3.615,269,2.781,270,2.781,272,3.135,274,3.641,275,2.393,375,4.954,376,4.54,381,6.304,390,4.943,474,6.053,484,6.133,1058,4.545,2331,6.133,2340,4.943,2349,4.943,2350,4.943,2351,4.943,2352,5.549,2353,5.549,2354,4.009,2355,4.943,2356,5.549]],["title/classes/UserRepository.html",[0,0.234,2354,3.408]],["body/classes/UserRepository.html",[0,0.339,2,0.984,3,0.088,4,0.088,5,0.079,21,0.006,29,0.241,30,1.615,38,0.088,39,0.005,46,2.255,67,0.005,68,0.005,71,2.189,246,4.674,247,3.624,248,2.815,249,2.815,250,2.815,2339,5.592,2354,5.933,2357,6.083,2358,6.828]],["title/interfaces/UserResult.html",[604,1.302,2359,3.611]],["body/interfaces/UserResult.html",[3,0.085,4,0.085,5,0.076,10,0.35,21,0.006,23,0.514,29,0.181,38,0.085,39,0.004,40,2.495,41,1.988,67,0.005,68,0.004,73,1.06,119,2.992,217,2.473,604,1.826,605,2.728,805,5.692,812,5.064,2255,5.419,2359,6.167,2360,5.895,2361,5.419]],["title/injectables/UserService.html",[295,1.098,474,2.97]],["body/injectables/UserService.html",[0,0.147,3,0.038,4,0.038,5,0.034,10,0.156,11,0.818,13,2.164,18,0.712,20,1.471,21,0.007,22,1.306,23,0.429,24,1.001,25,1.274,26,1.857,29,0.234,30,0.583,33,2.141,38,0.038,39,0.002,40,0.817,42,1.779,43,2.458,45,2.035,46,2.92,49,3.279,50,2.566,57,1.674,60,1.445,61,1.621,67,0.003,68,0.002,82,0.666,119,1.339,130,1.52,195,0.644,217,1.952,222,1.96,248,2.623,249,1.221,250,1.221,275,1.278,295,1.071,296,1.122,301,1.856,316,1.572,319,2.14,325,2.824,432,4.79,474,2.897,485,3.769,488,1.674,588,5.225,589,5.225,636,4.099,638,5.667,641,4.099,796,5.085,805,1.865,812,2.267,1096,2.14,1545,3.324,1961,6.295,2333,3.769,2339,2.426,2354,5.267,2355,2.639,2359,3.522,2361,2.426,2362,2.639,2363,4.601,2364,4.601,2365,4.601,2366,4.601,2367,4.601,2368,2.962,2369,2.962,2370,2.962,2371,4.601,2372,2.962,2373,4.601,2374,2.962,2375,4.601,2376,2.962,2377,4.601,2378,2.962,2379,4.601,2380,2.962,2381,4.601,2382,2.962,2383,2.962,2384,2.962,2385,2.962,2386,2.962,2387,2.962,2388,2.962,2389,2.962,2390,2.962,2391,2.962,2392,2.962,2393,2.962,2394,2.962,2395,2.962,2396,2.962,2397,2.962,2398,2.962,2399,2.962,2400,4.601,2401,2.962,2402,4.601,2403,2.962,2404,5.642,2405,2.962,2406,4.601,2407,4.601,2408,2.962,2409,2.962,2410,2.962,2411,2.962]],["title/coverage.html",[2412,5.765]],["body/coverage.html",[0,0.471,1,1.049,5,0.015,6,2.519,7,2.519,13,0.557,21,0.007,23,0.07,34,0.748,36,0.679,39,0.001,46,0.423,50,0.516,60,1.111,66,0.516,67,0.002,68,0.001,69,0.66,70,1.141,72,0.579,74,0.66,76,1.688,102,0.565,108,1.645,110,2.866,126,1.049,127,1.141,128,1.141,136,0.579,144,0.84,166,2.589,167,0.98,169,1.141,175,0.776,177,0.879,185,0.925,200,0.66,202,1.743,204,0.776,205,0.84,207,0.879,230,1.049,231,1.865,232,0.579,243,0.925,244,1.141,245,1.141,254,0.781,260,0.608,276,0.925,280,0.925,284,1.141,286,1.049,287,1.141,288,1.141,295,1.886,297,1.141,303,0.806,304,0.84,307,0.98,317,0.84,318,0.879,320,1.743,359,0.98,360,1.141,386,1.049,387,1.049,405,1.141,413,1.049,414,1.141,415,1.141,427,0.98,428,1.141,430,0.879,432,0.806,439,0.879,440,1.141,451,0.925,455,0.98,457,0.925,465,1.141,468,1.141,474,0.806,477,0.925,512,1.049,513,1.141,514,1.865,518,1.442,525,5.601,530,0.642,532,0.748,536,0.748,547,0.776,562,1.049,563,1.141,586,0.879,587,0.879,588,0.879,589,0.879,591,0.925,593,0.925,595,0.925,597,0.925,604,2.102,606,1.141,607,2.695,608,0.925,609,1.049,610,1.049,627,0.679,628,1.564,656,0.925,657,1.141,658,2.695,666,0.84,667,0.925,673,1.141,683,1.141,684,1.865,704,1.141,705,1.141,707,0.98,711,0.925,712,1.865,713,2.354,720,0.98,723,0.879,724,1.865,728,0.748,743,1.981,745,0.879,746,2.695,747,1.865,753,0.806,756,0.879,758,2.354,787,0.879,796,0.806,797,1.141,798,1.865,801,1.049,815,0.925,816,1.141,817,1.141,824,0.925,825,1.141,826,0.879,829,1.141,849,0.84,869,1.38,871,0.748,880,1.049,881,1.141,882,1.141,886,1.141,908,1.049,909,1.141,910,1.141,917,1.049,918,1.141,919,1.141,923,0.98,924,1.865,925,1.141,929,0.925,934,0.925,945,1.865,949,1.049,950,1.141,951,1.141,955,0.925,956,1.865,957,1.141,959,1.141,965,0.806,1003,0.98,1004,1.141,1015,0.925,1018,0.925,1040,0.84,1041,0.84,1042,0.879,1044,0.98,1046,0.925,1048,0.925,1059,1.743,1060,1.141,1066,1.141,1071,0.98,1121,1.141,1140,1.049,1164,1.141,1167,1.049,1168,1.865,1169,1.865,1173,1.082,1174,0.642,1185,1.049,1186,1.865,1187,1.865,1191,1.049,1194,1.141,1209,1.049,1210,1.141,1211,0.84,1212,1.049,1230,1.865,1231,1.865,1234,0.98,1242,1.141,1244,1.141,1271,1.141,1272,1.141,1288,1.049,1289,1.141,1290,1.141,1295,0.98,1296,1.141,1301,0.879,1312,0.925,1314,1.141,1362,1.141,1366,0.879,1403,1.141,1406,0.925,1407,1.141,1408,1.141,1414,1.141,1415,0.98,1416,1.141,1417,1.141,1423,0.776,1424,1.743,1425,1.141,1426,1.141,1438,0.98,1441,0.806,1477,0.98,1508,0.98,1516,0.879,1528,2.354,1529,1.865,1531,4.949,1536,0.98,1537,1.049,1538,1.141,1541,0.925,1542,2.695,1543,1.141,1545,0.925,1580,0.925,1581,1.049,1582,1.141,1594,0.98,1595,1.141,1621,1.141,1625,0.98,1639,1.141,1640,1.141,1641,0.98,1642,1.141,1643,1.141,1654,0.84,1660,1.141,1677,1.049,1678,1.141,1679,1.141,1684,1.141,1703,1.141,1711,2.354,1712,2.354,1728,0.925,1732,0.925,1771,0.98,1772,2.855,1773,2.855,1780,0.98,1784,0.98,1802,0.98,1808,1.141,1812,0.98,1813,1.141,1814,1.141,1815,1.141,1845,1.141,1848,1.049,1851,1.141,1863,1.141,1872,1.049,1873,1.141,1874,1.141,1879,1.141,1881,1.141,1909,0.925,1910,1.141,1911,1.141,1913,0.879,1920,0.98,1922,0.98,1939,1.141,1953,1.141,1955,1.141,1961,0.879,1968,1.141,1981,0.98,1982,1.141,1992,0.925,2000,0.925,2004,0.925,2027,1.141,2028,1.141,2031,1.141,2053,1.049,2054,1.141,2055,1.141,2061,0.98,2062,1.141,2063,1.141,2078,0.925,2080,0.925,2082,0.84,2114,0.925,2119,1.141,2120,1.141,2122,1.141,2123,1.141,2140,1.049,2143,0.98,2175,1.049,2176,1.141,2177,1.141,2181,1.049,2182,1.141,2183,1.049,2184,1.141,2185,1.141,2189,1.049,2190,1.141,2191,1.141,2195,1.049,2196,1.141,2197,1.141,2202,1.141,2204,1.141,2223,1.049,2247,1.865,2255,1.865,2258,1.141,2263,1.141,2265,1.141,2271,1.141,2281,0.98,2282,1.141,2286,1.141,2291,1.141,2296,1.865,2300,1.865,2303,1.141,2312,1.049,2319,1.141,2322,1.141,2331,0.98,2332,1.141,2347,1.141,2354,0.925,2357,1.141,2359,0.98,2360,1.141,2361,1.049,2362,1.141,2412,1.141,2413,1.28,2414,1.28,2415,1.28,2416,8.532,2417,3.73,2418,5.477,2419,9.234,2420,3.076,2421,3.73,2422,8.036,2423,2.029,2424,8.532,2425,3.73,2426,7.514,2427,5.134,2428,3.076,2429,2.277,2430,3.272,2431,1.049,2432,1.141,2433,1.141,2434,1.141,2435,1.141,2436,2.029,2437,1.141,2438,1.141,2439,1.141,2440,1.141,2441,2.029,2442,1.141,2443,2.029,2444,2.029,2445,1.141,2446,1.141,2447,1.141,2448,1.141,2449,2.029,2450,1.141,2451,1.141,2452,1.141,2453,1.141,2454,1.141,2455,1.141,2456,1.141,2457,2.277,2458,1.28,2459,1.141,2460,1.28,2461,1.28,2462,1.141,2463,3.076,2464,1.141,2465,1.141,2466,1.141,2467,4.486,2468,1.141,2469,1.141,2470,1.141,2471,1.141,2472,1.141,2473,1.141,2474,1.141,2475,2.029,2476,1.141,2477,1.28,2478,1.141,2479,1.141,2480,1.28]],["title/dependencies.html",[257,2.633,2481,3.924]],["body/dependencies.html",[0,0.383,21,0.007,30,1.515,32,4.562,39,0.003,60,2.498,64,2.893,67,0.005,68,0.003,100,1.98,195,1.114,199,2.373,248,2.112,249,2.112,250,2.112,257,2.373,275,2.209,385,3.102,445,3.17,454,3.919,619,4.562,718,3.517,808,4.562,1138,4.562,1376,4.562,1377,4.562,1476,2.893,1635,4.562,1725,5.94,1727,3.919,1777,4.194,1778,4.194,1810,4.194,1826,6.095,1827,4.194,1860,4.562,2311,4.562,2482,5.121,2483,7.703,2484,5.121,2485,5.121,2486,5.121,2487,6.841,2488,5.121,2489,6.841,2490,5.121,2491,5.121,2492,5.121,2493,5.121,2494,5.121,2495,5.121,2496,5.121,2497,5.121,2498,5.121,2499,5.121,2500,5.121,2501,5.121,2502,5.121,2503,5.121,2504,5.121,2505,5.121,2506,5.121,2507,5.121,2508,5.121,2509,5.121,2510,5.121,2511,5.121,2512,5.121,2513,5.121,2514,5.121,2515,5.121,2516,5.121,2517,5.121,2518,5.121,2519,5.121,2520,4.562,2521,5.121,2522,5.121,2523,5.121,2524,5.121,2525,5.121,2526,5.121,2527,5.121]],["title/miscellaneous/enumerations.html",[2528,2.47,2529,5.063]],["body/miscellaneous/enumerations.html",[10,0.254,21,0.007,39,0.003,46,2.167,64,3.707,66,2.647,67,0.004,68,0.003,69,3.382,94,4.74,131,3.883,141,3.041,144,3.159,171,3.201,232,2.967,421,5.022,422,5.845,527,5.374,528,5.845,532,3.834,574,5.374,575,5.845,624,5.845,630,4.506,631,5.845,735,3.707,743,3.041,805,4.13,819,5.374,847,5.374,871,3.834,893,4.74,1173,3.81,1174,4.018,1373,5.845,2528,3.03,2529,4.288,2530,4.814,2531,9.016,2532,4.288,2533,6.561,2534,6.65,2535,8.016,2536,4.814,2537,5.845,2538,6.561,2539,4.814,2540,4.814,2541,4.814,2542,6.561,2543,6.561,2544,7.464,2545,4.814,2546,6.561,2547,4.814,2548,4.814]],["title/miscellaneous/functions.html",[2528,2.47,2549,5.063]],["body/miscellaneous/functions.html",[10,0.271,20,1.77,21,0.006,22,1.571,24,1.204,25,1.598,26,1.491,39,0.003,42,1.985,46,1.696,67,0.005,68,0.003,260,3.666,388,6.893,796,3.232,801,6.318,858,5.946,1427,7.332,1545,4.951,2143,5.245,2333,4.205,2430,3.93,2431,6.318,2454,4.574,2455,6.105,2456,4.574,2467,4.205,2468,6.105,2469,6.105,2470,6.105,2471,6.105,2472,6.105,2478,4.574,2479,6.105,2528,3.232,2549,4.574,2550,7.859,2551,5.135,2552,5.135,2553,5.135,2554,4.205,2555,5.135,2556,5.135,2557,5.135,2558,5.135,2559,5.135,2560,5.135,2561,5.135,2562,5.135,2563,5.135,2564,6.105]],["title/index.html",[10,0.207,574,3.214,2565,3.924]],["body/index.html",[15,2.662,21,0.006,39,0.004,52,6.412,67,0.005,68,0.004,257,2.926,635,5.624,820,5.171,1305,4.832,2047,5.624,2566,6.974,2567,6.974,2568,7.925,2569,7.828,2570,6.313,2571,6.313,2572,6.313,2573,6.313,2574,5.624,2575,6.313,2576,6.313,2577,6.313,2578,5.624,2579,6.313,2580,6.313,2581,6.313,2582,6.313,2583,6.313,2584,6.313,2585,8.509,2586,7.828,2587,6.313,2588,6.313,2589,6.313,2590,5.171,2591,6.313,2592,7.828,2593,6.313,2594,6.313,2595,6.313,2596,6.313,2597,6.313,2598,6.313]],["title/modules.html",[256,3.076]],["body/modules.html",[21,0.005,39,0.004,67,0.005,68,0.004,255,4.347,256,2.86,266,3.949,267,4.133,372,4.605,375,4.133,376,3.788,377,4.347,378,4.347,379,4.347,380,4.347,381,4.133,450,4.347,1504,4.347,1607,4.347,2599,9.802,2600,9.802,2601,9.802,2602,9.802]],["title/overview.html",[2603,5.765]],["body/overview.html",[2,0.414,21,0.007,39,0.002,67,0.003,68,0.002,168,1.269,200,3.878,207,3.801,254,0.986,255,5.782,256,1.366,257,1.332,258,1.44,259,1.44,260,1.366,261,1.44,262,1.44,263,2.56,264,2.56,265,2.56,266,5.951,267,5.902,268,2.252,269,1.44,270,1.44,296,1.089,303,4.736,304,4.937,372,7.055,373,2.56,374,2.56,375,6.091,376,5.629,377,5.436,378,5.202,379,5.202,380,5.202,381,5.167,432,4.736,446,2.56,447,2.56,448,2.56,449,2.56,450,5.914,451,3.998,474,4.736,583,2.56,584,2.56,585,2.56,586,5.167,587,5.167,588,5.167,589,5.167,605,1.185,608,5.436,650,2.56,651,2.56,652,2.56,663,2.56,664,2.56,665,2.56,666,4.107,667,5.436,824,5.436,965,4.736,1036,2.56,1037,2.56,1038,2.56,1040,3.632,1041,3.632,1042,3.801,1301,5.167,1307,2.56,1308,2.56,1309,2.56,1423,4.557,1504,4.906,1505,2.56,1506,2.56,1507,2.56,1541,5.436,1580,5.436,1607,5.782,1608,2.56,1609,2.56,1610,2.56,1654,4.107,1790,2.2,1798,2.56,1799,2.56,1840,2.56,1841,2.56,1842,2.56,2082,3.632,2106,2.56,2108,2.56,2109,2.56,2349,2.56,2350,2.56,2351,2.56,2603,2.56,2604,2.874,2605,2.874,2606,2.874,2607,2.874]],["title/miscellaneous/typealiases.html",[2528,2.47,2608,5.683]],["body/miscellaneous/typealiases.html",[10,0.339,21,0.006,23,0.35,39,0.004,42,2.482,67,0.005,68,0.004,609,5.257,610,7.021,614,5.718,618,5.718,633,7.046,634,7.046,743,3.665,1059,4.912,1173,3.051,1174,3.217,1211,4.212,1212,6.477,1220,4.791,1419,6.053,1421,5.718,1430,6.477,1531,5.257,1601,7.046,2430,4.912,2528,4.04,2532,7.046,2534,5.718,2537,5.718,2554,5.257,2564,7.046,2609,6.418,2610,5.718,2611,7.909,2612,7.909,2613,6.418,2614,6.418]],["title/miscellaneous/variables.html",[2528,2.47,2590,4.654]],["body/miscellaneous/variables.html",[6,1.969,7,4.027,10,0.127,21,0.007,23,0.494,33,0.809,34,2.873,35,2.142,36,2.609,37,2.142,39,0.002,41,1.125,49,2.009,50,2.282,52,3.193,53,2.142,57,1.358,67,0.003,68,0.002,76,0.949,92,0.841,110,1.39,124,1.651,129,1.634,130,3.103,131,3.709,204,2.361,205,1.578,222,1.266,232,1.087,280,1.737,329,2.454,343,4.027,386,3.193,387,4.027,455,3.763,518,0.93,520,1.737,532,1.405,534,1.173,627,1.276,696,1.969,707,2.983,728,2.278,826,2.677,839,1.651,1140,3.193,1168,1.969,1169,3.193,1173,2.337,1174,1.205,1186,1.969,1187,3.193,1191,3.193,1256,1.969,1305,1.84,1424,1.84,1429,3.473,1441,1.513,1476,1.358,1477,3.763,1484,1.84,1508,1.84,1533,1.969,1719,1.84,1723,1.84,1733,1.84,1735,1.84,1746,1.84,1772,1.84,1773,3.763,1780,2.983,1781,1.969,1782,1.969,1783,1.969,1790,1.84,1822,2.142,1827,1.969,1848,3.193,1854,2.142,1922,2.983,2140,3.193,2223,3.193,2281,1.84,2283,2.142,2284,2.142,2312,3.193,2423,2.142,2430,1.84,2431,1.969,2432,3.473,2433,4.38,2434,4.38,2435,4.38,2436,2.142,2437,4.38,2438,2.142,2439,4.38,2440,2.142,2441,2.142,2442,4.38,2443,2.142,2444,4.38,2445,4.38,2446,3.473,2447,2.142,2448,4.38,2449,2.142,2450,4.38,2451,4.38,2452,2.142,2453,3.473,2459,2.142,2462,3.473,2464,2.142,2465,5.039,2466,2.142,2467,1.969,2473,3.473,2474,3.473,2475,2.142,2476,3.473,2520,2.142,2528,1.513,2550,3.473,2554,4.632,2566,3.473,2567,3.473,2568,2.142,2574,2.142,2578,2.142,2590,1.969,2610,2.142,2615,2.404,2616,2.404,2617,3.898,2618,3.898,2619,3.898,2620,2.404,2621,2.404,2622,2.404,2623,2.404,2624,2.404,2625,3.898,2626,3.898,2627,2.404,2628,3.898,2629,3.898,2630,2.404,2631,3.898,2632,2.404,2633,2.404,2634,2.404,2635,3.898,2636,2.404,2637,6.216,2638,2.404,2639,2.404,2640,2.404,2641,2.404,2642,3.898,2643,2.404,2644,2.404,2645,2.404,2646,2.404,2647,2.404,2648,2.404,2649,2.404,2650,2.404,2651,2.404,2652,2.404,2653,2.404,2654,2.404,2655,2.404,2656,4.917,2657,2.404,2658,2.404,2659,2.404,2660,2.404,2661,2.404,2662,2.404,2663,2.404,2664,2.404,2665,2.404,2666,2.404,2667,2.404,2668,2.404,2669,2.404,2670,2.404,2671,2.404,2672,2.404,2673,2.404,2674,2.404,2675,2.404,2676,2.404,2677,2.404,2678,3.898,2679,2.404,2680,2.404,2681,3.898,2682,2.404,2683,2.404,2684,2.404,2685,2.404,2686,2.404,2687,2.404,2688,2.404,2689,2.404,2690,2.404,2691,2.404,2692,2.404,2693,2.404,2694,2.404,2695,2.404,2696,2.404,2697,2.404,2698,2.404,2699,2.404,2700,2.404,2701,2.404,2702,2.404,2703,2.404,2704,2.404,2705,2.404]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":525,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":2516,"title":{},"body":{"dependencies.html":{}}}],["0.1.20",{"_index":2527,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":2492,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":2494,"title":{},"body":{"dependencies.html":{}}}],["0.2.31",{"_index":2523,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":2493,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":2513,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":2484,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2419,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2429,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2421,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2420,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2477,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2463,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2457,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2426,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":2458,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2422,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2416,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2418,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2425,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2417,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2427,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2428,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":124,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/QuestionGroup1620179231630.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["1.10.0",{"_index":2509,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":2499,"title":{},"body":{"dependencies.html":{}}}],["1.3.6",{"_index":2512,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":2496,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":2461,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":2693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10h",{"_index":2692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11",{"_index":2605,"title":{},"body":{"overview.html":{}}}],["14",{"_index":2604,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":2526,"title":{},"body":{"dependencies.html":{}}}],["2.2.5",{"_index":2511,"title":{},"body":{"dependencies.html":{}}}],["2.22.1",{"_index":2497,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":2491,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1790,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":2640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":2460,"title":{},"body":{"coverage.html":{}}}],["26",{"_index":2606,"title":{},"body":{"overview.html":{}}}],["29997856155",{"_index":35,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":2518,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":2670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":2514,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":2522,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":2507,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":2506,"title":{},"body":{"dependencies.html":{}}}],["4.7.15",{"_index":2488,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1762,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["4xx",{"_index":1754,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["5",{"_index":125,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["5.2.2",{"_index":2482,"title":{},"body":{"dependencies.html":{}}}],["5.2.6",{"_index":2502,"title":{},"body":{"dependencies.html":{}}}],["5.5.3",{"_index":2503,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1758,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["5000",{"_index":2654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["50172241065",{"_index":1782,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":2694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.5.1",{"_index":2489,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":2519,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":2698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.1.5",{"_index":2487,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2486,"title":{},"body":{"dependencies.html":{}}}],["7.6.13",{"_index":2483,"title":{},"body":{"dependencies.html":{}}}],["81",{"_index":2607,"title":{},"body":{"overview.html":{}}}],["9",{"_index":2673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.7.0",{"_index":2504,"title":{},"body":{"dependencies.html":{}}}],["989898",{"_index":1783,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["999999",{"_index":37,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["_",{"_index":1256,"title":{},"body":{"injectables/ExamTargetService.html":{},"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["__dirname",{"_index":2656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_rangeoverlapping",{"_index":1896,"title":{},"body":{"injectables/PeriodService.html":{}}}],["_targetmap",{"_index":1245,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["a.exam_agreement_id",{"_index":1343,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["a.id",{"_index":1937,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["a.position",{"_index":876,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["a.score",{"_index":1325,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["ability",{"_index":614,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory",{"_index":655,"title":{},"body":{"modules/CaslModule.html":{}}}],["ability.factory.ts",{"_index":610,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:32",{"_index":613,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":615,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":616,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abstract",{"_index":2320,"title":{},"body":{"classes/UploaderService.html":{}}}],["accessors",{"_index":834,"title":{},"body":{"classes/Exam.html":{},"classes/ExamTargetNode.html":{},"injectables/FirebaseAdmin.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["accesstoken",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":2677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["action",{"_index":159,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["action.enum",{"_index":626,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["action.enum.ts",{"_index":2533,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["active",{"_index":527,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamRepository.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":153,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["addmonths",{"_index":1774,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["addtargets",{"_index":1191,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addtargets.map((target",{"_index":1192,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["admin",{"_index":64,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["admin.constants",{"_index":1478,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{}}}],["admin.constants.ts",{"_index":2462,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.module",{"_index":1617,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["admin.module.ts",{"_index":1509,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:14",{"_index":1512,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:27",{"_index":1517,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider",{"_index":1520,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider.ts",{"_index":1426,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["admin.provider.ts:17",{"_index":1443,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:20",{"_index":1455,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:24",{"_index":1473,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:28",{"_index":1475,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:32",{"_index":1445,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:36",{"_index":1448,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:40",{"_index":1453,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:44",{"_index":1457,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:48",{"_index":1459,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:52",{"_index":1461,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:56",{"_index":1463,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:60",{"_index":1465,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:64",{"_index":1467,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:68",{"_index":1469,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:72",{"_index":1452,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:8",{"_index":1442,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin/firebase",{"_index":1508,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin/providers/firebase",{"_index":1425,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["adminuser.ts",{"_index":7,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminuser.ts:37",{"_index":19,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser.ts:8",{"_index":28,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser1620299822480",{"_index":1,"title":{"classes/AdminUser1620299822480.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{}}}],["affected",{"_index":356,"title":{},"body":{"injectables/AnswerService.html":{}}}],["affected.raw.affectedrows",{"_index":358,"title":{},"body":{"injectables/AnswerService.html":{}}}],["affectedrows",{"_index":2257,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["afterload",{"_index":856,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["age=31536000",{"_index":1637,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["agreed",{"_index":990,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{}}}],["agreement",{"_index":871,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["agreement.controller",{"_index":1053,"title":{},"body":{"modules/ExamModule.html":{}}}],["agreement.controller.ts",{"_index":925,"title":{},"body":{"controllers/ExamAgreementController.html":{},"coverage.html":{}}}],["agreement.controller.ts:27",{"_index":930,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["agreement.controller.ts:36",{"_index":936,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["agreement.dto",{"_index":721,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["agreement.dto.ts",{"_index":713,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreementDto.html":{},"classes/UpdateExamAgreementDto.html":{},"coverage.html":{}}}],["agreement.dto.ts:12",{"_index":716,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["agreement.dto.ts:13",{"_index":2297,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{}}}],["agreement.dto.ts:6",{"_index":948,"title":{},"body":{"classes/ExamAgreementDto.html":{}}}],["agreement.dto.ts:8",{"_index":2298,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{}}}],["agreement.dto.ts:9",{"_index":946,"title":{},"body":{"classes/ExamAgreementDto.html":{}}}],["agreement.entity",{"_index":109,"title":{},"body":{"classes/Answer.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/User.html":{}}}],["agreement.entity.ts",{"_index":886,"title":{},"body":{"classes/ExamAgreement.html":{},"coverage.html":{}}}],["agreement.entity.ts:11",{"_index":898,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:14",{"_index":889,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:17",{"_index":892,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:24",{"_index":894,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:27",{"_index":896,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:30",{"_index":891,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:33",{"_index":895,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:36",{"_index":890,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:38",{"_index":899,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.exam",{"_index":872,"title":{},"body":{"classes/Exam.html":{}}}],["agreement.repository",{"_index":983,"title":{},"body":{"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{}}}],["agreement.repository.ts",{"_index":957,"title":{},"body":{"classes/ExamAgreementRepository.html":{},"coverage.html":{}}}],["agreement.service",{"_index":321,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{}}}],["agreement.service.ts",{"_index":959,"title":{},"body":{"injectables/ExamAgreementService.html":{},"coverage.html":{}}}],["agreement.service.ts:100",{"_index":976,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:22",{"_index":966,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:31",{"_index":970,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:53",{"_index":980,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:72",{"_index":969,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:77",{"_index":978,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:84",{"_index":973,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.status",{"_index":994,"title":{},"body":{"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{}}}],["agreement.user",{"_index":2330,"title":{},"body":{"classes/User.html":{}}}],["agreements",{"_index":830,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamService.html":{}}}],["agreementsbydateinterval",{"_index":960,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreementsbydateinterval(start",{"_index":968,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["aliases",{"_index":2609,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow_anonymous",{"_index":524,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{}}}],["allowanonymous",{"_index":725,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{}}}],["allowedorigins",{"_index":2432,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["alreadyagreed",{"_index":987,"title":{},"body":{"injectables/ExamAgreementService.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{}}}],["alter",{"_index":294,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["andwhere",{"_index":1116,"title":{},"body":{"classes/ExamRepository.html":{}}}],["andwhere(':date",{"_index":1105,"title":{},"body":{"classes/ExamRepository.html":{}}}],["andwhere('exam.created_at",{"_index":1112,"title":{},"body":{"classes/ExamRepository.html":{}}}],["andwhere('user.id",{"_index":1701,"title":{},"body":{"classes/GradeRepository.html":{}}}],["anonymous",{"_index":543,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExportationRepository.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["answer",{"_index":69,"title":{"classes/Answer.html":{}},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExportationRepository.html":{},"classes/Grade.html":{},"classes/Question.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answer.controller",{"_index":273,"title":{},"body":{"modules/AnswerModule.html":{}}}],["answer.dto",{"_index":210,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{}}}],["answer.dto.ts",{"_index":684,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["answer.dto.ts:15",{"_index":690,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:18",{"_index":688,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:22",{"_index":693,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:26",{"_index":687,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.entity",{"_index":242,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer.grade",{"_index":1676,"title":{},"body":{"classes/Grade.html":{}}}],["answer.question",{"_index":1980,"title":{},"body":{"classes/Question.html":{}}}],["answer.service",{"_index":208,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{}}}],["answer.ts",{"_index":128,"title":{},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["answer.ts:13",{"_index":133,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer.ts:4",{"_index":132,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer.ts:6",{"_index":134,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer/answer.module",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["answer/entities/answer.entity",{"_index":620,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["answer1622421768424",{"_index":126,"title":{"classes/Answer1622421768424.html":{}},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["answer:12",{"_index":238,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:15",{"_index":239,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:18",{"_index":235,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:21",{"_index":237,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:24",{"_index":234,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:27",{"_index":236,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer_grade",{"_index":2540,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["answercontroller",{"_index":167,"title":{"controllers/AnswerController.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"coverage.html":{}}}],["answerdto",{"_index":340,"title":{},"body":{"injectables/AnswerService.html":{}}}],["answerdto.type",{"_index":345,"title":{},"body":{"injectables/AnswerService.html":{}}}],["answered",{"_index":1061,"title":{},"body":{"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["answergrade",{"_index":144,"title":{"classes/AnswerGrade.html":{}},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answergraderepository",{"_index":243,"title":{"classes/AnswerGradeRepository.html":{}},"body":{"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"coverage.html":{}}}],["answermodule",{"_index":255,"title":{"modules/AnswerModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["answerrepository",{"_index":276,"title":{"classes/AnswerRepository.html":{}},"body":{"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"coverage.html":{}}}],["answers",{"_index":337,"title":{},"body":{"injectables/AnswerService.html":{},"classes/Grade.html":{},"classes/Question.html":{}}}],["answerscorecheck.ts",{"_index":288,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"coverage.html":{}}}],["answerscorecheck.ts:13",{"_index":290,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{}}}],["answerscorecheck.ts:4",{"_index":289,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{}}}],["answerscorecheck.ts:6",{"_index":291,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{}}}],["answerscorecheck1624750140568",{"_index":286,"title":{"classes/AnswerScoreCheck1624750140568.html":{}},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"coverage.html":{}}}],["answerservice",{"_index":207,"title":{"injectables/AnswerService.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"coverage.html":{},"overview.html":{}}}],["answertype",{"_index":94,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"miscellaneous/enumerations.html":{}}}],["answertype.answer",{"_index":691,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answertype.answer_grade",{"_index":346,"title":{},"body":{"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{}}}],["anônimo",{"_index":1358,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["api",{"_index":2568,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":196,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{}}}],["apiexcludeendpoint",{"_index":1202,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["apihideproperty",{"_index":947,"title":{},"body":{"classes/ExamAgreementDto.html":{}}}],["apinotfoundresponse",{"_index":2007,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiokresponse",{"_index":197,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiproperty",{"_index":784,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["apiproperty({type",{"_index":768,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["apitags",{"_index":198,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["apitags('answer",{"_index":214,"title":{},"body":{"controllers/AnswerController.html":{}}}],["apitags('auth",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('exam",{"_index":1025,"title":{},"body":{"controllers/ExamController.html":{}}}],["apitags('examagreement",{"_index":942,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["apitags('examtarget",{"_index":1203,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["apitags('exportation",{"_index":1304,"title":{},"body":{"controllers/ExportationController.html":{}}}],["apitags('question",{"_index":2016,"title":{},"body":{"controllers/QuestionController.html":{}}}],["apitags('questiongroup",{"_index":2087,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["apitags('upload",{"_index":2315,"title":{},"body":{"controllers/UploadController.html":{}}}],["apitags('user",{"_index":2342,"title":{},"body":{"controllers/UserController.html":{}}}],["aplica",{"_index":1361,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["app",{"_index":1427,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/functions.html":{}}}],["appability",{"_index":634,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["appcheck",{"_index":1428,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["appcontroller",{"_index":359,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applyglobals",{"_index":2468,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyglobals(app",{"_index":2555,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applyperflayer",{"_index":2469,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyperflayer(app",{"_index":2556,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applysecuritylayer",{"_index":2470,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applysecuritylayer(app",{"_index":2557,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appmodule",{"_index":372,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":1535,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["argumentshost",{"_index":1720,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["arr",{"_index":2561,"title":{},"body":{"miscellaneous/functions.html":{}}}],["array",{"_index":1369,"title":{},"body":{"injectables/ExportationService.html":{},"classes/PersonalQuestionGroup.html":{}}}],["array.from(map.values()).map((target",{"_index":1268,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["arrayminsize",{"_index":750,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["arrayminsize(1",{"_index":757,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["async",{"_index":13,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"controllers/UploadController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["auth",{"_index":60,"title":{"classes/Auth.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["auth.constants",{"_index":1849,"title":{},"body":{"classes/LoginDto.html":{}}}],["auth.dto",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["auth.dto.ts",{"_index":705,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["auth.password",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FirebaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth.service.ts",{"_index":1543,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:14",{"_index":1563,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:27",{"_index":1557,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:31",{"_index":1553,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:37",{"_index":1561,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:44",{"_index":1555,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:9",{"_index":1550,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.ts",{"_index":415,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["auth.ts:15",{"_index":417,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:4",{"_index":416,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:6",{"_index":418,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth/auth.module",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["auth/dtos/create",{"_index":813,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["auth/guards/jwt.guard",{"_index":2008,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["auth1619445806509",{"_index":413,"title":{"classes/Auth1619445806509.html":{}},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["authcontroller",{"_index":427,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":439,"title":{"classes/AuthDto.html":{}},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["authdto.login",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto:6",{"_index":709,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["authguard",{"_index":1809,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('jwt",{"_index":1811,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authmodule",{"_index":375,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["authrepository",{"_index":457,"title":{"classes/AuthRepository.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authservice",{"_index":432,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["auto_increment",{"_index":143,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["auxiliary.ts",{"_index":514,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["auxiliary.ts:29",{"_index":564,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:4",{"_index":515,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:6",{"_index":517,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:60",{"_index":516,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["auxiliary/auxiliary.module",{"_index":395,"title":{},"body":{"modules/AppModule.html":{}}}],["auxiliary1620477175799",{"_index":512,"title":{"classes/Auxiliary1620477175799.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["auxiliary1624416663574",{"_index":562,"title":{"classes/Auxiliary1624416663574.html":{}},"body":{"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["auxiliarymodule",{"_index":376,"title":{"modules/AuxiliaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["avaliacao",{"_index":2546,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":43,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{}}}],["b",{"_index":875,"title":{},"body":{"classes/Exam.html":{},"classes/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["b.id",{"_index":1938,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["b.position",{"_index":877,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["baseentity",{"_index":2287,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["baserepository",{"_index":246,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["basic",{"_index":2498,"title":{},"body":{"dependencies.html":{}}}],["batchuser",{"_index":307,"title":{"interfaces/BatchUser.html":{}},"body":{"injectables/AnswerService.html":{},"interfaces/BatchUser.html":{},"coverage.html":{}}}],["bcrypt",{"_index":31,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcrypt.compare(logindto.password",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":56,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcrypt.hash(createauthdto.password",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(process.env.admin_password",{"_index":58,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcryptjs",{"_index":32,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"dependencies.html":{}}}],["between",{"_index":123,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{}}}],["between(start",{"_index":998,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["body",{"_index":189,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["body(new",{"_index":220,"title":{},"body":{"controllers/AnswerController.html":{}}}],["bool",{"_index":838,"title":{},"body":{"classes/Exam.html":{},"injectables/PeriodService.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["boolean",{"_index":714,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamTargetNode.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["bootstrap",{"_index":260,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["br",{"_index":1382,"title":{},"body":{"injectables/ExportationService.html":{}}}],["brazilian",{"_index":808,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["break",{"_index":641,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["browse",{"_index":2602,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2599,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1631,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{}}}],["buffer",{"_index":1409,"title":{},"body":{"interfaces/FileSendDto.html":{},"interfaces/FirebaseStorageUploadDto.html":{}}}],["buffer.from(await",{"_index":1390,"title":{},"body":{"injectables/ExportationService.html":{}}}],["build",{"_index":635,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"index.html":{}}}],["builder",{"_index":1388,"title":{},"body":{"injectables/ExportationService.html":{}}}],["builder.tostring",{"_index":1391,"title":{},"body":{"injectables/ExportationService.html":{}}}],["buildswaggerdoc",{"_index":2471,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["buildswaggerdoc(app",{"_index":2558,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cachecontrol",{"_index":1636,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["callback",{"_index":2564,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["callhandler",{"_index":1856,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["can(action.manage",{"_index":640,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.read",{"_index":643,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.update",{"_index":644,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["canagree",{"_index":1062,"title":{},"body":{"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{}}}],["cannot(action.delete",{"_index":645,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["cascade",{"_index":579,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{}}}],["case",{"_index":638,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["casl/ability",{"_index":619,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["casl/casl.module",{"_index":456,"title":{},"body":{"modules/AuthModule.html":{}}}],["caslabilityfactory",{"_index":608,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslaction",{"_index":624,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["caslmodule",{"_index":450,"title":{"modules/CaslModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["caslsubjects",{"_index":633,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["catch",{"_index":1574,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["catch((e",{"_index":1265,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["catch(exception",{"_index":1717,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["catch(httpexception",{"_index":1734,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["cert",{"_index":1533,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":550,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["check",{"_index":112,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{}}}],["check(`\"score",{"_index":121,"title":{},"body":{"classes/Answer.html":{}}}],["childentity",{"_index":241,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["childs",{"_index":1213,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/ExportationRepository.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/ExportationRepository.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["classvalidatorex",{"_index":1763,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["classvalidatorex.error",{"_index":1767,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["classvalidatorex.message",{"_index":1766,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["cli",{"_index":2665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloud",{"_index":1581,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["cls",{"_index":249,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["cluster_answermodule",{"_index":263,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_answermodule_imports",{"_index":265,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_answermodule_providers",{"_index":264,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":373,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":374,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":446,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":449,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":447,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":448,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule",{"_index":583,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_exports",{"_index":584,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_providers",{"_index":585,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":650,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":652,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":651,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":663,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_exports",{"_index":664,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_providers",{"_index":665,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_exammodule",{"_index":1036,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_exports",{"_index":1037,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_imports",{"_index":1039,"title":{},"body":{"modules/ExamModule.html":{}}}],["cluster_exammodule_providers",{"_index":1038,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exportationmodule",{"_index":1307,"title":{},"body":{"modules/ExportationModule.html":{},"overview.html":{}}}],["cluster_exportationmodule_exports",{"_index":1309,"title":{},"body":{"modules/ExportationModule.html":{},"overview.html":{}}}],["cluster_exportationmodule_providers",{"_index":1308,"title":{},"body":{"modules/ExportationModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule",{"_index":1505,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule_exports",{"_index":1506,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule_providers",{"_index":1507,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebasemodule",{"_index":1608,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_exports",{"_index":1610,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_providers",{"_index":1609,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_inframodule",{"_index":1798,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_exports",{"_index":1799,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_imports",{"_index":1800,"title":{},"body":{"modules/InfraModule.html":{}}}],["cluster_loggermodule",{"_index":1840,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1842,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1841,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule",{"_index":2106,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule_exports",{"_index":2109,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule_imports",{"_index":2107,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["cluster_questiongroupmodule_providers",{"_index":2108,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2349,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2350,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2351,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":533,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{}}}],["code_id",{"_index":537,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["collection",{"_index":1600,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type",{"_index":1603,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type.ts",{"_index":2611,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["column",{"_index":113,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["column({type",{"_index":85,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["command",{"_index":2597,"title":{},"body":{"index.html":{}}}],["completed",{"_index":2398,"title":{},"body":{"injectables/UserService.html":{}}}],["compose",{"_index":2586,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2495,"title":{},"body":{"dependencies.html":{}}}],["computador",{"_index":2584,"title":{},"body":{"index.html":{}}}],["config",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{}}}],["configmodule",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/InfraModule.html":{}}}],["configmodule.forroot",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('firebase",{"_index":1806,"title":{},"body":{"modules/InfraModule.html":{}}}],["configservice.get(databaseconfigkey",{"_index":403,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(jwtconfigkey",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(jwtconfigkey)!.secret",{"_index":1836,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["conflictexception",{"_index":981,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["conflictexception('already",{"_index":989,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["connection",{"_index":1321,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["connection.createqueryrunner",{"_index":1322,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["console.error(e",{"_index":2395,"title":{},"body":{"injectables/UserService.html":{}}}],["console.error(exception",{"_index":1761,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["console.log('create",{"_index":2396,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":33,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":154,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["constructor",{"_index":301,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"controllers/ExportationController.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(firebase_options",{"_index":1479,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(answerrepository",{"_index":302,"title":{},"body":{"injectables/AnswerService.html":{}}}],["constructor(authrepository",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":1817,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(configservice",{"_index":1714,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructor(firebaseadmin",{"_index":1549,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{}}}],["constructor(graderepository",{"_index":1704,"title":{},"body":{"injectables/GradeService.html":{}}}],["constructor(options",{"_index":1440,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(periodrepository",{"_index":1884,"title":{},"body":{"injectables/PeriodService.html":{}}}],["constructor(private",{"_index":216,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["constructor(repository",{"_index":964,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExportationService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["constructor(storageservice",{"_index":1644,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["constructor(targetnodefactory",{"_index":1275,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["constructor(userrepository",{"_index":2368,"title":{},"body":{"injectables/UserService.html":{}}}],["contenttype",{"_index":1400,"title":{},"body":{"injectables/ExportationService.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{}}}],["controller",{"_index":166,"title":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('answer",{"_index":213,"title":{},"body":{"controllers/AnswerController.html":{}}}],["controller('auth",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('exam",{"_index":941,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{}}}],["controller('export",{"_index":1303,"title":{},"body":{"controllers/ExportationController.html":{}}}],["controller('question",{"_index":2015,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["controller('upload",{"_index":2314,"title":{},"body":{"controllers/UploadController.html":{}}}],["controller('user",{"_index":2341,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":168,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"modules/InfraModule.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers/app.controller",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["controllers/auth.controller",{"_index":460,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/exam",{"_index":1051,"title":{},"body":{"modules/ExamModule.html":{}}}],["controllers/exam.controller",{"_index":1045,"title":{},"body":{"modules/ExamModule.html":{}}}],["controllers/question",{"_index":2111,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/question.controller",{"_index":2113,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/upload.controller",{"_index":1803,"title":{},"body":{"modules/InfraModule.html":{}}}],["controllers/user.controller",{"_index":2353,"title":{},"body":{"modules/UserModule.html":{}}}],["copy",{"_index":2064,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copy(copyquestiongroupdto",{"_index":2065,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copying",{"_index":2591,"title":{},"body":{"index.html":{}}}],["copyquestiongroupdto",{"_index":656,"title":{"classes/CopyQuestionGroupDto.html":{}},"body":{"classes/CopyQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["copytogroup",{"_index":2205,"title":{},"body":{"injectables/QuestionService.html":{}}}],["copytogroup(group",{"_index":2210,"title":{},"body":{"injectables/QuestionService.html":{}}}],["core/core.module",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["core/decorators/is",{"_index":810,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["core/entities/ff.entity",{"_index":117,"title":{},"body":{"classes/Answer.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["coremodule",{"_index":377,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["cors",{"_index":2641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corsconfig",{"_index":2433,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsconfigkey",{"_index":2434,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":2638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["count",{"_index":1789,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course",{"_index":532,"title":{"classes/Course.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["course.entity",{"_index":2278,"title":{},"body":{"classes/Subject.html":{}}}],["course.id",{"_index":1792,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course_id",{"_index":538,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course`(`id",{"_index":558,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["courseid",{"_index":2272,"title":{},"body":{"classes/Subject.html":{}}}],["coverage",{"_index":2412,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":2593,"title":{},"body":{"index.html":{}}}],["cpf",{"_index":34,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["create",{"_index":171,"title":{},"body":{"controllers/AnswerController.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"miscellaneous/enumerations.html":{}}}],["create(@body",{"_index":1026,"title":{},"body":{"controllers/ExamController.html":{}}}],["create(createexamdto",{"_index":1006,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["create(createquestiongroupdto",{"_index":2069,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["create(examid",{"_index":174,"title":{},"body":{"controllers/AnswerController.html":{}}}],["createagreement",{"_index":926,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createagreement(createagreementdto",{"_index":928,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createagreementdto",{"_index":931,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createanswerdto",{"_index":177,"title":{"classes/CreateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["createanswerdtos",{"_index":176,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["createanswerdtos.map((dto",{"_index":331,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createanswerdtos.map(async",{"_index":339,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createauth",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauth(createauthdto",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauthdto",{"_index":477,"title":{"classes/CreateAuthDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["createauthdto.login",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["createbatch",{"_index":298,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createbatch(createanswerdtos",{"_index":306,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createcsv",{"_index":1363,"title":{},"body":{"injectables/ExportationService.html":{}}}],["createcsv(csvlines",{"_index":1368,"title":{},"body":{"injectables/ExportationService.html":{}}}],["created_at",{"_index":137,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["createdat",{"_index":79,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdatecolumn",{"_index":101,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdto",{"_index":344,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createexamagreementdto",{"_index":711,"title":{"classes/CreateExamAgreementDto.html":{}},"body":{"classes/CreateExamAgreementDto.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"coverage.html":{}}}],["createexamdto",{"_index":723,"title":{"classes/CreateExamDto.html":{}},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["createforuser",{"_index":611,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":612,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createparamdecorator",{"_index":2682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquestion",{"_index":745,"title":{"classes/CreateQuestion.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["createquestion(createquestiondto",{"_index":1986,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestiondto",{"_index":753,"title":{"classes/CreateQuestionDto.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["createquestiongroupdto",{"_index":787,"title":{"classes/CreateQuestionGroupDto.html":{}},"body":{"classes/CreateQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["createquestiongroupdto.examid",{"_index":2151,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["createquestions",{"_index":1983,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestions(groupid",{"_index":1988,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestionsdto",{"_index":756,"title":{"classes/CreateQuestionsDto.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["createquestionsdto.questions.map((dto",{"_index":2229,"title":{},"body":{"injectables/QuestionService.html":{}}}],["createstudent",{"_index":1956,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createstudent(createdto",{"_index":1958,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createuser",{"_index":1545,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuser(@body",{"_index":2343,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createdto",{"_index":1551,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["createuser(createuserdto",{"_index":2333,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["createuserbytype",{"_index":2363,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserbytype(createuserdto",{"_index":2371,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":796,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuserdto.enrollment",{"_index":2391,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":2392,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.type",{"_index":2399,"title":{},"body":{"injectables/UserService.html":{}}}],["credential",{"_index":1486,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["crypto",{"_index":1651,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["csv",{"_index":1377,"title":{},"body":{"injectables/ExportationService.html":{},"dependencies.html":{}}}],["csvline",{"_index":815,"title":{"interfaces/CsvLine.html":{}},"body":{"interfaces/CsvLine.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"coverage.html":{}}}],["csvline.anonymous",{"_index":1357,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["csvline.group_title",{"_index":1353,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["csvline.is_class",{"_index":1354,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["csvline.question_statement",{"_index":1356,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["csvline.score",{"_index":1360,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["csvline.user_enrollment",{"_index":1359,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["csvlines",{"_index":1324,"title":{},"body":{"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{}}}],["csvlines.length",{"_index":1393,"title":{},"body":{"injectables/ExportationService.html":{}}}],["csvlines.map((csvline",{"_index":1352,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["ctx",{"_index":1735,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1738,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ctx.getresponse",{"_index":1737,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp(6",{"_index":139,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["customlogger",{"_index":824,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":1397,"title":{},"body":{"injectables/ExportationService.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"injectables/PayloadInterceptor.html":{}}}],["database",{"_index":1429,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/variables.html":{}}}],["database(url",{"_index":1447,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["database/migrations/*.{js,ts",{"_index":2659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":2437,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseconfigkey",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseurl",{"_index":1482,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["date",{"_index":100,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":1741,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["datetime",{"_index":522,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/Period.html":{}}}],["datetime(6",{"_index":138,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["de",{"_index":820,"title":{},"body":{"interfaces/CsvLine.html":{},"classes/ExportationRepository.html":{},"index.html":{}}}],["declarations",{"_index":259,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":1537,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["decoded.email",{"_index":1572,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.email_verified",{"_index":1573,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.uid",{"_index":1571,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decorators",{"_index":82,"title":{},"body":{"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["decoratos/get",{"_index":2338,"title":{},"body":{"controllers/UserController.html":{}}}],["default",{"_index":130,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateAnswerDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Student.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["default_port",{"_index":2473,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultagreementstatus",{"_index":1117,"title":{},"body":{"classes/ExamRepository.html":{}}}],["defaultname",{"_index":1780,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":66,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/FirebaseAdmin.html":{},"classes/PeriodIndex1624547816204.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":182,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["delete(':id')@apiokresponse()@apinotfoundresponse",{"_index":1997,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["deleted_at",{"_index":142,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["deletedat",{"_index":80,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deletedatecolumn",{"_index":104,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deleteuser",{"_index":1546,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["deleteuser(uid",{"_index":1554,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["dependencies",{"_index":257,"title":{"dependencies.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":520,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["detectsubjecttype",{"_index":647,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["development",{"_index":2578,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dfs",{"_index":1214,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["dfs(type",{"_index":1218,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["disciplina",{"_index":818,"title":{},"body":{"interfaces/CsvLine.html":{},"classes/ExportationRepository.html":{}}}],["distinct",{"_index":1073,"title":{},"body":{"classes/ExamRepository.html":{}}}],["distinct(true",{"_index":1100,"title":{},"body":{"classes/ExamRepository.html":{}}}],["docker",{"_index":2585,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":2413,"title":{},"body":{"coverage.html":{}}}],["dont",{"_index":1753,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["down",{"_index":14,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["down(queryrunner",{"_index":16,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["drop",{"_index":164,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["dsn",{"_index":2702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":1132,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionService.html":{}}}],["dto.questionid",{"_index":332,"title":{},"body":{"injectables/AnswerService.html":{}}}],["dto/create",{"_index":209,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["dto/update",{"_index":211,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["dtos/auth.dto",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["dtos/copy",{"_index":2086,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["dtos/create",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/file",{"_index":1652,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["dtos/find",{"_index":1095,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/QuestionGroupService.html":{}}}],["dtos/firebase",{"_index":1627,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["dtos/login.dto",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/question",{"_index":2009,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["dtos/reorder",{"_index":2011,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["dtos/update",{"_index":937,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["dtos/user.dto",{"_index":2386,"title":{},"body":{"injectables/UserService.html":{}}}],["duration",{"_index":1897,"title":{},"body":{"injectables/PeriodService.html":{}}}],["dynamicmodule",{"_index":1513,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["e",{"_index":2394,"title":{},"body":{"injectables/UserService.html":{}}}],["ea",{"_index":1340,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["ea.anonymous",{"_index":1338,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["ea.exam_id",{"_index":1341,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["ea.id",{"_index":1344,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["ea.user_id",{"_index":1347,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["each",{"_index":737,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["el.id",{"_index":1111,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ela",{"_index":778,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["em",{"_index":2047,"title":{},"body":{"classes/QuestionGroup.html":{},"index.html":{}}}],["email",{"_index":1539,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{}}}],["emailverified",{"_index":1540,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{}}}],["emit",{"_index":1751,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["encoding",{"_index":1410,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["end",{"_index":836,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/PeriodService.html":{}}}],["enda",{"_index":1899,"title":{},"body":{"injectables/PeriodService.html":{}}}],["endb",{"_index":1901,"title":{},"body":{"injectables/PeriodService.html":{}}}],["ended_at",{"_index":523,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["endedat",{"_index":726,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{}}}],["endofmonth",{"_index":1775,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["endofmonth(addmonths(new",{"_index":1786,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["engine=innodb",{"_index":151,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["enrollment",{"_index":36,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{},"classes/UserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["enrollment.decorator",{"_index":811,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enrollment.decorator.ts",{"_index":2455,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["enrollmentlength",{"_index":2453,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":2655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/answer",{"_index":251,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entities/answer.entity",{"_index":212,"title":{},"body":{"controllers/AnswerController.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{}}}],["entities/auth.entity",{"_index":466,"title":{},"body":{"classes/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["entities/exam",{"_index":938,"title":{},"body":{"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{}}}],["entities/exam.entity",{"_index":1022,"title":{},"body":{"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"interfaces/FindExamByUserDto.html":{}}}],["entities/grade.entity",{"_index":1688,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["entities/period.entity",{"_index":1689,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{}}}],["entities/professor.entity",{"_index":1690,"title":{},"body":{"classes/GradeRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{}}}],["entities/question",{"_index":1921,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["entities/question.entity",{"_index":2012,"title":{},"body":{"controllers/QuestionController.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{}}}],["entities/student.entity",{"_index":1691,"title":{},"body":{"classes/GradeRepository.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{}}}],["entities/user.entity",{"_index":2339,"title":{},"body":{"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":114,"title":{},"body":{"classes/Answer.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["entity('answer",{"_index":120,"title":{},"body":{"classes/Answer.html":{}}}],["entity('auth",{"_index":412,"title":{},"body":{"classes/Auth.html":{}}}],["entity('course",{"_index":681,"title":{},"body":{"classes/Course.html":{}}}],["entity('exam",{"_index":868,"title":{},"body":{"classes/Exam.html":{}}}],["entity('exam_agreement",{"_index":903,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["entity('exam_target",{"_index":1166,"title":{},"body":{"classes/ExamTarget.html":{}}}],["entity('grade",{"_index":1675,"title":{},"body":{"classes/Grade.html":{}}}],["entity('period",{"_index":1870,"title":{},"body":{"classes/Period.html":{}}}],["entity('subject",{"_index":2279,"title":{},"body":{"classes/Subject.html":{}}}],["entity('user",{"_index":2328,"title":{},"body":{"classes/User.html":{}}}],["entity.{js,ts",{"_index":2657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entitylike",{"_index":1143,"title":{},"body":{"injectables/ExamService.html":{}}}],["entityrepository",{"_index":247,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(answer",{"_index":285,"title":{},"body":{"classes/AnswerRepository.html":{}}}],["entityrepository(answergrade",{"_index":253,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entityrepository(auth",{"_index":467,"title":{},"body":{"classes/AuthRepository.html":{}}}],["entityrepository(exam",{"_index":1097,"title":{},"body":{"classes/ExamRepository.html":{}}}],["entityrepository(examagreement",{"_index":958,"title":{},"body":{"classes/ExamAgreementRepository.html":{}}}],["entityrepository(examtarget",{"_index":1243,"title":{},"body":{"classes/ExamTargetRepository.html":{}}}],["entityrepository(grade",{"_index":1693,"title":{},"body":{"classes/GradeRepository.html":{}}}],["entityrepository(period",{"_index":1880,"title":{},"body":{"classes/PeriodRepository.html":{}}}],["entityrepository(professor",{"_index":1954,"title":{},"body":{"classes/ProfessorRepository.html":{}}}],["entityrepository(question",{"_index":2203,"title":{},"body":{"classes/QuestionRepository.html":{}}}],["entityrepository(questiongroup",{"_index":2121,"title":{},"body":{"classes/QuestionGroupRepository.html":{}}}],["entityrepository(student",{"_index":2264,"title":{},"body":{"classes/StudentRepository.html":{}}}],["entityrepository(user",{"_index":2358,"title":{},"body":{"classes/UserRepository.html":{}}}],["enum",{"_index":95,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Professor.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["enum/user",{"_index":812,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["enumerations",{"_index":2529,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/answer",{"_index":118,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{}}}],["enums/casl",{"_index":625,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["enums/exam",{"_index":742,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{}}}],["enums/exportation",{"_index":1378,"title":{},"body":{"injectables/ExportationService.html":{}}}],["env",{"_index":52,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["env.example",{"_index":2592,"title":{},"body":{"index.html":{}}}],["environment",{"_index":2589,"title":{},"body":{"index.html":{}}}],["err",{"_index":1575,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["error",{"_index":1733,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["error('admin_password",{"_index":51,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["error('method",{"_index":1488,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["error('needs",{"_index":2679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["essa",{"_index":775,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["essas",{"_index":2045,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["esses",{"_index":2581,"title":{},"body":{"index.html":{}}}],["et",{"_index":1077,"title":{},"body":{"classes/ExamRepository.html":{}}}],["et.exam_id",{"_index":1079,"title":{},"body":{"classes/ExamRepository.html":{}}}],["et.exam_target_id",{"_index":1082,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ex",{"_index":1339,"title":{},"body":{"classes/ExportationRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.body",{"_index":1768,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.id",{"_index":1342,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["ex.message",{"_index":1765,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.name",{"_index":1749,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.stack",{"_index":1747,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exam",{"_index":518,"title":{"classes/Exam.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateExamAgreementDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTitle1621036457247.html":{},"classes/ExportationRepository.html":{},"interfaces/FindExamByUserDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateExamAgreementDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam.constants",{"_index":1141,"title":{},"body":{"injectables/ExamService.html":{}}}],["exam.created_at",{"_index":1087,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.deleted_at",{"_index":1088,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.dto",{"_index":1021,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{}}}],["exam.dto.ts",{"_index":724,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["exam.dto.ts:16",{"_index":739,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:20",{"_index":731,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:24",{"_index":734,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:28",{"_index":733,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:32",{"_index":730,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:37",{"_index":738,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.endedat",{"_index":1107,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.entity",{"_index":902,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["exam.id",{"_index":1078,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.period",{"_index":1151,"title":{},"body":{"injectables/ExamService.html":{},"classes/Period.html":{},"classes/PersonalQuestionGroup.html":{}}}],["exam.service",{"_index":984,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["exam.startedat",{"_index":1106,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.status",{"_index":1086,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.targets",{"_index":1147,"title":{},"body":{"injectables/ExamService.html":{}}}],["exam.ts",{"_index":882,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam.ts:10",{"_index":884,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:4",{"_index":883,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:6",{"_index":885,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam/entities/exam",{"_index":622,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/entities/exam.entity",{"_index":621,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/exam.module",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{}}}],["exam1620478273991",{"_index":880,"title":{"classes/Exam1620478273991.html":{}},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam_agreement",{"_index":541,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExportationRepository.html":{}}}],["exam_agreement_id",{"_index":145,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["exam_agreement`(`id",{"_index":158,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["exam_id",{"_index":548,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/GradeIndex1624560625346.html":{}}}],["exam_not_found",{"_index":1140,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam_period",{"_index":1119,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam_target",{"_index":1081,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{}}}],["exam_target_id",{"_index":1179,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam_target`(`id",{"_index":1184,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam_targets_exam_target",{"_index":1076,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{}}}],["exam`(`id",{"_index":554,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{}}}],["examagreement",{"_index":74,"title":{"classes/ExamAgreement.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"coverage.html":{}}}],["examagreement.ts",{"_index":910,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["examagreement.ts:21",{"_index":912,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement.ts:4",{"_index":911,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement.ts:6",{"_index":913,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement1622332886234",{"_index":908,"title":{"classes/ExamAgreement1622332886234.html":{}},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["examagreementanonymousdefault.ts",{"_index":919,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["examagreementanonymousdefault.ts:13",{"_index":921,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault.ts:5",{"_index":920,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault.ts:7",{"_index":922,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault1622334780336",{"_index":917,"title":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["examagreementcontroller",{"_index":923,"title":{"controllers/ExamAgreementController.html":{}},"body":{"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examagreementdto",{"_index":720,"title":{"classes/ExamAgreementDto.html":{}},"body":{"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreementDto.html":{},"coverage.html":{}}}],["examagreementid",{"_index":75,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{}}}],["examagreementnotfinished",{"_index":646,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["examagreementobservation.ts",{"_index":951,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["examagreementobservation.ts:13",{"_index":953,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation.ts:5",{"_index":952,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation.ts:7",{"_index":954,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation1622417032753",{"_index":949,"title":{"classes/ExamAgreementObservation1622417032753.html":{}},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["examagreementrepository",{"_index":955,"title":{"classes/ExamAgreementRepository.html":{}},"body":{"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examagreements",{"_index":1941,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["examagreementservice",{"_index":304,"title":{"injectables/ExamAgreementService.html":{}},"body":{"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"coverage.html":{},"overview.html":{}}}],["examagreementstatus",{"_index":893,"title":{},"body":{"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"miscellaneous/enumerations.html":{}}}],["examagreementstatus.finished",{"_index":907,"title":{},"body":{"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["examagreementstatus.started",{"_index":905,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["examagreementuser",{"_index":929,"title":{"interfaces/ExamAgreementUser.html":{}},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"coverage.html":{}}}],["examcontroller",{"_index":1003,"title":{"controllers/ExamController.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examid",{"_index":180,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FindPersonalDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["exammodule",{"_index":266,"title":{"modules/ExamModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["exampersonalresult",{"_index":1015,"title":{"classes/ExamPersonalResult.html":{}},"body":{"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["example",{"_index":1204,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["examrepository",{"_index":1046,"title":{"classes/ExamRepository.html":{}},"body":{"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["exams",{"_index":1864,"title":{},"body":{"classes/Period.html":{}}}],["examservice",{"_index":965,"title":{"injectables/ExamService.html":{}},"body":{"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"overview.html":{}}}],["examservice.relations",{"_index":1154,"title":{},"body":{"injectables/ExamService.html":{}}}],["examstatus",{"_index":847,"title":{},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"miscellaneous/enumerations.html":{}}}],["examstatus.active",{"_index":1104,"title":{},"body":{"classes/ExamRepository.html":{}}}],["examtarget",{"_index":849,"title":{"classes/ExamTarget.html":{}},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["examtarget.ts",{"_index":1169,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examtarget.ts:30",{"_index":1171,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget.ts:6",{"_index":1170,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget.ts:8",{"_index":1172,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget1622326106015",{"_index":1167,"title":{"classes/ExamTarget1622326106015.html":{}},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{}}}],["examtargetadd.ts",{"_index":1187,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examtargetadd.ts:21",{"_index":1189,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd.ts:6",{"_index":1188,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd.ts:8",{"_index":1190,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd1622378888497",{"_index":1185,"title":{"classes/ExamTargetAdd1622378888497.html":{}},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{}}}],["examtargetcontroller",{"_index":1044,"title":{"controllers/ExamTargetController.html":{}},"body":{"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["examtargetmanagerdto",{"_index":1209,"title":{"interfaces/ExamTargetManagerDto.html":{}},"body":{"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["examtargetnode",{"_index":1211,"title":{"classes/ExamTargetNode.html":{}},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["examtargetnodefactory",{"_index":1040,"title":{"injectables/ExamTargetNodeFactory.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"overview.html":{}}}],["examtargetnodeschema",{"_index":1234,"title":{"interfaces/ExamTargetNodeSchema.html":{}},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["examtargetrepository",{"_index":1048,"title":{"classes/ExamTargetRepository.html":{}},"body":{"modules/ExamModule.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["examtargetservice",{"_index":1041,"title":{"injectables/ExamTargetService.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{},"overview.html":{}}}],["examtargettree",{"_index":1042,"title":{"injectables/ExamTargetTree.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"overview.html":{}}}],["examtargettype",{"_index":735,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["examtargettype.course",{"_index":1282,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.grade",{"_index":1283,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.professor",{"_index":1284,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.student",{"_index":1285,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtitle.ts",{"_index":1290,"title":{},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["examtitle.ts:10",{"_index":1292,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle.ts:4",{"_index":1291,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle.ts:6",{"_index":1293,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle1621036457247",{"_index":1288,"title":{"classes/ExamTitle1621036457247.html":{}},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["examuser",{"_index":175,"title":{"interfaces/ExamUser.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamUser.html":{},"coverage.html":{}}}],["exception",{"_index":1722,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter",{"_index":671,"title":{},"body":{"modules/CoreModule.html":{}}}],["exception.filter.ts",{"_index":1712,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["exception.filter.ts:31",{"_index":1715,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:34",{"_index":1721,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":1764,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.getstatus",{"_index":1739,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.initmessage",{"_index":1740,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.message",{"_index":1743,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.name",{"_index":1750,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.stack",{"_index":1748,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exceptionfilter",{"_index":1713,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exceptions",{"_index":1752,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["executioncontext",{"_index":1854,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":2691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":38,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["exportation",{"_index":1386,"title":{},"body":{"injectables/ExportationService.html":{}}}],["exportation.controller",{"_index":1311,"title":{},"body":{"modules/ExportationModule.html":{}}}],["exportation.repository",{"_index":1313,"title":{},"body":{"modules/ExportationModule.html":{},"injectables/ExportationService.html":{}}}],["exportation.service",{"_index":1302,"title":{},"body":{"controllers/ExportationController.html":{},"modules/ExportationModule.html":{}}}],["exportation/exportation.module",{"_index":398,"title":{},"body":{"modules/AppModule.html":{}}}],["exportationcontroller",{"_index":1295,"title":{"controllers/ExportationController.html":{}},"body":{"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"coverage.html":{}}}],["exportationmodule",{"_index":378,"title":{"modules/ExportationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExportationModule.html":{},"modules.html":{},"overview.html":{}}}],["exportationrepository",{"_index":1312,"title":{"classes/ExportationRepository.html":{}},"body":{"modules/ExportationModule.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"coverage.html":{}}}],["exportationservice",{"_index":1301,"title":{"injectables/ExportationService.html":{}},"body":{"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationService.html":{},"coverage.html":{},"overview.html":{}}}],["exportationtype",{"_index":1373,"title":{},"body":{"injectables/ExportationService.html":{},"miscellaneous/enumerations.html":{}}}],["exportationtype}_${fileprefix}_${filedate}.csv",{"_index":1387,"title":{},"body":{"injectables/ExportationService.html":{}}}],["exports",{"_index":262,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exporttocsv",{"_index":1297,"title":{},"body":{"controllers/ExportationController.html":{},"injectables/ExportationService.html":{}}}],["exporttocsv(examid",{"_index":1298,"title":{},"body":{"controllers/ExportationController.html":{},"injectables/ExportationService.html":{}}}],["express",{"_index":1725,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/UploadController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":2305,"title":{},"body":{"controllers/UploadController.html":{}}}],["extends",{"_index":71,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/AuthRepository.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTargetRepository.html":{},"classes/FFEntity.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodRepository.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":1824,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1833,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":617,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["factories/casl",{"_index":654,"title":{},"body":{"modules/CaslModule.html":{}}}],["factories/exam",{"_index":1056,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetTree.html":{}}}],["faker",{"_index":1778,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"dependencies.html":{}}}],["faker.random.alpha",{"_index":1788,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["faker.random.alphanumeric(20",{"_index":1787,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["false",{"_index":839,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":2566,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fcm",{"_index":1583,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["ff",{"_index":2574,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ff.uneb.br",{"_index":2690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ffentity",{"_index":72,"title":{"classes/FFEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"coverage.html":{}}}],["ffentity:10",{"_index":853,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:13",{"_index":855,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:16",{"_index":854,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:6",{"_index":99,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.publicurl",{"_index":1638,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file.save(data",{"_index":1633,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["filedate",{"_index":1380,"title":{},"body":{"injectables/ExportationService.html":{}}}],["filedto",{"_index":1649,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["filedto.buffer",{"_index":1658,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["filedto.mimetype",{"_index":1659,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["fileinterceptor",{"_index":2310,"title":{},"body":{"controllers/UploadController.html":{}}}],["filename",{"_index":1395,"title":{},"body":{"injectables/ExportationService.html":{}}}],["fileprefix",{"_index":1384,"title":{},"body":{"injectables/ExportationService.html":{}}}],["filesenddto",{"_index":1406,"title":{"interfaces/FileSendDto.html":{}},"body":{"interfaces/FileSendDto.html":{},"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{},"coverage.html":{}}}],["filters/http",{"_index":670,"title":{},"body":{"modules/CoreModule.html":{}}}],["find",{"_index":1984,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find(@query",{"_index":2021,"title":{},"body":{"controllers/QuestionController.html":{}}}],["find(finddto",{"_index":1991,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto",{"_index":2010,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto.ts",{"_index":2028,"title":{},"body":{"classes/QuestionFindDto.html":{},"coverage.html":{}}}],["find.dto.ts:6",{"_index":2030,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["find.type",{"_index":1422,"title":{},"body":{"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["find.type.ts",{"_index":2612,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["findall",{"_index":299,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["findauth",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["findauth(authdto",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["findbyids",{"_index":2206,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findbyids(ids",{"_index":2215,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findbytargets",{"_index":1067,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbytargets(undefined",{"_index":1070,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbyuser",{"_index":1068,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbyuser(user",{"_index":1089,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbyuserandperiod",{"_index":1685,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["findbyuserandperiod(user",{"_index":1686,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["finddto",{"_index":974,"title":{},"body":{"injectables/ExamAgreementService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["finddto.groupid",{"_index":2232,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findexambyuserdto",{"_index":1071,"title":{"interfaces/FindExamByUserDto.html":{}},"body":{"classes/ExamRepository.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["findone",{"_index":300,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["findone(@param('id",{"_index":1032,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["findone(finddto",{"_index":971,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["findone(id",{"_index":310,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["findone(userdto",{"_index":1960,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["findpersonal",{"_index":1005,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["findpersonal(@getuser",{"_index":1030,"title":{},"body":{"controllers/ExamController.html":{}}}],["findpersonal(examid",{"_index":2073,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["findpersonal(undefined",{"_index":2131,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["findpersonal(user",{"_index":1013,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["findpersonaldto",{"_index":1415,"title":{"classes/FindPersonalDto.html":{}},"body":{"classes/FindPersonalDto.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["findspecializeduser",{"_index":2364,"title":{},"body":{"injectables/UserService.html":{}}}],["findspecializeduser(userdto",{"_index":2373,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser",{"_index":2365,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(userdto",{"_index":2375,"title":{},"body":{"injectables/UserService.html":{}}}],["finished",{"_index":575,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"miscellaneous/enumerations.html":{}}}],["finishexam",{"_index":961,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["finishexam(agreement",{"_index":975,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["firebase",{"_index":1476,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["firebase.app.app",{"_index":1471,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.appcheck.appcheck",{"_index":1444,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.appoptions",{"_index":1491,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.auth.auth",{"_index":1446,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.createrequest",{"_index":1552,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.updaterequest",{"_index":1560,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.credential.cert(options.cert",{"_index":1487,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.database.database",{"_index":1451,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.firestore.collectionreference",{"_index":2614,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["firebase.firestore.firestore",{"_index":1454,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{}}}],["firebase.initializeapp",{"_index":1481,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.installations.installations",{"_index":1456,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.instanceid.instanceid",{"_index":1458,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.machinelearning.machinelearning",{"_index":1460,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.messaging.messaging",{"_index":1462,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingoptions",{"_index":1589,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingpayload",{"_index":1588,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.projectmanagement.projectmanagement",{"_index":1464,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.remoteconfig.remoteconfig",{"_index":1466,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.securityrules.securityrules",{"_index":1468,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.serviceaccount",{"_index":1534,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["firebase.storage.storage",{"_index":1470,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{}}}],["firebase_admin",{"_index":2465,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebase_bucket",{"_index":2680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebase_options",{"_index":1477,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebaseadmin",{"_index":1423,"title":{"injectables/FirebaseAdmin.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{},"overview.html":{}}}],["firebaseadmin.auth",{"_index":1568,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseadmin.firestore",{"_index":1605,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firebaseadmin.messaging",{"_index":1592,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebaseadmin.storage",{"_index":1630,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["firebaseadminmodule",{"_index":1504,"title":{"modules/FirebaseAdminModule.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules.html":{},"overview.html":{}}}],["firebaseadminmodule.forroot(options",{"_index":1619,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseadminmodule.forrootasync(options",{"_index":1620,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseasyncmoduleoptions",{"_index":1516,"title":{"interfaces/FirebaseAsyncModuleOptions.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["firebaseauth",{"_index":1544,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseauthdecodedtoken",{"_index":1536,"title":{"interfaces/FirebaseAuthDecodedToken.html":{}},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["firebaseauthservice",{"_index":1541,"title":{"injectables/FirebaseAuthService.html":{}},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebasecloudmessagingservice",{"_index":1580,"title":{"injectables/FirebaseCloudMessagingService.html":{}},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebaseconfig",{"_index":2439,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasefirestorecollection",{"_index":1601,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firebasefirestoreservice",{"_index":1594,"title":{"injectables/FirebaseFirestoreService.html":{}},"body":{"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["firebasemodule",{"_index":1607,"title":{"modules/FirebaseModule.html":{}},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["firebasemodule.forrootasync",{"_index":1805,"title":{},"body":{"modules/InfraModule.html":{}}}],["firebasemoduleoptions",{"_index":1441,"title":{"interfaces/FirebaseModuleOptions.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasestorage",{"_index":1365,"title":{},"body":{"injectables/ExportationService.html":{}}}],["firebasestorageservice",{"_index":1366,"title":{"injectables/FirebaseStorageService.html":{}},"body":{"injectables/ExportationService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["firebasestorageuploaddto",{"_index":1625,"title":{"interfaces/FirebaseStorageUploadDto.html":{}},"body":{"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["firebaseuploader",{"_index":1641,"title":{"injectables/FirebaseUploader.html":{}},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"coverage.html":{}}}],["firestore",{"_index":1430,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firestore.service.ts",{"_index":1595,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"coverage.html":{}}}],["firestore.service.ts:14",{"_index":1599,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firestore.service.ts:8",{"_index":1597,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["first",{"_index":1137,"title":{},"body":{"injectables/ExamService.html":{}}}],["first(exam.agreements)?.status",{"_index":1159,"title":{},"body":{"injectables/ExamService.html":{}}}],["fk_1d110bd5138b275a2ea2944e290",{"_index":553,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_20bfb4e7c97aa20956be86c6beb",{"_index":915,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["fk_26862c959c4ecfc8f1b4a1a055c",{"_index":582,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_3b2789ae1c494ff1bf8dd4d4607",{"_index":549,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["fk_4a22969058fa5105ad6bee583f1",{"_index":1182,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["fk_7540599d89cb2b6e17cc56d5170",{"_index":581,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_7bdc7fbb138980e5471e2a19366",{"_index":916,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["fk_814144bcce3b80921f41f15b823",{"_index":155,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_971014f1fb44be716098484bb5a",{"_index":162,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_af1604ea5493f65a6c8d70d98ed",{"_index":1183,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["fk_b472107b61171823120f069fd50",{"_index":559,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_b9db72ddc93f196bf9d79132171",{"_index":557,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_ba483ad17eb41fb181aa3a77d4f",{"_index":555,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/PeriodIndex1624547816204.html":{}}}],["fk_ba86f32978b67a878005c5af78a",{"_index":576,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_c3d19a89541e4f0813f2fe09194",{"_index":160,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_d35fb46683694975ba85bcd804e",{"_index":561,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_df58a2a413f5647f6411002cb28",{"_index":580,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_f2d35d0b9823628374f51931ddd",{"_index":577,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["flags",{"_index":2046,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["fns",{"_index":1777,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"dependencies.html":{}}}],["following",{"_index":2596,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":156,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["form",{"_index":2567,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fornecida",{"_index":777,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["forroot",{"_index":1510,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forroot(options",{"_index":1511,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync",{"_index":1514,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync(options",{"_index":1515,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forwardref",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/QuestionService.html":{},"modules/UserModule.html":{}}}],["found",{"_index":343,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/PeriodService.html":{},"miscellaneous/variables.html":{}}}],["fullfil",{"_index":2587,"title":{},"body":{"index.html":{}}}],["function",{"_index":1531,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":2549,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":1232,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{}}}],["generate(schema",{"_index":1233,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["generated",{"_index":900,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["generated('uuid",{"_index":904,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["generated('uuid')@column({unique",{"_index":897,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["gerado",{"_index":1781,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["get(':id",{"_index":1011,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get(':id')@apiokresponse({type",{"_index":1994,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get('health",{"_index":363,"title":{},"body":{"controllers/AppController.html":{}}}],["get('me",{"_index":1029,"title":{},"body":{"controllers/ExamController.html":{}}}],["get('me')@apiokresponse({type",{"_index":1014,"title":{},"body":{"controllers/ExamController.html":{}}}],["get('me/:examid",{"_index":2090,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["get('me/:examid')@apiokresponse({type",{"_index":2074,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["get('user",{"_index":1207,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["get('user')@apiexcludeendpoint",{"_index":1198,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["get()@apiokresponse({type",{"_index":1009,"title":{},"body":{"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get()@useguards(jwtguard",{"_index":2336,"title":{},"body":{"controllers/UserController.html":{}}}],["getbyuser",{"_index":962,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["getbyuser(user",{"_index":977,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["getcollection",{"_index":1596,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getcollection(collection",{"_index":1598,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getconnection",{"_index":1320,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["getcsvlines",{"_index":1315,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["getcsvlines(examid",{"_index":1316,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["getend",{"_index":861,"title":{},"body":{"classes/Exam.html":{}}}],["getfilename",{"_index":1364,"title":{},"body":{"injectables/ExportationService.html":{}}}],["getfilename(exportationtype",{"_index":1372,"title":{},"body":{"injectables/ExportationService.html":{}}}],["getforuser",{"_index":1195,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getforuser(@getuser",{"_index":1208,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getforuser(user",{"_index":1197,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getgrades",{"_index":1950,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["getisleaf",{"_index":1221,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["getlastperiod",{"_index":1882,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getname",{"_index":1472,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["getnextposition",{"_index":2207,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getnextposition(groupid",{"_index":2218,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getoptions",{"_index":1474,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["getperiodbyinterval",{"_index":1883,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getperiodbyinterval(undefined",{"_index":1888,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getpersonal",{"_index":1912,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["getpersonal(user",{"_index":1915,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["getstart",{"_index":859,"title":{},"body":{"classes/Exam.html":{}}}],["gettargetmap",{"_index":1246,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["gettargets",{"_index":1196,"title":{},"body":{"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{}}}],["gettargetsforuser",{"_index":1247,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["gettargetsforuser(target",{"_index":1253,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["getting",{"_index":2565,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":204,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"injectables/FirebaseAuthService.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuser(@getuser",{"_index":2345,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(uid",{"_index":1556,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["getuser(user",{"_index":2335,"title":{},"body":{"controllers/UserController.html":{}}}],["given",{"_index":1906,"title":{},"body":{"injectables/PeriodService.html":{}}}],["global",{"_index":669,"title":{},"body":{"modules/CoreModule.html":{},"modules/FirebaseModule.html":{}}}],["grade",{"_index":232,"title":{"classes/Grade.html":{}},"body":{"classes/AnswerGrade.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/QuestionGroupGrade.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["grade.entity",{"_index":252,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{}}}],["grade.entity.ts",{"_index":231,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["grade.entity.ts:5",{"_index":2097,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["grade.entity.ts:8",{"_index":233,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["grade.id",{"_index":1796,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["grade.repository",{"_index":279,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["grade.repository.ts",{"_index":245,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["grade.subject",{"_index":2280,"title":{},"body":{"classes/Subject.html":{}}}],["grade_id",{"_index":147,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["grade`(`id",{"_index":163,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{}}}],["gradeid",{"_index":685,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["gradeindex.ts",{"_index":1679,"title":{},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["gradeindex.ts:10",{"_index":1681,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex.ts:4",{"_index":1680,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex.ts:6",{"_index":1682,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex1624560625346",{"_index":1677,"title":{"classes/GradeIndex1624560625346.html":{}},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["graderepository",{"_index":591,"title":{"classes/GradeRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"coverage.html":{}}}],["grades",{"_index":1927,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{}}}],["grades.length",{"_index":1929,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["grades.map((grade",{"_index":1932,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["gradeservice",{"_index":586,"title":{"injectables/GradeService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/GradeService.html":{},"classes/PersonalQuestionGroup.html":{},"coverage.html":{},"overview.html":{}}}],["group",{"_index":869,"title":{},"body":{"classes/Exam.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["group.constants",{"_index":2141,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.constants.ts",{"_index":2474,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group.controller",{"_index":2112,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.controller.ts",{"_index":2063,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group.controller.ts:39",{"_index":2070,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:47",{"_index":2071,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:53",{"_index":2075,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:63",{"_index":2072,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:70",{"_index":2081,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:80",{"_index":2068,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:88",{"_index":2079,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:97",{"_index":2076,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.dto",{"_index":2085,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["group.dto.ts",{"_index":658,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:12",{"_index":791,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:16",{"_index":788,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:20",{"_index":790,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:24",{"_index":789,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:5",{"_index":662,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["group.dto.ts:8",{"_index":661,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{}}}],["group.dto.ts:9",{"_index":2252,"title":{},"body":{"classes/ReorderQuestionGroupDto.html":{}}}],["group.entity",{"_index":629,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["group.entity.ts",{"_index":2031,"title":{},"body":{"classes/QuestionGroup.html":{},"coverage.html":{}}}],["group.entity.ts:17",{"_index":2039,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:21",{"_index":2032,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:24",{"_index":2035,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:28",{"_index":2037,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:31",{"_index":2034,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:34",{"_index":2038,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:37",{"_index":2033,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:40",{"_index":2040,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.exam",{"_index":870,"title":{},"body":{"classes/Exam.html":{}}}],["group.module",{"_index":281,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{}}}],["group.module.ts",{"_index":2110,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.position",{"_index":2169,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.provider",{"_index":2117,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["group.provider.ts",{"_index":1911,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"coverage.html":{}}}],["group.provider.ts:11",{"_index":1914,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["group.provider.ts:18",{"_index":1916,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["group.questions",{"_index":2161,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.repository",{"_index":1925,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["group.repository.ts",{"_index":2120,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group.service",{"_index":2084,"title":{},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionService.html":{}}}],["group.service.ts",{"_index":2123,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group.service.ts:100",{"_index":2127,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:124",{"_index":2135,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:147",{"_index":2132,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:167",{"_index":2133,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:24",{"_index":2126,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:33",{"_index":2137,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:44",{"_index":2128,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:57",{"_index":2129,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:61",{"_index":2130,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:75",{"_index":2138,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group/controllers/question",{"_index":2062,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts",{"_index":1982,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts:33",{"_index":1987,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:41",{"_index":1990,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:50",{"_index":1993,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:57",{"_index":1996,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:64",{"_index":2005,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:73",{"_index":2002,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:82",{"_index":1998,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/dtos/copy",{"_index":657,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dtos/create",{"_index":746,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"coverage.html":{}}}],["group/dtos/find",{"_index":1416,"title":{},"body":{"classes/FindPersonalDto.html":{},"coverage.html":{}}}],["group/dtos/question",{"_index":2027,"title":{},"body":{"classes/QuestionFindDto.html":{},"coverage.html":{}}}],["group/dtos/reorder",{"_index":2247,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dtos/update",{"_index":2300,"title":{},"body":{"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group/entities/question",{"_index":628,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["group/entities/question.entity",{"_index":111,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{}}}],["group/entities/question.entity.ts",{"_index":1968,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["group/entities/question.entity.ts:12",{"_index":1973,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:15",{"_index":1972,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:18",{"_index":1976,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:21",{"_index":1971,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:25",{"_index":1975,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:28",{"_index":1970,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:31",{"_index":1969,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:9",{"_index":1977,"title":{},"body":{"classes/Question.html":{}}}],["group/interfaces/question",{"_index":2182,"title":{},"body":{"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["group/providers/personal",{"_index":1910,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"coverage.html":{}}}],["group/question",{"_index":280,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/question.constants.ts",{"_index":2475,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/repositories/question",{"_index":2119,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group/repositories/question.repository.ts",{"_index":2202,"title":{},"body":{"classes/QuestionRepository.html":{},"coverage.html":{}}}],["group/services/question",{"_index":2122,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group/services/question.service",{"_index":322,"title":{},"body":{"injectables/AnswerService.html":{}}}],["group/services/question.service.ts",{"_index":2204,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["group/services/question.service.ts:102",{"_index":2211,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:114",{"_index":2221,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:135",{"_index":2220,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:24",{"_index":2209,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:32",{"_index":2219,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:39",{"_index":2212,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:51",{"_index":2213,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:64",{"_index":2214,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:75",{"_index":2216,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:79",{"_index":2217,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:89",{"_index":2222,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group_id",{"_index":551,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExportationRepository.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["group_title",{"_index":1328,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["groupby",{"_index":1136,"title":{},"body":{"injectables/ExamService.html":{}}}],["groupby(agreed",{"_index":1158,"title":{},"body":{"injectables/ExamService.html":{}}}],["groupgrade",{"_index":1933,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["groupgrade.grade",{"_index":1935,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["groupgrades",{"_index":1930,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["groupid",{"_index":659,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["groupidpositionmap",{"_index":2166,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupidpositionmap.get(group.id",{"_index":2170,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupids",{"_index":2164,"title":{},"body":{"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["groupids.map((id",{"_index":2167,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groups",{"_index":831,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["groups.map(async",{"_index":2168,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupservice",{"_index":2208,"title":{},"body":{"injectables/QuestionService.html":{}}}],["grupo",{"_index":819,"title":{},"body":{"interfaces/CsvLine.html":{},"classes/ExportationRepository.html":{},"miscellaneous/enumerations.html":{}}}],["grupopessoal",{"_index":2548,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["guards/jwt.guard",{"_index":459,"title":{},"body":{"modules/AuthModule.html":{}}}],["gzip",{"_index":1634,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["hasfinishedexam",{"_index":888,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["hasgrade",{"_index":1001,"title":{},"body":{"interfaces/ExamAgreementUser.html":{}}}],["healthy",{"_index":368,"title":{},"body":{"controllers/AppController.html":{}}}],["helmet",{"_index":2505,"title":{},"body":{"dependencies.html":{}}}],["hooked",{"_index":250,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["host",{"_index":1719,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":1736,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["http:\\/\\/localhost:(3000|5000",{"_index":2636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":367,"title":{},"body":{"controllers/AppController.html":{}}}],["httpcode(200",{"_index":370,"title":{},"body":{"controllers/AppController.html":{}}}],["httpexception",{"_index":1718,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["httpexceptionfilter",{"_index":666,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{},"overview.html":{}}}],["https:\\/\\/(.*\\.|)herokuapp.com",{"_index":2635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iclassvalidatorexception",{"_index":1732,"title":{"interfaces/IClassValidatorException.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["id",{"_index":40,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":2414,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1085,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/QuestionService.html":{}}}],["idx_26862c959c4ecfc8f1b4a1a055",{"_index":573,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_2b38bb607ef3e86920e9bd0163",{"_index":545,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_31ef2b4d30675d0c15056b7f6e",{"_index":425,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["idx_4a22969058fa5105ad6bee583f",{"_index":1180,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_5cf4963ae12285cda6432d5a3a",{"_index":535,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_7540599d89cb2b6e17cc56d517",{"_index":572,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_914f18c8fbe52b10a6b276bc0c",{"_index":423,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_92374adc6b583e8cf659977e48",{"_index":539,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_952e252e7470ff78b18a9ec786",{"_index":420,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_988f784cc581e38b7ed4943006",{"_index":1176,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_a6235b5ef0939d8deaad755fc8",{"_index":424,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_af1604ea5493f65a6c8d70d98e",{"_index":1181,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_df58a2a413f5647f6411002cb2",{"_index":570,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_ec3a69def9f89a993b8f75ee4d",{"_index":148,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["idx_f2d35d0b9823628374f51931dd",{"_index":569,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["ientity",{"_index":1771,"title":{"interfaces/IEntity.html":{}},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["iexception",{"_index":1728,"title":{"interfaces/IException.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["ignoreexams",{"_index":1098,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"interfaces/FindExamByUserDto.html":{}}}],["ignoreexams.length",{"_index":1108,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ignoreexams.map((el",{"_index":1110,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ignoreexpiration",{"_index":1834,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image_alt",{"_index":2060,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["image_url",{"_index":2059,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["imagealt",{"_index":759,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["imageurl",{"_index":760,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["implemented",{"_index":1489,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["import",{"_index":29,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":272,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["in(groupids",{"_index":2165,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["in(questionids",{"_index":2242,"title":{},"body":{"injectables/QuestionService.html":{}}}],["inactive",{"_index":528,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index('ix_period_started_at_ended_at",{"_index":1871,"title":{},"body":{"classes/Period.html":{}}}],["index('ix_question_group_class_examid",{"_index":2042,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["index('ix_question_group_position",{"_index":2049,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["index('ix_question_group_position')@column({type",{"_index":2036,"title":{},"body":{"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["index('ix_question_position",{"_index":1979,"title":{},"body":{"classes/Question.html":{}}}],["index('ix_question_position')@column({type",{"_index":1974,"title":{},"body":{"classes/Question.html":{}}}],["infersubjects",{"_index":618,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["infra.constants",{"_index":2313,"title":{},"body":{"controllers/UploadController.html":{}}}],["infra/infra.module",{"_index":396,"title":{},"body":{"modules/AppModule.html":{}}}],["inframodule",{"_index":379,"title":{"modules/InfraModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["inherited",{"_index":98,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["initialize",{"_index":2594,"title":{},"body":{"index.html":{}}}],["inject",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{},"injectables/QuestionService.html":{}}}],["inject(forwardref",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/QuestionService.html":{}}}],["injectable",{"_index":295,"title":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":296,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":316,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["injectrepository(answergraderepository",{"_index":326,"title":{},"body":{"injectables/AnswerService.html":{}}}],["injectrepository(answerrepository",{"_index":324,"title":{},"body":{"injectables/AnswerService.html":{}}}],["injectrepository(authrepository",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(examagreementrepository",{"_index":985,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["injectrepository(examrepository",{"_index":1142,"title":{},"body":{"injectables/ExamService.html":{}}}],["injectrepository(examtargetrepository",{"_index":1258,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["injectrepository(graderepository",{"_index":1708,"title":{},"body":{"injectables/GradeService.html":{}}}],["injectrepository(periodrepository",{"_index":1894,"title":{},"body":{"injectables/PeriodService.html":{}}}],["injectrepository(professorrepository",{"_index":1965,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["injectrepository(questiongrouprepository",{"_index":1926,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["injectrepository(questionrepository",{"_index":2224,"title":{},"body":{"injectables/QuestionService.html":{}}}],["injectrepository(studentrepository",{"_index":2269,"title":{},"body":{"injectables/StudentService.html":{}}}],["injectrepository(userrepository",{"_index":2388,"title":{},"body":{"injectables/UserService.html":{}}}],["inner",{"_index":1080,"title":{},"body":{"classes/ExamRepository.html":{}}}],["innerjoinandselect('exam.agreements",{"_index":1114,"title":{},"body":{"classes/ExamRepository.html":{}}}],["innerjoinandselect('exam.period",{"_index":1118,"title":{},"body":{"classes/ExamRepository.html":{}}}],["innerjoinandselect('grade.subject",{"_index":1698,"title":{},"body":{"classes/GradeRepository.html":{}}}],["insert",{"_index":59,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["instalação",{"_index":2575,"title":{},"body":{"index.html":{}}}],["installations",{"_index":1431,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["instanceid",{"_index":1432,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["instanceof",{"_index":1695,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/QuestionGroupService.html":{}}}],["int",{"_index":86,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Grade.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Subject.html":{}}}],["intercept",{"_index":1852,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["intercept(_",{"_index":1853,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["interceptors/payload.interceptor",{"_index":672,"title":{},"body":{"modules/CoreModule.html":{}}}],["interface",{"_index":604,"title":{"interfaces/BatchUser.html":{},"interfaces/CsvLine.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{}},"body":{"interfaces/BatchUser.html":{},"interfaces/CsvLine.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["interfaces",{"_index":605,"title":{},"body":{"interfaces/BatchUser.html":{},"interfaces/CsvLine.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"overview.html":{}}}],["interfaces/batch",{"_index":323,"title":{},"body":{"injectables/AnswerService.html":{}}}],["interfaces/csv",{"_index":1318,"title":{},"body":{"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{}}}],["interfaces/exam",{"_index":939,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["interfaces/firebase",{"_index":1565,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{}}}],["interfaces/jwt",{"_index":1828,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["interfaces/user",{"_index":2387,"title":{},"body":{"injectables/UserService.html":{}}}],["interval",{"_index":1889,"title":{},"body":{"injectables/PeriodService.html":{}}}],["is_class",{"_index":1330,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["is_personal",{"_index":1332,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["isarray",{"_index":740,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isarray()@ispositive({each",{"_index":2249,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isarray()@validatenested({each",{"_index":792,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["isboolean",{"_index":719,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["iscpf",{"_index":799,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdate",{"_index":741,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdate()@type(undefined",{"_index":732,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdefined",{"_index":751,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["isenrollment",{"_index":801,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isenum",{"_index":694,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateUserDto.html":{}}}],["isenum(answertype",{"_index":701,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["isenum(examtargettype",{"_index":744,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isenum(userrole",{"_index":803,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(usertype",{"_index":806,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isleaf",{"_index":1215,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["isnotempty",{"_index":443,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UserDto.html":{}}}],["isoptional",{"_index":695,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/QuestionFindDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["isoptional()@isarray()@isenum(examtargettype",{"_index":736,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isoptional()@isboolean",{"_index":729,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@isboolean()@type(undefined",{"_index":715,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["isoptional()@isenum(answertype",{"_index":692,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["isoptional()@ispositive",{"_index":748,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@isstring()@isnotempty",{"_index":764,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["isoptional()@isurl",{"_index":766,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["isoptional()@min(1)@max(5",{"_index":689,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["ispositive",{"_index":660,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreementDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["ispositive()@isoptional",{"_index":2029,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["ispositive()@validateif(undefined",{"_index":686,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["ispositive({each",{"_index":2251,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["isprod",{"_index":2435,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":444,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/LoginDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UserDto.html":{}}}],["isstring()@isnotempty",{"_index":441,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["isstring()@length(password_min",{"_index":706,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["issuer",{"_index":2689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isurl",{"_index":785,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["item",{"_index":648,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":649,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["items",{"_index":221,"title":{},"body":{"controllers/AnswerController.html":{}}}],["ix_period_started_at_ended_at",{"_index":1878,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["ix_question_group_class_examid",{"_index":1683,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["ix_question_group_position",{"_index":567,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["ix_question_group_target",{"_index":1175,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["ix_question_position",{"_index":2201,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["join",{"_index":1075,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExportationRepository.html":{}}}],["jointable",{"_index":864,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{}}}],["json",{"_index":2676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.parse(process.env.firebase_admin",{"_index":2681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["juntar",{"_index":2044,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["jwt",{"_index":1827,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":2442,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfigkey",{"_index":455,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":1832,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":200,"title":{"injectables/JwtGuard.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AuthModule.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"injectables/JwtGuard.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtmodule",{"_index":453,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmoduleoptions",{"_index":1822,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwtpayload",{"_index":1812,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":451,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":150,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["last",{"_index":2143,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["last(arr",{"_index":2560,"title":{},"body":{"miscellaneous/functions.html":{}}}],["last(questiongroup.exam.groups)?.position",{"_index":2149,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["last(questions)?.position",{"_index":2226,"title":{},"body":{"injectables/QuestionService.html":{}}}],["lazy",{"_index":1943,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["left",{"_index":1074,"title":{},"body":{"classes/ExamRepository.html":{}}}],["leftjoin",{"_index":1102,"title":{},"body":{"classes/ExamRepository.html":{}}}],["leftjoin('exam_targets_exam_target",{"_index":1101,"title":{},"body":{"classes/ExamRepository.html":{}}}],["leftjoinandselect('exam.targets",{"_index":1120,"title":{},"body":{"classes/ExamRepository.html":{}}}],["legend",{"_index":258,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1847,"title":{},"body":{"classes/LoginDto.html":{}}}],["length(password_min",{"_index":1850,"title":{},"body":{"classes/LoginDto.html":{}}}],["lessthan",{"_index":1891,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthan(end",{"_index":1907,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthanorequal",{"_index":1892,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthanorequal(new",{"_index":1904,"title":{},"body":{"injectables/PeriodService.html":{}}}],["limit",{"_index":2501,"title":{},"body":{"dependencies.html":{}}}],["limit.config.ts",{"_index":2444,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["line.interface",{"_index":1319,"title":{},"body":{"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{}}}],["line.interface.ts",{"_index":817,"title":{},"body":{"interfaces/CsvLine.html":{},"coverage.html":{}}}],["literal",{"_index":972,"title":{},"body":{"injectables/ExamAgreementService.html":{},"interfaces/SoftDeleteResult.html":{}}}],["load",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["loadrelations",{"_index":1069,"title":{},"body":{"classes/ExamRepository.html":{}}}],["loadrelations(query",{"_index":1091,"title":{},"body":{"classes/ExamRepository.html":{}}}],["loadtargetmap",{"_index":1248,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["localmente",{"_index":2577,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":1138,"title":{},"body":{"injectables/ExamService.html":{},"dependencies.html":{}}}],["logger",{"_index":826,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('bootstrap",{"_index":2671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('httpexceptionfilter",{"_index":1716,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["logger.service",{"_index":1844,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger/logger.module",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":380,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["logging",{"_index":2663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":61,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{}}}],["login(@body",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto",{"_index":710,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["logindto",{"_index":430,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.login",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto:8",{"_index":708,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["lógica",{"_index":2571,"title":{},"body":{"index.html":{}}}],["machinelearning",{"_index":1433,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["manage",{"_index":2542,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manager",{"_index":421,"title":{},"body":{"classes/Auth1619445806509.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/enumerations.html":{}}}],["manager.dto.ts",{"_index":1210,"title":{},"body":{"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["manytomany",{"_index":865,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["manytomany(undefined",{"_index":1942,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["manytomany(undefined)@jointable",{"_index":850,"title":{},"body":{"classes/Exam.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":1667,"title":{},"body":{"classes/Grade.html":{}}}],["manytoone",{"_index":115,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{}}}],["manytoone(undefined",{"_index":83,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Subject.html":{}}}],["map",{"_index":1261,"title":{},"body":{"injectables/ExamTargetService.html":{},"injectables/PayloadInterceptor.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["map((_",{"_index":1193,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["map(questions.map((question",{"_index":335,"title":{},"body":{"injectables/AnswerService.html":{}}}],["match",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matrícula",{"_index":822,"title":{},"body":{"interfaces/CsvLine.html":{},"classes/ExportationRepository.html":{}}}],["max",{"_index":696,"title":{},"body":{"classes/CreateAnswerDto.html":{},"injectables/FirebaseStorageService.html":{},"miscellaneous/variables.html":{}}}],["max(5",{"_index":700,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["maxqueryexecutiontime",{"_index":2652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":1587,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["messaging",{"_index":1434,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["messaging.service",{"_index":1615,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["messaging.service.ts",{"_index":1582,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"coverage.html":{}}}],["messaging.service.ts:12",{"_index":1590,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["messaging.service.ts:7",{"_index":1585,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["metadata",{"_index":1635,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["migrations",{"_index":2658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":2666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mimetype",{"_index":1411,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["min",{"_index":697,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["min(1",{"_index":699,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["miscellaneous",{"_index":2528,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2579,"title":{},"body":{"index.html":{}}}],["models/exam",{"_index":1023,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["module",{"_index":254,"title":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["modulemetadata",{"_index":1532,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["modules",{"_index":256,"title":{"modules.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["morethanorequal",{"_index":1893,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morethanorequal(new",{"_index":1903,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morethanorequal(start",{"_index":1908,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morgan",{"_index":2508,"title":{},"body":{"dependencies.html":{}}}],["mustfindauth",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindauth(authdto",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindspecializeduser",{"_index":2366,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfindspecializeduser(userdto",{"_index":2377,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser",{"_index":2367,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser(userdto",{"_index":2379,"title":{},"body":{"injectables/UserService.html":{}}}],["mysql",{"_index":2644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":2510,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":22,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["naming",{"_index":2524,"title":{},"body":{"dependencies.html":{}}}],["namingstrategy",{"_index":2668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessário",{"_index":2580,"title":{},"body":{"index.html":{}}}],["needed",{"_index":2588,"title":{},"body":{"index.html":{}}}],["needs",{"_index":2675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["negócio",{"_index":2572,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1859,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["nestjs/common",{"_index":195,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"injectables/CustomLogger.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2485,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":454,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2293,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["nestjs/passport",{"_index":1810,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2311,"title":{},"body":{"controllers/UploadController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":199,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"classes/UpdateQuestionDto.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":275,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":50,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newexam",{"_index":1123,"title":{},"body":{"injectables/ExamService.html":{}}}],["newexam(dto",{"_index":1130,"title":{},"body":{"injectables/ExamService.html":{}}}],["next",{"_index":1855,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1862,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["node",{"_index":1226,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node.childs",{"_index":1239,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node.dfs(type",{"_index":1229,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.factory",{"_index":1057,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetTree.html":{}}}],["node.factory.ts",{"_index":1231,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["node.factory.ts:12",{"_index":1235,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{}}}],["node.model",{"_index":1236,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["node.model.ts",{"_index":1212,"title":{},"body":{"classes/ExamTargetNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["node.model.ts:13",{"_index":1219,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:6",{"_index":1216,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:7",{"_index":1217,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:9",{"_index":1222,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.type",{"_index":1237,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node_env",{"_index":1744,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["nota",{"_index":823,"title":{},"body":{"interfaces/CsvLine.html":{},"classes/ExportationRepository.html":{}}}],["notfoundexception",{"_index":315,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/PeriodService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["notfoundexception('nothing",{"_index":1394,"title":{},"body":{"injectables/ExportationService.html":{}}}],["notfoundexception('period",{"_index":1905,"title":{},"body":{"injectables/PeriodService.html":{}}}],["notfoundexception(answerdto",{"_index":342,"title":{},"body":{"injectables/AnswerService.html":{}}}],["notfoundexception(authdto",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(finddto",{"_index":1000,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["notfoundexception(this.root",{"_index":1287,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["null",{"_index":122,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAuthService.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["nullable",{"_index":91,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/ExamAgreement.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["number",{"_index":41,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"classes/FindPersonalDto.html":{},"classes/Grade.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"miscellaneous/variables.html":{}}}],["não",{"_index":771,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/ExportationRepository.html":{}}}],["o.type",{"_index":703,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["object",{"_index":2672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(new",{"_index":1934,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["object.values(examtargettype",{"_index":1205,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["objects",{"_index":1376,"title":{},"body":{"injectables/ExportationService.html":{},"dependencies.html":{}}}],["objectstocsv",{"_index":1375,"title":{},"body":{"injectables/ExportationService.html":{}}}],["objectstocsv(csvlines",{"_index":1389,"title":{},"body":{"injectables/ExportationService.html":{}}}],["obrigatória",{"_index":773,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["observable",{"_index":1858,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["observation",{"_index":887,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["omittype",{"_index":717,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["omittype(createquestiondto",{"_index":755,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["omittype(examagreementdto",{"_index":722,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["onetomany",{"_index":679,"title":{},"body":{"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":676,"title":{},"body":{"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["optional",{"_index":24,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"interfaces/CsvLine.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1439,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{}}}],["options.databaseurl",{"_index":1483,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.imports",{"_index":1524,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.inject",{"_index":1526,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.interface",{"_index":1616,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["options.interface.ts",{"_index":1529,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["options.storagebucket",{"_index":1485,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.usefactory",{"_index":1525,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["optionssuccessstatus",{"_index":2639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["origin",{"_index":2431,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["origin(origin",{"_index":2563,"title":{},"body":{"miscellaneous/functions.html":{}}}],["originalname",{"_index":1412,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["out",{"_index":270,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":2603,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.type",{"_index":1270,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["package",{"_index":2481,"title":{"dependencies.html":{}},"body":{}}],["padrão",{"_index":786,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["padrão'})@isboolean()@isoptional",{"_index":781,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["para",{"_index":2569,"title":{},"body":{"index.html":{}}}],["param",{"_index":190,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["param('examid",{"_index":219,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionGroupController.html":{}}}],["param('groupid",{"_index":2019,"title":{},"body":{"controllers/QuestionController.html":{}}}],["param('id",{"_index":226,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parsearraypipe",{"_index":191,"title":{},"body":{"controllers/AnswerController.html":{}}}],["parseint(process.env.db_port",{"_index":2651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.db_query_timeout",{"_index":2653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_max",{"_index":2699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_window_ms",{"_index":2697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseintpipe",{"_index":193,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["partialpath",{"_index":1228,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["partialtype",{"_index":2292,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["partialtype(createanswerdto",{"_index":2295,"title":{},"body":{"classes/UpdateAnswerDto.html":{}}}],["partialtype(createexamdto",{"_index":2299,"title":{},"body":{"classes/UpdateExamDto.html":{}}}],["partialtype(createquestiondto",{"_index":2301,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["partialtype(createquestiongroupdto",{"_index":2302,"title":{},"body":{"classes/UpdateQuestionGroupDto.html":{}}}],["partialuser",{"_index":2407,"title":{},"body":{"injectables/UserService.html":{}}}],["partialuser.type",{"_index":2408,"title":{},"body":{"injectables/UserService.html":{}}}],["passport",{"_index":1826,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":1823,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1830,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":57,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/LoginDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["password_max",{"_index":707,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_min",{"_index":1848,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":2006,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["patch()@apiokresponse({type",{"_index":2001,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["path",{"_index":1220,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"classes/UploaderService.html":{},"miscellaneous/typealiases.html":{}}}],["path}/${randombytes(32).tostring('hex",{"_index":1657,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["payload",{"_index":1821,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":1829,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":1814,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payload.uid",{"_index":1838,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payloadinterceptor",{"_index":667,"title":{"injectables/PayloadInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"injectables/PayloadInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["period",{"_index":530,"title":{"classes/Period.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"injectables/ExamService.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["period.entity",{"_index":1672,"title":{},"body":{"classes/Grade.html":{}}}],["period.id",{"_index":1700,"title":{},"body":{"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["period_id",{"_index":529,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["period`(`id",{"_index":556,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/PeriodIndex1624547816204.html":{}}}],["periodid",{"_index":832,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{}}}],["periodindex.ts",{"_index":1874,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["periodindex.ts:13",{"_index":1876,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex.ts:4",{"_index":1875,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex.ts:6",{"_index":1877,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex1624547816204",{"_index":1872,"title":{"classes/PeriodIndex1624547816204.html":{}},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["periodrepository",{"_index":593,"title":{"classes/PeriodRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"coverage.html":{}}}],["periodservice",{"_index":587,"title":{"injectables/PeriodService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/ExamService.html":{},"injectables/PeriodService.html":{},"coverage.html":{},"overview.html":{}}}],["personal",{"_index":547,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CreateQuestionGroupDto.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["personal.dto",{"_index":2145,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personal.dto.ts",{"_index":1417,"title":{},"body":{"classes/FindPersonalDto.html":{},"coverage.html":{}}}],["personal.dto.ts:5",{"_index":1418,"title":{},"body":{"classes/FindPersonalDto.html":{}}}],["personal.dto.ts:6",{"_index":1420,"title":{},"body":{"classes/FindPersonalDto.html":{}}}],["personalgroup",{"_index":2125,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personalgroups",{"_index":2172,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personalquestiongroup",{"_index":1909,"title":{"classes/PersonalQuestionGroup.html":{}},"body":{"classes/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["pessoal",{"_index":2547,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pick",{"_index":1530,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["picktype",{"_index":809,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["picktype(createauthdto",{"_index":814,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ping",{"_index":361,"title":{},"body":{"controllers/AppController.html":{}}}],["pode",{"_index":770,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["pong",{"_index":362,"title":{},"body":{"controllers/AppController.html":{}}}],["por",{"_index":780,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["port",{"_index":2650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["position",{"_index":566,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{}}}],["post",{"_index":188,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["post('/csv/:examid",{"_index":1299,"title":{},"body":{"controllers/ExportationController.html":{}}}],["post(':groupid",{"_index":2018,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post(':groupid')@apiokresponse({type",{"_index":1989,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post('batch/:examid",{"_index":218,"title":{},"body":{"controllers/AnswerController.html":{}}}],["post('batch/:examid')@apiokresponse({type",{"_index":178,"title":{},"body":{"controllers/AnswerController.html":{}}}],["post('health",{"_index":369,"title":{},"body":{"controllers/AppController.html":{}}}],["post('health')@httpcode(200",{"_index":365,"title":{},"body":{"controllers/AppController.html":{}}}],["post()@apiokresponse({type",{"_index":1007,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["post()@useinterceptors(undefined",{"_index":2306,"title":{},"body":{"controllers/UploadController.html":{}}}],["prefix",{"_index":170,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":149,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["primarygeneratedcolumn",{"_index":97,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["private",{"_index":325,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"controllers/ExportationController.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["process.env.admin_password",{"_index":48,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["process.env.db_database",{"_index":2649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":2645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_logging",{"_index":2664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":2647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.exported_file_prefix",{"_index":1385,"title":{},"body":{"injectables/ExportationService.html":{}}}],["process.env.firebase_admin",{"_index":2674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.firebase_bucket",{"_index":2678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":2687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":2642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.sentry_dsn",{"_index":2703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1746,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["professor",{"_index":1174,"title":{"classes/Professor.html":{}},"body":{"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["professor.entity",{"_index":1673,"title":{},"body":{"classes/Grade.html":{}}}],["professor_grade",{"_index":568,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Grade.html":{}}}],["professorgrades",{"_index":1940,"title":{},"body":{"classes/Professor.html":{}}}],["professorrepository",{"_index":595,"title":{"classes/ProfessorRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"coverage.html":{}}}],["professors",{"_index":1661,"title":{},"body":{"classes/Grade.html":{}}}],["professorservice",{"_index":588,"title":{"injectables/ProfessorService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["programas",{"_index":2582,"title":{},"body":{"index.html":{}}}],["projectmanagement",{"_index":1435,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["promise",{"_index":26,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/UploaderService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":1262,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["promise.all",{"_index":338,"title":{},"body":{"injectables/AnswerService.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/QuestionGroupService.html":{}}}],["promise.all(targets.map(target",{"_index":1177,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["properties",{"_index":73,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{}}}],["propriedade",{"_index":776,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["provide",{"_index":1521,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/InfraModule.html":{}}}],["provider",{"_index":1518,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["providers",{"_index":261,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/exam",{"_index":1054,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["providers/firebase",{"_index":1519,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["providers/personal",{"_index":2116,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["public",{"_index":12,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseStorageService.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["publicfile",{"_index":1402,"title":{},"body":{"injectables/ExportationService.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{}}}],["put",{"_index":192,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":186,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put(':id')@apiokresponse({type",{"_index":935,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put()@apiokresponse({type",{"_index":2066,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["q",{"_index":1350,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["q.group_id",{"_index":1351,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["q.id",{"_index":1333,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["q.statement",{"_index":1334,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["qb",{"_index":2231,"title":{},"body":{"injectables/QuestionService.html":{}}}],["qb.where(`${qb.alias}.groupid",{"_index":2233,"title":{},"body":{"injectables/QuestionService.html":{}}}],["qg",{"_index":1348,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["qg.class",{"_index":1329,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["qg.exam_id",{"_index":1349,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["qg.id",{"_index":1326,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["qg.personal",{"_index":1331,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["qg.title",{"_index":1327,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["query",{"_index":1094,"title":{},"body":{"classes/ExamRepository.html":{},"classes/GradeRepository.html":{},"controllers/QuestionController.html":{}}}],["query.andwhere('exam.id",{"_index":1109,"title":{},"body":{"classes/ExamRepository.html":{}}}],["query.getmany",{"_index":1702,"title":{},"body":{"classes/GradeRepository.html":{}}}],["query.innerjoin('grade.professors",{"_index":1697,"title":{},"body":{"classes/GradeRepository.html":{}}}],["query.innerjoin('grade.students",{"_index":1696,"title":{},"body":{"classes/GradeRepository.html":{}}}],["queryrunner",{"_index":17,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/ExportationRepository.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["queryrunner.connect",{"_index":1323,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["queryrunner.manager.query",{"_index":44,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.manager.query('delete",{"_index":65,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.query",{"_index":293,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExportationRepository.html":{},"interfaces/IEntity.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["queryrunner.query(\"alter",{"_index":152,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query(\"create",{"_index":135,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query(\"drop",{"_index":165,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query('alter",{"_index":292,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["queryrunner.query('delete",{"_index":1797,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["queryrunner.query('drop",{"_index":426,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{}}}],["queryrunner.query('insert",{"_index":1178,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{}}}],["querytarget",{"_index":1274,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["querytarget(target",{"_index":1278,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["question",{"_index":76,"title":{"classes/Question.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ExportationRepository.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["question.constants",{"_index":1923,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["question.dto",{"_index":754,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{}}}],["question.dto.ts",{"_index":758,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:14",{"_index":783,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:18",{"_index":767,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:23",{"_index":765,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:32",{"_index":782,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:35",{"_index":763,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:5",{"_index":2248,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.dto.ts:9",{"_index":2250,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.entity",{"_index":2041,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["question.group",{"_index":2050,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["question.groupid",{"_index":2236,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.id",{"_index":336,"title":{},"body":{"injectables/AnswerService.html":{}}}],["question.position",{"_index":2237,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.service",{"_index":2142,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["question_group",{"_index":546,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExportationRepository.html":{},"classes/GradeIndex1624560625346.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["question_group_grade",{"_index":565,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["question_group`(`id",{"_index":552,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["question_id",{"_index":146,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/ExportationRepository.html":{}}}],["question_statement",{"_index":1335,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["question`(`id",{"_index":161,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["questioncontroller",{"_index":1981,"title":{"controllers/QuestionController.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questionfinddto",{"_index":1992,"title":{"classes/QuestionFindDto.html":{}},"body":{"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questiongroup",{"_index":627,"title":{"classes/QuestionGroup.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongroup.exam",{"_index":2146,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.examid",{"_index":2155,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.position",{"_index":2148,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.ts",{"_index":2055,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroup.ts:12",{"_index":2057,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:4",{"_index":2056,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:6",{"_index":2058,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup1620179231630",{"_index":2053,"title":{"classes/QuestionGroup1620179231630.html":{}},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroup:17",{"_index":2104,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:21",{"_index":2098,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:24",{"_index":2101,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:28",{"_index":2102,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:31",{"_index":2100,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:34",{"_index":2103,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:37",{"_index":2099,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:40",{"_index":2105,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroupcontroller",{"_index":2061,"title":{"controllers/QuestionGroupController.html":{}},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questiongroupgrade",{"_index":1920,"title":{"classes/QuestionGroupGrade.html":{}},"body":{"classes/PersonalQuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["questiongroupmodule",{"_index":267,"title":{"modules/QuestionGroupModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["questiongroupnotfound",{"_index":2140,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongrouprelations",{"_index":1922,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongrouprepository",{"_index":1913,"title":{"classes/QuestionGroupRepository.html":{}},"body":{"classes/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["questiongroupservice",{"_index":2082,"title":{"injectables/QuestionGroupService.html":{}},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["questiongrouptarget.ts",{"_index":2177,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["questiongrouptarget.ts:25",{"_index":2179,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget.ts:4",{"_index":2178,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget.ts:6",{"_index":2180,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget1621992475274",{"_index":2175,"title":{"classes/QuestionGroupTarget1621992475274.html":{}},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["questiongroupuser",{"_index":2181,"title":{"interfaces/QuestionGroupUser.html":{}},"body":{"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["questiongroup})@apinotfoundresponse",{"_index":2067,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["questionid",{"_index":77,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/CreateAnswerDto.html":{}}}],["questionids",{"_index":2241,"title":{},"body":{"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["questionids.map((id",{"_index":2244,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionimage.ts",{"_index":2185,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionimage.ts:14",{"_index":2187,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:4",{"_index":2186,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:6",{"_index":2188,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage1620477869366",{"_index":2183,"title":{"classes/QuestionImage1620477869366.html":{}},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionmap",{"_index":333,"title":{},"body":{"injectables/AnswerService.html":{}}}],["questionmap.get(answerdto.questionid",{"_index":341,"title":{},"body":{"injectables/AnswerService.html":{}}}],["questionnotfound",{"_index":2223,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionposition.ts",{"_index":2191,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionposition.ts:11",{"_index":2193,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:4",{"_index":2192,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:6",{"_index":2194,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition1620488935141",{"_index":2189,"title":{"classes/QuestionPosition1620488935141.html":{}},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionpositionidx.ts",{"_index":2197,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["questionpositionidx.ts:14",{"_index":2199,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx.ts:4",{"_index":2198,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx.ts:6",{"_index":2200,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx1620563708532",{"_index":2195,"title":{"classes/QuestionPositionIdx1620563708532.html":{}},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["questionpositionmap",{"_index":2243,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionpositionmap.get(question.id",{"_index":2245,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionrepository",{"_index":2114,"title":{"classes/QuestionRepository.html":{}},"body":{"modules/QuestionGroupModule.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questions",{"_index":329,"title":{},"body":{"injectables/AnswerService.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["questions.dto",{"_index":2014,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["questions.dto.ts",{"_index":747,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"coverage.html":{}}}],["questions.dto.ts:16",{"_index":749,"title":{},"body":{"classes/CreateQuestion.html":{}}}],["questions.dto.ts:25",{"_index":795,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["questions.map((question",{"_index":2240,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionservice",{"_index":303,"title":{"injectables/QuestionService.html":{}},"body":{"injectables/AnswerService.html":{},"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["question})@apinotfoundresponse",{"_index":1995,"title":{},"body":{"controllers/QuestionController.html":{}}}],["questão",{"_index":769,"title":{},"body":{"classes/CreateQuestionDto.html":{},"interfaces/CsvLine.html":{},"classes/ExportationRepository.html":{}}}],["questões",{"_index":821,"title":{},"body":{"interfaces/CsvLine.html":{},"classes/ExportationRepository.html":{}}}],["randombytes",{"_index":1650,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["rate",{"_index":2500,"title":{},"body":{"dependencies.html":{}}}],["ratelimit",{"_index":2700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ratelimitconfig",{"_index":2445,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ratelimitconfigkey",{"_index":2446,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["raw",{"_index":2256,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["read",{"_index":2543,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":217,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"controllers/ExportationController.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["readonlymap",{"_index":334,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamTargetService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["record",{"_index":2285,"title":{},"body":{"interfaces/SwaggerOptions.html":{}}}],["reduce",{"_index":1931,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["references",{"_index":157,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["reflect",{"_index":2515,"title":{},"body":{"dependencies.html":{}}}],["regexp",{"_index":2634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras",{"_index":2637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('sentry",{"_index":2701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(ratelimitconfigkey",{"_index":2695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regular",{"_index":422,"title":{},"body":{"classes/Auth1619445806509.html":{},"miscellaneous/enumerations.html":{}}}],["reject",{"_index":1263,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["reject(e",{"_index":1266,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["relations",{"_index":999,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["remoteconfig",{"_index":1436,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["remove",{"_index":172,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["remove(@param('id",{"_index":228,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["remove(id",{"_index":181,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorder",{"_index":1985,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorder(reorderquesitondto",{"_index":1999,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorder(reorderquestiongroupdto",{"_index":2077,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["reorder(undefined",{"_index":2134,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorderquesitondto",{"_index":2003,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorderquestiondto",{"_index":2000,"title":{"classes/ReorderQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"coverage.html":{}}}],["reorderquestiongroupdto",{"_index":2078,"title":{"classes/ReorderQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["replace(/\\//gu",{"_index":1383,"title":{},"body":{"injectables/ExportationService.html":{}}}],["repositories/answer",{"_index":278,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["repositories/answer.repository",{"_index":277,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["repositories/auth.repository",{"_index":458,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["repositories/exam",{"_index":982,"title":{},"body":{"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["repositories/exam.repository",{"_index":1047,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{}}}],["repositories/grade.repository",{"_index":592,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/GradeService.html":{}}}],["repositories/period.repository",{"_index":594,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/PeriodService.html":{}}}],["repositories/professor.repository",{"_index":596,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{}}}],["repositories/question",{"_index":1924,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["repositories/question.repository",{"_index":2115,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionService.html":{}}}],["repositories/student.repository",{"_index":598,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{}}}],["repositories/user.repository",{"_index":2355,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":967,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExportationService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["request",{"_index":1723,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["request.body",{"_index":1769,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["request.url",{"_index":1742,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["request.user",{"_index":2685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('bcryptjs",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["require('faker",{"_index":1779,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["require('lodash",{"_index":1257,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["required",{"_index":761,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["reset",{"_index":269,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve(_.clonedeep(this._targetmap",{"_index":1264,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["response",{"_index":1724,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["response.status(status).send(ex",{"_index":1770,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["result",{"_index":39,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.interface",{"_index":319,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{}}}],["result.interface.ts",{"_index":2255,"title":{},"body":{"interfaces/SoftDeleteResult.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["result.model",{"_index":1024,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["result.model.ts",{"_index":1060,"title":{},"body":{"classes/ExamPersonalResult.html":{},"coverage.html":{}}}],["result.model.ts:4",{"_index":1063,"title":{},"body":{"classes/ExamPersonalResult.html":{}}}],["result.model.ts:5",{"_index":1065,"title":{},"body":{"classes/ExamPersonalResult.html":{}}}],["result.model.ts:6",{"_index":1064,"title":{},"body":{"classes/ExamPersonalResult.html":{}}}],["result.push(...personalgroups",{"_index":2174,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["result.raw.affectedrows",{"_index":1163,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["result?.length",{"_index":47,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["results",{"_index":68,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":222,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":2517,"title":{},"body":{"dependencies.html":{}}}],["rodar",{"_index":2576,"title":{},"body":{"index.html":{}}}],["role",{"_index":63,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["role.enum",{"_index":632,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["role.enum.ts",{"_index":2538,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["root",{"_index":1273,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["runontransactioncomplete",{"_index":2385,"title":{},"body":{"injectables/UserService.html":{}}}],["runontransactioncomplete((e",{"_index":2393,"title":{},"body":{"injectables/UserService.html":{}}}],["rxjs",{"_index":1860,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1861,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["salt",{"_index":55,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["schema",{"_index":1200,"title":{},"body":{"controllers/ExamTargetController.html":{},"injectables/ExamTargetNodeFactory.html":{}}}],["schema.childs?.map((node",{"_index":1240,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["schema.type",{"_index":1238,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["scope",{"_index":827,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["scope.transient",{"_index":828,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["score",{"_index":78,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/CreateAnswerDto.html":{},"classes/ExportationRepository.html":{}}}],["se",{"_index":774,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/ExportationRepository.html":{}}}],["secret",{"_index":2686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1835,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["securityrules",{"_index":1437,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["seedauxiliary1.ts",{"_index":1773,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seedauxiliary1.ts:17",{"_index":2254,"title":{},"body":{"classes/SeedAuxiliary1624412129413.html":{}}}],["seedauxiliary1.ts:90",{"_index":2253,"title":{},"body":{"classes/SeedAuxiliary1624412129413.html":{}}}],["seedauxiliary1624412129413",{"_index":1784,"title":{"classes/SeedAuxiliary1624412129413.html":{}},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["select",{"_index":45,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/ExamRepository.html":{},"classes/ExportationRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{}}}],["selectquerybuilder",{"_index":1092,"title":{},"body":{"classes/ExamRepository.html":{}}}],["send.dto",{"_index":1653,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["send.dto.ts",{"_index":1408,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["sendtodevice",{"_index":1584,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["sendtodevice(token",{"_index":1586,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["sendtosentry",{"_index":1755,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["senhaforte",{"_index":2705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sentry",{"_index":1726,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["sentry.captureexception(exception",{"_index":1759,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["sentry/node",{"_index":1727,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"dependencies.html":{}}}],["sentry/tracing",{"_index":2490,"title":{},"body":{"dependencies.html":{}}}],["sentryconfig",{"_index":2448,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sentryinit",{"_index":2472,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sentryinit(config",{"_index":2559,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ser",{"_index":772,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["service",{"_index":1305,"title":{},"body":{"controllers/ExportationController.html":{},"controllers/UploadController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["services",{"_index":1618,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["services/exam",{"_index":940,"title":{},"body":{"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{}}}],["services/exam.service",{"_index":1020,"title":{},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{}}}],["services/firebase",{"_index":1614,"title":{},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{}}}],["services/grade.service",{"_index":599,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/period.service",{"_index":600,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/professor.service",{"_index":601,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/question",{"_index":2083,"title":{},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{}}}],["services/question.service",{"_index":2013,"title":{},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{}}}],["services/student.service",{"_index":602,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/uploader.service",{"_index":1804,"title":{},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{}}}],["set",{"_index":54,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["setexamandposition",{"_index":2124,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["setexamandposition(questiongroup",{"_index":2136,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["seu",{"_index":2583,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":2688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sim':'não",{"_index":1355,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["sistema",{"_index":2573,"title":{},"body":{"index.html":{}}}],["size",{"_index":1413,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["snakenamingstrategy",{"_index":2669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["softdeleteresult",{"_index":317,"title":{"interfaces/SoftDeleteResult.html":{}},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["sort((a",{"_index":1936,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["sortitems",{"_index":833,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["specialized",{"_index":2361,"title":{},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/.../1620299822480",{"_index":2617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1622326106015",{"_index":2632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1622378888497",{"_index":2615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1624416663575",{"_index":2619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../answer",{"_index":2530,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":2626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../casl",{"_index":2532,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../core.constants.ts",{"_index":2620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":2554,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":2551,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../database.config.ts",{"_index":2618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exam",{"_index":2534,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../exam.constants.ts",{"_index":2621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exportation",{"_index":2536,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../firebase",{"_index":2610,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../firebase.config.ts",{"_index":2623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase.constants.ts",{"_index":2622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":2616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../infra.constants.ts",{"_index":2633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":2552,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.config.ts",{"_index":2625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../last.util.ts",{"_index":2553,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2550,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../question",{"_index":2627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../question.constants.ts",{"_index":2628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rate",{"_index":2629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sentry.config.ts",{"_index":2630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":2631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":2537,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/answer/answer.controller.ts",{"_index":169,"title":{},"body":{"controllers/AnswerController.html":{},"coverage.html":{}}}],["src/answer/answer.controller.ts:30",{"_index":179,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:43",{"_index":187,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:51",{"_index":183,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.module.ts",{"_index":271,"title":{},"body":{"modules/AnswerModule.html":{}}}],["src/answer/answer.service.ts",{"_index":297,"title":{},"body":{"injectables/AnswerService.html":{},"coverage.html":{}}}],["src/answer/answer.service.ts:17",{"_index":305,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:28",{"_index":308,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:66",{"_index":309,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:70",{"_index":311,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:79",{"_index":314,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:87",{"_index":312,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/dto/create",{"_index":683,"title":{},"body":{"classes/CreateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/dto/update",{"_index":2291,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/entities/answer",{"_index":230,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Grade.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity",{"_index":1978,"title":{},"body":{"classes/Question.html":{}}}],["src/answer/entities/answer.entity.ts",{"_index":70,"title":{},"body":{"classes/Answer.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity.ts:12",{"_index":93,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:15",{"_index":96,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:18",{"_index":87,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:21",{"_index":89,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:24",{"_index":84,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:27",{"_index":88,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/enums/answer",{"_index":2539,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/answer/interfaces/batch",{"_index":606,"title":{},"body":{"interfaces/BatchUser.html":{},"coverage.html":{}}}],["src/answer/repositories/answer",{"_index":244,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["src/answer/repositories/answer.repository.ts",{"_index":284,"title":{},"body":{"classes/AnswerRepository.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.constants.ts",{"_index":2423,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.module.ts",{"_index":452,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":2382,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:23",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/casl/casl.module.ts",{"_index":653,"title":{},"body":{"modules/CaslModule.html":{}}}],["src/auth/casl/enums/casl",{"_index":2541,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/casl/factories/casl",{"_index":609,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/controllers/auth.controller.ts",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/controllers/auth.controller.ts:12",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/dtos/auth.dto.ts",{"_index":440,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/auth.dto.ts:6",{"_index":442,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dtos/create",{"_index":704,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts",{"_index":1845,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts:8",{"_index":1846,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":405,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts:10",{"_index":409,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:13",{"_index":410,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:7",{"_index":408,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/guards/jwt.guard",{"_index":201,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/UploadController.html":{}}}],["src/auth/guards/jwt.guard.ts",{"_index":1808,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/interfaces/jwt",{"_index":1813,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/repositories/auth.repository.ts",{"_index":465,"title":{},"body":{"classes/AuthRepository.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1815,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:14",{"_index":1818,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:27",{"_index":1820,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auxiliary/auxiliary.module",{"_index":1058,"title":{},"body":{"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["src/auxiliary/auxiliary.module.ts",{"_index":590,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["src/auxiliary/entities/course.entity.ts",{"_index":673,"title":{},"body":{"classes/Course.html":{},"coverage.html":{}}}],["src/auxiliary/entities/course.entity.ts:11",{"_index":678,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:14",{"_index":677,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:8",{"_index":675,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/grade.entity",{"_index":240,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/QuestionGroupGrade.html":{}}}],["src/auxiliary/entities/grade.entity.ts",{"_index":1660,"title":{},"body":{"classes/Grade.html":{},"coverage.html":{}}}],["src/auxiliary/entities/grade.entity.ts:20",{"_index":1671,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:23",{"_index":1666,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:26",{"_index":1670,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:29",{"_index":1665,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:32",{"_index":1664,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:36",{"_index":1669,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:40",{"_index":1668,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/period.entity",{"_index":863,"title":{},"body":{"classes/Exam.html":{}}}],["src/auxiliary/entities/period.entity.ts",{"_index":1863,"title":{},"body":{"classes/Period.html":{},"coverage.html":{}}}],["src/auxiliary/entities/period.entity.ts:12",{"_index":1868,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:15",{"_index":1865,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:18",{"_index":1866,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:9",{"_index":1867,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/professor.entity",{"_index":1917,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["src/auxiliary/entities/professor.entity.ts",{"_index":1939,"title":{},"body":{"classes/Professor.html":{},"coverage.html":{}}}],["src/auxiliary/entities/professor.entity.ts:10",{"_index":1951,"title":{},"body":{"classes/Professor.html":{}}}],["src/auxiliary/entities/professor.entity.ts:8",{"_index":1944,"title":{},"body":{"classes/Professor.html":{}}}],["src/auxiliary/entities/student.entity",{"_index":1918,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["src/auxiliary/entities/student.entity.ts",{"_index":2258,"title":{},"body":{"classes/Student.html":{},"coverage.html":{}}}],["src/auxiliary/entities/student.entity.ts:10",{"_index":2261,"title":{},"body":{"classes/Student.html":{}}}],["src/auxiliary/entities/student.entity.ts:8",{"_index":2260,"title":{},"body":{"classes/Student.html":{}}}],["src/auxiliary/entities/subject.entity.ts",{"_index":2271,"title":{},"body":{"classes/Subject.html":{},"coverage.html":{}}}],["src/auxiliary/entities/subject.entity.ts:10",{"_index":2273,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:13",{"_index":2277,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:16",{"_index":2275,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:19",{"_index":2274,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:22",{"_index":2276,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/repositories/grade.repository.ts",{"_index":1684,"title":{},"body":{"classes/GradeRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/grade.repository.ts:11",{"_index":1687,"title":{},"body":{"classes/GradeRepository.html":{}}}],["src/auxiliary/repositories/period.repository.ts",{"_index":1879,"title":{},"body":{"classes/PeriodRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/professor.repository.ts",{"_index":1953,"title":{},"body":{"classes/ProfessorRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/student.repository.ts",{"_index":2263,"title":{},"body":{"classes/StudentRepository.html":{},"coverage.html":{}}}],["src/auxiliary/services/grade.service",{"_index":1919,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["src/auxiliary/services/grade.service.ts",{"_index":1703,"title":{},"body":{"injectables/GradeService.html":{},"coverage.html":{}}}],["src/auxiliary/services/grade.service.ts:15",{"_index":1706,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/grade.service.ts:19",{"_index":1707,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/grade.service.ts:9",{"_index":1705,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/period.service",{"_index":1139,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/auxiliary/services/period.service.ts",{"_index":1881,"title":{},"body":{"injectables/PeriodService.html":{},"coverage.html":{}}}],["src/auxiliary/services/period.service.ts:14",{"_index":1886,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:27",{"_index":1887,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:42",{"_index":1890,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:8",{"_index":1885,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/professor.service",{"_index":2383,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/professor.service.ts",{"_index":1955,"title":{},"body":{"injectables/ProfessorService.html":{},"coverage.html":{}}}],["src/auxiliary/services/professor.service.ts:11",{"_index":1957,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:18",{"_index":1959,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:24",{"_index":1962,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/student.service",{"_index":2384,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/student.service.ts",{"_index":2265,"title":{},"body":{"injectables/StudentService.html":{},"coverage.html":{}}}],["src/auxiliary/services/student.service.ts:11",{"_index":2266,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:18",{"_index":2267,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:24",{"_index":2268,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/types/user",{"_index":1421,"title":{},"body":{"classes/FindPersonalDto.html":{},"miscellaneous/typealiases.html":{}}}],["src/config/cors.config.ts",{"_index":2430,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/config/database.config.ts",{"_index":2436,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/firebase.config.ts",{"_index":2438,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/index.ts",{"_index":2440,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/interfaces/swagger.interface.ts",{"_index":2282,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{}}}],["src/config/jwt.config.ts",{"_index":2441,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/rate",{"_index":2443,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/sentry.config.ts",{"_index":2447,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.config.ts",{"_index":2449,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controllers/app.controller.ts",{"_index":360,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/controllers/app.controller.ts:12",{"_index":366,"title":{},"body":{"controllers/AppController.html":{}}}],["src/controllers/app.controller.ts:6",{"_index":364,"title":{},"body":{"controllers/AppController.html":{}}}],["src/core/core.constants.ts",{"_index":2452,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":668,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/decorators/is",{"_index":2454,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/entities/ff.entity",{"_index":411,"title":{},"body":{"classes/Auth.html":{},"classes/ExamTarget.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["src/core/entities/ff.entity.ts",{"_index":1403,"title":{},"body":{"classes/FFEntity.html":{},"coverage.html":{}}}],["src/core/entities/ff.entity.ts:6",{"_index":1404,"title":{},"body":{"classes/FFEntity.html":{}}}],["src/core/entities/timestamp.entity.ts",{"_index":2286,"title":{},"body":{"classes/TimestampEntity.html":{},"coverage.html":{}}}],["src/core/entities/timestamp.entity.ts:10",{"_index":2288,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:13",{"_index":2290,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:16",{"_index":2289,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/filters/http",{"_index":1711,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["src/core/interceptors/payload.interceptor.ts",{"_index":1851,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/payload.interceptor.ts:12",{"_index":1857,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["src/core/interfaces/soft",{"_index":318,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["src/core/utils/last.util",{"_index":2144,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["src/core/utils/last.util.ts",{"_index":2456,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/migrations",{"_index":2667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/migrations/1619445806509",{"_index":414,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["src/database/migrations/1620179231630",{"_index":2054,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["src/database/migrations/1620299822480",{"_index":6,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1620477175799",{"_index":513,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["src/database/migrations/1620477869366",{"_index":2184,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["src/database/migrations/1620478273991",{"_index":881,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["src/database/migrations/1620488935141",{"_index":2190,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["src/database/migrations/1620563708532",{"_index":2196,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["src/database/migrations/1621036457247",{"_index":1289,"title":{},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["src/database/migrations/1621992475274",{"_index":2176,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["src/database/migrations/1622326106015",{"_index":1168,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1622332886234",{"_index":909,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["src/database/migrations/1622334780336",{"_index":918,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["src/database/migrations/1622378888497",{"_index":1186,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1622417032753",{"_index":950,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["src/database/migrations/1622421768424",{"_index":127,"title":{},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["src/database/migrations/1624416663574",{"_index":563,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["src/database/migrations/1624416663575",{"_index":1772,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1624547816204",{"_index":1873,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["src/database/migrations/1624560625346",{"_index":1678,"title":{},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["src/database/migrations/1624750140569",{"_index":287,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"coverage.html":{}}}],["src/exam/controllers/exam",{"_index":924,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["src/exam/controllers/exam.controller.ts",{"_index":1004,"title":{},"body":{"controllers/ExamController.html":{},"coverage.html":{}}}],["src/exam/controllers/exam.controller.ts:31",{"_index":1008,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:37",{"_index":1010,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:43",{"_index":1016,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:48",{"_index":1012,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:53",{"_index":1019,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:61",{"_index":1017,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/dtos/create",{"_index":712,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"coverage.html":{}}}],["src/exam/dtos/exam",{"_index":945,"title":{},"body":{"classes/ExamAgreementDto.html":{},"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["src/exam/dtos/find",{"_index":1414,"title":{},"body":{"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["src/exam/dtos/update",{"_index":2296,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["src/exam/entities/exam",{"_index":108,"title":{},"body":{"classes/Answer.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/User.html":{},"coverage.html":{}}}],["src/exam/entities/exam.entity",{"_index":1869,"title":{},"body":{"classes/Period.html":{},"classes/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{}}}],["src/exam/entities/exam.entity.ts",{"_index":829,"title":{},"body":{"classes/Exam.html":{},"coverage.html":{}}}],["src/exam/entities/exam.entity.ts:20",{"_index":852,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:23",{"_index":841,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:26",{"_index":846,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:29",{"_index":842,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:32",{"_index":840,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:35",{"_index":848,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:38",{"_index":845,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:42",{"_index":851,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:45",{"_index":844,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:48",{"_index":843,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:51",{"_index":837,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:54",{"_index":857,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:58",{"_index":860,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:62",{"_index":862,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/enums/exam",{"_index":2544,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/exam/exam.constants.ts",{"_index":2459,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/exam/exam.module",{"_index":282,"title":{},"body":{"modules/AnswerModule.html":{}}}],["src/exam/exam.module.ts",{"_index":1043,"title":{},"body":{"modules/ExamModule.html":{}}}],["src/exam/factories/exam",{"_index":1230,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["src/exam/interfaces/exam",{"_index":202,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamUser.html":{},"coverage.html":{}}}],["src/exam/models/exam",{"_index":1059,"title":{},"body":{"classes/ExamPersonalResult.html":{},"classes/ExamTargetNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/exam/providers/exam",{"_index":1271,"title":{},"body":{"injectables/ExamTargetTree.html":{},"coverage.html":{}}}],["src/exam/repositories/exam",{"_index":956,"title":{},"body":{"classes/ExamAgreementRepository.html":{},"classes/ExamTargetRepository.html":{},"coverage.html":{}}}],["src/exam/repositories/exam.repository.ts",{"_index":1066,"title":{},"body":{"classes/ExamRepository.html":{},"coverage.html":{}}}],["src/exam/repositories/exam.repository.ts:25",{"_index":1072,"title":{},"body":{"classes/ExamRepository.html":{}}}],["src/exam/repositories/exam.repository.ts:55",{"_index":1090,"title":{},"body":{"classes/ExamRepository.html":{}}}],["src/exam/repositories/exam.repository.ts:73",{"_index":1093,"title":{},"body":{"classes/ExamRepository.html":{}}}],["src/exam/services/exam",{"_index":320,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["src/exam/services/exam.service",{"_index":2139,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["src/exam/services/exam.service.ts",{"_index":1121,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{}}}],["src/exam/services/exam.service.ts:19",{"_index":1135,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:24",{"_index":1125,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:33",{"_index":1131,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:46",{"_index":1126,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:53",{"_index":1127,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:57",{"_index":1128,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:69",{"_index":1129,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:88",{"_index":1134,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:97",{"_index":1133,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exportation/enums/exportation",{"_index":2545,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/exportation/exportation.controller.ts",{"_index":1296,"title":{},"body":{"controllers/ExportationController.html":{},"coverage.html":{}}}],["src/exportation/exportation.controller.ts:23",{"_index":1300,"title":{},"body":{"controllers/ExportationController.html":{}}}],["src/exportation/exportation.module.ts",{"_index":1310,"title":{},"body":{"modules/ExportationModule.html":{}}}],["src/exportation/exportation.repository.ts",{"_index":1314,"title":{},"body":{"classes/ExportationRepository.html":{},"coverage.html":{}}}],["src/exportation/exportation.repository.ts:6",{"_index":1317,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["src/exportation/exportation.service.ts",{"_index":1362,"title":{},"body":{"injectables/ExportationService.html":{},"coverage.html":{}}}],["src/exportation/exportation.service.ts:11",{"_index":1367,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/exportation.service.ts:17",{"_index":1374,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/exportation.service.ts:25",{"_index":1370,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/exportation.service.ts:31",{"_index":1371,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/interfaces/csv",{"_index":816,"title":{},"body":{"interfaces/CsvLine.html":{},"coverage.html":{}}}],["src/firebase",{"_index":1379,"title":{},"body":{"injectables/ExportationService.html":{},"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["src/firebase/dtos/firebase",{"_index":1639,"title":{},"body":{"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["src/firebase/firebase",{"_index":1424,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.constants.ts",{"_index":2464,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.module.ts",{"_index":1611,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:31",{"_index":1612,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:41",{"_index":1613,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/interfaces/firebase",{"_index":1528,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["src/firebase/services/firebase",{"_index":1542,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["src/firebase/types/firebase",{"_index":2613,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/infra/controllers/upload.controller.ts",{"_index":2303,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{}}}],["src/infra/controllers/upload.controller.ts:23",{"_index":2307,"title":{},"body":{"controllers/UploadController.html":{}}}],["src/infra/dtos/file",{"_index":1407,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["src/infra/infra.constants.ts",{"_index":2466,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infra/infra.module.ts",{"_index":1801,"title":{},"body":{"modules/InfraModule.html":{}}}],["src/infra/services/firebase",{"_index":1642,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["src/infra/services/uploader.service.ts",{"_index":2319,"title":{},"body":{"classes/UploaderService.html":{},"coverage.html":{}}}],["src/infra/services/uploader.service.ts:4",{"_index":2321,"title":{},"body":{"classes/UploaderService.html":{}}}],["src/logger/logger.module.ts",{"_index":1843,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logger.service.ts",{"_index":825,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":2467,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/question",{"_index":110,"title":{},"body":{"classes/Answer.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/FindPersonalDto.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/controllers/user.controller.ts",{"_index":2332,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/controllers/user.controller.ts:15",{"_index":2334,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controllers/user.controller.ts:21",{"_index":2337,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/decoratos/get",{"_index":205,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionGroupController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dtos/create",{"_index":797,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto",{"_index":1963,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["src/user/dtos/user.dto.ts",{"_index":2347,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto.ts:6",{"_index":2348,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/entities/user.entity",{"_index":901,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/FindPersonalDto.html":{},"controllers/QuestionGroupController.html":{}}}],["src/user/entities/user.entity.ts",{"_index":2322,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:11",{"_index":2324,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:14",{"_index":2323,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":2327,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:20",{"_index":2326,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:23",{"_index":2325,"title":{},"body":{"classes/User.html":{}}}],["src/user/enum/user",{"_index":631,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/helpers/create",{"_index":2478,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/user/interfaces/user",{"_index":2360,"title":{},"body":{"interfaces/UserResult.html":{},"coverage.html":{}}}],["src/user/repositories/user.repository.ts",{"_index":2357,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/user/user.module.ts",{"_index":2352,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":2362,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:23",{"_index":2369,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:33",{"_index":2370,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:46",{"_index":2372,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:57",{"_index":2376,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:61",{"_index":2380,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:69",{"_index":2374,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:97",{"_index":2378,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":1731,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["start",{"_index":835,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/PeriodService.html":{}}}],["starta",{"_index":1898,"title":{},"body":{"injectables/PeriodService.html":{}}}],["startb",{"_index":1900,"title":{},"body":{"injectables/PeriodService.html":{}}}],["started",{"_index":574,"title":{"index.html":{}},"body":{"classes/Auxiliary1624416663574.html":{},"miscellaneous/enumerations.html":{}}}],["started_at",{"_index":521,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["startedat",{"_index":727,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{}}}],["startofmonth",{"_index":1776,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["startofmonth(new",{"_index":1785,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["stated_at",{"_index":531,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["statement",{"_index":762,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["statements",{"_index":2415,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1122,"title":{},"body":{"injectables/ExamService.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["status",{"_index":526,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["status.enum",{"_index":866,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["status.enum.ts",{"_index":2535,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":1729,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["storage",{"_index":1438,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["storage.service.ts",{"_index":1621,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["storage.service.ts:15",{"_index":1626,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:9",{"_index":1623,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storagebucket",{"_index":1484,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["storageservice",{"_index":1646,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["strategies",{"_index":2525,"title":{},"body":{"dependencies.html":{}}}],["strategies/jwt.strategy",{"_index":461,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1825,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":129,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["student",{"_index":1173,"title":{"classes/Student.html":{}},"body":{"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["student.cpf",{"_index":1795,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["student.enrollment",{"_index":1794,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["student.entity",{"_index":1674,"title":{},"body":{"classes/Grade.html":{}}}],["student_grade",{"_index":571,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["studentgrades",{"_index":2259,"title":{},"body":{"classes/Student.html":{}}}],["studentrepository",{"_index":597,"title":{"classes/StudentRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{}}}],["students",{"_index":1662,"title":{},"body":{"classes/Grade.html":{}}}],["studentservice",{"_index":589,"title":{"injectables/StudentService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["subject",{"_index":536,"title":{"classes/Subject.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{},"coverage.html":{}}}],["subject.course",{"_index":682,"title":{},"body":{"classes/Course.html":{}}}],["subject.entity",{"_index":680,"title":{},"body":{"classes/Course.html":{},"classes/Grade.html":{}}}],["subject.id",{"_index":1793,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["subject_id",{"_index":540,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["subject`(`id",{"_index":560,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["subjectid",{"_index":1663,"title":{},"body":{"classes/Grade.html":{}}}],["subjects",{"_index":674,"title":{},"body":{"classes/Course.html":{}}}],["subscriber.{js,ts",{"_index":2661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscribers",{"_index":2660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sudo",{"_index":2598,"title":{},"body":{"index.html":{}}}],["super",{"_index":1831,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":2600,"title":{},"body":{"modules.html":{}}}],["suprir",{"_index":2570,"title":{},"body":{"index.html":{}}}],["svg",{"_index":2601,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2520,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":2450,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfigkey",{"_index":2451,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2281,"title":{"interfaces/SwaggerOptions.html":{}},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":636,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["synchronize",{"_index":2662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":2562,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":136,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["tableinheritance",{"_index":116,"title":{},"body":{"classes/Answer.html":{},"classes/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2480,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":743,"title":{},"body":{"classes/CreateExamDto.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["target.controller",{"_index":1052,"title":{},"body":{"modules/ExamModule.html":{}}}],["target.controller.ts",{"_index":1194,"title":{},"body":{"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["target.controller.ts:20",{"_index":1201,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["target.controller.ts:26",{"_index":1199,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["target.entity",{"_index":867,"title":{},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{}}}],["target.entity.ts",{"_index":1164,"title":{},"body":{"classes/ExamTarget.html":{},"coverage.html":{}}}],["target.entity.ts:8",{"_index":1165,"title":{},"body":{"classes/ExamTarget.html":{}}}],["target.id",{"_index":1083,"title":{},"body":{"classes/ExamRepository.html":{}}}],["target.repository",{"_index":1049,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["target.repository.ts",{"_index":1242,"title":{},"body":{"classes/ExamTargetRepository.html":{},"coverage.html":{}}}],["target.service",{"_index":1050,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["target.service.ts",{"_index":1244,"title":{},"body":{"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["target.service.ts:12",{"_index":1250,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:22",{"_index":1255,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:30",{"_index":1251,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:42",{"_index":1252,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:48",{"_index":1254,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.type",{"_index":1084,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExamTargetService.html":{}}}],["targetmap",{"_index":1145,"title":{},"body":{"injectables/ExamService.html":{}}}],["targetmap.get(target",{"_index":1149,"title":{},"body":{"injectables/ExamService.html":{}}}],["targetnodefactory",{"_index":1277,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["targetnodefactory.generate",{"_index":1281,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["targets",{"_index":728,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targets.map((target",{"_index":1148,"title":{},"body":{"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{}}}],["targetservice",{"_index":1124,"title":{},"body":{"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["testing",{"_index":1757,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["text",{"_index":519,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTitle1621036457247.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["text/csv",{"_index":1401,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this._targetmap",{"_index":1260,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.answergraderepository.create(createdto",{"_index":347,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answergraderepository.save(answer",{"_index":348,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.create(createdto",{"_index":349,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.delete",{"_index":328,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.find",{"_index":352,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.findone(id",{"_index":353,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.merge(answer",{"_index":355,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.save(answer",{"_index":350,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.softdelete",{"_index":357,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerservice.createbatch(createanswerdtos",{"_index":223,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.remove(id",{"_index":229,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.update(id",{"_index":227,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.app",{"_index":1480,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.auth",{"_index":1493,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.database(url",{"_index":1494,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.delete",{"_index":1503,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.firestore",{"_index":1495,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.instanceid",{"_index":1496,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.machinelearning",{"_index":1497,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.messaging",{"_index":1498,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.name",{"_index":1490,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.options",{"_index":1492,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.projectmanagement",{"_index":1499,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.remoteconfig",{"_index":1500,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.securityrules",{"_index":1501,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.storage",{"_index":1502,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.authrepository.findone",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authrepository.save",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.createauth",{"_index":2390,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.findauth",{"_index":1837,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.login(logindto",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.childs",{"_index":1227,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.childs.length",{"_index":1223,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.configservice.get('node_env",{"_index":1745,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.configservice.get('skip_sentry",{"_index":1756,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.createcsv(csvlines",{"_index":1398,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.createquerybuilder('exam",{"_index":1099,"title":{},"body":{"classes/ExamRepository.html":{}}}],["this.createquerybuilder('grade",{"_index":1694,"title":{},"body":{"classes/GradeRepository.html":{}}}],["this.createuserbytype(createuserdto",{"_index":2389,"title":{},"body":{"injectables/UserService.html":{}}}],["this.endedat",{"_index":879,"title":{},"body":{"classes/Exam.html":{}}}],["this.examagreementservice.createagreement(createagreementdto",{"_index":943,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["this.examagreementservice.findone(user",{"_index":327,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.examagreementservice.finishexam(examagreement",{"_index":351,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.examagreementservice.updateagreement(id",{"_index":944,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["this.examservice.create(createexamdto",{"_index":1027,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findall",{"_index":1028,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findone(copyquestiongroupdto.examid",{"_index":2159,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(createagreementdto.examid",{"_index":986,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.examservice.findone(examid",{"_index":2147,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(id",{"_index":1033,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findpersonal(user",{"_index":1031,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.remove(id",{"_index":1035,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.update(id",{"_index":1034,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.exports",{"_index":1527,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.fcm",{"_index":1591,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.fcm.sendtodevice(token",{"_index":1593,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.findauth",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findone(copyquestiongroupdto.groupid",{"_index":2158,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.findone(id",{"_index":354,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.findspecializeduser(userdto",{"_index":2411,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduser(userdto",{"_index":2405,"title":{},"body":{"injectables/UserService.html":{}}}],["this.firebaseauth",{"_index":1567,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.createuser(createdto",{"_index":1577,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.deleteuser(uid",{"_index":1579,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.getuser(uid",{"_index":1576,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.updateuser(uid",{"_index":1578,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.verifyidtoken(token",{"_index":1570,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebasestorage.upload(`exports/${filename",{"_index":1399,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.firestore",{"_index":1604,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.firestore.collection(collection",{"_index":1606,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.generate(node",{"_index":1241,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["this.getfilename(exportationtype.avaliacao",{"_index":1396,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.getnextposition(createquestiondto.groupid",{"_index":2227,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.getnextposition(updatedto.groupid",{"_index":2238,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.gettargetmap",{"_index":1267,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.graderepository.find",{"_index":1709,"title":{},"body":{"injectables/GradeService.html":{}}}],["this.graderepository.findbyuserandperiod(user",{"_index":1710,"title":{},"body":{"injectables/GradeService.html":{}}}],["this.gradeservice.findbyuserandperiod",{"_index":1928,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["this.groups",{"_index":873,"title":{},"body":{"classes/Exam.html":{}}}],["this.groups?.sort((a",{"_index":874,"title":{},"body":{"classes/Exam.html":{}}}],["this.groupservice.findone(groupid",{"_index":2225,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.isleaf",{"_index":1225,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.jwtservice.signasync",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loadrelations(query).getmany",{"_index":1113,"title":{},"body":{"classes/ExamRepository.html":{}}}],["this.loadtargetmap",{"_index":1259,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.logger.error('catched",{"_index":1760,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.mustfindauth(logindto",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.newexam(createexamdto",{"_index":1150,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.newexam(updateexamdto",{"_index":1161,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.periodrepository.find",{"_index":1895,"title":{},"body":{"injectables/PeriodService.html":{}}}],["this.periodrepository.findone",{"_index":1902,"title":{},"body":{"injectables/PeriodService.html":{}}}],["this.periodservice.getperiodbyinterval(exam",{"_index":1152,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.personalgroup.getpersonal(user",{"_index":2173,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.professorgrades",{"_index":1952,"title":{},"body":{"classes/Professor.html":{}}}],["this.professorservice.createstudent(createuserdto",{"_index":2401,"title":{},"body":{"injectables/UserService.html":{}}}],["this.professorservice.findone(userdto",{"_index":2409,"title":{},"body":{"injectables/UserService.html":{}}}],["this.providers",{"_index":1523,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.questiongroupservice.copy(copyquestiongroupdto",{"_index":2094,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.create(createquestiongroupdto",{"_index":2088,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findall",{"_index":2089,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findone(id",{"_index":2092,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findpersonal",{"_index":2091,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.remove(id",{"_index":2096,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.reorder(reorderquestiongroupdto",{"_index":2095,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.update(id",{"_index":2093,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questions",{"_index":2051,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questions?.sort((a",{"_index":2052,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questionservice.copytogroup",{"_index":2162,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.questionservice.createquestion(createquestiondto",{"_index":2017,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.createquestions(groupid",{"_index":2020,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.find(finddto",{"_index":2022,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findbyids",{"_index":330,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.questionservice.findone(id",{"_index":2023,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.remove(id",{"_index":2026,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.reorder(reorderquesitondto",{"_index":2025,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.update(id",{"_index":2024,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.repository.create",{"_index":991,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.create(createdto",{"_index":1966,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["this.repository.create(createquestiongroupdto",{"_index":2150,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.create(entitylike",{"_index":1144,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.find",{"_index":997,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.findbyids(ids",{"_index":2234,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.findbytargets",{"_index":1157,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.findbyuser(user",{"_index":1155,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.findone",{"_index":988,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["this.repository.findone(id",{"_index":993,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{}}}],["this.repository.getcsvlines(examid",{"_index":1392,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.repository.merge",{"_index":2156,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.merge(agreement",{"_index":996,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.repository.merge(exam",{"_index":1160,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.merge(question",{"_index":2239,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save",{"_index":2160,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.save(agreement",{"_index":992,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.repository.save(exam",{"_index":1153,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.save(professor",{"_index":1967,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["this.repository.save(question",{"_index":2228,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save(questiongroup",{"_index":2153,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.save(questions",{"_index":2230,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save(student",{"_index":2270,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.repository.softdelete",{"_index":2246,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.softdelete(id",{"_index":1162,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["this.repository.update(group.id",{"_index":2171,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.root",{"_index":1280,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["this.root.dfs(target",{"_index":1286,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["this.service.exporttocsv(examid",{"_index":1306,"title":{},"body":{"controllers/ExportationController.html":{}}}],["this.service.upload(file",{"_index":2318,"title":{},"body":{"controllers/UploadController.html":{}}}],["this.setexamandposition",{"_index":2152,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.startedat",{"_index":878,"title":{},"body":{"classes/Exam.html":{}}}],["this.status",{"_index":906,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["this.storage",{"_index":1629,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storage.bucket(bucket).file(path",{"_index":1632,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storageservice.upload",{"_index":1656,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["this.studentgrades",{"_index":2262,"title":{},"body":{"classes/Student.html":{}}}],["this.studentservice.createstudent(createuserdto",{"_index":2403,"title":{},"body":{"injectables/UserService.html":{}}}],["this.studentservice.findone(userdto",{"_index":2410,"title":{},"body":{"injectables/UserService.html":{}}}],["this.targetservice.gettargetmap",{"_index":1146,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.targetservice.gettargets",{"_index":1206,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["this.targetservice.gettargetsforuser(user.type",{"_index":1156,"title":{},"body":{"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["this.tree.querytarget(target).map((p",{"_index":1269,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.type",{"_index":1224,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.userrepository.findone",{"_index":2404,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":2344,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findspecializeduser",{"_index":1839,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.mustfinduser",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateuser",{"_index":2346,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":49,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["timestamp",{"_index":1730,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["timestamp.entity",{"_index":1405,"title":{},"body":{"classes/FFEntity.html":{}}}],["timestampentity",{"_index":102,"title":{"classes/TimestampEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"coverage.html":{}}}],["timestampentity:10",{"_index":103,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:13",{"_index":107,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:16",{"_index":105,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timewindow",{"_index":2696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tinyint",{"_index":90,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["title",{"_index":534,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/IEntity.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["tocopy",{"_index":2157,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["tocopy.questions",{"_index":2163,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["todo",{"_index":2043,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["token",{"_index":1564,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["token.interface",{"_index":1566,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["token.interface.ts",{"_index":1538,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"coverage.html":{}}}],["tolocaledatestring('pt",{"_index":1381,"title":{},"body":{"injectables/ExportationService.html":{}}}],["transaction",{"_index":2397,"title":{},"body":{"injectables/UserService.html":{}}}],["transactional",{"_index":248,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["transformer",{"_index":718,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/UpdateExamAgreementDto.html":{},"dependencies.html":{}}}],["tree",{"_index":1249,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["tree.provider",{"_index":1055,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["tree.provider.ts",{"_index":1272,"title":{},"body":{"injectables/ExamTargetTree.html":{},"coverage.html":{}}}],["tree.provider.ts:25",{"_index":1279,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["tree.provider.ts:8",{"_index":1276,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["true",{"_index":92,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"injectables/ExportationService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"classes/Period.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["true})@arrayminsize(1",{"_index":794,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["true})@type(undefined)@isdefined({each",{"_index":793,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["try",{"_index":1569,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"classes/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":119,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateUserDto.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/ExamUser.html":{},"injectables/ExportationService.html":{},"interfaces/FindExamByUserDto.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["type.enum.ts",{"_index":2531,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":2608,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":30,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/ExportationRepository.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":274,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":603,"title":{},"body":{"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{}}}],["typeormmodule.forfeature([answerrepository",{"_index":283,"title":{},"body":{"modules/AnswerModule.html":{}}}],["typeormmodule.forfeature([authrepository",{"_index":462,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([questiongrouprepository",{"_index":2118,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":2356,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":2294,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["types/firebase",{"_index":1602,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["types/user",{"_index":1692,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["u",{"_index":1345,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["u.enrollment",{"_index":1336,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["u.id",{"_index":1346,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["uh",{"_index":371,"title":{},"body":{"controllers/AppController.html":{}}}],["ui",{"_index":2521,"title":{},"body":{"dependencies.html":{}}}],["uid",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/JwtPayload.html":{}}}],["um",{"_index":2048,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["unauthorizedexception",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception(logindto",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(userdto",{"_index":2406,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":42,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/FirebaseStorageService.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":407,"title":{},"body":{"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["unknown",{"_index":2683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unprocessableentityexception",{"_index":2381,"title":{},"body":{"injectables/UserService.html":{}}}],["up",{"_index":15,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{},"index.html":{}}}],["up(queryrunner",{"_index":27,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["upcase",{"_index":1791,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["update",{"_index":141,"title":{},"body":{"classes/Answer1622421768424.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"miscellaneous/enumerations.html":{}}}],["update(id",{"_index":313,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["updateagreement",{"_index":963,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["updateagreement(id",{"_index":979,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["updateagreementdto",{"_index":933,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["updateagreementdto.anonymous",{"_index":995,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["updateagreemment",{"_index":927,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["updateagreemment(id",{"_index":932,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["updateanswerdto",{"_index":185,"title":{"classes/UpdateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["updated_at",{"_index":140,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["updatedat",{"_index":81,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedatecolumn",{"_index":106,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedto",{"_index":1559,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/QuestionService.html":{}}}],["updatedto.groupid",{"_index":2235,"title":{},"body":{"injectables/QuestionService.html":{}}}],["updateexamagreementdto",{"_index":934,"title":{"classes/UpdateExamAgreementDto.html":{}},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"classes/UpdateExamAgreementDto.html":{},"coverage.html":{}}}],["updateexamdto",{"_index":1018,"title":{"classes/UpdateExamDto.html":{}},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["updateone",{"_index":173,"title":{},"body":{"controllers/AnswerController.html":{}}}],["updateone(id",{"_index":184,"title":{},"body":{"controllers/AnswerController.html":{}}}],["updatequestiondto",{"_index":2004,"title":{"classes/UpdateQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["updatequestiongroupdto",{"_index":2080,"title":{"classes/UpdateQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["updatequestiongroupdto.examid",{"_index":2154,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["updateuser",{"_index":1547,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{}}}],["updateuser(uid",{"_index":1558,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["upload",{"_index":1622,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{}}}],["upload(@uploadedfile",{"_index":2317,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(file",{"_index":2304,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(filedto",{"_index":1647,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["upload(path",{"_index":1624,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["upload.dto",{"_index":1628,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["upload.dto.ts",{"_index":1640,"title":{},"body":{"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["upload_path",{"_index":2312,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadcontroller",{"_index":1802,"title":{"controllers/UploadController.html":{}},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":2308,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploader.service",{"_index":1655,"title":{},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["uploader.service.ts",{"_index":1643,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["uploader.service.ts:11",{"_index":1648,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploader.service.ts:8",{"_index":1645,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploaderservice",{"_index":1654,"title":{"classes/UploaderService.html":{}},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":1449,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["useclass",{"_index":1807,"title":{},"body":{"modules/InfraModule.html":{}}}],["usefactory",{"_index":402,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{}}}],["useguards",{"_index":194,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtguard",{"_index":215,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useinterceptors",{"_index":2309,"title":{},"body":{"controllers/UploadController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2316,"title":{},"body":{"controllers/UploadController.html":{}}}],["user",{"_index":46,"title":{"classes/User.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"classes/ExportationRepository.html":{},"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["user.decorator",{"_index":206,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["user.decorator.ts",{"_index":2476,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1096,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":798,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":800,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":802,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":807,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":804,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.enrollment",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.helper.ts",{"_index":2479,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["user.id",{"_index":225,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["user.interface",{"_index":203,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["user.interface.ts",{"_index":607,"title":{},"body":{"interfaces/BatchUser.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamUser.html":{},"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["user.interface.ts:3",{"_index":1002,"title":{},"body":{"interfaces/ExamAgreementUser.html":{}}}],["user.role",{"_index":637,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.service",{"_index":2340,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.type",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/dtos/create",{"_index":1964,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["user/entities/user.entity",{"_index":623,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["user/enum/user",{"_index":1294,"title":{},"body":{"interfaces/ExamUser.html":{}}}],["user/user.module",{"_index":391,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user:11",{"_index":1946,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:14",{"_index":1945,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:17",{"_index":1949,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:20",{"_index":1948,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:23",{"_index":1947,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user_enrollment",{"_index":1337,"title":{},"body":{"classes/ExportationRepository.html":{}}}],["user_id",{"_index":544,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["user`(`id",{"_index":578,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{}}}],["usercontroller",{"_index":2331,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":1961,"title":{"classes/UserDto.html":{}},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":224,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/GradeRepository.html":{}}}],["usermodule",{"_index":381,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":2646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":2354,"title":{"classes/UserRepository.html":{}},"body":{"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userresult",{"_index":2359,"title":{"interfaces/UserResult.html":{}},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userrole",{"_index":630,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":639,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.manager",{"_index":642,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.regular",{"_index":2329,"title":{},"body":{"classes/User.html":{}}}],["users",{"_index":2283,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":474,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertofind",{"_index":1419,"title":{},"body":{"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"miscellaneous/typealiases.html":{}}}],["usertype",{"_index":805,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ExamUser.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["usertype.professor",{"_index":2400,"title":{},"body":{"injectables/UserService.html":{}}}],["usertype.student",{"_index":2402,"title":{},"body":{"injectables/UserService.html":{}}}],["usevalue",{"_index":1522,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["using",{"_index":2595,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":542,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{}}}],["v0.0.1",{"_index":2704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":1816,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":1819,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":698,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["validateif((o",{"_index":702,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["validatenested",{"_index":752,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["validator",{"_index":445,"title":{},"body":{"classes/AuthDto.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/ExamAgreementDto.html":{},"classes/LoginDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["value",{"_index":131,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CreateAnswerDto.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":62,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["var",{"_index":53,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":406,"title":{},"body":{"classes/Auth.html":{},"classes/Course.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["varchar(255",{"_index":419,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{}}}],["varchar(36",{"_index":914,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["variable",{"_index":2424,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2590,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verdadeira",{"_index":779,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["verifytoken",{"_index":1548,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["verifytoken(token",{"_index":1562,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["version",{"_index":2284,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":858,"title":{},"body":{"classes/Exam.html":{},"classes/HttpExceptionFilter.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"miscellaneous/functions.html":{}}}],["where('agreement.userid",{"_index":1115,"title":{},"body":{"classes/ExamRepository.html":{}}}],["where('exam.status",{"_index":1103,"title":{},"body":{"classes/ExamRepository.html":{}}}],["where('grade.periodid",{"_index":1699,"title":{},"body":{"classes/GradeRepository.html":{}}}],["yes",{"_index":1450,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{},"classes/UploaderService.html":{}}}],["zoom",{"_index":268,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUser1620299822480.html":{"url":"classes/AdminUser1620299822480.html","title":"class - AdminUser1620299822480","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUser1620299822480\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620299822480-AdminUser.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\n\nconst cpf = '29997856155';\nconst enrollment = '999999';\n\nexport class AdminUser1620299822480 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    const result:\n      | {\n          id: number;\n        }[]\n      | undefined = await queryRunner.manager.query(\n      'SELECT id FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n\n    if (!result?.length) {\n      if (!process.env.ADMIN_PASSWORD) {\n        throw new Error('ADMIN_PASSWORD env var not set');\n      }\n\n      const salt = await bcrypt.genSalt();\n      const password = await bcrypt.hash(process.env.ADMIN_PASSWORD, salt);\n\n      await queryRunner.manager.query(\n        'INSERT INTO auth (login, password, salt) VALUES (?, ?, ?)',\n        [enrollment, password, salt],\n      );\n      await queryRunner.manager.query(\n        'INSERT INTO user (enrollment, cpf, type, role) VALUES (?, ?, ?, ?)',\n        [enrollment, cpf, 'User', 'admin'],\n      );\n    }\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.manager.query('DELETE FROM auth WHERE login = ?', [\n      enrollment,\n    ]);\n    await queryRunner.manager.query(\n      'DELETE FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Answer.html":{"url":"classes/Answer.html","title":"class - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examAgreement\n                            \n                            \n                                examAgreementId\n                            \n                            \n                                question\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreementId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'tinyint', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/exam-agreement.entity';\nimport { Question } from 'src/question-group/entities/question.entity';\nimport { Check, Column, Entity, ManyToOne, TableInheritance } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { AnswerType } from '../enums/answer-type.enum';\n\n@Entity('answer')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: AnswerType } })\n@Check(`\"score\" IS NULL OR \"score\" BETWEEN 1 AND 5`)\nexport class Answer extends FFEntity {\n  @Column({ type: 'tinyint', nullable: true })\n  score?: number;\n\n  @Column({ type: 'enum', enum: AnswerType })\n  type: AnswerType;\n\n  @Column({ type: 'int' })\n  examAgreementId: number;\n\n  @Column({ type: 'int' })\n  questionId: number;\n\n  @ManyToOne(() => ExamAgreement)\n  examAgreement: ExamAgreement;\n\n  @ManyToOne(() => Question)\n  question: Question;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Answer1622421768424.html":{"url":"classes/Answer1622421768424.html","title":"class - Answer1622421768424","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer1622421768424\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622421768424-Answer.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Answer1622421768424'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622421768424-Answer.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622421768424-Answer.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622421768424-Answer.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Answer1622421768424 implements MigrationInterface {\n    name = 'Answer1622421768424'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `answer` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `score` int NULL, `type` enum ('Answer', 'AnswerGrade') NOT NULL, `exam_agreement_id` int NOT NULL, `question_id` int NOT NULL, `grade_id` int NULL, INDEX `IDX_ec3a69def9f89a993b8f75ee4d` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_814144bcce3b80921f41f15b823` FOREIGN KEY (`exam_agreement_id`) REFERENCES `exam_agreement`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_c3d19a89541e4f0813f2fe09194` FOREIGN KEY (`question_id`) REFERENCES `question`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_971014f1fb44be716098484bb5a` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_971014f1fb44be716098484bb5a`\");\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_c3d19a89541e4f0813f2fe09194`\");\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_814144bcce3b80921f41f15b823`\");\n        await queryRunner.query(\"DROP INDEX `IDX_ec3a69def9f89a993b8f75ee4d` ON `answer`\");\n        await queryRunner.query(\"DROP TABLE `answer`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnswerController.html":{"url":"controllers/AnswerController.html","title":"controller - AnswerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnswerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                answer\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(examId: number, user: ExamUser, createAnswerDtos: CreateAnswerDto[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('batch/:examId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createAnswerDtos\n                                    \n                                            CreateAnswerDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(id: number, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  Delete,\n  ParseArrayPipe,\n  Put,\n  ParseIntPipe,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ExamUser } from 'src/exam/interfaces/exam-user.interface';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { AnswerService } from './answer.service';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\nimport { Answer } from './entities/answer.entity';\n\n@Controller('answer')\n@ApiTags('Answer')\n@ApiBearerAuth()\n@UseGuards(JwtGuard)\nexport class AnswerController {\n  constructor(private readonly answerService: AnswerService) {}\n\n  @Post('batch/:examId')\n  @ApiOkResponse({ type: [CreateAnswerDto] })\n  async create(\n    @Param('examId', ParseIntPipe) examId: number,\n    @GetUser() user: ExamUser,\n    @Body(new ParseArrayPipe({ items: CreateAnswerDto }))\n    createAnswerDtos: CreateAnswerDto[],\n  ) {\n    return this.answerService.createBatch(createAnswerDtos, {\n      userId: user.id,\n      examId,\n    });\n  }\n\n  @Put(':id')\n  async updateOne(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAnswerDto: UpdateAnswerDto,\n  ): Promise {\n    return this.answerService.update(id, updateAnswerDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number) {\n    return this.answerService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGrade.html":{"url":"classes/AnswerGrade.html","title":"class - AnswerGrade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGrade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer-grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Answer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                grade\n                            \n                            \n                                examAgreement\n                            \n                            \n                                examAgreementId\n                            \n                            \n                                question\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grade\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer-grade.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:24\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreementId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:18\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:27\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:21\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'tinyint', nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:15\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Grade } from 'src/auxiliary/entities/grade.entity';\nimport { ChildEntity, ManyToOne } from 'typeorm';\nimport { Answer } from './answer.entity';\n\n@ChildEntity()\nexport class AnswerGrade extends Answer {\n  @ManyToOne(() => Grade)\n  grade: Grade;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGradeRepository.html":{"url":"classes/AnswerGradeRepository.html","title":"class - AnswerGradeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGradeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer-grade.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { AnswerGrade } from '../entities/answer-grade.entity';\n\n@EntityRepository(AnswerGrade)\nexport class AnswerGradeRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnswerModule.html":{"url":"modules/AnswerModule.html","title":"module - AnswerModule","body":"\n                   \n\n\n\n\n    Modules\n    AnswerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_providers\n\n\n\ncluster_AnswerModule_imports\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nExamModule->AnswerModule\n\n\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nAnswerModule -->\n\nQuestionGroupModule->AnswerModule\n\n\n\n\n\nAnswerService\n\nAnswerService\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/answer/answer.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnswerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnswerController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ExamModule\n                        \n                        \n                            QuestionGroupModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AnswerService } from './answer.service';\nimport { AnswerController } from './answer.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnswerRepository } from './repositories/answer.repository';\nimport { AnswerGradeRepository } from './repositories/answer-grade.repository';\nimport { QuestionGroupModule } from 'src/question-group/question-group.module';\nimport { ExamModule } from 'src/exam/exam.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AnswerRepository, AnswerGradeRepository]),\n    QuestionGroupModule,\n    ExamModule,\n  ],\n  controllers: [AnswerController],\n  providers: [AnswerService],\n})\nexport class AnswerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerRepository.html":{"url":"classes/AnswerRepository.html","title":"class - AnswerRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Answer } from '../entities/answer.entity';\n\n@EntityRepository(Answer)\nexport class AnswerRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerScoreCheck1624750140568.html":{"url":"classes/AnswerScoreCheck1624750140568.html","title":"class - AnswerScoreCheck1624750140568","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerScoreCheck1624750140568\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624750140569-AnswerScoreCheck.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'AnswerScoreCheck1624750140568'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624750140569-AnswerScoreCheck.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624750140569-AnswerScoreCheck.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624750140569-AnswerScoreCheck.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AnswerScoreCheck1624750140568 implements MigrationInterface {\n  name = 'AnswerScoreCheck1624750140568';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query('ALTER TABLE `answer` DROP COLUMN `score`');\n    await queryRunner.query(\n      'ALTER TABLE `answer` ADD `score` tinyint NULL CHECK (`score` IS NULL OR `score` BETWEEN 1 AND 5)',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query('ALTER TABLE `answer` DROP COLUMN `score`');\n    await queryRunner.query('ALTER TABLE `answer` ADD `score` int NULL');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnswerService.html":{"url":"injectables/AnswerService.html","title":"injectable - AnswerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AnswerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createBatch\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(answerRepository: AnswerRepository, answerGradeRepository: AnswerGradeRepository, questionService: QuestionService, examAgreementService: ExamAgreementService)\n                    \n                \n                        \n                            \n                                Defined in src/answer/answer.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        answerRepository\n                                                  \n                                                        \n                                                                        AnswerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        answerGradeRepository\n                                                  \n                                                        \n                                                                        AnswerGradeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examAgreementService\n                                                  \n                                                        \n                                                                        ExamAgreementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createBatch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createBatch(createAnswerDtos: CreateAnswerDto[], user: BatchUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAnswerDtos\n                                    \n                                            CreateAnswerDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                BatchUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { ExamAgreementService } from 'src/exam/services/exam-agreement.service';\nimport { Question } from 'src/question-group/entities/question.entity';\nimport { QuestionService } from 'src/question-group/services/question.service';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\nimport { Answer } from './entities/answer.entity';\nimport { AnswerType } from './enums/answer-type.enum';\nimport { BatchUser } from './interfaces/batch-user.interface';\nimport { AnswerGradeRepository } from './repositories/answer-grade.repository';\nimport { AnswerRepository } from './repositories/answer.repository';\n\n@Injectable()\nexport class AnswerService {\n  constructor(\n    @InjectRepository(AnswerRepository)\n    private readonly answerRepository: AnswerRepository,\n    @InjectRepository(AnswerGradeRepository)\n    private readonly answerGradeRepository: AnswerGradeRepository,\n    private readonly questionService: QuestionService,\n    private readonly examAgreementService: ExamAgreementService,\n  ) {}\n\n  @Transactional()\n  async createBatch(\n    createAnswerDtos: CreateAnswerDto[],\n    user: BatchUser,\n  ): Promise {\n    const examAgreement = await this.examAgreementService.findOne(user);\n    await this.answerRepository.delete({ examAgreement });\n    const questions = await this.questionService.findByIds(\n      createAnswerDtos.map((dto) => dto.questionId),\n    );\n    const questionMap: ReadonlyMap = new Map(questions.map((question) => [question.id, question]));\n\n    const answers = await Promise.all(\n      createAnswerDtos.map(async (answerDto) => {\n        const question = questionMap.get(answerDto.questionId);\n        if (!question) {\n          throw new NotFoundException(answerDto, 'Question not found');\n        }\n\n        const createDto = { ...answerDto, examAgreement };\n\n        if (answerDto.type === AnswerType.ANSWER_GRADE) {\n          const answer = this.answerGradeRepository.create(createDto);\n          return this.answerGradeRepository.save(answer);\n        }\n\n        const answer = this.answerRepository.create(createDto);\n        return this.answerRepository.save(answer);\n      }),\n    );\n\n    await this.examAgreementService.finishExam(examAgreement);\n\n    return answers;\n  }\n\n  findAll() {\n    return this.answerRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const answer = await this.answerRepository.findOne(id);\n    if (!answer) {\n      throw new NotFoundException({ id });\n    }\n    return answer;\n  }\n\n  @Transactional()\n  async update(id: number, updateAnswerDto: UpdateAnswerDto): Promise {\n    let answer = await this.findOne(id);\n    answer = this.answerRepository.merge(answer, updateAnswerDto);\n\n    return this.answerRepository.save(answer);\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const affected: SoftDeleteResult = await this.answerRepository.softDelete(\n      id,\n    );\n\n    if (!affected.raw.affectedRows) {\n      throw new NotFoundException({ id });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ping\n                            \n                            \n                                pong\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ping\n                        \n                        \n                    \n                \n            \n            \n                \nping()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in src/controllers/app.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pong\n                        \n                        \n                    \n                \n            \n            \n                \npong()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('health')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/controllers/app.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, Post } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get('health')\n  ping(): string {\n    return 'Healthy';\n  }\n\n  @Post('health')\n  @HttpCode(200)\n  pong() {\n    return \"Uh\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnswerModule\n\nAnswerModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnswerModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nExportationModule\n\nExportationModule\n\nAppModule -->\n\nExportationModule->AppModule\n\n\n\n\n\nInfraModule\n\nInfraModule\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnswerModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            AuxiliaryModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            ExamModule\n                        \n                        \n                            ExportationModule\n                        \n                        \n                            InfraModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            QuestionGroupModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { configs, databaseConfigKey } from './config';\n\nimport { LoggerModule } from './logger/logger.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './user/user.module';\nimport { ExamModule } from './exam/exam.module';\nimport { QuestionGroupModule } from './question-group/question-group.module';\nimport { AnswerModule } from './answer/answer.module';\nimport { CoreModule } from './core/core.module';\nimport { AuxiliaryModule } from './auxiliary/auxiliary.module';\nimport { InfraModule } from './infra/infra.module';\nimport { AppController } from './controllers/app.controller';\nimport { ExportationModule } from './exportation/exportation.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ load: configs }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(databaseConfigKey)!,\n      inject: [ConfigService],\n    }),\n    CoreModule,\n    LoggerModule,\n    AuthModule,\n    UserModule,\n    ExamModule,\n    QuestionGroupModule,\n    AnswerModule,\n    AuxiliaryModule,\n    InfraModule,\n    ExportationModule,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity } from 'typeorm';\n\n@Entity('auth')\nexport class Auth extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  login: string;\n\n  @Column({ type: 'varchar' })\n  password: string;\n\n  @Column({ type: 'varchar' })\n  salt: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth1619445806509.html":{"url":"classes/Auth1619445806509.html","title":"class - Auth1619445806509","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth1619445806509\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1619445806509-Auth.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auth1619445806509'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1619445806509-Auth.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Auth1619445806509 implements MigrationInterface {\n  name = 'Auth1619445806509';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'CREATE TABLE `auth` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `login` varchar(255) NOT NULL, `password` varchar(255) NOT NULL, `salt` varchar(255) NOT NULL, UNIQUE INDEX `IDX_952e252e7470ff78b18a9ec786` (`login`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      \"CREATE TABLE `user` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `enrollment` varchar(255) NOT NULL, `cpf` varchar(255) NOT NULL, `type` varchar(255) NOT NULL, `role` enum ('manager', 'admin', 'regular') NOT NULL DEFAULT 'regular', UNIQUE INDEX `IDX_914f18c8fbe52b10a6b276bc0c` (`enrollment`), UNIQUE INDEX `IDX_a6235b5ef0939d8deaad755fc8` (`cpf`), INDEX `IDX_31ef2b4d30675d0c15056b7f6e` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_a6235b5ef0939d8deaad755fc8` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_914f18c8fbe52b10a6b276bc0c` ON `user`',\n    );\n    await queryRunner.query('DROP TABLE `user`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_952e252e7470ff78b18a9ec786` ON `auth`',\n    );\n    await queryRunner.query('DROP TABLE `auth`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/auth/controllers/auth.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthService } from '../auth.service';\nimport { LoginDto } from '../dtos/login.dto';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  login(@Body() loginDto: LoginDto): Promise {\n    return this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/auth.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  login: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtGuard\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            CaslModule\n                        \n                        \n                            JwtGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserModule } from '../user/user.module';\nimport { jwtConfigKey } from '../config';\n\nimport { CaslModule } from './casl/casl.module';\n\nimport { AuthService } from './auth.service';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { JwtGuard } from './guards/jwt.guard';\nimport { AuthController } from './controllers/auth.controller';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AuthRepository]),\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(jwtConfigKey)!,\n      inject: [ConfigService],\n    }),\n    UserModule,\n    CaslModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtGuard, JwtStrategy],\n  exports: [AuthService, JwtGuard, CaslModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthRepository.html":{"url":"classes/AuthRepository.html","title":"class - AuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/repositories/auth.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Auth } from '../entities/auth.entity';\n\n@EntityRepository(Auth)\nexport class AuthRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuth\n                            \n                            \n                                findAuth\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                mustFindAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authRepository: AuthRepository, jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        AuthRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAuth(createAuthDto: CreateAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAuthDto\n                                    \n                                                CreateAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAuth\n                        \n                        \n                    \n                \n            \n            \n                \nfindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport bcrypt = require('bcryptjs');\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { UserService } from '../user/user.service';\n\nimport { LoginDto } from './dtos/login.dto';\nimport { Auth } from './entities/auth.entity';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { CreateAuthDto } from './dtos/create-auth.dto';\nimport { AuthDto } from './dtos/auth.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(AuthRepository)\n    private readonly authRepository: AuthRepository,\n    private readonly jwtService: JwtService,\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  findAuth(authDto: AuthDto): Promise {\n    return this.authRepository.findOne({ ...authDto });\n  }\n\n  async mustFindAuth(authDto: AuthDto): Promise {\n    const auth = await this.findAuth({ login: authDto.login });\n    if (!auth) {\n      throw new NotFoundException(authDto);\n    }\n\n    return auth;\n  }\n\n  async login(loginDto: LoginDto): Promise {\n    const auth = await this.mustFindAuth(loginDto);\n\n    const match = await bcrypt.compare(loginDto.password, auth.password);\n    if (!match) {\n      throw new UnauthorizedException(loginDto);\n    }\n\n    const user = await this.userService.mustFindUser({\n      enrollment: loginDto.login,\n    });\n    const accessToken = await this.jwtService.signAsync({\n      uid: user.enrollment,\n      type: user.type,\n    });\n\n    return accessToken;\n  }\n\n  @Transactional()\n  async createAuth(createAuthDto: CreateAuthDto): Promise {\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(createAuthDto.password, salt);\n\n    await this.authRepository.save({\n      login: createAuthDto.login,\n      salt,\n      password,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auxiliary1620477175799.html":{"url":"classes/Auxiliary1620477175799.html","title":"class - Auxiliary1620477175799","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auxiliary1620477175799\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477175799-Auxiliary.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auxiliary1620477175799'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Auxiliary1620477175799 implements MigrationInterface {\n  name = 'Auxiliary1620477175799';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"CREATE TABLE `exam` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `text` text NOT NULL, `description` text NOT NULL, `started_at` datetime NOT NULL, `ended_at` datetime NOT NULL, `allow_anonymous` tinyint NOT NULL DEFAULT 0, `status` enum ('active', 'inactive') NOT NULL, `period_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n    await queryRunner.query(\n      'CREATE TABLE `period` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) NULL, `stated_at` datetime NOT NULL, `ended_at` datetime NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `course` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, UNIQUE INDEX `IDX_5cf4963ae12285cda6432d5a3a` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `subject` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, `code_id` int NOT NULL, `course_id` int NULL, UNIQUE INDEX `IDX_92374adc6b583e8cf659977e48` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `subject_id` int NULL, `period_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `exam_agreement` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `uuid` varchar(255) NOT NULL, `anonymous` tinyint NOT NULL, `user_id` int NOT NULL, UNIQUE INDEX `IDX_2b38bb607ef3e86920e9bd0163` (`uuid`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD `personal` tinyint NOT NULL DEFAULT 0',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD `exam_id` int NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL DEFAULT 0',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD CONSTRAINT `FK_1d110bd5138b275a2ea2944e290` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP FOREIGN KEY `FK_1d110bd5138b275a2ea2944e290`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `period_id`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `status`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `allow_anonymous`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `ended_at`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `started_at`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `description`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `text`');\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `exam_id`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `personal`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_2b38bb607ef3e86920e9bd0163` ON `exam_agreement`',\n    );\n    await queryRunner.query('DROP TABLE `exam_agreement`');\n    await queryRunner.query('DROP TABLE `grade`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_92374adc6b583e8cf659977e48` ON `subject`',\n    );\n    await queryRunner.query('DROP TABLE `subject`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_5cf4963ae12285cda6432d5a3a` ON `course`',\n    );\n    await queryRunner.query('DROP TABLE `course`');\n    await queryRunner.query('DROP TABLE `period`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auxiliary1624416663574.html":{"url":"classes/Auxiliary1624416663574.html","title":"class - Auxiliary1624416663574","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auxiliary1624416663574\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663574-Auxiliary.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auxiliary1624416663574'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Auxiliary1624416663574 implements MigrationInterface {\n    name = 'Auxiliary1624416663574'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `period` CHANGE `stated_at` `started_at` datetime NOT NULL\");\n        await queryRunner.query(\"CREATE TABLE `question_group_grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL DEFAULT 0, `personal` tinyint NOT NULL DEFAULT 0, `position` int NOT NULL DEFAULT '0', `exam_id` int NULL, INDEX `IX_question_group_position` (`position`), PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `professor_grade` (`user_id` int NOT NULL, `grade_id` int NOT NULL, INDEX `IDX_f2d35d0b9823628374f51931dd` (`user_id`), INDEX `IDX_df58a2a413f5647f6411002cb2` (`grade_id`), PRIMARY KEY (`user_id`, `grade_id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `student_grade` (`user_id` int NOT NULL, `grade_id` int NOT NULL, INDEX `IDX_7540599d89cb2b6e17cc56d517` (`user_id`), INDEX `IDX_26862c959c4ecfc8f1b4a1a055` (`grade_id`), PRIMARY KEY (`user_id`, `grade_id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP COLUMN `code_id`\");\n        await queryRunner.query(\"ALTER TABLE `exam_agreement` ADD `status` enum ('started', 'finished') NOT NULL DEFAULT 'started'\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`\");\n        await queryRunner.query(\"ALTER TABLE `subject` CHANGE `course_id` `course_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `subject_id` `subject_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `period_id` `period_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `question_group_grade` ADD CONSTRAINT `FK_ba86f32978b67a878005c5af78a` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` ADD CONSTRAINT `FK_f2d35d0b9823628374f51931ddd` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` ADD CONSTRAINT `FK_df58a2a413f5647f6411002cb28` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` ADD CONSTRAINT `FK_7540599d89cb2b6e17cc56d5170` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` ADD CONSTRAINT `FK_26862c959c4ecfc8f1b4a1a055c` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `student_grade` DROP FOREIGN KEY `FK_26862c959c4ecfc8f1b4a1a055c`\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` DROP FOREIGN KEY `FK_7540599d89cb2b6e17cc56d5170`\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` DROP FOREIGN KEY `FK_df58a2a413f5647f6411002cb28`\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` DROP FOREIGN KEY `FK_f2d35d0b9823628374f51931ddd`\");\n        await queryRunner.query(\"ALTER TABLE `question_group_grade` DROP FOREIGN KEY `FK_ba86f32978b67a878005c5af78a`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `period_id` `period_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `subject_id` `subject_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `subject` CHANGE `course_id` `course_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `exam_agreement` DROP COLUMN `status`\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD `code_id` int NOT NULL\");\n        await queryRunner.query(\"DROP INDEX `IDX_26862c959c4ecfc8f1b4a1a055` ON `student_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_7540599d89cb2b6e17cc56d517` ON `student_grade`\");\n        await queryRunner.query(\"DROP TABLE `student_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_df58a2a413f5647f6411002cb2` ON `professor_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_f2d35d0b9823628374f51931dd` ON `professor_grade`\");\n        await queryRunner.query(\"DROP TABLE `professor_grade`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_group_position` ON `question_group_grade`\");\n        await queryRunner.query(\"DROP TABLE `question_group_grade`\");\n        await queryRunner.query(\"ALTER TABLE `period` CHANGE `started_at` `stated_at` datetime NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuxiliaryModule.html":{"url":"modules/AuxiliaryModule.html","title":"module - AuxiliaryModule","body":"\n                   \n\n\n\n\n    Modules\n    AuxiliaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\n\nGradeService \n\nGradeService \n\n\n\nPeriodService \n\nPeriodService \n\n\n\nProfessorService \n\nProfessorService \n\n\n\nStudentService \n\nStudentService \n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nGradeService  -->\n\nAuxiliaryModule->GradeService \n\n\n\nPeriodService  -->\n\nAuxiliaryModule->PeriodService \n\n\n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nGradeService\n\nGradeService\n\nAuxiliaryModule -->\n\nGradeService->AuxiliaryModule\n\n\n\n\n\nPeriodService\n\nPeriodService\n\nAuxiliaryModule -->\n\nPeriodService->AuxiliaryModule\n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auxiliary/auxiliary.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GradeService\n                        \n                        \n                            PeriodService\n                        \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GradeService\n                        \n                        \n                            PeriodService\n                        \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { GradeRepository } from './repositories/grade.repository';\nimport { PeriodRepository } from './repositories/period.repository';\nimport { ProfessorRepository } from './repositories/professor.repository';\nimport { StudentRepository } from './repositories/student.repository';\n\nimport { GradeService } from './services/grade.service';\nimport { PeriodService } from './services/period.service';\nimport { ProfessorService } from './services/professor.service';\nimport { StudentService } from './services/student.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      StudentRepository,\n      ProfessorRepository,\n      GradeRepository,\n      PeriodRepository,\n    ]),\n  ],\n  providers: [StudentService, ProfessorService, GradeService, PeriodService],\n  exports: [StudentService, ProfessorService, GradeService, PeriodService],\n})\nexport class AuxiliaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BatchUser.html":{"url":"interfaces/BatchUser.html","title":"interface - BatchUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BatchUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/interfaces/batch-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        examId\n                                \n                                \n                                        userId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        examId\n                                    \n                                \n                                \n                                    \n                                        examId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BatchUser {\n  userId: number;\n  examId: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/casl/factories/casl-ability.factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createForUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/casl/factories/casl-ability.factory.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { Answer } from '../../../answer/entities/answer.entity';\nimport { Exam } from '../../../exam/entities/exam.entity';\nimport { ExamAgreement } from '../../../exam/entities/exam-agreement.entity';\nimport { User } from '../../../user/entities/user.entity';\nimport { CaslAction as Action } from '../enums/casl-action.enum';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { UserRole } from 'src/user/enum/user-role.enum';\n\ntype CaslSubjects =\n  | InferSubjects\n  | 'all';\n\ntype AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder(\n      Ability as AbilityClass,\n    );\n\n    switch (user.role) {\n      case UserRole.ADMIN:\n        can(Action.MANAGE, 'all');\n        break;\n      case UserRole.MANAGER:\n        can(Action.READ, 'all');\n        can(Action.MANAGE, QuestionGroup);\n        break;\n      default:\n        can(Action.READ, User);\n        can(Action.READ, ExamAgreement, { userId: user.id });\n    }\n\n    // User\n    can(Action.UPDATE, User, { id: user.id });\n\n    can(Action.MANAGE, Answer, {});\n\n    // ExamAgreement\n    cannot(Action.DELETE, ExamAgreement, { uuid: undefined });\n\n    const examAgreementNotFinished = {\n      userId: user.id,\n      uuid: undefined,\n    };\n\n    can(Action.MANAGE, ExamAgreement, examAgreementNotFinished);\n\n    // Answer\n    can(Action.MANAGE, Answer, {\n      examAgreement: examAgreementNotFinished,\n    });\n\n    // Answer Grade\n\n    return build({\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/casl/casl.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './factories/casl-ability.factory';\n\n@Module({ providers: [CaslAbilityFactory], exports: [CaslAbilityFactory] })\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CopyQuestionGroupDto.html":{"url":"classes/CopyQuestionGroupDto.html","title":"class - CopyQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CopyQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/copy-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/copy-question-group.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/copy-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPositive } from 'class-validator';\n\nexport class CopyQuestionGroupDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsPositive()\n  examId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_providers\n\n\n\n\nHttpExceptionFilter \n\nHttpExceptionFilter \n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\n\n\nCoreModule\n\nCoreModule\n\nHttpExceptionFilter  -->\n\nCoreModule->HttpExceptionFilter \n\n\n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HttpExceptionFilter\n                        \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { HttpExceptionFilter } from './filters/http-exception.filter';\nimport { PayloadInterceptor } from './interceptors/payload.interceptor';\n\n@Global()\n@Module({\n  imports: [ConfigModule],\n  providers: [PayloadInterceptor, HttpExceptionFilter],\n  exports: [PayloadInterceptor, HttpExceptionFilter],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Course.html":{"url":"classes/Course.html","title":"class - Course","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Course\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/course.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                subjects\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subjects\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('course')\nexport class Course extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @OneToMany(() => Subject, (subject) => subject.course)\n  subjects: Subject[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnswerDto.html":{"url":"classes/CreateAnswerDto.html","title":"class - CreateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/create-answer.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                gradeId\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            gradeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()@ValidateIf(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Min(1)@Max(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Default value : AnswerType.ANSWER\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsEnum(AnswerType)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEnum,\n  IsOptional,\n  IsPositive,\n  Max,\n  Min,\n  ValidateIf,\n} from 'class-validator';\nimport { AnswerType } from '../enums/answer-type.enum';\n\nexport class CreateAnswerDto {\n  @IsOptional()\n  @Min(1)\n  @Max(5)\n  score?: number;\n\n  @IsPositive()\n  questionId: number;\n\n  @IsOptional()\n  @IsEnum(AnswerType)\n  type: AnswerType = AnswerType.ANSWER;\n\n  @IsPositive()\n  @ValidateIf((o: CreateAnswerDto) => o.type === AnswerType.ANSWER_GRADE)\n  gradeId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/create-auth.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        LoginDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         LoginDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         LoginDto:8\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { LoginDto } from './login.dto';\n\nexport class CreateAuthDto extends LoginDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamAgreementDto.html":{"url":"classes/CreateExamAgreementDto.html","title":"class - CreateExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                anonymous\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam-agreement.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsBoolean, IsOptional } from 'class-validator';\nimport { ExamAgreementDto } from './exam-agreement.dto';\n\nexport class CreateExamAgreementDto extends OmitType(ExamAgreementDto, [\n  'userId',\n]) {\n  @IsOptional()\n  @IsBoolean()\n  @Type(() => Boolean)\n  anonymous?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamDto.html":{"url":"classes/CreateExamDto.html","title":"class - CreateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                startedAt\n                            \n                            \n                                    Optional\n                                targets\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsArray()@IsEnum(ExamTargetType, {each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\n\nexport class CreateExamDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsDate()\n  @Type(() => Date)\n  startedAt: Date;\n\n  @IsDate()\n  @Type(() => Date)\n  endedAt: Date;\n\n  @IsOptional()\n  @IsBoolean()\n  allowAnonymous?: boolean;\n\n  @IsOptional()\n  @IsArray()\n  @IsEnum(ExamTargetType, {each: true})\n  targets?: ExamTargetType[];\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestion.html":{"url":"classes/CreateQuestion.html","title":"class - CreateQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-questions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-questions.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsDefined,\n  IsOptional,\n  IsPositive,\n  ValidateNested,\n} from 'class-validator';\nimport { CreateQuestionDto } from './create-question.dto';\n\nclass CreateQuestion extends OmitType(CreateQuestionDto, ['groupId']) {\n  @IsOptional()\n  @IsPositive()\n  id?: number;\n}\n\nexport class CreateQuestionsDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateQuestion)\n  @IsDefined({ each: true })\n  @ArrayMinSize(1)\n  questions: CreateQuestion[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionDto.html":{"url":"classes/CreateQuestionDto.html","title":"class - CreateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    Optional\n                                required\n                            \n                            \n                                statement\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsUrl()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Boolean, title: 'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão'})@IsBoolean()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class CreateQuestionDto {\n  @IsString()\n  @IsNotEmpty()\n  statement: string;\n\n  @IsOptional()\n  @IsUrl()\n  imageUrl?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  imageAlt?: string;\n\n  @ApiProperty({\n    type: Boolean,\n    title:\n      'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão',\n  })\n  @IsBoolean()\n  @IsOptional()\n  required?: boolean;\n\n  @IsPositive()\n  groupId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionGroupDto.html":{"url":"classes/CreateQuestionGroupDto.html","title":"class - CreateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                class\n                            \n                            \n                                    Optional\n                                examId\n                            \n                            \n                                    Optional\n                                personal\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n} from 'class-validator';\n\nexport class CreateQuestionGroupDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsOptional()\n  @IsBoolean()\n  class?: boolean;\n\n  @IsOptional()\n  @IsBoolean()\n  personal?: boolean;\n\n  @IsOptional()\n  @IsPositive()\n  examId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionsDto.html":{"url":"classes/CreateQuestionsDto.html","title":"class - CreateQuestionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-questions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                questions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CreateQuestion[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ValidateNested({each: true})@Type(undefined)@IsDefined({each: true})@ArrayMinSize(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-questions.dto.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsDefined,\n  IsOptional,\n  IsPositive,\n  ValidateNested,\n} from 'class-validator';\nimport { CreateQuestionDto } from './create-question.dto';\n\nclass CreateQuestion extends OmitType(CreateQuestionDto, ['groupId']) {\n  @IsOptional()\n  @IsPositive()\n  id?: number;\n}\n\nexport class CreateQuestionsDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateQuestion)\n  @IsDefined({ each: true })\n  @ArrayMinSize(1)\n  questions: CreateQuestion[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsCPF()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnrollment()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserRole)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserType)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum } from 'class-validator';\nimport { IsCPF } from 'brazilian-class-validator';\nimport { PickType } from '@nestjs/swagger';\n\nimport { IsEnrollment } from '../../core/decorators/is-enrollment.decorator';\nimport { UserType } from '../enum/user-type.enum';\nimport { CreateAuthDto } from '../../auth/dtos/create-auth.dto';\nimport { UserRole } from '../enum/user-role.enum';\n\nexport class CreateUserDto extends PickType(CreateAuthDto, ['password']) {\n  @IsCPF()\n  cpf: string;\n\n  @IsEnrollment()\n  enrollment: string;\n\n  @IsEnum(UserType)\n  type: UserType;\n\n  @IsEnum(UserRole)\n  role: UserRole;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CsvLine.html":{"url":"interfaces/CsvLine.html","title":"interface - CsvLine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CsvLine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/interfaces/csv-line.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        Disciplina\n                                \n                                \n                                        Grupo de Questões\n                                \n                                \n                                        Matrícula\n                                \n                                \n                                        Nota\n                                \n                                \n                                        Questão\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Disciplina\n                                    \n                                \n                                \n                                    \n                                        Disciplina:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Grupo de Questões\n                                    \n                                \n                                \n                                    \n                                        Grupo de Questões:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Matrícula\n                                    \n                                \n                                \n                                    \n                                        Matrícula:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Nota\n                                    \n                                \n                                \n                                    \n                                        Nota:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Questão\n                                    \n                                \n                                \n                                    \n                                        Questão:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CsvLine {\n  'Grupo de Questões': String,\n  'Disciplina'?: String,\n  'Questão': String,\n  'Matrícula': String,\n  'Nota': String,\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger, Injectable, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class CustomLogger extends Logger {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam.html":{"url":"classes/Exam.html","title":"class - Exam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                agreements\n                            \n                            \n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                groups\n                            \n                            \n                                period\n                            \n                            \n                                periodId\n                            \n                            \n                                startedAt\n                            \n                            \n                                status\n                            \n                            \n                                    Optional\n                                targets\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    start\n                                \n                                \n                                    end\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            agreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groups\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QuestionGroup[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            periodId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamStatus})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamTarget[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/exam/entities/exam.entity.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        start\n                    \n                \n\n                \n                    \n                        getstart()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/entities/exam.entity.ts:58\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        end\n                    \n                \n\n                \n                    \n                        getend()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/entities/exam.entity.ts:62\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Period } from 'src/auxiliary/entities/period.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport {\n  AfterLoad,\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { ExamStatus } from '../enums/exam-status.enum';\nimport { ExamAgreement } from './exam-agreement.entity';\nimport { ExamTarget } from './exam-target.entity';\n\n@Entity('exam')\nexport class Exam extends FFEntity {\n  @Column({ type: 'text' })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'datetime' })\n  startedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @Column({ type: 'bool', default: false })\n  allowAnonymous: boolean;\n\n  @Column({ type: 'enum', enum: ExamStatus })\n  status: ExamStatus;\n\n  @Column({ type: 'int' })\n  periodId: number;\n\n  @ManyToMany(() => ExamTarget)\n  @JoinTable()\n  targets?: ExamTarget[];\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => QuestionGroup, (group) => group.exam)\n  groups: QuestionGroup[];\n\n  @OneToMany(() => ExamAgreement, (agreement) => agreement.exam)\n  agreements: ExamAgreement[];\n\n  @AfterLoad()\n  sortItems() {\n    this.groups = this.groups?.sort((a, b) => a.position - b.position) ?? [];\n  }\n\n  get start(): Date {\n    return this.startedAt;\n  }\n\n  get end(): Date {\n    return this.endedAt;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam1620478273991.html":{"url":"classes/Exam1620478273991.html","title":"class - Exam1620478273991","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam1620478273991\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620478273991-Exam.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam1620478273991'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620478273991-Exam.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Exam1620478273991 implements MigrationInterface {\n    name = 'Exam1620478273991'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL DEFAULT 0\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreement.html":{"url":"classes/ExamAgreement.html","title":"class - ExamAgreement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam-agreement.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anonymous\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                    Optional\n                                observation\n                            \n                            \n                                status\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                uuid\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasFinishedExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'boolean', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            observation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreementStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamAgreementStatus, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uuid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Generated('uuid')@Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasFinishedExam\n                        \n                        \n                    \n                \n            \n            \n                \nhasFinishedExam()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/entities/exam-agreement.entity.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from '../../core/entities/ff.entity';\nimport { Column, Entity, Generated, ManyToOne } from 'typeorm';\nimport { User } from 'src/user/entities/user.entity';\nimport { Exam } from './exam.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\n\n@Entity('exam_agreement')\nexport class ExamAgreement extends FFEntity {\n  @Generated('uuid')\n  @Column({ unique: true })\n  uuid: string;\n\n  @Column({ type: 'boolean', default: false })\n  anonymous: boolean;\n\n  @Column({ type: 'text', nullable: true })\n  observation?: string;\n\n  @Column({\n    type: 'enum',\n    enum: ExamAgreementStatus,\n    default: ExamAgreementStatus.STARTED,\n  })\n  status: ExamAgreementStatus;\n\n  @Column({ type: 'int' })\n  userId: number;\n\n  @Column({ type: 'int' })\n  examId: number;\n\n  @ManyToOne(() => User)\n  user: User;\n\n  @ManyToOne(() => Exam)\n  exam: Exam;\n\n  hasFinishedExam(): boolean {\n    return this.status === ExamAgreementStatus.FINISHED;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreement1622332886234.html":{"url":"classes/ExamAgreement1622332886234.html","title":"class - ExamAgreement1622332886234","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreement1622332886234\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622332886234-ExamAgreement.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreement1622332886234'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreement1622332886234 implements MigrationInterface {\n  name = 'ExamAgreement1622332886234';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD `exam_id` int NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `uuid` `uuid` varchar(36) NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD CONSTRAINT `FK_20bfb4e7c97aa20956be86c6beb` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD CONSTRAINT `FK_7bdc7fbb138980e5471e2a19366` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP FOREIGN KEY `FK_7bdc7fbb138980e5471e2a19366`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP FOREIGN KEY `FK_20bfb4e7c97aa20956be86c6beb`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `uuid` `uuid` varchar(255) NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP COLUMN `exam_id`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementAnonymousDefault1622334780336.html":{"url":"classes/ExamAgreementAnonymousDefault1622334780336.html","title":"class - ExamAgreementAnonymousDefault1622334780336","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementAnonymousDefault1622334780336\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreementAnonymousDefault1622334780336'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreementAnonymousDefault1622334780336\n  implements MigrationInterface {\n  name = 'ExamAgreementAnonymousDefault1622334780336';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `anonymous` `anonymous` tinyint NOT NULL DEFAULT 0',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `anonymous` `anonymous` tinyint NOT NULL',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamAgreementController.html":{"url":"controllers/ExamAgreementController.html","title":"controller - ExamAgreementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamAgreementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam-agreement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam-agreement\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAgreement\n                            \n                            \n                                    Async\n                                updateAgreemment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAgreement(createAgreementDto: CreateExamAgreementDto, user: ExamAgreementUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-agreement.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAgreementDto\n                                    \n                                                CreateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamAgreementUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAgreemment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAgreemment(id: number, updateAgreementDto: UpdateExamAgreementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: ExamAgreement})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-agreement.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAgreementDto\n                                    \n                                                UpdateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { CreateExamAgreementDto } from '../dtos/create-exam-agreement.dto';\nimport { UpdateExamAgreementDto } from '../dtos/update-exam-agreement.dto';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\nimport { ExamAgreementUser } from '../interfaces/exam-agreement-user.interface';\nimport { ExamAgreementService } from '../services/exam-agreement.service';\n\n@Controller('exam-agreement')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\n@ApiTags('ExamAgreement')\nexport class ExamAgreementController {\n  constructor(private readonly examAgreementService: ExamAgreementService) {}\n\n  @Post()\n  async createAgreement(\n    @Body() createAgreementDto: CreateExamAgreementDto,\n    @GetUser() user: ExamAgreementUser,\n  ): Promise {\n    return this.examAgreementService.createAgreement(createAgreementDto, user);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: ExamAgreement })\n  async updateAgreemment(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAgreementDto: UpdateExamAgreementDto,\n  ): Promise {\n    return this.examAgreementService.updateAgreement(id, updateAgreementDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementDto.html":{"url":"classes/ExamAgreementDto.html","title":"class - ExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/exam-agreement.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/exam-agreement.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from '@nestjs/swagger';\nimport { IsPositive } from 'class-validator';\n\nexport class ExamAgreementDto {\n  @ApiHideProperty()\n  userId: number;\n\n  @IsPositive()\n  examId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementObservation1622417032753.html":{"url":"classes/ExamAgreementObservation1622417032753.html","title":"class - ExamAgreementObservation1622417032753","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementObservation1622417032753\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622417032753-ExamAgreementObservation.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreementObservation1622417032753'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreementObservation1622417032753\n  implements MigrationInterface {\n  name = 'ExamAgreementObservation1622417032753';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD `observation` text NULL',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP COLUMN `observation`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementRepository.html":{"url":"classes/ExamAgreementRepository.html","title":"class - ExamAgreementRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam-agreement.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\n\n@EntityRepository(ExamAgreement)\nexport class ExamAgreementRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamAgreementService.html":{"url":"injectables/ExamAgreementService.html","title":"injectable - ExamAgreementService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamAgreementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam-agreement.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                agreementsByDateInterval\n                            \n                            \n                                    Async\n                                createAgreement\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                finishExam\n                            \n                            \n                                getByUser\n                            \n                            \n                                    Async\n                                updateAgreement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamAgreementRepository, examService: ExamService)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam-agreement.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamAgreementRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examService\n                                                  \n                                                        \n                                                                        ExamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            agreementsByDateInterval\n                        \n                        \n                    \n                \n            \n            \n                \nagreementsByDateInterval(start: Date, end: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAgreement(createAgreementDto: CreateExamAgreementDto, user: ExamAgreementUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAgreementDto\n                                    \n                                                CreateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamAgreementUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(findDto: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            finishExam\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    finishExam(agreement: ExamAgreement)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    agreement\n                                    \n                                                ExamAgreement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetByUser(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAgreement(id: number, updateAgreementDto: UpdateExamAgreementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAgreementDto\n                                    \n                                                UpdateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport { Between } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateExamAgreementDto } from '../dtos/create-exam-agreement.dto';\nimport { UpdateExamAgreementDto } from '../dtos/update-exam-agreement.dto';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { ExamAgreementUser } from '../interfaces/exam-agreement-user.interface';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamAgreementRepository } from '../repositories/exam-agreement.repository';\nimport { ExamService } from './exam.service';\n\n@Injectable()\nexport class ExamAgreementService {\n  constructor(\n    @InjectRepository(ExamAgreementRepository)\n    private readonly repository: ExamAgreementRepository,\n    @Inject(forwardRef(() => ExamService))\n    private readonly examService: ExamService,\n  ) {}\n\n  @Transactional()\n  async createAgreement(\n    createAgreementDto: CreateExamAgreementDto,\n    user: ExamAgreementUser,\n  ): Promise {\n    const exam = await this.examService.findOne(createAgreementDto.examId);\n    const alreadyAgreed = await this.repository.findOne({\n      where: { exam, user },\n    });\n\n    if (alreadyAgreed) {\n      throw new ConflictException('already agreed');\n    }\n\n    const agreement = this.repository.create({\n      ...createAgreementDto,\n      userId: user.id,\n    });\n\n    return this.repository.save(agreement);\n  }\n\n  @Transactional()\n  async updateAgreement(\n    id: number,\n    updateAgreementDto: UpdateExamAgreementDto,\n  ): Promise {\n    let agreement = await this.repository.findOne(id);\n\n    if (!agreement) {\n      throw new NotFoundException({ id });\n    }\n\n    if (agreement.status === ExamAgreementStatus.FINISHED) {\n      delete updateAgreementDto.anonymous;\n    }\n\n    agreement = this.repository.merge(agreement, updateAgreementDto);\n\n    return this.repository.save(agreement);\n  }\n\n  agreementsByDateInterval(start: Date, end: Date): Promise {\n    return this.repository.find({ where: { createdAt: Between(start, end) } });\n  }\n\n  @Transactional()\n  getByUser(user: ExamUser): Promise {\n    return this.repository.find({\n      where: { userId: user.id },\n      relations: ['exam'],\n    });\n  }\n\n  async findOne(findDto: {\n    userId: number;\n    examId: number;\n  }): Promise {\n    const agreement = await this.repository.findOne({\n      where: findDto,\n      relations: ['exam'],\n    });\n\n    if (!agreement) {\n      throw new NotFoundException(findDto);\n    }\n\n    return agreement;\n  }\n\n  async finishExam(agreement: ExamAgreement): Promise {\n    agreement.status = ExamAgreementStatus.FINISHED;\n\n    return this.repository.save(agreement);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamAgreementUser.html":{"url":"interfaces/ExamAgreementUser.html","title":"interface - ExamAgreementUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamAgreementUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/interfaces/exam-agreement-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasGrade\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasGrade\n                        \n                        \n                    \n                \n            \n            \n                \nhasGrade()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/interfaces/exam-agreement-user.interface.ts:3\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ExamAgreementUser {\n  id: number;\n  hasGrade(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamController.html":{"url":"controllers/ExamController.html","title":"controller - ExamController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Exam})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@ApiOkResponse({type: ExamPersonalResult})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n} from '@nestjs/common';\nimport { ExamService } from '../services/exam.service';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { UpdateExamDto } from '../dtos/update-exam.dto';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { Exam } from '../entities/exam.entity';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamPersonalResult } from '../models/exam-personal-result.model';\n\n@Controller('exam')\n@ApiTags('Exam')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class ExamController {\n  constructor(private readonly examService: ExamService) {}\n\n  @Post()\n  @ApiOkResponse({ type: Exam })\n  async create(@Body() createExamDto: CreateExamDto): Promise {\n    return this.examService.create(createExamDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Exam] })\n  async findAll(): Promise {\n    return this.examService.findAll();\n  }\n\n  @Get('me')\n  @ApiOkResponse({ type: ExamPersonalResult })\n  async findPersonal(@GetUser() user: ExamUser): Promise {\n    return this.examService.findPersonal(user);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.examService.findOne(id);\n  }\n\n  @Put(':id')\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateExamDto: UpdateExamDto,\n  ): Promise {\n    return this.examService.update(id, updateExamDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.examService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExamModule.html":{"url":"modules/ExamModule.html","title":"module - ExamModule","body":"\n                   \n\n\n\n\n    Modules\n    ExamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_ExamModule_imports\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\n\n\nExamModule\n\nExamModule\n\nExamModule -->\n\nAuxiliaryModule->ExamModule\n\n\n\n\n\nExamAgreementService \n\nExamAgreementService \n\nExamAgreementService  -->\n\nExamModule->ExamAgreementService \n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\n\n\nExamAgreementService\n\nExamAgreementService\n\nExamModule -->\n\nExamAgreementService->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nExamTargetNodeFactory\n\nExamTargetNodeFactory\n\nExamModule -->\n\nExamTargetNodeFactory->ExamModule\n\n\n\n\n\nExamTargetService\n\nExamTargetService\n\nExamModule -->\n\nExamTargetService->ExamModule\n\n\n\n\n\nExamTargetTree\n\nExamTargetTree\n\nExamModule -->\n\nExamTargetTree->ExamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exam/exam.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExamAgreementService\n                        \n                        \n                            ExamService\n                        \n                        \n                            ExamTargetNodeFactory\n                        \n                        \n                            ExamTargetService\n                        \n                        \n                            ExamTargetTree\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExamController\n                        \n                        \n                            ExamTargetController\n                        \n                        \n                            ExamAgreementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuxiliaryModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExamAgreementService\n                        \n                        \n                            ExamService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { ExamService } from './services/exam.service';\nimport { ExamController } from './controllers/exam.controller';\nimport { ExamRepository } from './repositories/exam.repository';\nimport { ExamTargetRepository } from './repositories/exam-target.repository';\nimport { ExamTargetService } from './services/exam-target.service';\nimport { ExamTargetController } from './controllers/exam-target.controller';\nimport { ExamAgreementService } from './services/exam-agreement.service';\nimport { ExamAgreementRepository } from './repositories/exam-agreement.repository';\nimport { ExamAgreementController } from './controllers/exam-agreement.controller';\nimport { ExamTargetTree } from './providers/exam-target-tree.provider';\nimport { ExamTargetNodeFactory } from './factories/exam-target-node.factory';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      ExamRepository,\n      ExamTargetRepository,\n      ExamAgreementRepository,\n    ]),\n    AuxiliaryModule,\n  ],\n  controllers: [ExamController, ExamTargetController, ExamAgreementController],\n  providers: [\n    ExamService,\n    ExamTargetService,\n    ExamAgreementService,\n    ExamTargetTree,\n    ExamTargetNodeFactory,\n  ],\n  exports: [ExamService, ExamAgreementService],\n})\nexport class ExamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamPersonalResult.html":{"url":"classes/ExamPersonalResult.html","title":"class - ExamPersonalResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamPersonalResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/models/exam-personal-result.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alreadyAgreed\n                            \n                            \n                                answered\n                            \n                            \n                                canAgree\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alreadyAgreed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-personal-result.model.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answered\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-personal-result.model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            canAgree\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-personal-result.model.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exam } from '../entities/exam.entity';\n\nexport class ExamPersonalResult {\n  alreadyAgreed: Exam[];\n  canAgree: Exam[];\n  answered: Exam[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamRepository.html":{"url":"classes/ExamRepository.html","title":"class - ExamRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findByTargets\n                            \n                            \n                                    Async\n                                findByUser\n                            \n                            \n                                    Private\n                                loadRelations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByTargets(undefined: FindExamByUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/repositories/exam.repository.ts:25\n                \n            \n\n\n            \n                \n                    SELECT DISTINCT exam.*\nFROM exam\nLEFT JOIN exam_targets_exam_target et\n  ON exam.id = et.exam_id\nINNER JOIN exam_target target\n  on et.exam_target_id = target.id AND target.type IN :targets\nWHERE\n  (exam.id NOT IN :ids)\n  (exam.status = \"ACTIVE\") AND\n  (exam.created_at BETWEEN :start AND :end) AND\n  (exam.deleted_at IS NULL)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindExamByUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUser(user: ExamUser)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/repositories/exam.repository.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            loadRelations\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadRelations(query: SelectQueryBuilder)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/repositories/exam.repository.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, SelectQueryBuilder } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { FindExamByUserDto } from '../dtos/find-exam-by-user.dto';\nimport { ExamTarget } from '../entities/exam-target.entity';\nimport { Exam } from '../entities/exam.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { ExamStatus } from '../enums/exam-status.enum';\nimport { ExamUser } from '../interfaces/exam-user.interface';\n\n@EntityRepository(Exam)\nexport class ExamRepository extends BaseRepository {\n  /**\n   * SELECT DISTINCT exam.*\n   * FROM exam\n   * LEFT JOIN exam_targets_exam_target et\n   *  ON exam.id = et.exam_id\n   * INNER JOIN exam_target target\n   *  on et.exam_target_id = target.id AND target.type IN :targets\n   * WHERE\n   *  (exam.id NOT IN :ids)\n   *  (exam.status = \"ACTIVE\") AND\n   *  (exam.created_at BETWEEN :start AND :end) AND\n   *  (exam.deleted_at IS NULL)\n   */\n  async findByTargets({\n    ignoreExams,\n    targets,\n  }: FindExamByUserDto): Promise {\n    const query = this.createQueryBuilder('exam');\n\n    query\n      .distinct(true)\n      .leftJoin('exam_targets_exam_target', 'et', 'exam.id = et.exam_id')\n      .leftJoin(\n        ExamTarget,\n        'target',\n        'et.exam_target_id = target.id AND target.type IN (:...targets)',\n        { targets },\n      )\n      .where('exam.status = :status', { status: ExamStatus.ACTIVE })\n      .andWhere(':date BETWEEN exam.startedAt AND exam.endedAt', {\n        date: new Date(),\n      });\n\n    if (ignoreExams.length) {\n      query.andWhere('exam.id NOT IN (:...ids)', {\n        ids: ignoreExams.map((el) => el.id),\n      });\n    }\n    // .andWhere('exam.created_at BETWEEN :start AND :end', {start})\n\n    return this.loadRelations(query).getMany();\n  }\n\n  async findByUser(user: ExamUser): Promise {\n    const query = this.createQueryBuilder('exam');\n\n    query\n      .innerJoinAndSelect('exam.agreements', 'agreement')\n      .where('agreement.userId = :userId', { userId: user.id })\n      .andWhere(\n        '(agreement.status = :answered OR (agreement.status = :defaultAgreementStatus AND :date BETWEEN exam.startedAt AND exam.endedAt))',\n        {\n          answered: ExamAgreementStatus.FINISHED,\n          defaultAgreementStatus: ExamAgreementStatus.STARTED,\n          date: new Date(),\n        },\n      );\n\n    return this.loadRelations(query).getMany();\n  }\n\n  private loadRelations(\n    query: SelectQueryBuilder,\n  ): SelectQueryBuilder {\n    return query\n      .innerJoinAndSelect('exam.period', 'exam_period')\n      .leftJoinAndSelect('exam.targets', 'exam_target');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamService.html":{"url":"injectables/ExamService.html","title":"injectable - ExamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                relations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Private\n                                    Async\n                                newExam\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamRepository, targetService: ExamTargetService, periodService: PeriodService)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetService\n                                                  \n                                                        \n                                                                        ExamTargetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        periodService\n                                                  \n                                                        \n                                                                        PeriodService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            newExam\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newExam(dto: CreateExamDto | UpdateExamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateExamDto | UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                                Readonly\n                            relations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    'groups',\n    'period',\n    'agreements',\n    'targets',\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/services/exam.service.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { groupBy, first } from 'lodash';\nimport { PeriodService } from 'src/auxiliary/services/period.service';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { UpdateExamDto } from '../dtos/update-exam.dto';\nimport { Exam } from '../entities/exam.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { EXAM_NOT_FOUND } from '../exam.constants';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamPersonalResult } from '../models/exam-personal-result.model';\nimport { ExamRepository } from '../repositories/exam.repository';\nimport { ExamTargetService } from './exam-target.service';\n\n@Injectable()\nexport class ExamService {\n  private static readonly relations = [\n    'groups',\n    'period',\n    'agreements',\n    'targets',\n  ];\n\n  constructor(\n    @InjectRepository(ExamRepository)\n    private readonly repository: ExamRepository,\n    private readonly targetService: ExamTargetService,\n    private readonly periodService: PeriodService,\n  ) {}\n\n  private async newExam(dto: CreateExamDto | UpdateExamDto): Promise {\n    const { targets, ...entityLike } = dto;\n    const exam = this.repository.create(entityLike);\n\n    if (targets) {\n      const targetMap = await this.targetService.getTargetMap();\n      exam.targets = targets.map((target) => targetMap.get(target)!);\n    }\n\n    return exam;\n  }\n\n  @Transactional()\n  async create(createExamDto: CreateExamDto): Promise {\n    const exam = await this.newExam(createExamDto);\n    exam.period = await this.periodService.getPeriodByInterval(exam);\n\n    return this.repository.save(exam);\n  }\n\n  findAll(): Promise {\n    return this.repository.find({ relations: ExamService.relations });\n  }\n\n  async findOne(id: number): Promise {\n    const exam = await this.repository.findOne(id, {\n      relations: ExamService.relations,\n    });\n    if (!exam) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n\n    return exam;\n  }\n\n  @Transactional()\n  async findPersonal(user: ExamUser): Promise {\n    const agreed = await this.repository.findByUser(user);\n\n    const targets = this.targetService.getTargetsForUser(user.type);\n\n    const canAgree = await this.repository.findByTargets({\n      ignoreExams: agreed,\n      targets,\n    });\n\n    const {\n      [ExamAgreementStatus.STARTED]: alreadyAgreed = [],\n      [ExamAgreementStatus.FINISHED]: answered = [],\n    } = groupBy(agreed, (exam) => first(exam.agreements)?.status);\n\n    return { alreadyAgreed, answered, canAgree };\n  }\n\n  @Transactional()\n  async update(id: number, updateExamDto: UpdateExamDto) {\n    let exam = await this.findOne(id);\n\n    exam = this.repository.merge(exam, await this.newExam(updateExamDto));\n\n    return this.repository.save(exam);\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTarget.html":{"url":"classes/ExamTarget.html","title":"class - ExamTarget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTarget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam-target.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamTargetType, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-target.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity } from 'typeorm';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\n\n@Entity('exam_target')\nexport class ExamTarget extends FFEntity {\n  @Column({ type: 'enum', enum: ExamTargetType, unique: true })\n  type: ExamTargetType;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTarget1622326106015.html":{"url":"classes/ExamTarget1622326106015.html","title":"class - ExamTarget1622326106015","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTarget1622326106015\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622326106015-ExamTarget.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTarget1622326106015'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nconst targets = [\"Student\", \"Professor\"];\n\nexport class ExamTarget1622326106015 implements MigrationInterface {\n  name = 'ExamTarget1622326106015';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IX_question_group_target` ON `question_group`',\n    );\n    await queryRunner.query(\n      \"CREATE TABLE `exam_target` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `type` enum ('Student', 'Professor') NOT NULL, UNIQUE INDEX `IDX_988f784cc581e38b7ed4943006` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n    await Promise.all(targets.map(target => queryRunner.query('INSERT INTO `exam_target` (`type`) VALUES (?)', [target])));\n    await queryRunner.query(\n      'CREATE TABLE `exam_targets_exam_target` (`exam_id` int NOT NULL, `exam_target_id` int NOT NULL, INDEX `IDX_4a22969058fa5105ad6bee583f` (`exam_id`), INDEX `IDX_af1604ea5493f65a6c8d70d98e` (`exam_target_id`), PRIMARY KEY (`exam_id`, `exam_target_id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `target`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` ADD CONSTRAINT `FK_4a22969058fa5105ad6bee583f1` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` ADD CONSTRAINT `FK_af1604ea5493f65a6c8d70d98ed` FOREIGN KEY (`exam_target_id`) REFERENCES `exam_target`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` DROP FOREIGN KEY `FK_af1604ea5493f65a6c8d70d98ed`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` DROP FOREIGN KEY `FK_4a22969058fa5105ad6bee583f1`',\n    );\n    await queryRunner.query(\n      \"ALTER TABLE `question_group` ADD `target` enum ('Student', 'Professor') NULL\",\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_af1604ea5493f65a6c8d70d98e` ON `exam_targets_exam_target`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_4a22969058fa5105ad6bee583f` ON `exam_targets_exam_target`',\n    );\n    await queryRunner.query('DROP TABLE `exam_targets_exam_target`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_988f784cc581e38b7ed4943006` ON `exam_target`',\n    );\n    await queryRunner.query('DROP TABLE `exam_target`');\n    await queryRunner.query(\n      'CREATE INDEX `IX_question_group_target` ON `question_group` (`target`)',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetAdd1622378888497.html":{"url":"classes/ExamTargetAdd1622378888497.html","title":"class - ExamTargetAdd1622378888497","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetAdd1622378888497\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622378888497-ExamTargetAdd.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTargetAdd1622378888497'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nconst addTargets = ['Course', 'Grade'];\n\nexport class ExamTargetAdd1622378888497 implements MigrationInterface {\n  name = 'ExamTargetAdd1622378888497';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"ALTER TABLE `exam_target` CHANGE `type` `type` enum ('Student', 'Professor', 'Course', 'Grade') NOT NULL\",\n    );\n    await Promise.all(\n      addTargets.map((target) =>\n        queryRunner.query('INSERT INTO exam_target (`type`) VALUES (?)', [\n          target,\n        ]),\n      ),\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `DELETE FROM exam_target WHERE type IN (${addTargets\n        .map((_) => '?')\n        .join(', ')})`,\n      [...addTargets],\n    );\n    await queryRunner.query(\n      \"ALTER TABLE `exam_target` CHANGE `type` `type` enum ('Student', 'Professor') NOT NULL\",\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamTargetController.html":{"url":"controllers/ExamTargetController.html","title":"controller - ExamTargetController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamTargetController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam-target.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam-target\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getForUser\n                            \n                            \n                                    Async\n                                getTargets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getForUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetForUser(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user')@ApiExcludeEndpoint()\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-target.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTargets()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined, schema: undefined})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-target.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { ApiExcludeEndpoint, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamTargetService } from '../services/exam-target.service';\n\n@Controller('exam-target')\n@ApiTags('ExamTarget')\n@UseGuards(JwtGuard)\nexport class ExamTargetController {\n  constructor(private readonly targetService: ExamTargetService) {}\n\n  @Get()\n  @ApiOkResponse({\n    type: [String],\n    schema: { example: Object.values(ExamTargetType) },\n  })\n  async getTargets(): Promise {\n    return this.targetService.getTargets();\n  }\n\n  @Get('user')\n  @ApiExcludeEndpoint()\n  getForUser(@GetUser() user: ExamUser) {\n    return this.targetService.getTargetsForUser(user.type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamTargetManagerDto.html":{"url":"interfaces/ExamTargetManagerDto.html","title":"interface - ExamTargetManagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamTargetManagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/exam-target-manager.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        targets\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        targets\n                                    \n                                \n                                \n                                    \n                                        targets:         ExamTargetType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ExamTargetType } from '../enums/exam-target-type.enum';\n\nexport interface ExamTargetManagerDto {\n  targets?: ExamTargetType[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetNode.html":{"url":"classes/ExamTargetNode.html","title":"class - ExamTargetNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/models/exam-target-node.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                childs\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dfs\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isLeaf\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamTargetNode[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-target-node.model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-target-node.model.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dfs\n                        \n                        \n                    \n                \n            \n            \n                \ndfs(type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/models/exam-target-node.model.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Path\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isLeaf\n                    \n                \n\n                \n                    \n                        getisLeaf()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/models/exam-target-node.model.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ExamTargetType } from '../enums/exam-target-type.enum';\n\ntype Path = ExamTargetNode[] | undefined;\n\nexport class ExamTargetNode {\n  childs: ExamTargetNode[];\n  type: ExamTargetType;\n\n  get isLeaf(): boolean {\n    return !this.childs.length;\n  }\n\n  dfs(type: string): Path {\n    if (this.type === type) {\n      return [this];\n    }\n    if (this.isLeaf) return;\n    for (const node of this.childs) {\n      const partialPath = node.dfs(type);\n      if (partialPath) {\n        return [this, ...partialPath];\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetNodeFactory.html":{"url":"injectables/ExamTargetNodeFactory.html","title":"injectable - ExamTargetNodeFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetNodeFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/factories/exam-target-node.factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generate\n                        \n                        \n                    \n                \n            \n            \n                \ngenerate(schema: ExamTargetNodeSchema)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/factories/exam-target-node.factory.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ExamTargetNodeSchema\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExamTargetNode\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\ninterface ExamTargetNodeSchema {\n  type: ExamTargetType;\n  childs?: ExamTargetNodeSchema[];\n}\n\n@Injectable()\nexport class ExamTargetNodeFactory {\n  generate(schema: ExamTargetNodeSchema): ExamTargetNode {\n    const node = new ExamTargetNode();\n    node.type = schema.type;\n\n    node.childs = schema.childs?.map((node) => this.generate(node)) ?? [];\n\n    return node;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamTargetNodeSchema.html":{"url":"interfaces/ExamTargetNodeSchema.html","title":"interface - ExamTargetNodeSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamTargetNodeSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/factories/exam-target-node.factory.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        childs\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        childs\n                                    \n                                \n                                \n                                    \n                                        childs:         ExamTargetNodeSchema[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetNodeSchema[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ExamTargetType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\ninterface ExamTargetNodeSchema {\n  type: ExamTargetType;\n  childs?: ExamTargetNodeSchema[];\n}\n\n@Injectable()\nexport class ExamTargetNodeFactory {\n  generate(schema: ExamTargetNodeSchema): ExamTargetNode {\n    const node = new ExamTargetNode();\n    node.type = schema.type;\n\n    node.childs = schema.childs?.map((node) => this.generate(node)) ?? [];\n\n    return node;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetRepository.html":{"url":"classes/ExamTargetRepository.html","title":"class - ExamTargetRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam-target.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { ExamTarget } from '../entities/exam-target.entity';\n\n@EntityRepository(ExamTarget)\nexport class ExamTargetRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetService.html":{"url":"injectables/ExamTargetService.html","title":"injectable - ExamTargetService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam-target.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _targetMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTargetMap\n                            \n                            \n                                    Async\n                                getTargets\n                            \n                            \n                                getTargetsForUser\n                            \n                            \n                                    Private\n                                    Async\n                                loadTargetMap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamTargetRepository, tree: ExamTargetTree)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam-target.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamTargetRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        ExamTargetTree\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTargetMap\n                        \n                        \n                    \n                \n            \n            \n                \ngetTargetMap()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTargets()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTargetsForUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetTargetsForUser(target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExamTargetType[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            loadTargetMap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadTargetMap()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Optional\n                            _targetMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReadonlyMap\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/services/exam-target.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport _ = require('lodash');\n\nimport { ExamTarget } from '../entities/exam-target.entity';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetTree } from '../providers/exam-target-tree.provider';\nimport { ExamTargetRepository } from '../repositories/exam-target.repository';\n\n@Injectable()\nexport class ExamTargetService {\n  private _targetMap?: ReadonlyMap;\n\n  constructor(\n    @InjectRepository(ExamTargetRepository)\n    private readonly repository: ExamTargetRepository,\n    private readonly tree: ExamTargetTree,\n  ) {\n    this.loadTargetMap();\n  }\n\n  private async loadTargetMap(): Promise {\n    const targets = await this.repository.find();\n\n    this._targetMap = new Map(\n      targets.map((target) => [target.type, target]),\n    );\n  }\n\n  getTargetMap(): Promise> {\n    return new Promise((resolve, reject) => {\n      if (!this._targetMap) {\n        return this.loadTargetMap()\n          .then(() => resolve(_.cloneDeep(this._targetMap!)))\n          .catch((e) => reject(e));\n      }\n\n      resolve(_.cloneDeep(this._targetMap));\n    });\n  }\n\n  async getTargets(): Promise {\n    const map = await this.getTargetMap();\n\n    return Array.from(map.values()).map((target) => target.type);\n  }\n\n  getTargetsForUser(target: string): ExamTargetType[] {\n    return this.tree.queryTarget(target).map((p) => p.type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetTree.html":{"url":"injectables/ExamTargetTree.html","title":"injectable - ExamTargetTree","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetTree\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/exam-target-tree.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                root\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                queryTarget\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(targetNodeFactory: ExamTargetNodeFactory)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/exam-target-tree.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        targetNodeFactory\n                                                  \n                                                        \n                                                                        ExamTargetNodeFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            queryTarget\n                        \n                        \n                    \n                \n            \n            \n                \nqueryTarget(target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/providers/exam-target-tree.provider.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ExamTargetNode[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            root\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/providers/exam-target-tree.provider.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNodeFactory } from '../factories/exam-target-node.factory';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\n@Injectable()\nexport class ExamTargetTree {\n  private readonly root: ExamTargetNode;\n\n  constructor(targetNodeFactory: ExamTargetNodeFactory) {\n    this.root = targetNodeFactory.generate({\n      type: ExamTargetType.COURSE,\n      childs: [\n        {\n          type: ExamTargetType.GRADE,\n          childs: [\n            { type: ExamTargetType.PROFESSOR },\n            { type: ExamTargetType.STUDENT },\n          ],\n        },\n      ],\n    });\n  }\n\n  queryTarget(target: string): ExamTargetNode[] {\n    const path = this.root.dfs(target);\n\n    if (!path) {\n      throw new NotFoundException(this.root, target);\n    }\n\n    return path;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTitle1621036457247.html":{"url":"classes/ExamTitle1621036457247.html","title":"class - ExamTitle1621036457247","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTitle1621036457247\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621036457247-ExamTitle.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTitle1621036457247'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class ExamTitle1621036457247 implements MigrationInterface {\n    name = 'ExamTitle1621036457247'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `text` `title` text NOT NULL\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `title` `text` text NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamUser.html":{"url":"interfaces/ExamUser.html","title":"interface - ExamUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/interfaces/exam-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         UserType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserType } from '../../user/enum/user-type.enum';\n\nexport interface ExamUser {\n  id: number;\n  type: UserType;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExportationController.html":{"url":"controllers/ExportationController.html","title":"controller - ExportationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExportationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/exportation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                export\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                exportToCsv\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            exportToCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportToCsv(examId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/csv/:examId')\n                \n            \n\n            \n                \n                    Defined in src/exportation/exportation.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  ParseIntPipe,\n  Post,\n  Param,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ExportationService } from './exportation.service';\n\n@Controller('export')\n@ApiTags('Exportation')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class ExportationController {\n  \n  constructor(\n    private readonly service: ExportationService\n  ) {}\n\n  @Post('/csv/:examId')\n  async exportToCsv(\n    @Param('examId', ParseIntPipe) examId: number,\n  ) {\n    return this.service.exportToCsv(examId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExportationModule.html":{"url":"modules/ExportationModule.html","title":"module - ExportationModule","body":"\n                   \n\n\n\n\n    Modules\n    ExportationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExportationModule\n\n\n\ncluster_ExportationModule_providers\n\n\n\ncluster_ExportationModule_exports\n\n\n\n\nExportationService \n\nExportationService \n\n\n\nExportationModule\n\nExportationModule\n\nExportationService  -->\n\nExportationModule->ExportationService \n\n\n\n\n\nExportationService\n\nExportationService\n\nExportationModule -->\n\nExportationService->ExportationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exportation/exportation.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExportationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExportationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExportationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ExportationController } from './exportation.controller';\nimport { ExportationRepository } from './exportation.repository';\nimport { ExportationService } from './exportation.service';\n\n@Module({\n  providers: [\n    ExportationService, \n    ExportationRepository,\n  ],\n  exports: [ExportationService],\n  controllers: [ExportationController],\n})\nexport class ExportationModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportationRepository.html":{"url":"classes/ExportationRepository.html","title":"class - ExportationRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportationRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/exportation.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCsvLines\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCsvLines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCsvLines(examId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.repository.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CsvLine } from \"./interfaces/csv-line.interface\"\nimport {getConnection} from \"typeorm\";\n\nexport class ExportationRepository {\n\n  async getCsvLines(examId: number): Promise {\n    const connection = getConnection();\n    const queryRunner = connection.createQueryRunner();\n    await queryRunner.connect();\n\n    let csvLines = await queryRunner.query(\n      \"SELECT a.score as 'score', qg.id as 'group_id', qg.title as 'group_title', qg.class as 'is_class', qg.personal as 'is_personal', q.id as 'question_id', q.statement as 'question_statement', u.enrollment as 'user_enrollment', ea.anonymous as 'anonymous' FROM exam ex JOIN exam_agreement ea ON ea.exam_id = ex.id JOIN answer a ON a.exam_agreement_id = ea.id JOIN user u ON u.id = ea.user_id JOIN question_group qg ON qg.exam_id = ex.id JOIN question q ON q.group_id = qg.id WHERE ex.id = ?\", [examId]\n    );\n\n    csvLines = csvLines.map((csvLine) => {\n      return {\n        'Grupo de Questões': csvLine.group_title,\n        'Disciplina': csvLine.is_class ? 'Sim':'Não',\n        'Questão': csvLine.question_statement,\n        'Matrícula': csvLine.anonymous ? 'Anônimo' : csvLine.user_enrollment,\n        'Nota': csvLine.score ? csvLine.score : 'Não se aplica', \n      }\n    });\n\n    return csvLines;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExportationService.html":{"url":"injectables/ExportationService.html","title":"injectable - ExportationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExportationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/exportation.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createCsv\n                            \n                            \n                                    Async\n                                exportToCsv\n                            \n                            \n                                    Private\n                                getFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExportationRepository, firebaseStorage: FirebaseStorageService)\n                    \n                \n                        \n                            \n                                Defined in src/exportation/exportation.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExportationRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        firebaseStorage\n                                                  \n                                                        \n                                                                        FirebaseStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCsv(csvLines: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    csvLines\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            exportToCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportToCsv(examId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getFileName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFileName(exportationType: ExportationType)\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exportationType\n                                    \n                                                ExportationType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport ObjectsToCsv from 'objects-to-csv';\n\nimport { ExportationRepository } from './exportation.repository';\n\nimport { ExportationType } from './enums/exportation-type.enum';\nimport { CsvLine } from './interfaces/csv-line.interface';\nimport { FirebaseStorageService } from 'src/firebase';\n\n@Injectable()\nexport class ExportationService {\n  constructor(\n    private readonly repository: ExportationRepository,\n    private readonly firebaseStorage: FirebaseStorageService,\n  ) {}\n\n  private getFileName(exportationType: ExportationType): string {\n    const fileDate = new Date()\n      .toLocaleDateString('pt-BR')\n      .replace(/\\//gu, '-');\n    const filePrefix = process.env.EXPORTED_FILE_PREFIX || 'exportation';\n    return `${exportationType}_${filePrefix}_${fileDate}.csv`;\n  }\n\n  private async createCsv(csvLines: Array): Promise {\n    const builder = new ObjectsToCsv(csvLines);\n\n    return Buffer.from(await builder.toString());\n  }\n\n  async exportToCsv(examId: number) {\n    const csvLines: CsvLine[] = await this.repository.getCsvLines(examId);\n\n    if (!csvLines.length) {\n      throw new NotFoundException('Nothing to export');\n    }\n\n    const fileName = this.getFileName(ExportationType.AVALIACAO);\n    const data = await this.createCsv(csvLines);\n\n    return this.firebaseStorage.upload(`exports/${fileName}`, {\n      data,\n      contentType: 'text/csv',\n      publicFile: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FFEntity.html":{"url":"classes/FFEntity.html","title":"class - FFEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FFEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/ff.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        TimestampEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/ff.entity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PrimaryGeneratedColumn } from 'typeorm';\nimport { TimestampEntity } from './timestamp.entity';\n\nexport class FFEntity extends TimestampEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileSendDto.html":{"url":"interfaces/FileSendDto.html","title":"interface - FileSendDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileSendDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/dtos/file-send.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        buffer\n                                \n                                \n                                        encoding\n                                \n                                \n                                        mimetype\n                                \n                                \n                                        originalname\n                                \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalname\n                                    \n                                \n                                \n                                    \n                                        originalname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FileSendDto {\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n  buffer: Buffer;\n  size: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindExamByUserDto.html":{"url":"interfaces/FindExamByUserDto.html","title":"interface - FindExamByUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindExamByUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/find-exam-by-user.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ignoreExams\n                                \n                                \n                                        targets\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreExams\n                                    \n                                \n                                \n                                    \n                                        ignoreExams:         Exam[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Exam[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targets\n                                    \n                                \n                                \n                                    \n                                        targets:         ExamTargetType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Exam } from '../entities/exam.entity';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nexport interface FindExamByUserDto {\n  ignoreExams: Exam[];\n  targets: ExamTargetType[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindPersonalDto.html":{"url":"classes/FindPersonalDto.html","title":"class - FindPersonalDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindPersonalDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/find-personal.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/find-personal.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserToFind | User\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/find-personal.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserToFind } from 'src/auxiliary/types/user-to-find.type';\nimport { User } from 'src/user/entities/user.entity';\n\nexport class FindPersonalDto {\n  examId: number;\n  user: UserToFind | User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAdmin.html":{"url":"injectables/FirebaseAdmin.html","title":"injectable - FirebaseAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                app\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                appCheck\n                            \n                            \n                                auth\n                            \n                            \n                                database\n                            \n                            \n                                delete\n                            \n                            \n                                firestore\n                            \n                            \n                                installations\n                            \n                            \n                                instanceId\n                            \n                            \n                                machineLearning\n                            \n                            \n                                messaging\n                            \n                            \n                                projectManagement\n                            \n                            \n                                remoteConfig\n                            \n                            \n                                securityRules\n                            \n                            \n                                storage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    options\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: FirebaseModuleOptions)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        FirebaseModuleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            appCheck\n                        \n                        \n                    \n                \n            \n            \n                \nappCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.appCheck.AppCheck\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            auth\n                        \n                        \n                    \n                \n            \n            \n                \nauth()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         firebase.auth.Auth\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            database\n                        \n                        \n                    \n                \n            \n            \n                \ndatabase(url?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     firebase.database.Database\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            firestore\n                        \n                        \n                    \n                \n            \n            \n                \nfirestore()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.firestore.Firestore\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            installations\n                        \n                        \n                    \n                \n            \n            \n                \ninstallations()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.installations.Installations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            instanceId\n                        \n                        \n                    \n                \n            \n            \n                \ninstanceId()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.instanceId.InstanceId\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            machineLearning\n                        \n                        \n                    \n                \n            \n            \n                \nmachineLearning()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.machineLearning.MachineLearning\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            messaging\n                        \n                        \n                    \n                \n            \n            \n                \nmessaging()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.messaging.Messaging\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            projectManagement\n                        \n                        \n                    \n                \n            \n            \n                \nprojectManagement()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.projectManagement.ProjectManagement\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remoteConfig\n                        \n                        \n                    \n                \n            \n            \n                \nremoteConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.remoteConfig.RemoteConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            securityRules\n                        \n                        \n                    \n                \n            \n            \n                \nsecurityRules()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.securityRules.SecurityRules\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            storage\n                        \n                        \n                    \n                \n            \n            \n                \nstorage()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.storage.Storage\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.app.App\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:24\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:28\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FIREBASE_OPTIONS } from '../firebase-admin.constants';\nimport { FirebaseModuleOptions } from '../../interfaces';\n\n@Injectable()\nexport class FirebaseAdmin implements firebase.app.App {\n  private readonly app: firebase.app.App;\n\n  constructor(@Inject(FIREBASE_OPTIONS) options: FirebaseModuleOptions) {\n    this.app = firebase.initializeApp({\n      databaseURL: options.databaseURL,\n      storageBucket: options.storageBucket,\n      credential: firebase.credential.cert(options.cert),\n    });\n  }\n  appCheck(): firebase.appCheck.AppCheck {\n    throw new Error('Method not implemented.');\n  }\n  installations(): firebase.installations.Installations {\n    throw new Error('Method not implemented.');\n  }\n\n  get name(): string {\n    return this.app.name;\n  }\n\n  get options(): firebase.AppOptions {\n    return this.app.options;\n  }\n\n  auth(): firebase.auth.Auth {\n    return this.app.auth();\n  }\n\n  database(url?: string): firebase.database.Database {\n    return this.app.database(url);\n  }\n\n  firestore(): firebase.firestore.Firestore {\n    return this.app.firestore();\n  }\n\n  instanceId(): firebase.instanceId.InstanceId {\n    return this.app.instanceId();\n  }\n\n  machineLearning(): firebase.machineLearning.MachineLearning {\n    return this.app.machineLearning();\n  }\n\n  messaging(): firebase.messaging.Messaging {\n    return this.app.messaging();\n  }\n\n  projectManagement(): firebase.projectManagement.ProjectManagement {\n    return this.app.projectManagement();\n  }\n\n  remoteConfig(): firebase.remoteConfig.RemoteConfig {\n    return this.app.remoteConfig();\n  }\n\n  securityRules(): firebase.securityRules.SecurityRules {\n    return this.app.securityRules();\n  }\n\n  storage(): firebase.storage.Storage {\n    return this.app.storage();\n  }\n\n  delete(): Promise {\n    return this.app.delete();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseAdminModule.html":{"url":"modules/FirebaseAdminModule.html","title":"module - FirebaseAdminModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseAdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FirebaseAdminModule\n\n\n\ncluster_FirebaseAdminModule_exports\n\n\n\ncluster_FirebaseAdminModule_providers\n\n\n\n\nFirebaseAdmin \n\nFirebaseAdmin \n\n\n\nFirebaseAdminModule\n\nFirebaseAdminModule\n\nFirebaseAdmin  -->\n\nFirebaseAdminModule->FirebaseAdmin \n\n\n\n\n\nFirebaseAdmin\n\nFirebaseAdmin\n\nFirebaseAdminModule -->\n\nFirebaseAdmin->FirebaseAdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase-admin/firebase-admin.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseAdmin\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseAdmin\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from '../interfaces';\nimport { FirebaseAdmin } from './providers/firebase-admin.provider';\nimport { FIREBASE_OPTIONS } from './firebase-admin.constants';\n\n@Module({ providers: [FirebaseAdmin], exports: [FirebaseAdmin] })\nexport class FirebaseAdminModule {\n  private static readonly exports = [FirebaseAdmin];\n  private static readonly providers: Provider[] = [FirebaseAdmin];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useValue: options,\n        },\n        ...this.providers,\n      ],\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      imports: options.imports ?? [],\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useFactory: options.useFactory,\n          inject: options.inject ?? [],\n        },\n        ...this.providers,\n      ],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAsyncModuleOptions.html":{"url":"interfaces/FirebaseAsyncModuleOptions.html","title":"interface - FirebaseAsyncModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAsyncModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        inject\n                                \n                                \n                                        useFactory\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAuthDecodedToken.html":{"url":"interfaces/FirebaseAuthDecodedToken.html","title":"interface - FirebaseAuthDecodedToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAuthDecodedToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        emailVerified\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailVerified\n                                    \n                                \n                                \n                                    \n                                        emailVerified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FirebaseAuthDecodedToken {\n  emailVerified?: boolean;\n  email?: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAuthService.html":{"url":"injectables/FirebaseAuthService.html","title":"injectable - FirebaseAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firebaseAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                deleteUser\n                            \n                            \n                                getUser\n                            \n                            \n                                updateUser\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createDto: firebase.auth.CreateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            firebase.auth.CreateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \nupdateUser(uid: string, updateDto: firebase.auth.UpdateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            firebase.auth.UpdateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firebaseAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         firebase.auth.Auth\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\n\nimport { FirebaseAuthDecodedToken } from '../interfaces/firebase-auth-decoded-token.interface';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseAuthService {\n  private readonly firebaseAuth: firebase.auth.Auth;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firebaseAuth = firebaseAdmin.auth();\n  }\n\n  async verifyToken(token: string): Promise {\n    try {\n      const decoded = await this.firebaseAuth.verifyIdToken(token);\n      return {\n        uid: decoded.uid,\n        email: decoded.email,\n        emailVerified: decoded.email_verified,\n      };\n    } catch (err) {\n      return null;\n    }\n  }\n\n  getUser(uid: string): Promise {\n    return this.firebaseAuth.getUser(uid);\n  }\n\n  createUser(\n    createDto: firebase.auth.CreateRequest,\n  ): Promise {\n    return this.firebaseAuth.createUser(createDto);\n  }\n\n  updateUser(\n    uid: string,\n    updateDto: firebase.auth.UpdateRequest,\n  ): Promise {\n    return this.firebaseAuth.updateUser(uid, updateDto);\n  }\n\n  deleteUser(uid: string): Promise {\n    return this.firebaseAuth.deleteUser(uid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseCloudMessagingService.html":{"url":"injectables/FirebaseCloudMessagingService.html","title":"injectable - FirebaseCloudMessagingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseCloudMessagingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-cloud-messaging.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                fcm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendToDevice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendToDevice\n                        \n                        \n                    \n                \n            \n            \n                \nsendToDevice(token: string, message: firebase.messaging.MessagingPayload, options?: firebase.messaging.MessagingOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            firebase.messaging.MessagingPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            firebase.messaging.MessagingOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            fcm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.messaging.Messaging\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseCloudMessagingService {\n  private readonly fcm: firebase.messaging.Messaging;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.fcm = firebaseAdmin.messaging();\n  }\n\n  sendToDevice(\n    token: string,\n    message: firebase.messaging.MessagingPayload,\n    options?: firebase.messaging.MessagingOptions,\n  ): Promise {\n    return this.fcm.sendToDevice(token, message, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseFirestoreService.html":{"url":"injectables/FirebaseFirestoreService.html","title":"injectable - FirebaseFirestoreService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseFirestoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-firestore.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firestore\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collection: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-firestore.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FirebaseFirestoreCollection\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firestore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.firestore.Firestore\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\nimport { FirebaseFirestoreCollection } from '../types/firebase-firestore-collection.type';\n\n@Injectable()\nexport class FirebaseFirestoreService {\n  private readonly firestore: firebase.firestore.Firestore;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firestore = firebaseAdmin.firestore();\n  }\n\n  getCollection(collection: string): FirebaseFirestoreCollection {\n    return this.firestore.collection(collection);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseModule.html":{"url":"modules/FirebaseModule.html","title":"module - FirebaseModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_FirebaseModule_exports\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module, Provider } from '@nestjs/common';\n\nimport { FirebaseAuthService } from './services/firebase-auth.service';\nimport { FirebaseCloudMessagingService } from './services/firebase-cloud-messaging.service';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from './interfaces/firebase-async-module-options.interface';\nimport { FirebaseAdminModule } from './firebase-admin/firebase-admin.module';\nimport { FirebaseStorageService, FirebaseFirestoreService } from './services';\n\n@Module({\n  providers: [FirebaseAuthService, FirebaseCloudMessagingService],\n  exports: [FirebaseAuthService, FirebaseCloudMessagingService],\n})\nexport class FirebaseModule {\n  private static readonly providers: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  private static readonly exports: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRoot(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRootAsync(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseModuleOptions.html":{"url":"interfaces/FirebaseModuleOptions.html","title":"interface - FirebaseModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cert\n                                \n                                \n                                            Optional\n                                        databaseURL\n                                \n                                \n                                            Optional\n                                        storageBucket\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cert\n                                    \n                                \n                                \n                                    \n                                        cert:     firebase.ServiceAccount\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     firebase.ServiceAccount\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        databaseURL\n                                    \n                                \n                                \n                                    \n                                        databaseURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storageBucket\n                                    \n                                \n                                \n                                    \n                                        storageBucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseStorageService.html":{"url":"injectables/FirebaseStorageService.html","title":"injectable - FirebaseStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-storage.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                storage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-storage.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(path: string, undefined: FirebaseStorageUploadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-storage.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FirebaseStorageUploadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            storage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.storage.Storage\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-storage.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { Injectable } from '@nestjs/common';\n\nimport { FirebaseAdmin } from '../firebase-admin';\nimport { FirebaseStorageUploadDto } from '../dtos/firebase-storage-upload.dto';\n\n@Injectable()\nexport class FirebaseStorageService {\n  private readonly storage: firebase.storage.Storage;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.storage = firebaseAdmin.storage();\n  }\n\n  async upload(\n    path: string,\n    { data, contentType, publicFile, bucket }: FirebaseStorageUploadDto,\n  ): Promise {\n    const file = this.storage.bucket(bucket).file(path);\n    await file.save(data, {\n      gzip: true,\n      contentType,\n      public: publicFile,\n      metadata: {\n        cacheControl: 'public, max-age=31536000',\n      },\n    });\n    return file.publicUrl();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseStorageUploadDto.html":{"url":"interfaces/FirebaseStorageUploadDto.html","title":"interface - FirebaseStorageUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseStorageUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/dtos/firebase-storage-upload.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bucket\n                                \n                                \n                                        contentType\n                                \n                                \n                                        data\n                                \n                                \n                                        publicFile\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bucket\n                                    \n                                \n                                \n                                    \n                                        bucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contentType\n                                    \n                                \n                                \n                                    \n                                        contentType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicFile\n                                    \n                                \n                                \n                                    \n                                        publicFile:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FirebaseStorageUploadDto {\n  data: Buffer;\n  contentType: string;\n  publicFile: boolean;\n  bucket?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseUploader.html":{"url":"injectables/FirebaseUploader.html","title":"injectable - FirebaseUploader","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseUploader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/firebase-uploader.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: FirebaseStorageService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/services/firebase-uploader.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        FirebaseStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/firebase-uploader.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { randomBytes } from 'crypto';\nimport { FirebaseStorageService } from 'src/firebase';\nimport { FileSendDto } from '../dtos/file-send.dto';\nimport { UploaderService } from './uploader.service';\n\n@Injectable()\nexport class FirebaseUploader implements UploaderService {\n  constructor(private readonly storageService: FirebaseStorageService) {}\n\n  async upload(fileDto: FileSendDto, path = ''): Promise {\n    return this.storageService.upload(\n      `${path}/${randomBytes(32).toString('hex')}`,\n      { data: fileDto.buffer, contentType: fileDto.mimetype, publicFile: true },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grade.html":{"url":"classes/Grade.html","title":"class - Grade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                period\n                            \n                            \n                                periodId\n                            \n                            \n                                professors\n                            \n                            \n                                students\n                            \n                            \n                                subject\n                            \n                            \n                                subjectId\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AnswerGrade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            periodId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            professors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Professor[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable({name: 'professor_grade'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            students\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Student[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable({name: 'student_grade'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subjectId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnswerGrade } from 'src/answer/entities/answer-grade.entity';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Period } from './period.entity';\nimport { Professor } from './professor.entity';\nimport { Student } from './student.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('grade')\nexport class Grade extends FFEntity {\n  @Column({ type: 'int' })\n  subjectId: number;\n\n  @Column({ type: 'int' })\n  periodId: number;\n\n  @ManyToOne(() => Subject)\n  subject: Subject;\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => AnswerGrade, (answer) => answer.grade)\n  answers: AnswerGrade[];\n\n  @ManyToMany(() => Student)\n  @JoinTable({ name: 'student_grade' })\n  students: Student[];\n\n  @ManyToMany(() => Professor)\n  @JoinTable({ name: 'professor_grade' })\n  professors: Professor[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GradeIndex1624560625346.html":{"url":"classes/GradeIndex1624560625346.html","title":"class - GradeIndex1624560625346","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GradeIndex1624560625346\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624560625346-GradeIndex.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'GradeIndex1624560625346'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class GradeIndex1624560625346 implements MigrationInterface {\n    name = 'GradeIndex1624560625346'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE INDEX `IX_question_group_class_examId` ON `question_group` (`class`, `exam_id`)\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"DROP INDEX `IX_question_group_class_examId` ON `question_group`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GradeRepository.html":{"url":"classes/GradeRepository.html","title":"class - GradeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GradeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/grade.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findByUserAndPeriod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByUserAndPeriod\n                        \n                        \n                    \n                \n            \n            \n                \nfindByUserAndPeriod(user: UserToFind, period: Period)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/repositories/grade.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserToFind\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    period\n                                    \n                                                Period\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Grade } from '../entities/grade.entity';\nimport { Period } from '../entities/period.entity';\nimport { Professor } from '../entities/professor.entity';\nimport { Student } from '../entities/student.entity';\nimport { UserToFind } from '../types/user-to-find.type';\n\n@EntityRepository(Grade)\nexport class GradeRepository extends BaseRepository {\n  findByUserAndPeriod(user: UserToFind, period: Period): Promise {\n    const query = this.createQueryBuilder('grade');\n\n    if (user instanceof Student) {\n      query.innerJoin('grade.students', 'user');\n    }\n\n    if (user instanceof Professor) {\n      query.innerJoin('grade.professors', 'user');\n    }\n\n    query\n      .innerJoinAndSelect('grade.subject', 'subject')\n      .where('grade.periodId = :periodId', { periodId: period.id })\n      .andWhere('user.id = :userId', { userId: user.id });\n\n    return query.getMany();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GradeService.html":{"url":"injectables/GradeService.html","title":"injectable - GradeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GradeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/grade.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                findByUserAndPeriod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gradeRepository: GradeRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/grade.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gradeRepository\n                                                  \n                                                        \n                                                                        GradeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/grade.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByUserAndPeriod\n                        \n                        \n                    \n                \n            \n            \n                \nfindByUserAndPeriod(user: UserToFind, period: Period)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/grade.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserToFind\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    period\n                                    \n                                                Period\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Grade } from '../entities/grade.entity';\nimport { Period } from '../entities/period.entity';\nimport { GradeRepository } from '../repositories/grade.repository';\nimport type { UserToFind } from '../types/user-to-find.type';\n\n@Injectable()\nexport class GradeService {\n  constructor(\n    @InjectRepository(GradeRepository)\n    private readonly gradeRepository: GradeRepository,\n  ) {}\n\n  findAll(): Promise {\n    return this.gradeRepository.find();\n  }\n\n  findByUserAndPeriod(user: UserToFind, period: Period): Promise {\n    return this.gradeRepository.findByUserAndPeriod(user, period);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/http-exception.filter.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('HttpExceptionFilter')\n                        \n                    \n                        \n                            \n                                    Defined in src/core/filters/http-exception.filter.ts:31\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http-exception.filter.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IClassValidatorException.html":{"url":"interfaces/IClassValidatorException.html","title":"interface - IClassValidatorException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IClassValidatorException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        message\n                                \n                                \n                                        statusCode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IEntity.html":{"url":"interfaces/IEntity.html","title":"interface - IEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663575-SeedAuxiliary1.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { addMonths, endOfMonth, startOfMonth } from 'date-fns';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\nimport faker = require('faker');\nimport bcrypt = require('bcryptjs');\n\ninterface IEntity {\n  id: number;\n}\n\nconst defaultName = 'Gerado';\nconst student = {\n  cpf: '50172241065',\n  enrollment: '989898',\n};\n\nexport class SeedAuxiliary1624412129413 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'INSERT INTO `period` (`name`, `started_at`, `ended_at`) VALUES (?, ?, ?)',\n      [\n        defaultName,\n        startOfMonth(new Date()),\n        endOfMonth(addMonths(new Date(), 5)),\n      ],\n    );\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `course` (`code`, `title`) VALUES (?, ?)',\n      [defaultName, faker.random.alphaNumeric(20)],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `subject` (`code`, `title`, `course_id`) VALUES (?, ?, ?)',\n      [defaultName, faker.random.alpha({ count: 20, upcase: true }), course.id],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `grade` (`subject_id`, `period_id`) VALUES (?, ?)',\n      [subject.id, period.id],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(process.env.ADMIN_PASSWORD!, salt);\n\n    await queryRunner.query(\n      'INSERT INTO `auth` (`login`, `password`, `salt`) VALUES (?, ?, ?)',\n      [student.enrollment, password, salt],\n    );\n    await queryRunner.query(\n      'INSERT INTO `user` (`enrollment`, `cpf`, `type`, `role`) VALUES (?, ?, ?, ?)',\n      [student.enrollment, student.cpf, 'Student', 'manager'],\n    );\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `student_grade` (`user_id`, `grade_id`) VALUES (?, ?)',\n      [user.id, grade.id],\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n    await queryRunner.query('DELETE FROM `student_grade` WHERE `user_id` = ?', [\n      user.id,\n    ]);\n    await queryRunner.query('DELETE FROM `user` WHERE `enrollment` = ?', [\n      student.enrollment,\n    ]);\n    await queryRunner.query('DELETE FROM `auth` WHERE `login` = ?', [\n      student.enrollment,\n    ]);\n\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    await queryRunner.query('DELETE FROM `subject` WHERE `id` = ?', [\n      subject.id,\n    ]);\n    await queryRunner.query('DELETE FROM `course` WHERE `id` = ?', [course.id]);\n    await queryRunner.query('DELETE FROM `grade` WHERE `id` = ?', [grade.id]);\n    await queryRunner.query('DELETE FROM `period` WHERE `id` = ?', [period.id]);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IException.html":{"url":"interfaces/IException.html","title":"interface - IException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        body\n                                \n                                \n                                        message\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                        path\n                                \n                                \n                                            Optional\n                                        stack\n                                \n                                \n                                        statusCode\n                                \n                                \n                                        timestamp\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stack\n                                    \n                                \n                                \n                                    \n                                        stack:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InfraModule.html":{"url":"modules/InfraModule.html","title":"module - InfraModule","body":"\n                   \n\n\n\n\n    Modules\n    InfraModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_exports\n\n\n\ncluster_InfraModule_imports\n\n\n\n\nFirebaseModule\n\nFirebaseModule\n\n\n\nInfraModule\n\nInfraModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/infra.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UploadController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FirebaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UploaderService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { FirebaseModule } from 'src/firebase';\nimport { UploadController } from './controllers/upload.controller';\nimport { FirebaseUploader } from './services/firebase-uploader.service';\nimport { UploaderService } from './services/uploader.service';\n\n@Module({\n  imports: [\n    FirebaseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get('firebase')!,\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [{ provide: UploaderService, useClass: FirebaseUploader }],\n  controllers: [UploadController],\n  exports: [UploaderService],\n})\nexport class InfraModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        type\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  type: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userService: UserService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModuleOptions } from '@nestjs/jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { jwtConfigKey } from '../../config';\n\nimport { UserService } from '../../user/user.service';\nimport { AuthService } from '../auth.service';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n    configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true,\n      secretOrKey: configService.get(jwtConfigKey)!.secret,\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const auth = await this.authService.findAuth({ login: payload.uid });\n    if (!auth) {\n      throw new UnauthorizedException();\n    }\n\n    const user = await this.userService.findSpecializedUser({\n      enrollment: payload.uid,\n    });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_LoggerModule_exports\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CustomLogger } from './logger.service';\n\n@Module({\n  providers: [CustomLogger],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/login.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        AuthDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/login.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, Length } from 'class-validator';\nimport { PASSWORD_MAX, PASSWORD_MIN } from '../auth.constants';\nimport { AuthDto } from './auth.dto';\n\nexport class LoginDto extends AuthDto {\n  @IsString()\n  @Length(PASSWORD_MIN, PASSWORD_MAX)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PayloadInterceptor.html":{"url":"injectables/PayloadInterceptor.html","title":"injectable - PayloadInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PayloadInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/payload.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(_: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/payload.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class PayloadInterceptor implements NestInterceptor {\n  intercept(_: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Period.html":{"url":"classes/Period.html","title":"class - Period","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Period\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/period.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                endedAt\n                            \n                            \n                                exams\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                startedAt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exams\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport { Column, Entity, Index, OneToMany } from 'typeorm';\n\n@Entity('period')\n@Index('IX_period_started_at_ended_at', ['startedAt', 'endedAt'])\nexport class Period extends FFEntity {\n  @Column({ type: 'varchar', nullable: true })\n  name?: string;\n\n  @Column({ type: 'datetime' })\n  startedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @OneToMany(() => Exam, (exam) => exam.period)\n  exams: Exam[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PeriodIndex1624547816204.html":{"url":"classes/PeriodIndex1624547816204.html","title":"class - PeriodIndex1624547816204","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PeriodIndex1624547816204\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624547816204-PeriodIndex.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'PeriodIndex1624547816204'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class PeriodIndex1624547816204 implements MigrationInterface {\n    name = 'PeriodIndex1624547816204'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`\");\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `period_id` `period_id` int NOT NULL\");\n        await queryRunner.query(\"CREATE INDEX `IX_period_started_at_ended_at` ON `period` (`started_at`, `ended_at`)\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`\");\n        await queryRunner.query(\"DROP INDEX `IX_period_started_at_ended_at` ON `period`\");\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `period_id` `period_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PeriodRepository.html":{"url":"classes/PeriodRepository.html","title":"class - PeriodRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PeriodRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/period.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Period } from '../entities/period.entity';\n\n@EntityRepository(Period)\nexport class PeriodRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PeriodService.html":{"url":"injectables/PeriodService.html","title":"injectable - PeriodService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PeriodService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/period.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                getLastPeriod\n                            \n                            \n                                    Async\n                                getPeriodByInterval\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(periodRepository: PeriodRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/period.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        periodRepository\n                                                  \n                                                        \n                                                                        PeriodRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLastPeriod\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLastPeriod()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPeriodByInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPeriodByInterval(undefined: Interval)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Interval\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { LessThan, LessThanOrEqual, MoreThanOrEqual } from 'typeorm';\nimport { Period } from '../entities/period.entity';\nimport { PeriodRepository } from '../repositories/period.repository';\n\n@Injectable()\nexport class PeriodService {\n  constructor(\n    @InjectRepository(PeriodRepository)\n    private readonly periodRepository: PeriodRepository,\n  ) {}\n\n  findAll(): Promise {\n    return this.periodRepository.find();\n  }\n\n  // bool _rangeOverlapping(\n  //   Duration startA,\n  //   Duration endA,\n  //   Duration startB,\n  //   Duration endB,\n  // ) {\n  //   return (startA = startB);\n  // }\n\n  async getLastPeriod(): Promise {\n    const period = await this.periodRepository.findOne({\n      where: {\n        startedAt: MoreThanOrEqual(new Date()),\n        endedAt: LessThanOrEqual(new Date()),\n      },\n    });\n\n    if (!period) {\n      throw new NotFoundException('period not found for given date');\n    }\n\n    return period;\n  }\n\n  async getPeriodByInterval({ start, end }: Interval): Promise {\n    const period = await this.periodRepository.findOne({\n      where: {\n        startedAt: LessThan(end),\n        endedAt: MoreThanOrEqual(start),\n      },\n    });\n\n    if (!period) {\n      throw new NotFoundException('period not found for given date');\n    }\n\n    return period;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PersonalQuestionGroup.html":{"url":"classes/PersonalQuestionGroup.html","title":"class - PersonalQuestionGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PersonalQuestionGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/providers/personal-group.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPersonal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionGroupRepository, gradeService: GradeService)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/providers/personal-group.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionGroupRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gradeService\n                                                  \n                                                        \n                                                                        GradeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPersonal(user: Student | Professor, exam: Exam)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/providers/personal-group.provider.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            Student | Professor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exam\n                                    \n                                                Exam\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm';\nimport { Professor } from 'src/auxiliary/entities/professor.entity';\nimport { Student } from 'src/auxiliary/entities/student.entity';\nimport { GradeService } from 'src/auxiliary/services/grade.service';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport { QuestionGroupGrade } from '../entities/question-group-grade.entity';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { questionGroupRelations } from '../question.constants';\nimport { QuestionGroupRepository } from '../repositories/question-group.repository';\n\nexport class PersonalQuestionGroup {\n  constructor(\n    @InjectRepository(QuestionGroupRepository)\n    private readonly repository: QuestionGroupRepository,\n    private readonly gradeService: GradeService,\n  ) {}\n\n  async getPersonal(\n    user: Student | Professor,\n    exam: Exam,\n  ): Promise {\n    const grades = await this.gradeService.findByUserAndPeriod(\n      user,\n      exam.period,\n    );\n    if (!grades.length) {\n      return [];\n    }\n\n    const groupGrades = await this.repository.find({\n      where: { class: true, exam },\n      relations: questionGroupRelations,\n    });\n\n    return groupGrades\n      .reduce(\n        (result, group) => [\n          ...result,\n          ...grades.map((grade) => {\n            const groupGrade = Object.assign(new QuestionGroupGrade(), group);\n            groupGrade.grade = grade;\n            return groupGrade;\n          }),\n        ],\n        new Array(),\n      )\n      .sort((a, b) => a.id - b.id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Professor.html":{"url":"classes/Professor.html","title":"class - Professor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Professor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/professor.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                professorGrades\n                            \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    grades\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            professorGrades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, {lazy: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/professor.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        grades\n                    \n                \n\n                \n                    \n                        getgrades()\n                    \n                \n                            \n                                \n                                    Defined in src/auxiliary/entities/professor.entity.ts:10\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ChildEntity, ManyToMany } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Grade } from './grade.entity';\n\n@ChildEntity()\nexport class Professor extends User {\n  @ManyToMany(() => Grade, { lazy: true })\n  professorGrades: Promise;\n\n  get grades(): Promise {\n    return this.professorGrades;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfessorRepository.html":{"url":"classes/ProfessorRepository.html","title":"class - ProfessorRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfessorRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/professor.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Professor } from '../entities/professor.entity';\n\n@EntityRepository(Professor)\nexport class ProfessorRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfessorService.html":{"url":"injectables/ProfessorService.html","title":"injectable - ProfessorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfessorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/professor.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ProfessorRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/professor.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ProfessorRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Professor } from '../entities/professor.entity';\nimport { ProfessorRepository } from '../repositories/professor.repository';\n\n@Injectable()\nexport class ProfessorService {\n  constructor(\n    @InjectRepository(ProfessorRepository)\n    private readonly repository: ProfessorRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const professor = this.repository.create(createDto);\n\n    return this.repository.save(professor);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                group\n                            \n                            \n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                position\n                            \n                            \n                                required\n                            \n                            \n                                statement\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Answer[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuestionGroup\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Answer } from 'src/answer/entities/answer.entity';\nimport { FFEntity } from 'src/core/entities/ff.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { Column, Entity, Index, ManyToOne, OneToMany } from 'typeorm';\n\n@Entity()\nexport class Question extends FFEntity {\n  @Column({ type: 'text' })\n  statement: string;\n\n  @Column({ type: 'text', nullable: true })\n  imageUrl?: string;\n\n  @Column({ type: 'varchar', nullable: true })\n  imageAlt?: string;\n\n  @Column({ type: 'bool', default: true })\n  required: boolean;\n\n  @Column({ type: 'int' })\n  groupId: number;\n\n  @Index('IX_question_position')\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @ManyToOne(() => QuestionGroup)\n  group: QuestionGroup;\n\n  @OneToMany(() => Answer, (answer) => answer.question)\n  answers: Answer[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createQuestion\n                            \n                            \n                                    Async\n                                createQuestions\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Question})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestions(groupId: number, createQuestionsDto: CreateQuestionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':groupId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createQuestionsDto\n                                    \n                                                CreateQuestionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(findDto: QuestionFindDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuesitonDto: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuesitonDto\n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiNotFoundResponse, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { CreateQuestionDto } from '../dtos/create-question.dto';\nimport { QuestionFindDto } from '../dtos/question-find.dto';\nimport { ReorderQuestionDto } from '../dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from '../dtos/update-question.dto';\nimport { Question } from '../entities/question.entity';\nimport { QuestionService } from '../services/question.service';\nimport { CreateQuestionsDto } from '../dtos/create-questions.dto';\n\n@Controller('question')\n@ApiTags('Question')\n@UseGuards(JwtGuard)\nexport class QuestionController {\n  constructor(private readonly questionService: QuestionService) {}\n\n  @Post()\n  @ApiOkResponse({ type: Question })\n  async createQuestion(\n    @Body() createQuestionDto: CreateQuestionDto,\n  ): Promise {\n    return this.questionService.createQuestion(createQuestionDto);\n  }\n\n  @Post(':groupId')\n  @ApiOkResponse({ type: [Question] })\n  async createQuestions(\n    @Param('groupId', ParseIntPipe) groupId: number,\n    @Body() createQuestionsDto: CreateQuestionsDto,\n  ): Promise {\n    return this.questionService.createQuestions(groupId, createQuestionsDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Question] })\n  async find(@Query() findDto: QuestionFindDto) {\n    return this.questionService.find(findDto);\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionDto: UpdateQuestionDto,\n  ): Promise {\n    return this.questionService.update(id, updateQuestionDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({ type: [Question] })\n  async reorder(\n    @Body() reorderQuesitonDto: ReorderQuestionDto,\n  ): Promise {\n    return this.questionService.reorder(reorderQuesitonDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionFindDto.html":{"url":"classes/QuestionFindDto.html","title":"class - QuestionFindDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionFindDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/question-find.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/question-find.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class QuestionFindDto {\n  @IsPositive()\n  @IsOptional()\n  groupId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup.html":{"url":"classes/QuestionGroup.html","title":"class - QuestionGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question-group.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                personal\n                            \n                            \n                                position\n                            \n                            \n                                questions\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_group_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/question-group/entities/question-group.entity.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport {\n  AfterLoad,\n  Column,\n  Entity,\n  Index,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { Question } from './question.entity';\n\n@Entity()\n@Index('IX_question_group_class_examId', ['class', 'examId'])\nexport class QuestionGroup extends FFEntity {\n  @Column({ type: 'varchar' })\n  title: string;\n\n  // TODO: juntar essas flags em um enum\n  @Column({ type: 'bool', default: false })\n  class: boolean;\n\n  @Column({ type: 'bool', default: false })\n  personal: boolean;\n\n  @Index('IX_question_group_position')\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @Column({ type: 'int', nullable: true })\n  examId: number;\n\n  @OneToMany(() => Question, (question) => question.group)\n  questions: Question[];\n\n  @ManyToOne(() => Exam)\n  exam: Exam;\n\n  @AfterLoad()\n  sortItems() {\n    this.questions =\n      this.questions?.sort((a, b) => a.position - b.position) ?? [];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup1620179231630.html":{"url":"classes/QuestionGroup1620179231630.html","title":"class - QuestionGroup1620179231630","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup1620179231630\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620179231630-QuestionGroup.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup1620179231630'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionGroup1620179231630 implements MigrationInterface {\n    name = 'QuestionGroup1620179231630'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `question` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `statement` text NOT NULL, `image_url` text NOT NULL, `image_alt` varchar(255) NOT NULL DEFAULT '', `required` tinyint NOT NULL DEFAULT 1, `group_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `question_group` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"DROP TABLE `question_group`\");\n        await queryRunner.query(\"DROP TABLE `question`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionGroupController.html":{"url":"controllers/QuestionGroupController.html","title":"controller - QuestionGroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionGroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question-group.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question-group\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: QuestionGroup})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(examId: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me/:examId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuestionGroupDto: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuestionGroupDto\n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n  Patch,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { QuestionGroupService } from '../services/question-group.service';\nimport { CreateQuestionGroupDto } from '../dtos/create-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dtos/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CopyQuestionGroupDto } from '../dtos/copy-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dtos/reorder-question-group.dto';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { User } from 'src/user/entities/user.entity';\n\n@Controller('question-group')\n@ApiTags('QuestionGroup')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class QuestionGroupController {\n  constructor(private readonly questionGroupService: QuestionGroupService) {}\n\n  @Post()\n  @ApiOkResponse({ type: QuestionGroup })\n  async create(\n    @Body() createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.create(createQuestionGroupDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async findAll(): Promise {\n    return this.questionGroupService.findAll();\n  }\n\n  @Get('me/:examId')\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async findPersonal(\n    @Param('examId', ParseIntPipe) examId: number,\n    @GetUser() user: User,\n  ): Promise {\n    return this.questionGroupService.findPersonal({ examId, user });\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionGroupService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.update(id, updateQuestionGroupDto);\n  }\n\n  @Put()\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async copy(\n    @Body() copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.copy(copyQuestionGroupDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async reorder(\n    @Body() reorderQuestionGroupDto: ReorderQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.reorder(reorderQuestionGroupDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionGroupService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupGrade.html":{"url":"classes/QuestionGroupGrade.html","title":"class - QuestionGroupGrade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupGrade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question-group-grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        QuestionGroup\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                grade\n                            \n                            \n                                class\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                personal\n                            \n                            \n                                position\n                            \n                            \n                                questions\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grade\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group-grade.entity.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:21\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:37\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:31\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:24\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_group_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:28\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Inherited from         QuestionGroup\n\n                \n            \n            \n                \n                        Defined in         QuestionGroup:40\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Grade } from 'src/auxiliary/entities/grade.entity';\nimport { QuestionGroup } from './question-group.entity';\n\nexport class QuestionGroupGrade extends QuestionGroup {\n  grade: Grade;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionGroupModule.html":{"url":"modules/QuestionGroupModule.html","title":"module - QuestionGroupModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionGroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_imports\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\ncluster_QuestionGroupModule_exports\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nAuxiliaryModule->QuestionGroupModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionGroupModule->QuestionService \n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionGroupModule -->\n\nQuestionService->QuestionGroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question-group/question-group.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestionGroupService\n                        \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionGroupController\n                        \n                        \n                            QuestionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuxiliaryModule\n                        \n                        \n                            ExamModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuestionGroupService } from './services/question-group.service';\nimport { QuestionGroupController } from './controllers/question-group.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QuestionGroupRepository } from './repositories/question-group.repository';\nimport { QuestionController } from './controllers/question.controller';\nimport { ExamModule } from '../exam/exam.module';\nimport { QuestionService } from './services/question.service';\nimport { QuestionRepository } from './repositories/question.repository';\nimport { PersonalQuestionGroup } from './providers/personal-group.provider';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([QuestionGroupRepository, QuestionRepository]),\n    ExamModule,\n    AuxiliaryModule,\n  ],\n  controllers: [QuestionGroupController, QuestionController],\n  providers: [QuestionGroupService, PersonalQuestionGroup, QuestionService],\n  exports: [QuestionService],\n})\nexport class QuestionGroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupRepository.html":{"url":"classes/QuestionGroupRepository.html","title":"class - QuestionGroupRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/repositories/question-group.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from \"typeorm\";\nimport { BaseRepository } from \"typeorm-transactional-cls-hooked\";\nimport { QuestionGroup } from \"../entities/question-group.entity\";\n\n@EntityRepository(QuestionGroup)\nexport class QuestionGroupRepository extends BaseRepository {}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionGroupService.html":{"url":"injectables/QuestionGroupService.html","title":"injectable - QuestionGroupService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionGroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/services/question-group.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Private\n                                    Async\n                                setExamAndPosition\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionGroupRepository, examService: ExamService, questionService: QuestionService, personalGroup: PersonalQuestionGroup)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/services/question-group.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionGroupRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examService\n                                                  \n                                                        \n                                                                        ExamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        personalGroup\n                                                  \n                                                        \n                                                                        PersonalQuestionGroup\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(undefined: FindPersonalDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindPersonalDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            setExamAndPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setExamAndPosition(questionGroup: QuestionGroup, examId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questionGroup\n                                    \n                                                QuestionGroup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { In } from 'typeorm';\n\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { ExamService } from 'src/exam/services/exam.service';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CopyQuestionGroupDto } from '../dtos/copy-question-group.dto';\nimport { CreateQuestionGroupDto } from '../dtos/create-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dtos/reorder-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dtos/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { questionGroupNotFound } from '../question-group.constants';\nimport { QuestionService } from './question.service';\nimport { QuestionGroupRepository } from '../repositories/question-group.repository';\nimport { last } from 'src/core/utils/last.util';\nimport { FindPersonalDto } from '../dtos/find-personal.dto';\nimport { PersonalQuestionGroup } from '../providers/personal-group.provider';\nimport { Student } from 'src/auxiliary/entities/student.entity';\nimport { Professor } from 'src/auxiliary/entities/professor.entity';\nimport { questionGroupRelations } from '../question.constants';\n\n@Injectable()\nexport class QuestionGroupService {\n  constructor(\n    @InjectRepository(QuestionGroupRepository)\n    private readonly repository: QuestionGroupRepository,\n    private readonly examService: ExamService,\n    private readonly questionService: QuestionService,\n    private readonly personalGroup: PersonalQuestionGroup,\n  ) {}\n\n  private async setExamAndPosition(\n    questionGroup: QuestionGroup,\n    examId: number,\n  ) {\n    questionGroup.exam = await this.examService.findOne(examId);\n\n    questionGroup.position =\n      (last(questionGroup.exam.groups)?.position ?? -1) + 1;\n  }\n\n  @Transactional()\n  async create(\n    createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    const questionGroup = this.repository.create(createQuestionGroupDto);\n    if (createQuestionGroupDto.examId) {\n      await this.setExamAndPosition(\n        questionGroup,\n        createQuestionGroupDto.examId,\n      );\n    }\n    return this.repository.save(questionGroup);\n  }\n\n  findAll(): Promise {\n    return this.repository.find({ relations: questionGroupRelations});\n  }\n\n  async findOne(id: number): Promise {\n    const questionGroup = await this.repository.findOne({\n      where: { id },\n      relations: questionGroupRelations,\n    });\n\n    if (!questionGroup) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n\n    return questionGroup;\n  }\n\n  @Transactional()\n  async update(\n    id: number,\n    updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    let questionGroup = await this.findOne(id);\n\n    if (\n      updateQuestionGroupDto.examId &&\n      updateQuestionGroupDto.examId !== questionGroup.examId\n    ) {\n      await this.setExamAndPosition(\n        questionGroup,\n        updateQuestionGroupDto.examId,\n      );\n    }\n\n    questionGroup = this.repository.merge(\n      questionGroup,\n      updateQuestionGroupDto,\n    );\n\n    return this.repository.save(questionGroup);\n  }\n\n  @Transactional()\n  async copy(\n    copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    const toCopy = await this.findOne(copyQuestionGroupDto.groupId);\n    const exam = await this.examService.findOne(copyQuestionGroupDto.examId);\n\n    const group = await this.repository.save(\n      this.repository.create({\n        ...toCopy,\n        questions: [],\n        exam,\n        id: undefined,\n      }),\n    );\n\n    group.questions = await this.questionService.copyToGroup(\n      group,\n      toCopy.questions,\n    );\n\n    return group;\n  }\n\n  @Transactional()\n  async reorder({\n    examId,\n    groupIds,\n  }: ReorderQuestionGroupDto): Promise {\n    const groups = await this.repository.find({\n      where: { examId, id: In(groupIds) },\n    });\n\n    const groupIdPositionMap: ReadonlyMap = new Map(\n      groupIds.map((id, position) => [id, position]),\n    );\n\n    return (\n      await Promise.all(\n        groups.map(async (group) => {\n          group.position = groupIdPositionMap.get(group.id) ?? 0;\n          await this.repository.update(group.id, { position: group.position });\n          return group;\n        }),\n      )\n    ).sort((a, b) => a.position - b.position);\n  }\n\n  async findPersonal({\n    examId,\n    user,\n  }: FindPersonalDto): Promise {\n    const exam = await this.examService.findOne(examId);\n\n    const result = await this.repository.find({\n      where: { exam, class: false },\n      relations: questionGroupRelations,\n    });\n\n    if (user instanceof Student || user instanceof Professor) {\n      const personalGroups = await this.personalGroup.getPersonal(user, exam);\n      result.push(...personalGroups);\n    }\n\n    return result;\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupTarget1621992475274.html":{"url":"classes/QuestionGroupTarget1621992475274.html","title":"class - QuestionGroupTarget1621992475274","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupTarget1621992475274\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621992475274-QuestionGroupTarget.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroupTarget1621992475274'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class QuestionGroupTarget1621992475274 implements MigrationInterface {\n  name = 'QuestionGroupTarget1621992475274';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"ALTER TABLE `question_group` ADD `target` enum ('Student', 'Professor') NULL\",\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query('ALTER TABLE `user` DROP COLUMN `type`');\n    await queryRunner.query(\n      \"ALTER TABLE `user` ADD `type` enum ('Professor', 'Student', 'User') NOT NULL\",\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IX_question_group_target` ON `question_group` (`target`)',\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user` (`type`)',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IX_question_group_target` ON `question_group`',\n    );\n    await queryRunner.query('ALTER TABLE `user` DROP COLUMN `type`');\n    await queryRunner.query(\n      'ALTER TABLE `user` ADD `type` varchar(255) NOT NULL',\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user` (`type`)',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `target`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuestionGroupUser.html":{"url":"interfaces/QuestionGroupUser.html","title":"interface - QuestionGroupUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  QuestionGroupUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/interfaces/question-group-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface QuestionGroupUser {\n  id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionImage1620477869366.html":{"url":"classes/QuestionImage1620477869366.html","title":"class - QuestionImage1620477869366","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionImage1620477869366\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477869366-QuestionImage.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionImage1620477869366'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionImage1620477869366 implements MigrationInterface {\n    name = 'QuestionImage1620477869366'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NOT NULL DEFAULT ''\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPosition1620488935141.html":{"url":"classes/QuestionPosition1620488935141.html","title":"class - QuestionPosition1620488935141","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPosition1620488935141\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620488935141-QuestionPosition.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionPosition1620488935141'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionPosition1620488935141 implements MigrationInterface {\n    name = 'QuestionPosition1620488935141'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` ADD `position` int NOT NULL DEFAULT '0'\");\n        await queryRunner.query(\"ALTER TABLE `question_group` ADD `position` int NOT NULL DEFAULT '0'\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question_group` DROP COLUMN `position`\");\n        await queryRunner.query(\"ALTER TABLE `question` DROP COLUMN `position`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPositionIdx1620563708532.html":{"url":"classes/QuestionPositionIdx1620563708532.html","title":"class - QuestionPositionIdx1620563708532","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPositionIdx1620563708532\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620563708532-QuestionPositionIdx.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionPositionIdx1620563708532'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionPositionIdx1620563708532 implements MigrationInterface {\n    name = 'QuestionPositionIdx1620563708532'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"CREATE INDEX `IX_question_position` ON `question` (`position`)\");\n        await queryRunner.query(\"CREATE INDEX `IX_question_group_position` ON `question_group` (`position`)\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_group_position` ON `question_group`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_position` ON `question`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionRepository.html":{"url":"classes/QuestionRepository.html","title":"class - QuestionRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/repositories/question.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Question } from '../entities/question.entity';\n\n@EntityRepository(Question)\nexport class QuestionRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/services/question.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copyToGroup\n                            \n                            \n                                    Async\n                                createQuestion\n                            \n                            \n                                    Async\n                                createQuestions\n                            \n                            \n                                find\n                            \n                            \n                                findByIds\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                    Async\n                                getNextPosition\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionRepository, groupService: QuestionGroupService)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/services/question.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        groupService\n                                                  \n                                                        \n                                                                        QuestionGroupService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copyToGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copyToGroup(group: QuestionGroup, questions: Question[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                QuestionGroup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questions\n                                    \n                                                Question[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestions(groupId: number, createQuestionsDto: CreateQuestionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createQuestionsDto\n                                    \n                                                CreateQuestionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(findDto: QuestionFindDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByIds\n                        \n                        \n                    \n                \n            \n            \n                \nfindByIds(ids: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getNextPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNextPosition(groupId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { In } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CreateQuestionDto } from '../dtos/create-question.dto';\nimport { QuestionFindDto } from '../dtos/question-find.dto';\nimport { ReorderQuestionDto } from '../dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from '../dtos/update-question.dto';\nimport { Question } from '../entities/question.entity';\nimport { questionNotFound } from '../question.constants';\nimport { QuestionRepository } from '../repositories/question.repository';\nimport { QuestionGroupService } from './question-group.service';\nimport { last } from 'src/core/utils/last.util';\nimport { CreateQuestionsDto } from '../dtos/create-questions.dto';\n\n@Injectable()\nexport class QuestionService {\n  constructor(\n    @InjectRepository(QuestionRepository)\n    private readonly repository: QuestionRepository,\n    @Inject(forwardRef(() => QuestionGroupService))\n    private readonly groupService: QuestionGroupService,\n  ) {}\n\n  private async getNextPosition(groupId: number): Promise {\n    const { questions } = await this.groupService.findOne(groupId);\n\n    return (last(questions)?.position ?? -1) + 1;\n  }\n\n  @Transactional()\n  async createQuestion(\n    createQuestionDto: CreateQuestionDto,\n  ): Promise {\n    const question = this.repository.create({\n      ...createQuestionDto,\n      position: await this.getNextPosition(createQuestionDto.groupId),\n    });\n\n    return this.repository.save(question);\n  }\n\n  @Transactional()\n  async createQuestions(\n    groupId: number,\n    createQuestionsDto: CreateQuestionsDto,\n  ): Promise {\n    const questions = this.repository.create(\n      createQuestionsDto.questions.map((dto, position) =>\n        this.repository.create({ ...dto, position, groupId }),\n      ),\n    );\n\n    return this.repository.save(questions);\n  }\n\n  find(findDto: QuestionFindDto): Promise {\n    return this.repository.find({\n      where: (qb) => {\n        if (findDto.groupId) {\n          qb.where(`${qb.alias}.groupId = :groupId`, findDto);\n        }\n        return qb;\n      },\n    });\n  }\n\n  findByIds(ids: number[]): Promise {\n    return this.repository.findByIds(ids);\n  }\n\n  async findOne(id: number): Promise {\n    const question = await this.repository.findOne({ id });\n    if (!question) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n\n    return question;\n  }\n\n  @Transactional()\n  async update(id: number, updateDto: UpdateQuestionDto): Promise {\n    let question = await this.findOne(id);\n\n    if (updateDto.groupId && question.groupId !== updateDto.groupId) {\n      question.position = await this.getNextPosition(updateDto.groupId);\n    }\n\n    question = this.repository.merge(question, updateDto);\n\n    return this.repository.save(question);\n  }\n\n  @Transactional()\n  async copyToGroup(\n    group: QuestionGroup,\n    questions: Question[],\n  ): Promise {\n    return this.repository.save(\n      questions.map((question) =>\n        this.repository.create({ ...question, group, id: undefined }),\n      ),\n    );\n  }\n\n  @Transactional()\n  async reorder({\n    groupId,\n    questionIds,\n  }: ReorderQuestionDto): Promise {\n    const questions = await this.repository.find({\n      where: { groupId, id: In(questionIds) },\n    });\n\n    const questionPositionMap: ReadonlyMap = new Map(\n      questionIds.map((id, position) => [id, position]),\n    );\n\n    return this.repository.save(\n      questions.map((question) => {\n        question.position = questionPositionMap.get(question.id) ?? 0;\n        return question;\n      }),\n    );\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete({ id });\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionDto.html":{"url":"classes/ReorderQuestionDto.html","title":"class - ReorderQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/reorder-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupId\n                            \n                            \n                                questionIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from \"class-validator\";\n\nexport class ReorderQuestionDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsArray()\n  @IsPositive({each: true})\n  questionIds: number[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionGroupDto.html":{"url":"classes/ReorderQuestionGroupDto.html","title":"class - ReorderQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/reorder-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question-group.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from 'class-validator';\n\nexport class ReorderQuestionGroupDto {\n  @IsPositive()\n  examId: number;\n\n  @IsArray()\n  @IsPositive({ each: true })\n  groupIds: number[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SeedAuxiliary1624412129413.html":{"url":"classes/SeedAuxiliary1624412129413.html","title":"class - SeedAuxiliary1624412129413","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SeedAuxiliary1624412129413\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663575-SeedAuxiliary1.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663575-SeedAuxiliary1.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663575-SeedAuxiliary1.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { addMonths, endOfMonth, startOfMonth } from 'date-fns';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\nimport faker = require('faker');\nimport bcrypt = require('bcryptjs');\n\ninterface IEntity {\n  id: number;\n}\n\nconst defaultName = 'Gerado';\nconst student = {\n  cpf: '50172241065',\n  enrollment: '989898',\n};\n\nexport class SeedAuxiliary1624412129413 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'INSERT INTO `period` (`name`, `started_at`, `ended_at`) VALUES (?, ?, ?)',\n      [\n        defaultName,\n        startOfMonth(new Date()),\n        endOfMonth(addMonths(new Date(), 5)),\n      ],\n    );\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `course` (`code`, `title`) VALUES (?, ?)',\n      [defaultName, faker.random.alphaNumeric(20)],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `subject` (`code`, `title`, `course_id`) VALUES (?, ?, ?)',\n      [defaultName, faker.random.alpha({ count: 20, upcase: true }), course.id],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `grade` (`subject_id`, `period_id`) VALUES (?, ?)',\n      [subject.id, period.id],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(process.env.ADMIN_PASSWORD!, salt);\n\n    await queryRunner.query(\n      'INSERT INTO `auth` (`login`, `password`, `salt`) VALUES (?, ?, ?)',\n      [student.enrollment, password, salt],\n    );\n    await queryRunner.query(\n      'INSERT INTO `user` (`enrollment`, `cpf`, `type`, `role`) VALUES (?, ?, ?, ?)',\n      [student.enrollment, student.cpf, 'Student', 'manager'],\n    );\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `student_grade` (`user_id`, `grade_id`) VALUES (?, ?)',\n      [user.id, grade.id],\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n    await queryRunner.query('DELETE FROM `student_grade` WHERE `user_id` = ?', [\n      user.id,\n    ]);\n    await queryRunner.query('DELETE FROM `user` WHERE `enrollment` = ?', [\n      student.enrollment,\n    ]);\n    await queryRunner.query('DELETE FROM `auth` WHERE `login` = ?', [\n      student.enrollment,\n    ]);\n\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    await queryRunner.query('DELETE FROM `subject` WHERE `id` = ?', [\n      subject.id,\n    ]);\n    await queryRunner.query('DELETE FROM `course` WHERE `id` = ?', [course.id]);\n    await queryRunner.query('DELETE FROM `grade` WHERE `id` = ?', [grade.id]);\n    await queryRunner.query('DELETE FROM `period` WHERE `id` = ?', [period.id]);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SoftDeleteResult.html":{"url":"interfaces/SoftDeleteResult.html","title":"interface - SoftDeleteResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SoftDeleteResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/soft-delete-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        raw\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        raw\n                                    \n                                \n                                \n                                    \n                                        raw:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SoftDeleteResult {\n  raw: {\n    affectedRows: number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Student.html":{"url":"classes/Student.html","title":"class - Student","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Student\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/student.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                studentGrades\n                            \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    grades\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            studentGrades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, {lazy: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/student.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        grades\n                    \n                \n\n                \n                    \n                        getgrades()\n                    \n                \n                            \n                                \n                                    Defined in src/auxiliary/entities/student.entity.ts:10\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ChildEntity, ManyToMany } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Grade } from './grade.entity';\n\n@ChildEntity()\nexport class Student extends User {\n  @ManyToMany(() => Grade, { lazy: true })\n  studentGrades!: Promise;\n\n  get grades(): Promise {\n    return this.studentGrades;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StudentRepository.html":{"url":"classes/StudentRepository.html","title":"class - StudentRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StudentRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/student.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Student } from '../entities/student.entity';\n\n@EntityRepository(Student)\nexport class StudentRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StudentService.html":{"url":"injectables/StudentService.html","title":"injectable - StudentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StudentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/student.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: StudentRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/student.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        StudentRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Student } from '../entities/student.entity';\nimport { StudentRepository } from '../repositories/student.repository';\n\n@Injectable()\nexport class StudentService {\n  constructor(\n    @InjectRepository(StudentRepository)\n    private readonly repository: StudentRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const student = this.repository.create(createDto);\n\n    return this.repository.save(student);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Subject.html":{"url":"classes/Subject.html","title":"class - Subject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/subject.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                course\n                            \n                            \n                                courseId\n                            \n                            \n                                grades\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Course\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            courseId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, OneToMany } from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Course } from './course.entity';\nimport { Grade } from './grade.entity';\n\n@Entity('subject')\nexport class Subject extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @Column({ type: 'int' })\n  courseId: number;\n\n  @ManyToOne(() => Course)\n  course: Course;\n\n  @OneToMany(() => Grade, (grade) => grade.subject)\n  grades: Grade[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerOptions.html":{"url":"interfaces/SwaggerOptions.html","title":"interface - SwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/interfaces/swagger.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        title\n                                \n                                \n                                        users\n                                \n                                \n                                        version\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        users\n                                    \n                                \n                                \n                                    \n                                        users:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerOptions {\n  title: string;\n  description: string;\n  version: string;\n  users: Record;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimestampEntity.html":{"url":"classes/TimestampEntity.html","title":"class - TimestampEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimestampEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/timestamp.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport class TimestampEntity extends BaseEntity {\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnswerDto.html":{"url":"classes/UpdateAnswerDto.html","title":"class - UpdateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/update-answer.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnswerDto } from './create-answer.dto';\n\nexport class UpdateAnswerDto extends PartialType(CreateAnswerDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamAgreementDto.html":{"url":"classes/UpdateExamAgreementDto.html","title":"class - UpdateExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                anonymous\n                            \n                            \n                                    Optional\n                                observation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/update-exam-agreement.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            observation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/update-exam-agreement.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsBoolean, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class UpdateExamAgreementDto {\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  observation?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Type(() => Boolean)\n  anonymous?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamDto.html":{"url":"classes/UpdateExamDto.html","title":"class - UpdateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateExamDto } from './create-exam.dto';\n\nexport class UpdateExamDto extends PartialType(CreateExamDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionDto.html":{"url":"classes/UpdateQuestionDto.html","title":"class - UpdateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/update-question.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateQuestionDto } from './create-question.dto';\n\nexport class UpdateQuestionDto extends PartialType(CreateQuestionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionGroupDto.html":{"url":"classes/UpdateQuestionGroupDto.html","title":"class - UpdateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/update-question-group.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateQuestionGroupDto } from './create-question-group.dto';\n\nexport class UpdateQuestionGroupDto extends PartialType(CreateQuestionGroupDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadController.html":{"url":"controllers/UploadController.html","title":"controller - UploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/controllers/upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                upload\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/infra/controllers/upload.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { UPLOAD_PATH } from '../infra.constants';\nimport { UploaderService } from '../services/uploader.service';\n\n@Controller('upload')\n@ApiTags('Upload')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class UploadController {\n  constructor(private readonly service: UploaderService) {}\n\n  @Post()\n  @UseInterceptors(FileInterceptor('file'))\n  async upload(@UploadedFile() file: Express.Multer.File) {\n    return this.service.upload(file, UPLOAD_PATH);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploaderService.html":{"url":"classes/UploaderService.html","title":"class - UploaderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploaderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/uploader.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/uploader.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileSendDto } from '../dtos/file-send.dto';\n\nexport abstract class UploaderService {\n  abstract upload(fileDto: FileSendDto, path?: string): Promise;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/exam-agreement.entity';\nimport { Column, Entity, OneToMany, TableInheritance } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { UserRole } from '../enum/user-role.enum';\nimport { UserType } from '../enum/user-type.enum';\n\n@Entity('user')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: UserType } })\nexport class User extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  enrollment: string;\n\n  @Column({ type: 'varchar', unique: true })\n  cpf: string;\n\n  @Column({ type: 'enum', enum: UserType })\n  type: UserType;\n\n  @Column({ type: 'enum', default: UserRole.REGULAR, enum: UserRole })\n  role: UserRole;\n\n  @OneToMany(() => ExamAgreement, (agreement) => agreement.user)\n  examAgreements: ExamAgreement[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\nimport { GetUser } from '../decoratos/get-user.decorator';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../entities/user.entity';\nimport { UserService } from '../user.service';\n\n@Controller('user')\n@ApiTags('User')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  createUser(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUser(createUserDto);\n  }\n\n  @Get()\n  @UseGuards(JwtGuard)\n  getUser(@GetUser() user: User) {\n    return user;\n  }\n\n  // @Put()\n  // @UseGuards(JwtGuard)\n  // updateUser() {\n  //   return this.userService.updateUser();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                enrollment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class UserDto {\n  @IsString()\n  @IsNotEmpty()\n  enrollment: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { UserController } from './controllers/user.controller';\nimport { UserRepository } from './repositories/user.repository';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    forwardRef(() => AuthModule),\n    forwardRef(() => AuxiliaryModule),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/repositories/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { User } from '../entities/user.entity';\n\n@EntityRepository(User)\nexport class UserRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserResult.html":{"url":"interfaces/UserResult.html","title":"interface - UserResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/interfaces/user-specialized-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         UserType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserType } from '../enum/user-type.enum';\n\nexport interface UserResult {\n  readonly type: UserType;\n  readonly id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Private\n                                    Async\n                                createUserByType\n                            \n                            \n                                    Async\n                                findSpecializedUser\n                            \n                            \n                                findUser\n                            \n                            \n                                    Async\n                                mustFindSpecializedUser\n                            \n                            \n                                    Async\n                                mustFindUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, authService: AuthService, studentService: StudentService, professorService: ProfessorService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        studentService\n                                                  \n                                                        \n                                                                        StudentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        professorService\n                                                  \n                                                        \n                                                                        ProfessorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/user/user.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createUserByType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserByType(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findUser\n                        \n                        \n                    \n                \n            \n            \n                \nfindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthService } from 'src/auth/auth.service';\nimport { ProfessorService } from 'src/auxiliary/services/professor.service';\nimport { StudentService } from 'src/auxiliary/services/student.service';\nimport {\n  runOnTransactionComplete,\n  Transactional,\n} from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { UserDto } from './dtos/user.dto';\nimport { User } from './entities/user.entity';\nimport { UserType } from './enum/user-type.enum';\nimport { UserResult } from './interfaces/user-specialized-result.interface';\nimport { UserRepository } from './repositories/user.repository';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private readonly userRepository: UserRepository,\n    private readonly authService: AuthService,\n    private readonly studentService: StudentService,\n    private readonly professorService: ProfessorService,\n  ) {}\n\n  @Transactional()\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const user = await this.createUserByType(createUserDto);\n    await this.authService.createAuth({\n      login: createUserDto.enrollment,\n      password: createUserDto.password,\n    });\n    runOnTransactionComplete((e) => {\n      e && console.error(e);\n      console.log('create auth transaction completed');\n    });\n    return user;\n  }\n\n  private async createUserByType(createUserDto: CreateUserDto): Promise {\n    switch (createUserDto.type) {\n      case UserType.PROFESSOR:\n        return this.professorService.createStudent(createUserDto);\n      case UserType.STUDENT:\n        return this.studentService.createStudent(createUserDto);\n      default:\n        throw new UnprocessableEntityException();\n    }\n  }\n\n  findUser(userDto: UserDto): Promise {\n    return this.userRepository.findOne({ ...userDto });\n  }\n\n  async mustFindUser(userDto: UserDto): Promise {\n    const user = await this.findUser(userDto);\n    if (!user) {\n      throw new UnauthorizedException(userDto);\n    }\n    return user;\n  }\n\n  async findSpecializedUser(userDto: UserDto): Promise {\n    const partialUser:\n      | UserResult\n      | undefined = await this.userRepository.findOne({\n      select: ['type', 'id'],\n      where: { ...userDto },\n    });\n\n    if (!partialUser) {\n      throw new UnauthorizedException(userDto);\n    }\n\n    let user: User | undefined;\n\n    switch (partialUser.type) {\n      case UserType.PROFESSOR:\n        user = await this.professorService.findOne(userDto);\n        break;\n      case UserType.STUDENT:\n        user = await this.studentService.findOne(userDto);\n        break;\n      default:\n        user = await this.userRepository.findOne({ ...userDto });\n    }\n\n    return user!;\n  }\n\n  async mustFindSpecializedUser(userDto: UserDto): Promise {\n    const user = await this.findSpecializedUser(userDto);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/answer/answer.controller.ts\n            \n            controller\n            AnswerController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/answer/answer.service.ts\n            \n            injectable\n            AnswerService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/answer/dto/create-answer.dto.ts\n            \n            class\n            CreateAnswerDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/answer/dto/update-answer.dto.ts\n            \n            class\n            UpdateAnswerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/entities/answer-grade.entity.ts\n            \n            class\n            AnswerGrade\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/answer/entities/answer.entity.ts\n            \n            class\n            Answer\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/answer/interfaces/batch-user.interface.ts\n            \n            interface\n            BatchUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer-grade.repository.ts\n            \n            class\n            AnswerGradeRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer.repository.ts\n            \n            class\n            AnswerRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MAX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/casl/factories/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/repositories/auth.repository.ts\n            \n            class\n            AuthRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/course.entity.ts\n            \n            class\n            Course\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/grade.entity.ts\n            \n            class\n            Grade\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/period.entity.ts\n            \n            class\n            Period\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/professor.entity.ts\n            \n            class\n            Professor\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/student.entity.ts\n            \n            class\n            Student\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/subject.entity.ts\n            \n            class\n            Subject\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/grade.repository.ts\n            \n            class\n            GradeRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/period.repository.ts\n            \n            class\n            PeriodRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/professor.repository.ts\n            \n            class\n            ProfessorRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/student.repository.ts\n            \n            class\n            StudentRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/services/grade.service.ts\n            \n            injectable\n            GradeService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auxiliary/services/period.service.ts\n            \n            injectable\n            PeriodService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auxiliary/services/professor.service.ts\n            \n            injectable\n            ProfessorService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auxiliary/services/student.service.ts\n            \n            injectable\n            StudentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            function\n            origin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            allowedOrigins\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            isProd\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/firebase.config.ts\n            \n            variable\n            firebaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            configs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/interfaces/swagger.interface.ts\n            \n            interface\n            SwaggerOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/sentry.config.ts\n            \n            variable\n            sentryConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controllers/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/core.constants.ts\n            \n            variable\n            enrollmentLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/decorators/is-enrollment.decorator.ts\n            \n            function\n            IsEnrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/entities/ff.entity.ts\n            \n            class\n            FFEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/entities/timestamp.entity.ts\n            \n            class\n            TimestampEntity\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            interface\n            IClassValidatorException\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            interface\n            IException\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/interceptors/payload.interceptor.ts\n            \n            injectable\n            PayloadInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/soft-delete-result.interface.ts\n            \n            interface\n            SoftDeleteResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/utils/last.util.ts\n            \n            function\n            last\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1619445806509-Auth.ts\n            \n            class\n            Auth1619445806509\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620179231630-QuestionGroup.ts\n            \n            class\n            QuestionGroup1620179231630\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            class\n            AdminUser1620299822480\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            cpf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            enrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477175799-Auxiliary.ts\n            \n            class\n            Auxiliary1620477175799\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477869366-QuestionImage.ts\n            \n            class\n            QuestionImage1620477869366\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620478273991-Exam.ts\n            \n            class\n            Exam1620478273991\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620488935141-QuestionPosition.ts\n            \n            class\n            QuestionPosition1620488935141\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620563708532-QuestionPositionIdx.ts\n            \n            class\n            QuestionPositionIdx1620563708532\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1621036457247-ExamTitle.ts\n            \n            class\n            ExamTitle1621036457247\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1621992475274-QuestionGroupTarget.ts\n            \n            class\n            QuestionGroupTarget1621992475274\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622326106015-ExamTarget.ts\n            \n            class\n            ExamTarget1622326106015\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622326106015-ExamTarget.ts\n            \n            variable\n            targets\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1622332886234-ExamAgreement.ts\n            \n            class\n            ExamAgreement1622332886234\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts\n            \n            class\n            ExamAgreementAnonymousDefault1622334780336\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622378888497-ExamTargetAdd.ts\n            \n            class\n            ExamTargetAdd1622378888497\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622378888497-ExamTargetAdd.ts\n            \n            variable\n            addTargets\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1622417032753-ExamAgreementObservation.ts\n            \n            class\n            ExamAgreementObservation1622417032753\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622421768424-Answer.ts\n            \n            class\n            Answer1622421768424\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663574-Auxiliary.ts\n            \n            class\n            Auxiliary1624416663574\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            class\n            SeedAuxiliary1624412129413\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            interface\n            IEntity\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            variable\n            defaultName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            variable\n            student\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1624547816204-PeriodIndex.ts\n            \n            class\n            PeriodIndex1624547816204\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624560625346-GradeIndex.ts\n            \n            class\n            GradeIndex1624560625346\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624750140569-AnswerScoreCheck.ts\n            \n            class\n            AnswerScoreCheck1624750140568\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam-agreement.controller.ts\n            \n            controller\n            ExamAgreementController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam-target.controller.ts\n            \n            controller\n            ExamTargetController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam.controller.ts\n            \n            controller\n            ExamController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam-agreement.dto.ts\n            \n            class\n            CreateExamAgreementDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam.dto.ts\n            \n            class\n            CreateExamDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/dtos/exam-agreement.dto.ts\n            \n            class\n            ExamAgreementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/exam-target-manager.dto.ts\n            \n            interface\n            ExamTargetManagerDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/find-exam-by-user.dto.ts\n            \n            interface\n            FindExamByUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam-agreement.dto.ts\n            \n            class\n            UpdateExamAgreementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam.dto.ts\n            \n            class\n            UpdateExamDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/entities/exam-agreement.entity.ts\n            \n            class\n            ExamAgreement\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/exam/entities/exam-target.entity.ts\n            \n            class\n            ExamTarget\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/exam/entities/exam.entity.ts\n            \n            class\n            Exam\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/exam/exam.constants.ts\n            \n            variable\n            EXAM_NOT_FOUND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/factories/exam-target-node.factory.ts\n            \n            injectable\n            ExamTargetNodeFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/factories/exam-target-node.factory.ts\n            \n            interface\n            ExamTargetNodeSchema\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/interfaces/exam-agreement-user.interface.ts\n            \n            interface\n            ExamAgreementUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/interfaces/exam-user.interface.ts\n            \n            interface\n            ExamUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/models/exam-personal-result.model.ts\n            \n            class\n            ExamPersonalResult\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/models/exam-target-node.model.ts\n            \n            class\n            ExamTargetNode\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/providers/exam-target-tree.provider.ts\n            \n            injectable\n            ExamTargetTree\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam-agreement.repository.ts\n            \n            class\n            ExamAgreementRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam-target.repository.ts\n            \n            class\n            ExamTargetRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam.repository.ts\n            \n            class\n            ExamRepository\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/exam/services/exam-agreement.service.ts\n            \n            injectable\n            ExamAgreementService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/exam/services/exam-target.service.ts\n            \n            injectable\n            ExamTargetService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/services/exam.service.ts\n            \n            injectable\n            ExamService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/exportation/exportation.controller.ts\n            \n            controller\n            ExportationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exportation/exportation.repository.ts\n            \n            class\n            ExportationRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exportation/exportation.service.ts\n            \n            injectable\n            ExportationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/exportation/interfaces/csv-line.interface.ts\n            \n            interface\n            CsvLine\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/firebase/dtos/firebase-storage-upload.dto.ts\n            \n            interface\n            FirebaseStorageUploadDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/firebase-admin.constants.ts\n            \n            variable\n            FIREBASE_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n            \n            injectable\n            FirebaseAdmin\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/firebase/firebase.constants.ts\n            \n            variable\n            FIREBASE_ADMIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseAsyncModuleOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseModuleOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n            \n            interface\n            FirebaseAuthDecodedToken\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-auth.service.ts\n            \n            injectable\n            FirebaseAuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-cloud-messaging.service.ts\n            \n            injectable\n            FirebaseCloudMessagingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-firestore.service.ts\n            \n            injectable\n            FirebaseFirestoreService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-storage.service.ts\n            \n            injectable\n            FirebaseStorageService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/controllers/upload.controller.ts\n            \n            controller\n            UploadController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/dtos/file-send.dto.ts\n            \n            interface\n            FileSendDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infra/infra.constants.ts\n            \n            variable\n            UPLOAD_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/services/firebase-uploader.service.ts\n            \n            injectable\n            FirebaseUploader\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/services/uploader.service.ts\n            \n            class\n            UploaderService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyGlobals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyPerfLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applySecurityLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            buildSwaggerDoc\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            sentryInit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            DEFAULT_PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question-group.controller.ts\n            \n            controller\n            QuestionGroupController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/question-group/dtos/copy-question-group.dto.ts\n            \n            class\n            CopyQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-question-group.dto.ts\n            \n            class\n            CreateQuestionGroupDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-question.dto.ts\n            \n            class\n            CreateQuestionDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-questions.dto.ts\n            \n            class\n            CreateQuestion\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-questions.dto.ts\n            \n            class\n            CreateQuestionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/find-personal.dto.ts\n            \n            class\n            FindPersonalDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/question-find.dto.ts\n            \n            class\n            QuestionFindDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/reorder-question-group.dto.ts\n            \n            class\n            ReorderQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/reorder-question.dto.ts\n            \n            class\n            ReorderQuestionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/update-question-group.dto.ts\n            \n            class\n            UpdateQuestionGroupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/dtos/update-question.dto.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/entities/question-group-grade.entity.ts\n            \n            class\n            QuestionGroupGrade\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/question-group/entities/question-group.entity.ts\n            \n            class\n            QuestionGroup\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/question-group/entities/question.entity.ts\n            \n            class\n            Question\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/question-group/interfaces/question-group-user.interface.ts\n            \n            interface\n            QuestionGroupUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/providers/personal-group.provider.ts\n            \n            class\n            PersonalQuestionGroup\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/question-group.constants.ts\n            \n            variable\n            questionGroupNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/question.constants.ts\n            \n            variable\n            questionGroupRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/question.constants.ts\n            \n            variable\n            questionNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/repositories/question-group.repository.ts\n            \n            class\n            QuestionGroupRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/repositories/question.repository.ts\n            \n            class\n            QuestionRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/services/question-group.service.ts\n            \n            injectable\n            QuestionGroupService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/question-group/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/decoratos/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/user/helpers/create-user.helper.ts\n            \n            function\n            createUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/interfaces/user-specialized-result.interface.ts\n            \n            interface\n            UserResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/repositories/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.2.2\n        \n            @nestjs/common : ^7.6.13\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.13\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.13\n        \n            @nestjs/swagger : ^4.7.15\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @sentry/node : ^6.5.1\n        \n            @sentry/tracing : ^6.5.1\n        \n            bcryptjs : ^2.4.3\n        \n            brazilian-class-validator : ^0.1.6\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            date-fns : ^2.22.1\n        \n            express-basic-auth : ^1.2.0\n        \n            express-rate-limit : ^5.2.6\n        \n            faker : ^5.5.3\n        \n            firebase-admin : ^9.7.0\n        \n            helmet : ^4.4.1\n        \n            lodash : ^4.17.21\n        \n            morgan : ^1.10.0\n        \n            mysql2 : ^2.2.5\n        \n            objects-to-csv : ^1.3.6\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.31\n        \n            typeorm-naming-strategies : ^2.0.0\n        \n            typeorm-transactional-cls-hooked : ^0.1.20\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnswerType   (src/.../answer-type.enum.ts)\n                        \n                        \n                            CaslAction   (src/.../casl-action.enum.ts)\n                        \n                        \n                            ExamAgreementStatus   (src/.../exam-agreement-status.enum.ts)\n                        \n                        \n                            ExamStatus   (src/.../exam-status.enum.ts)\n                        \n                        \n                            ExamTargetType   (src/.../exam-target-type.enum.ts)\n                        \n                        \n                            ExportationType   (src/.../exportation-type.enum.ts)\n                        \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserType   (src/.../user-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/answer/enums/answer-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AnswerType\n                    \n                \n                        \n                            \n                                 ANSWER\n                            \n                        \n                        \n                            \n                                Value : Answer\n                            \n                        \n                        \n                            \n                                 ANSWER_GRADE\n                            \n                        \n                        \n                            \n                                Value : AnswerGrade\n                            \n                        \n            \n        \n\n    src/auth/casl/enums/casl-action.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CaslAction\n                    \n                \n                        \n                            \n                                 MANAGE\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 CREATE\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 READ\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 UPDATE\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-agreement-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamAgreementStatus\n                    \n                \n                        \n                            \n                                 STARTED\n                            \n                        \n                        \n                            \n                                Value : started\n                            \n                        \n                        \n                            \n                                 FINISHED\n                            \n                        \n                        \n                            \n                                Value : finished\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-target-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamTargetType\n                    \n                \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : Student\n                            \n                        \n                        \n                            \n                                 PROFESSOR\n                            \n                        \n                        \n                            \n                                Value : Professor\n                            \n                        \n                        \n                            \n                                 COURSE\n                            \n                        \n                        \n                            \n                                Value : Course\n                            \n                        \n                        \n                            \n                                 GRADE\n                            \n                        \n                        \n                            \n                                Value : Grade\n                            \n                        \n            \n        \n\n    src/exportation/enums/exportation-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExportationType\n                    \n                \n                        \n                            \n                                 AVALIACAO\n                            \n                        \n                        \n                            \n                                Value : Avaliacao\n                            \n                        \n                        \n                            \n                                 GRUPO\n                            \n                        \n                        \n                            \n                                Value : Grupo\n                            \n                        \n                        \n                            \n                                 PESSOAL\n                            \n                        \n                        \n                            \n                                Value : GrupoPessoal\n                            \n                        \n            \n        \n\n    src/user/enum/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 MANAGER\n                            \n                        \n                        \n                            \n                                Value : manager\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 REGULAR\n                            \n                        \n                        \n                            \n                                Value : regular\n                            \n                        \n            \n        \n\n    src/user/enum/user-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserType\n                    \n                \n                        \n                            \n                                 PROFESSOR\n                            \n                        \n                        \n                            \n                                Value : Professor\n                            \n                        \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : Student\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            applyGlobals   (src/.../main.ts)\n                        \n                        \n                            applyPerfLayer   (src/.../main.ts)\n                        \n                        \n                            applySecurityLayer   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            buildSwaggerDoc   (src/.../main.ts)\n                        \n                        \n                            createUser   (src/.../create-user.helper.ts)\n                        \n                        \n                            IsEnrollment   (src/.../is-enrollment.decorator.ts)\n                        \n                        \n                            last   (src/.../last.util.ts)\n                        \n                        \n                            origin   (src/.../cors.config.ts)\n                        \n                        \n                            sentryInit   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            applyGlobals\n                        \n                        \n                    \n                \n            \n            \n                \napplyGlobals(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyPerfLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplyPerfLayer(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applySecurityLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplySecurityLayer(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildSwaggerDoc\n                        \n                        \n                    \n                \n            \n            \n                \nbuildSwaggerDoc(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sentryInit\n                        \n                        \n                    \n                \n            \n            \n                \nsentryInit(config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/user/helpers/create-user.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/decorators/is-enrollment.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            IsEnrollment\n                        \n                        \n                    \n                \n            \n            \n                \nIsEnrollment()\n                \n            \n\n\n\n\n        \n    \n    src/core/utils/last.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            last\n                        \n                        \n                    \n                \n            \n            \n                \nlast(arr)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/config/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            origin\n                        \n                        \n                    \n                \n            \n            \n                \norigin(origin, callback)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    origin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nFast Form API\nAPI para suprir a lógica de negócio do sistema Fast Form (FF)\nInstalação\nPara rodar a API localmente (em development mode) é necessário esses programas no seu computador:\n\ndocker\ndocker-compose\n\n# fullfil all needed environment variables copying .env.example to .env\n$ cp .env.example .env\n# initialize api service and its dependencies using following command\n$ sudo docker-compose up --build\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnswerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuxiliaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExportationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseAdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InfraModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionGroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_imports\n\n\n\ncluster_AnswerModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_ExportationModule\n\n\n\ncluster_ExportationModule_exports\n\n\n\ncluster_ExportationModule_providers\n\n\n\ncluster_FirebaseAdminModule\n\n\n\ncluster_FirebaseAdminModule_exports\n\n\n\ncluster_FirebaseAdminModule_providers\n\n\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_exports\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_exports\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_exports\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nExamModule->AnswerModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nExamAgreementService \n\nExamAgreementService \n\nExamAgreementService  -->\n\nExamModule->ExamAgreementService \n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\nAnswerModule -->\n\nQuestionGroupModule->AnswerModule\n\n\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionGroupModule->QuestionService \n\n\n\nAppModule -->\n\nAnswerModule->AppModule\n\n\n\n\n\nAnswerService\n\nAnswerService\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nExamModule -->\n\nAuxiliaryModule->ExamModule\n\n\n\nQuestionGroupModule -->\n\nAuxiliaryModule->QuestionGroupModule\n\n\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nGradeService \n\nGradeService \n\nGradeService  -->\n\nAuxiliaryModule->GradeService \n\n\n\n\n\nPeriodService \n\nPeriodService \n\nPeriodService  -->\n\nAuxiliaryModule->PeriodService \n\n\n\n\n\nProfessorService \n\nProfessorService \n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\n\n\nStudentService \n\nStudentService \n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nHttpExceptionFilter \n\nHttpExceptionFilter \n\nHttpExceptionFilter  -->\n\nCoreModule->HttpExceptionFilter \n\n\n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nExportationModule\n\nExportationModule\n\nAppModule -->\n\nExportationModule->AppModule\n\n\n\n\n\nExportationService \n\nExportationService \n\nExportationService  -->\n\nExportationModule->ExportationService \n\n\n\n\n\nInfraModule\n\nInfraModule\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nGradeService\n\nGradeService\n\nAuxiliaryModule -->\n\nGradeService->AuxiliaryModule\n\n\n\n\n\nPeriodService\n\nPeriodService\n\nAuxiliaryModule -->\n\nPeriodService->AuxiliaryModule\n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\nExamAgreementService\n\nExamAgreementService\n\nExamModule -->\n\nExamAgreementService->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nExamTargetNodeFactory\n\nExamTargetNodeFactory\n\nExamModule -->\n\nExamTargetNodeFactory->ExamModule\n\n\n\n\n\nExamTargetService\n\nExamTargetService\n\nExamModule -->\n\nExamTargetService->ExamModule\n\n\n\n\n\nExamTargetTree\n\nExamTargetTree\n\nExamModule -->\n\nExamTargetTree->ExamModule\n\n\n\n\n\nExportationService\n\nExportationService\n\nExportationModule -->\n\nExportationService->ExportationModule\n\n\n\n\n\nFirebaseAdmin \n\nFirebaseAdmin \n\n\n\nFirebaseAdminModule\n\nFirebaseAdminModule\n\nFirebaseAdmin  -->\n\nFirebaseAdminModule->FirebaseAdmin \n\n\n\n\n\nFirebaseAdmin\n\nFirebaseAdmin\n\nFirebaseAdminModule -->\n\nFirebaseAdmin->FirebaseAdminModule\n\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionGroupModule -->\n\nQuestionService->QuestionGroupModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        14 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    26 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    81 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    20 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            Callback   (src/.../cors.config.ts)\n                        \n                        \n                            CaslSubjects   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            FirebaseFirestoreCollection   (src/.../firebase-firestore-collection.type.ts)\n                        \n                        \n                            Path   (src/.../exam-target-node.model.ts)\n                        \n                        \n                            UserToFind   (src/.../user-to-find.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/casl/factories/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CaslSubjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    src/config/cors.config.ts\n    \n    \n        \n            \n                \n                    \n                    Callback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/firebase/types/firebase-firestore-collection.type.ts\n    \n    \n        \n            \n                \n                    \n                    FirebaseFirestoreCollection\n                \n            \n            \n                \n                        firebase.firestore.CollectionReference\n\n                \n            \n        \n    \n    src/exam/models/exam-target-node.model.ts\n    \n    \n        \n            \n                \n                    \n                    Path\n                \n            \n            \n                \n                        ExamTargetNode[] | undefined\n\n                \n            \n        \n    \n    src/auxiliary/types/user-to-find.type.ts\n    \n    \n        \n            \n                \n                    \n                    UserToFind\n                \n            \n            \n                \n                        Student | Professor\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addTargets   (src/.../1622378888497-ExamTargetAdd.ts)\n                        \n                        \n                            allowedOrigins   (src/.../cors.config.ts)\n                        \n                        \n                            configs   (src/.../index.ts)\n                        \n                        \n                            corsConfig   (src/.../cors.config.ts)\n                        \n                        \n                            corsConfigKey   (src/.../cors.config.ts)\n                        \n                        \n                            cpf   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            databaseConfigKey   (src/.../database.config.ts)\n                        \n                        \n                            DEFAULT_PORT   (src/.../main.ts)\n                        \n                        \n                            defaultName   (src/.../1624416663575-SeedAuxiliary1.ts)\n                        \n                        \n                            enrollment   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            enrollmentLength   (src/.../core.constants.ts)\n                        \n                        \n                            EXAM_NOT_FOUND   (src/.../exam.constants.ts)\n                        \n                        \n                            FIREBASE_ADMIN   (src/.../firebase.constants.ts)\n                        \n                        \n                            FIREBASE_OPTIONS   (src/.../firebase-admin.constants.ts)\n                        \n                        \n                            firebaseConfig   (src/.../firebase.config.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            isProd   (src/.../cors.config.ts)\n                        \n                        \n                            jwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            jwtConfigKey   (src/.../jwt.config.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            PASSWORD_MAX   (src/.../auth.constants.ts)\n                        \n                        \n                            PASSWORD_MIN   (src/.../auth.constants.ts)\n                        \n                        \n                            questionGroupNotFound   (src/.../question-group.constants.ts)\n                        \n                        \n                            questionGroupRelations   (src/.../question.constants.ts)\n                        \n                        \n                            questionNotFound   (src/.../question.constants.ts)\n                        \n                        \n                            rateLimitConfig   (src/.../rate-limit.config.ts)\n                        \n                        \n                            rateLimitConfigKey   (src/.../rate-limit.config.ts)\n                        \n                        \n                            sentryConfig   (src/.../sentry.config.ts)\n                        \n                        \n                            student   (src/.../1624416663575-SeedAuxiliary1.ts)\n                        \n                        \n                            swaggerConfig   (src/.../swagger.config.ts)\n                        \n                        \n                            swaggerConfigKey   (src/.../swagger.config.ts)\n                        \n                        \n                            targets   (src/.../1622326106015-ExamTarget.ts)\n                        \n                        \n                            UPLOAD_PATH   (src/.../infra.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/migrations/1622378888497-ExamTargetAdd.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            addTargets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['Course', 'Grade']\n                        \n                    \n\n\n            \n        \n\n    src/config/cors.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            allowedOrigins\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp[]\n\n                        \n                    \n                    \n                        \n                            Default value : isProd\n  ? [/^https:\\/\\/(.*\\.|)herokuapp.com/]\n  : [/^http:\\/\\/localhost:(3000|5000)$/, /^https:\\/\\/(.*\\.|)herokuapp.com/]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  corsConfigKey,\n  (): CorsOptions => ({\n    origin,\n    optionsSuccessStatus: 200,\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cors'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isProd\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.NODE_ENV === 'production'\n                        \n                    \n\n\n            \n        \n\n    src/config/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  swaggerConfig,\n  databaseConfig,\n  rateLimitConfig,\n  corsConfig,\n  jwtConfig,\n  firebaseConfig,\n  sentryConfig,\n]\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1620299822480-AdminUser.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '29997856155'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '999999'\n                        \n                    \n\n\n            \n        \n\n    src/config/database.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  databaseConfigKey,\n  (): TypeOrmModuleOptions => ({\n    type: 'mysql',\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_DATABASE,\n    port: parseInt(process.env.DB_PORT!),\n    maxQueryExecutionTime: parseInt(process.env.DB_QUERY_TIMEOUT ?? '5000'),\n    entities: [__dirname + '/../**/*.entity.{js,ts}'],\n    migrations: [__dirname + '/../database/migrations/*.{js,ts}'],\n    subscribers: [__dirname + '/../**/*.subscriber.{js,ts}'],\n    synchronize: false,\n    logging:\n      process.env.DB_LOGGING === 'true' ||\n      process.env.NODE_ENV === 'development',\n    cli: {\n      migrationsDir: 'src/database/migrations',\n    },\n    namingStrategy: new SnakeNamingStrategy(),\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'database'\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_PORT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3000\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('bootstrap')\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1624416663575-SeedAuxiliary1.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Gerado'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            student\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  cpf: '50172241065',\n  enrollment: '989898',\n}\n                        \n                    \n\n\n            \n        \n\n    src/core/core.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            enrollmentLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : [1, 9]\n                        \n                    \n\n\n            \n        \n\n    src/exam/exam.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EXAM_NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam not found'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_ADMIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_ADMIN'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase-admin/firebase-admin.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_OPTIONS'\n                        \n                    \n\n\n            \n        \n\n    src/config/firebase.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            firebaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  'firebase',\n  (): FirebaseModuleOptions => {\n    if (!process.env.FIREBASE_ADMIN) {\n      throw new Error(\n        'Needs FIREBASE_ADMIN env (JSON Service Account as string)',\n      );\n    }\n\n    if (!process.env.FIREBASE_BUCKET) {\n      throw new Error('Needs FIREBASE_BUCKET env var');\n    }\n\n    return {\n      cert: JSON.parse(process.env.FIREBASE_ADMIN),\n      storageBucket: process.env.FIREBASE_BUCKET,\n    };\n    //return JSON.parse(process.env.FIREBASE_ADMIN);\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/user/decoratos/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (_: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/config/jwt.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  jwtConfigKey,\n  (): JwtModuleOptions => ({\n    secret: process.env.JWT_SECRET,\n    signOptions: { issuer: 'ff.uneb.br', expiresIn: '10h' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'jwt'\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MAX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 100\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 6\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question-group.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionGroupNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup not found'\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionGroupRelations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['questions']\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Question not found'\n                        \n                    \n\n\n            \n        \n\n    src/config/rate-limit.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(rateLimitConfigKey, () => ({\n  timeWindow: parseInt(process.env.RATE_LIMIT_WINDOW_MS ?? '60000'),\n  max: parseInt(process.env.RATE_LIMIT_MAX ?? '20'),\n}))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'rateLimit'\n                        \n                    \n\n\n            \n        \n\n    src/config/sentry.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sentryConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs('sentry', () => ({\n  dsn: process.env.SENTRY_DSN,\n}))\n                        \n                    \n\n\n            \n        \n\n    src/config/swagger.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  swaggerConfigKey,\n  (): SwaggerOptions => ({\n    title: 'Fast Form',\n    description: 'Fast Form API',\n    version: 'v0.0.1',\n    users: { ff: 'senhaforte' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'swagger'\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1622326106015-ExamTarget.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\"Student\", \"Professor\"]\n                        \n                    \n\n\n            \n        \n\n    src/infra/infra.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UPLOAD_PATH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/questions'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
