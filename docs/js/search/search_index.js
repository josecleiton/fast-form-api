var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUser1620299822480.html",[0,0.227,1,3.876]],["body/classes/AdminUser1620299822480.html",[0,0.21,1,5.033,2,0.651,3,0.056,4,0.056,5,0.05,6,5.819,7,3.581,8,2.244,9,2.939,10,0.227,11,1.086,12,3.408,13,2.042,14,2.599,15,2.542,16,2.542,17,3.632,18,0.577,19,4.37,20,1.181,21,0.007,22,1.05,23,0.381,24,0.778,25,1.068,26,1.664,27,2.542,28,4.37,29,0.175,30,0.854,31,3.347,32,3.895,33,2.746,34,5.061,35,3.895,36,4.771,37,3.895,38,0.056,39,0.004,40,1.677,41,0.992,42,1.697,43,2.669,44,7.703,45,3.005,46,2.465,47,4.37,48,4.37,49,2.258,50,1.77,51,4.37,52,3.581,53,3.895,54,4.37,55,5.297,56,3.347,57,4.02,58,3.581,59,5.033,60,3.004,61,3.368,62,4.442,63,2.755,64,2.474,65,4.37,66,1.77,67,0.004,68,0.003]],["title/classes/Answer.html",[0,0.227,69,2.444]],["body/classes/Answer.html",[0,0.197,2,0.611,3,0.052,4,0.052,5,0.047,10,0.213,18,0.843,21,0.006,22,0.702,23,0.513,24,0.744,29,0.225,30,0.802,38,0.052,39,0.003,40,1.604,41,1.927,67,0.004,68,0.003,69,3.035,70,3.657,71,1.577,72,3.397,73,0.758,74,4.386,75,6.113,76,3.365,77,5.622,78,4.921,79,2.664,80,2.73,81,2.73,82,2.036,83,3.564,84,4.104,85,3.663,86,3.169,87,4.104,88,4.104,89,4.104,90,3.564,91,3.86,92,2.064,93,4.104,94,5.962,95,4.033,96,4.104,97,1.956,98,3.397,99,2.008,100,2.663,101,1.908,102,3.039,103,1.956,104,1.908,105,1.956,106,1.908,107,1.956,108,2.968,109,2.697,110,1.47,111,3.657,112,3.657,113,3.568,114,2.25,115,4.325,116,5.234,117,2.697,118,3.363,119,1.861,120,4.104,121,4.104,122,1.698,123,3.143,124,2.822,125,3.143]],["title/classes/Answer1622421768424.html",[0,0.227,126,3.876]],["body/classes/Answer1622421768424.html",[0,0.197,2,0.611,3,0.052,4,0.052,5,0.047,8,2.146,9,2.839,10,0.356,11,1.039,12,3.339,13,2,14,2.485,15,2.431,16,2.431,17,3.579,18,0.645,20,1.129,21,0.006,22,1.355,23,0.425,24,0.744,25,1.021,26,1.617,27,2.431,29,0.117,30,0.802,38,0.052,39,0.003,40,1.604,43,2.728,66,2.778,67,0.004,68,0.003,69,4.634,73,0.758,78,2.697,86,3.353,95,2.008,122,3.658,126,6.137,127,6.673,128,3.657,129,0.776,130,2.236,131,1.593,132,4.104,133,4.104,134,4.104,135,2.822,136,3.846,137,2.697,138,4.508,139,4.508,140,2.697,141,3.397,142,2.697,143,2.697,144,2.697,145,5.874,146,4.813,147,4.499,148,5.874,149,2.697,150,4.805,151,2.697,152,5.002,153,3.649,154,4.162,155,5.874,156,5.002,157,4.162,158,4.104,159,4.827,160,5.874,161,4.104,162,5.874,163,3.657,164,3.545,165,4.039]],["title/controllers/AnswerController.html",[166,1.957,167,3.623]],["body/controllers/AnswerController.html",[0,0.2,3,0.053,4,0.053,5,0.047,10,0.216,11,1.048,13,2.151,18,0.649,20,1.328,21,0.007,22,1.181,23,0.404,24,0.875,25,1.201,26,1.28,29,0.252,38,0.053,39,0.003,40,2.057,41,2.012,42,1.614,46,2.211,66,1.683,67,0.004,68,0.003,69,3.063,82,1.568,166,1.72,167,4.54,168,1.841,169,3.704,170,2.433,171,3.293,172,3.737,173,6.908,174,4.156,175,4.57,176,6.157,177,5.693,178,4.156,179,4.156,180,3.38,181,2.62,182,4.54,183,4.156,184,4.156,185,6.3,186,4.287,187,4.156,188,2.433,189,3.47,190,2.858,191,5.927,192,2.858,193,5.179,194,2.522,195,0.883,196,4.076,197,4.076,198,2.433,199,1.932,200,2.148,201,2.858,202,3.183,203,2.62,204,3.597,205,2.731,206,2.858,207,4.75,208,3.704,209,3.704,210,4.857,211,3.704,212,3.406,213,4.156,214,4.156,215,2.522,216,2.148,217,1.26,218,4.156,219,3.704,220,4.156,221,4.156,222,1.793,223,4.156,224,2.522,225,2.731,226,3.006,227,4.156,228,3.183,229,4.156]],["title/classes/AnswerGrade.html",[0,0.227,144,3.108]],["body/classes/AnswerGrade.html",[0,0.207,2,0.642,3,0.055,4,0.055,5,0.049,10,0.224,18,0.869,21,0.006,23,0.507,24,0.771,29,0.201,30,0.843,38,0.055,39,0.003,40,1.662,41,1.902,67,0.004,68,0.003,69,4.62,71,1.634,72,1.956,73,0.785,74,3.643,75,5.422,76,2.795,77,4.986,78,3.998,79,2.76,80,2.828,81,2.828,82,2.1,83,4.278,85,3.95,86,3.24,90,2.617,91,2.834,92,1.516,94,4.4,95,2.976,97,2.055,98,4.111,99,2.11,100,2.737,101,2.004,102,3.123,103,2.055,104,2.004,105,2.055,106,2.004,107,2.055,113,2.633,115,3.836,144,3.998,230,5.777,231,3.843,232,3.815,233,6.282,234,4.312,235,4.312,236,4.312,237,4.312,238,4.312,239,4.312,240,4.312,241,4.312,242,3.843,243,4.986,244,4.312]],["title/classes/AnswerGradeRepository.html",[0,0.227,245,3.42]],["body/classes/AnswerGradeRepository.html",[0,0.327,2,1.014,3,0.087,4,0.087,5,0.077,21,0.006,29,0.251,30,1.605,38,0.087,39,0.004,67,0.005,68,0.004,71,2.203,144,4.474,245,5.935,246,6.068,247,6.068,248,4.686,249,3.622,250,2.818,251,2.818,252,2.818,253,6.808,254,4.924,255,6.808]],["title/modules/AnswerModule.html",[256,1.631,257,3.42]],["body/modules/AnswerModule.html",[0,0.261,3,0.069,4,0.069,5,0.062,21,0.006,29,0.264,38,0.069,39,0.004,67,0.005,68,0.004,110,1.95,167,6.089,168,3.157,195,1.156,207,6.177,208,4.85,245,5.155,256,2.741,257,6.854,258,2.594,259,2.53,260,2.735,261,2.735,262,2.594,263,3.994,264,2.662,265,4.85,266,4.85,267,4.85,268,5.904,269,6.177,270,3.582,271,2.735,272,2.735,273,5.442,274,3.909,275,5.442,276,3.431,277,2.252,278,3.936,279,4.85,280,4.85,281,4.85,282,3.936,283,4.85,284,5.442,285,5.442]],["title/classes/AnswerRepository.html",[0,0.227,278,3.42]],["body/classes/AnswerRepository.html",[0,0.329,2,1.021,3,0.087,4,0.087,5,0.078,21,0.006,29,0.251,30,1.611,38,0.087,39,0.004,67,0.005,68,0.004,69,3.543,71,2.213,212,5.619,248,4.7,249,3.647,250,2.838,251,2.838,252,2.838,278,5.96,286,6.11,287,6.856]],["title/classes/AnswerScoreCheck1624750140568.html",[0,0.227,288,3.876]],["body/classes/AnswerScoreCheck1624750140568.html",[0,0.241,2,0.748,3,0.064,4,0.064,5,0.057,8,2.47,9,3.161,10,0.261,11,1.195,12,3.556,13,2.131,14,2.86,15,2.797,16,2.797,17,3.743,18,0.718,20,1.299,21,0.006,22,1.458,23,0.41,24,0.856,25,1.175,26,1.765,27,2.797,29,0.143,30,0.982,38,0.064,39,0.003,43,2.522,67,0.004,68,0.003,69,4.222,73,0.872,78,5.771,86,2.125,90,3.047,112,4.476,113,2.925,122,3.161,123,3.847,124,3.453,125,3.847,129,0.95,130,1.637,131,1.95,136,3.619,153,3.595,164,3.492,288,6.695,289,7.281,290,4.476,291,5.022,292,5.022,293,5.022,294,6.259,295,2.671,296,3.166]],["title/injectables/AnswerService.html",[207,3.252,297,1.039]],["body/injectables/AnswerService.html",[0,0.145,3,0.038,4,0.038,5,0.034,10,0.156,11,0.824,13,2.084,18,0.691,20,1.336,21,0.007,22,1.188,23,0.373,24,0.88,25,1.208,26,1.711,29,0.25,30,0.588,33,2.811,38,0.038,39,0.002,40,2.007,41,1.846,43,2.445,46,1.826,49,2.947,50,2.601,66,1.219,67,0.003,68,0.002,69,4.093,74,2.947,76,2.755,82,1.295,94,2.176,110,1.67,111,2.682,118,2.466,119,1.365,141,2.114,172,2.939,176,4.154,177,4.417,181,2.939,185,5.728,195,0.639,203,1.897,207,3.205,209,2.682,210,3.819,211,2.682,212,2.466,217,1.948,222,1.907,245,5.543,250,3.278,251,1.245,252,1.245,277,1.245,278,5.315,279,2.682,280,2.682,281,2.682,297,1.023,298,1.1,299,2.682,300,5.704,301,4.221,302,2.729,303,1.888,304,3.009,305,4.833,306,5.037,307,3.009,308,3.009,309,4.92,310,3.009,311,3.009,312,3.063,313,3.009,314,3.009,315,3.063,316,3.009,317,3.461,318,1.601,319,3.063,320,2.069,321,2.176,322,2.305,323,2.466,324,3.009,325,3.009,326,3.009,327,2.347,328,3.009,329,3.009,330,3.009,331,1.897,332,3.009,333,3.009,334,3.009,335,3.009,336,2.176,337,3.009,338,3.009,339,3.819,340,2.466,341,3.009,342,4.661,343,3.009,344,3.009,345,2.466,346,2.305,347,3.009,348,2.682,349,3.009,350,3.009,351,3.009,352,4.661,353,3.009,354,3.009,355,3.009,356,2.305,357,3.009,358,3.009,359,3.009,360,3.009]],["title/controllers/AppController.html",[166,1.957,361,3.623]],["body/controllers/AppController.html",[0,0.303,3,0.08,4,0.08,5,0.071,10,0.328,11,1.384,18,0.736,21,0.006,25,1.361,29,0.179,38,0.08,39,0.004,67,0.005,68,0.004,82,1.777,129,1.61,166,3.24,168,2.792,188,3.69,195,1.339,222,2.032,361,5.996,362,5.617,363,8.906,364,8.906,365,7.828,366,6.303,367,6.303,368,6.303,369,6.303,370,6.303,371,6.303,372,6.303,373,6.303]],["title/modules/AppModule.html",[256,1.631,374,3.623]],["body/modules/AppModule.html",[0,0.203,3,0.054,4,0.054,5,0.048,21,0.007,29,0.268,38,0.054,39,0.003,67,0.004,68,0.003,76,1.68,168,2.662,195,0.9,256,2.408,257,6.026,258,2.02,259,1.97,260,2.129,261,2.129,262,2.02,263,2.129,264,2.073,268,5.475,269,5.729,270,3.02,271,2.129,272,2.129,274,3.829,276,2.672,277,1.754,282,3.065,283,3.776,361,5.348,374,7.464,375,3.776,376,3.776,377,5.729,378,5.253,379,6.026,380,6.026,381,5.729,382,6.026,383,5.729,384,4.237,385,4.603,386,4.993,387,2.571,388,4.925,389,3.472,390,3.246,391,4.237,392,3.776,393,3.776,394,3.776,395,4.237,396,4.237,397,4.237,398,4.237,399,4.237,400,4.237,401,4.237,402,4.237,403,4.237,404,2.914,405,4.237,406,2.481]],["title/classes/Auth.html",[0,0.227,60,2.314]],["body/classes/Auth.html",[0,0.244,2,0.756,3,0.065,4,0.065,5,0.058,10,0.264,18,0.845,21,0.006,23,0.502,29,0.194,30,0.992,38,0.065,39,0.003,40,1.859,41,1.152,55,5.28,57,4.347,60,3.329,61,4.21,67,0.004,68,0.003,71,1.827,72,3.722,73,0.878,79,3.087,80,3.163,81,3.163,82,2.042,85,3.756,92,2.392,97,2.419,98,3.722,99,2.482,100,2.981,101,2.359,102,3.401,103,2.419,104,2.359,105,2.419,106,2.359,107,2.419,113,3.551,114,2.782,129,1.666,407,4.522,408,5.157,409,3.852,410,5.074,411,5.074,412,5.074,413,3.67,414,5.074]],["title/classes/Auth1619445806509.html",[0,0.227,415,3.876]],["body/classes/Auth1619445806509.html",[0,0.193,2,0.6,3,0.051,4,0.051,5,0.046,8,2.118,9,2.809,10,0.457,11,1.025,12,3.318,13,1.988,14,2.452,15,2.398,16,2.398,17,3.563,18,0.638,20,1.114,21,0.006,22,1.345,23,0.422,24,0.734,25,1.008,26,1.603,27,2.398,29,0.115,30,0.787,34,3.393,36,3.083,38,0.051,39,0.003,40,2.028,43,2.667,46,2.518,55,2.769,57,2.28,60,3.321,61,3.178,63,2.539,64,2.28,67,0.004,68,0.003,73,0.748,86,2.452,95,1.97,122,3.871,129,0.762,130,2.67,131,1.564,136,3.289,137,3.808,138,5.383,139,5.383,140,3.808,141,2.629,142,3.808,143,3.808,149,3.808,150,3.281,151,3.808,164,3.836,171,2.762,295,4.358,409,3.843,415,6.084,416,6.616,417,3.589,418,4.028,419,4.028,420,4.028,421,5.165,422,5.795,423,3.085,424,5.164,425,5.795,426,5.795,427,5.164,428,4.439]],["title/controllers/AuthController.html",[166,1.957,429,3.623]],["body/controllers/AuthController.html",[0,0.289,3,0.076,4,0.076,5,0.068,10,0.312,11,1.344,18,0.565,20,1.156,21,0.006,22,1.028,23,0.322,24,0.761,25,1.045,26,1.641,29,0.249,38,0.076,39,0.004,60,2.941,61,4.167,67,0.005,68,0.004,82,1.365,166,2.488,168,2.663,170,3.52,188,4.879,189,3.52,195,1.277,198,3.52,199,2.794,216,3.106,217,1.823,222,1.56,429,5.821,430,5.358,431,5.358,432,6.343,433,6.012,434,5.254,435,4.605,436,5.358,437,6.012,438,6.012,439,6.012,440,6.012]],["title/classes/AuthDto.html",[0,0.227,441,3.252]],["body/classes/AuthDto.html",[0,0.394,2,1.014,3,0.087,4,0.087,5,0.077,10,0.354,18,0.64,21,0.006,23,0.365,29,0.194,38,0.087,39,0.004,61,4.831,67,0.005,68,0.004,73,1.059,82,1.546,129,1.552,441,5.643,442,6.068,443,4.474,444,6.808,445,5.643,446,5.393,447,3.165]],["title/modules/AuthModule.html",[256,1.631,377,3.252]],["body/modules/AuthModule.html",[0,0.218,3,0.058,4,0.058,5,0.051,21,0.007,29,0.265,38,0.058,39,0.003,67,0.004,68,0.003,168,2.791,195,0.963,200,4.823,256,2.497,258,2.16,259,2.107,260,2.278,261,2.278,262,2.16,263,3.639,264,3.542,270,3.166,271,2.278,272,2.278,274,3.971,276,2.858,277,1.876,377,6.605,383,5.854,385,5.547,386,5.143,387,2.75,390,3.472,393,4.039,404,3.117,406,2.654,429,5.547,434,5.885,435,3.472,448,4.039,449,4.039,450,4.039,451,4.039,452,6.75,453,6.157,454,4.532,455,4.532,456,3.472,457,3.472,458,4.532,459,3.278,460,4.039,461,4.532,462,4.532,463,4.532,464,4.532,465,4.532,466,4.532]],["title/classes/AuthRepository.html",[0,0.227,459,3.42]],["body/classes/AuthRepository.html",[0,0.329,2,1.021,3,0.087,4,0.087,5,0.078,21,0.006,29,0.251,30,1.611,38,0.087,39,0.004,60,3.354,67,0.005,68,0.004,71,2.213,248,4.7,249,3.647,250,2.838,251,2.838,252,2.838,459,5.96,467,6.11,468,6.11,469,6.856]],["title/injectables/AuthService.html",[297,1.039,434,2.982]],["body/injectables/AuthService.html",[0,0.174,3,0.046,4,0.046,5,0.041,10,0.188,11,0.947,13,2.078,18,0.708,20,1.448,21,0.007,22,1.288,23,0.423,24,0.954,25,1.227,26,1.811,29,0.251,30,0.707,31,2.771,33,2.762,36,1.924,38,0.046,39,0.002,43,2.588,46,1.158,49,2.768,50,2.17,55,4.388,56,2.771,57,3.033,60,3.685,61,3.869,67,0.003,68,0.002,82,0.821,195,0.768,217,1.935,222,1.656,250,2.92,251,1.497,252,1.497,277,1.497,297,1.177,298,1.322,303,2.17,317,2.195,318,1.924,327,2.332,406,2.118,431,4.775,432,5.18,434,3.378,436,3.224,441,5.99,456,2.771,459,5.705,460,3.224,468,3.224,470,3.224,471,5.358,472,5.358,473,5.358,474,3.617,475,8.164,476,5.286,477,3.617,478,5.358,479,5.448,480,3.617,481,5.358,482,3.617,483,3.617,484,5.358,485,3.617,486,2.771,487,2.964,488,2.964,489,3.224,490,2.048,491,2.964,492,3.617,493,3.617,494,2.964,495,3.617,496,3.617,497,3.617,498,3.617,499,3.617,500,5.358,501,3.617,502,3.617,503,3.617,504,3.617,505,3.617,506,5.358,507,3.617,508,2.771,509,3.617,510,3.617,511,3.617,512,3.617,513,3.617]],["title/classes/Auxiliary1620477175799.html",[0,0.227,514,3.876]],["body/classes/Auxiliary1620477175799.html",[0,0.271,2,0.298,3,0.025,4,0.025,5,0.023,8,1.226,9,1.792,10,0.337,11,0.593,12,2.471,13,1.48,14,1.42,15,1.389,16,1.389,17,2.861,18,0.407,20,0.645,21,0.006,22,1.043,23,0.232,24,0.425,25,0.583,26,1.094,27,1.389,29,0.057,30,0.392,38,0.025,39,0.001,40,2.095,43,2.907,66,2.624,67,0.002,68,0.001,73,0.433,76,2.419,86,3.422,90,3.422,95,0.98,113,3.058,122,3.952,129,0.379,130,2.672,131,0.778,136,4.144,137,4.009,138,5.514,139,5.514,140,4.009,141,3.55,142,4.009,143,4.009,149,4.009,150,4.841,151,4.009,153,3.758,154,3.932,156,4.832,157,3.932,159,4.662,164,4.379,171,2.908,232,2.703,294,5.31,295,4.844,296,5.477,409,2.451,421,3.847,428,4.32,514,4.151,515,4.514,516,1.641,517,1.785,518,2.003,519,1.785,520,2.833,521,3.193,522,2.427,523,2.427,524,3.88,525,3.316,526,2.99,527,2.374,528,2.115,529,1.641,530,1.785,531,4.079,532,1.686,533,1.785,534,2.535,535,3.193,536,1.599,537,3.355,538,3.193,539,1.785,540,2.57,541,3.355,542,2.57,543,2.977,544,2.57,545,1.316,546,1.449,547,3.355,548,4.285,549,1.964,550,2.977,551,3.88,552,2.965,553,4.195,554,2.57,555,3.355,556,1.534,557,2.99,558,2.75,559,2.99,560,1.785,561,2.99,562,1.785,563,2.99]],["title/classes/Auxiliary1624416663574.html",[0,0.227,564,3.876]],["body/classes/Auxiliary1624416663574.html",[0,0.181,2,0.343,3,0.029,4,0.029,5,0.026,8,1.376,9,1.977,10,0.408,11,0.666,12,2.646,13,1.585,14,1.594,15,1.559,16,1.559,17,3.015,18,0.449,20,0.724,21,0.005,22,1.041,23,0.256,24,0.477,25,0.655,26,1.192,27,1.559,29,0.066,30,0.45,38,0.029,39,0.001,40,1.029,43,2.959,66,3.176,67,0.002,68,0.001,73,0.486,86,3.499,90,2.285,95,1.127,113,1.63,122,3.712,129,0.436,130,2.248,131,0.894,135,3.286,136,4.208,137,1.513,138,3.14,139,3.14,140,1.513,141,3.631,142,1.513,143,1.513,147,5.511,149,3.14,150,5.131,151,3.14,152,5.684,153,4.333,154,4.759,156,5.41,157,4.759,159,5.066,163,3.356,164,4.209,165,4.947,232,3.545,421,1.452,516,1.887,517,2.052,519,2.052,523,2.724,524,2.885,527,2.62,528,2.375,531,4.725,532,1.893,533,3.356,536,1.098,538,4.073,539,3.356,540,5.004,542,5.004,543,2.59,546,5.203,549,1.348,550,2.59,552,4.212,556,1.764,558,3.086,559,4.919,560,3.356,561,4.919,562,3.356,563,4.919,564,4.523,565,4.919,566,2.303,567,5.424,568,2.285,569,3.086,570,6.411,571,3.766,572,3.766,573,5.511,574,3.766,575,3.766,576,3.086,577,2.052,578,3.766,579,3.766,580,3.356,581,4.919,582,3.766,583,3.766,584,3.766]],["title/modules/AuxiliaryModule.html",[256,1.631,378,2.982]],["body/modules/AuxiliaryModule.html",[0,0.23,3,0.061,4,0.061,5,0.054,21,0.007,29,0.263,38,0.061,39,0.003,67,0.004,68,0.003,195,1.02,256,2.573,258,2.288,259,2.231,260,2.412,261,2.412,262,2.288,263,3.75,264,3.651,270,3.293,271,2.412,272,2.412,274,2.632,276,3.026,277,1.986,378,6.074,585,4.278,586,4.278,587,4.278,588,6.48,589,6.48,590,6.48,591,6.48,592,4.8,593,4.74,594,4.278,595,4.74,596,4.278,597,4.74,598,4.278,599,4.74,600,4.278,601,4.8,602,4.8,603,4.8,604,4.8,605,3.934]],["title/interfaces/BatchUser.html",[309,3.623,606,1.27]],["body/interfaces/BatchUser.html",[3,0.087,4,0.087,5,0.078,10,0.356,21,0.006,23,0.442,38,0.087,39,0.004,41,2.162,67,0.005,68,0.004,73,1.063,180,4.485,224,5.563,309,6.313,606,1.841,607,2.777,608,6.11,609,4.959]],["title/injectables/CaslAbilityFactory.html",[297,1.039,610,3.42]],["body/injectables/CaslAbilityFactory.html",[0,0.215,3,0.057,4,0.057,5,0.051,10,0.233,11,1.105,18,0.421,20,0.862,21,0.007,22,0.766,23,0.386,24,0.567,25,0.779,29,0.257,33,2.115,38,0.057,39,0.003,40,1.224,42,2.427,46,2.842,50,1.815,67,0.004,68,0.003,69,4.232,74,4.383,109,2.944,110,1.605,130,1.461,159,2.623,195,0.952,222,1.163,224,3.792,225,4.729,232,1.985,297,1.372,298,1.637,520,1.74,544,4.787,610,4.52,611,5.122,612,3.672,613,6.25,614,6.25,615,4.48,616,6.414,617,6.25,618,6.25,619,6.25,620,5.57,621,3.993,622,4.48,623,4.48,624,4.48,625,3.672,626,3.993,627,4.48,628,4.48,629,3.324,630,3.24,631,2.719,632,3.081,633,3.993,634,3.672,635,3.993,636,3.993,637,5.57,638,3.993,639,4.48,640,5.57,641,4.48,642,8.19,643,5.57,644,4.48,645,7.197,646,4.48,647,4.48,648,7.197,649,4.48,650,4.48,651,4.48]],["title/modules/CaslModule.html",[256,1.631,452,3.42]],["body/modules/CaslModule.html",[0,0.302,3,0.08,4,0.08,5,0.071,21,0.006,29,0.222,38,0.08,39,0.004,67,0.005,68,0.004,195,1.335,256,2.932,258,2.995,259,2.92,260,3.157,261,3.157,262,2.995,263,4.273,264,4.16,270,3.926,271,3.157,272,3.157,452,6.84,610,7.089,652,5.599,653,5.599,654,5.599,655,6.283,656,6.283,657,6.283]],["title/classes/CopyQuestionGroupDto.html",[0,0.227,658,3.42]],["body/classes/CopyQuestionGroupDto.html",[0,0.378,2,0.948,3,0.081,4,0.081,5,0.072,10,0.331,18,0.74,21,0.006,23,0.422,29,0.181,38,0.081,39,0.004,41,2.029,67,0.005,68,0.004,73,1.016,76,3.391,82,1.788,110,3.065,180,4.184,447,2.958,658,5.696,659,7.622,660,4.603,661,5.19,662,5.377,663,6.365,664,5.672]],["title/modules/CoreModule.html",[256,1.631,379,3.42]],["body/modules/CoreModule.html",[0,0.281,3,0.074,4,0.074,5,0.066,21,0.006,29,0.247,38,0.074,39,0.004,67,0.005,68,0.004,195,1.243,256,2.837,258,2.788,259,2.719,260,2.94,261,2.94,262,2.788,263,4.135,264,4.025,270,3.753,271,2.94,272,2.94,274,3.208,379,6.817,385,5.721,387,3.55,665,5.213,666,5.213,667,5.213,668,6.194,669,7.021,670,5.85,671,6.656,672,5.85,673,5.85,674,5.85]],["title/classes/Course.html",[0,0.227,534,2.769]],["body/classes/Course.html",[0,0.239,2,0.74,3,0.063,4,0.063,5,0.056,10,0.258,18,0.841,21,0.006,23,0.495,29,0.216,30,0.972,38,0.063,39,0.003,40,1.833,41,1.128,42,1.93,67,0.004,68,0.003,71,1.802,72,3.691,73,0.866,79,3.044,80,3.12,81,3.12,82,2.032,85,3.283,92,2.359,97,2.369,98,3.691,99,2.432,100,2.95,101,2.311,102,3.366,103,2.369,104,2.311,105,2.369,106,2.311,107,2.369,113,3.289,114,2.726,117,3.267,129,1.539,408,4.763,409,3.799,534,3.929,535,4.791,536,3.622,538,4.81,675,4.43,676,7.598,677,4.971,678,2.814,679,4.971,680,4.971,681,4.232,682,4.43,683,4.971,684,4.971]],["title/classes/CreateAnswerDto.html",[0,0.227,177,3.252]],["body/classes/CreateAnswerDto.html",[0,0.342,2,0.811,3,0.069,4,0.069,5,0.062,10,0.283,18,0.793,21,0.006,23,0.491,24,1.068,29,0.203,38,0.069,39,0.004,41,2.039,67,0.005,68,0.004,73,0.92,77,6.514,78,5.224,82,1.915,94,5.749,118,4.46,119,2.469,130,1.774,131,2.113,177,5.466,233,7.084,348,4.85,447,2.53,662,4.938,685,7.803,686,4.46,687,5.442,688,5.442,689,5.442,690,5.442,691,5.442,692,7.128,693,5.442,694,5.442,695,4.46,696,4.823,697,4.46,698,5.442,699,5.442,700,5.442,701,5.442,702,5.442,703,5.442,704,5.442]],["title/classes/CreateAuthDto.html",[0,0.227,479,3.42]],["body/classes/CreateAuthDto.html",[0,0.313,2,0.97,3,0.083,4,0.083,5,0.074,10,0.338,18,0.751,21,0.006,23,0.428,29,0.185,38,0.083,39,0.004,57,4.522,61,4.38,67,0.005,68,0.004,71,2.145,73,1.031,82,1.813,98,3.624,129,1.511,432,6.195,441,4.479,443,4.28,479,5.777,705,5.804,706,5.804,707,5.804,708,4.989,709,6.513,710,5.804,711,6.513]],["title/classes/CreateExamAgreementDto.html",[0,0.227,712,3.42]],["body/classes/CreateExamAgreementDto.html",[0,0.404,2,0.915,3,0.078,4,0.078,5,0.07,10,0.319,18,0.577,21,0.006,23,0.451,24,0.976,29,0.251,38,0.078,39,0.004,67,0.005,68,0.004,71,1.65,73,0.994,82,1.395,199,2.856,224,3.728,447,2.856,520,3.268,545,5.532,696,4.675,712,5.572,713,6.314,714,4.706,715,4.118,716,5.476,717,6.144,718,5.035,719,4.038,720,5.572,721,4.706,722,5.035,723,6.144]],["title/classes/CreateExamDto.html",[0,0.227,724,3.252]],["body/classes/CreateExamDto.html",[0,0.364,2,0.737,3,0.063,4,0.063,5,0.056,10,0.257,18,0.822,21,0.006,23,0.494,24,1.028,29,0.216,38,0.063,39,0.003,67,0.004,68,0.003,73,0.863,82,1.984,92,2.351,100,3.394,119,2.243,129,1.535,443,4.395,445,5.211,446,4.98,447,2.299,522,5.481,536,3.612,695,4.053,696,4.599,713,7.325,715,3.272,719,3.25,720,4.837,724,4.599,725,4.053,726,6.754,727,5.805,728,5.805,729,4.437,730,4.408,731,4.946,732,4.946,733,6.688,734,4.946,735,4.946,736,4.29,737,4.946,738,5.123,739,4.946,740,4.946,741,4.837,742,7.579,743,2.485,744,2.299,745,4.946]],["title/classes/CreateQuestion.html",[0,0.227,746,3.252]],["body/classes/CreateQuestion.html",[0,0.415,2,0.866,3,0.074,4,0.074,5,0.066,10,0.302,18,0.546,21,0.006,23,0.44,24,0.942,29,0.246,38,0.074,39,0.004,40,2.241,41,1.689,67,0.005,68,0.004,71,1.561,73,0.96,82,1.32,92,2.615,110,2.666,171,2.772,199,2.703,331,3.666,447,2.703,661,3.528,662,4.356,696,4.515,718,4.765,719,3.821,738,5.699,741,5.381,746,5.948,747,5.381,748,4.765,749,5.182,750,5.815,751,5.182,752,6.631,753,6.631,754,3.666,755,4.205,756,5.182,757,3.999,758,5.182]],["title/classes/CreateQuestionDto.html",[0,0.227,754,2.982]],["body/classes/CreateQuestionDto.html",[0,0.315,2,0.715,3,0.061,4,0.061,5,0.054,10,0.249,18,0.789,21,0.006,23,0.465,24,1.097,29,0.186,38,0.061,39,0.003,41,1.488,67,0.004,68,0.003,73,0.846,82,1.905,110,3.105,129,1.639,199,2.231,443,3.154,445,5.132,446,4.904,447,2.231,536,3.124,661,4.528,662,4.369,696,4.866,715,3.923,720,4.74,747,6.266,754,4.132,759,3.677,760,6.651,761,6.651,762,6.116,763,6.116,764,4.8,765,4.278,766,4.8,767,4.8,768,4.8,769,4.8,770,5.371,771,6.554,772,7.146,773,6.554,774,6.554,775,5.841,776,6.554,777,6.554,778,6.554,779,6.554,780,6.554,781,6.554,782,4.8,783,4.8,784,4.8,785,6.554,786,6.554,787,4.8]],["title/classes/CreateQuestionGroupDto.html",[0,0.227,788,3.252]],["body/classes/CreateQuestionGroupDto.html",[0,0.423,2,0.824,3,0.07,4,0.07,5,0.063,10,0.288,18,0.798,21,0.006,23,0.455,24,1.143,29,0.157,38,0.07,39,0.004,41,1.636,67,0.005,68,0.004,73,0.93,76,3.49,82,1.927,110,3.154,129,1.363,180,3.921,443,3.637,445,4.956,446,4.736,447,2.573,536,3.82,549,4.692,660,4.003,662,4.22,696,5.152,715,4.153,720,5.796,730,6.423,747,6.367,749,4.932,788,4.956,789,5.535,790,5.535,791,5.535,792,5.535]],["title/classes/CreateQuestionsDto.html",[0,0.227,757,3.252]],["body/classes/CreateQuestionsDto.html",[0,0.415,2,0.866,3,0.074,4,0.074,5,0.066,10,0.302,18,0.546,21,0.006,23,0.44,29,0.246,38,0.074,39,0.004,40,1.588,41,1.32,67,0.005,68,0.004,71,1.561,73,0.96,82,1.32,92,2.615,110,2.666,171,2.772,199,2.703,331,5.173,447,2.703,661,3.528,662,4.356,696,4.515,718,4.765,719,3.821,738,5.699,741,5.381,746,5.948,747,5.381,748,4.765,751,5.182,752,6.631,753,6.631,754,3.666,755,4.205,756,5.182,757,5.116,758,5.182,793,5.815,794,5.815,795,5.815,796,5.815]],["title/classes/CreateUserDto.html",[0,0.227,797,2.982]],["body/classes/CreateUserDto.html",[0,0.377,2,0.791,3,0.067,4,0.067,5,0.06,10,0.276,18,0.785,21,0.006,23,0.488,29,0.259,34,4.598,36,4.177,38,0.067,39,0.003,57,3.005,63,4.951,67,0.005,68,0.003,71,1.425,73,0.905,82,1.896,119,2.408,129,1.58,199,2.468,447,3.26,479,3.84,491,4.351,632,5.4,634,4.351,695,4.351,797,4.422,798,7.74,799,4.351,800,7.853,801,5.309,802,6.436,803,5.309,804,7.013,805,5.309,806,4.951,807,7.013,808,5.309,809,4.731,810,5.309,811,5.309,812,5.309,813,5.372,814,5.309,815,5.309]],["title/interfaces/CsvLine.html",[606,1.27,816,3.42]],["body/interfaces/CsvLine.html",[3,0.067,4,0.067,5,0.06,10,0.273,21,0.006,23,0.5,24,1.053,38,0.067,39,0.003,67,0.005,68,0.003,73,0.898,129,1.886,606,1.41,607,2.127,770,6.817,816,5.036,817,4.304,818,4.68,819,7.413,820,7.413,821,7.413,822,6.817,823,7.551,824,7.413,825,7.413,826,7.413,827,7.413,828,6.817,829,7.413,830,6.817]],["title/interfaces/CsvLineRow.html",[606,1.27,831,3.623]],["body/interfaces/CsvLineRow.html",[3,0.062,4,0.062,5,0.055,10,0.252,21,0.006,23,0.51,24,1.101,38,0.062,39,0.003,41,1.973,46,2.401,67,0.004,68,0.003,73,0.851,78,5.291,129,1.853,146,6.599,545,5.291,553,5.537,606,1.302,607,1.963,715,4.488,817,3.973,831,5.054,832,3.973,833,4.32,834,7.176,835,7.176,836,7.176,837,5.823,838,7.176,839,7.176,840,7.176,841,7.176,842,7.176,843,3.67,844,3.487]],["title/injectables/CustomLogger.html",[297,1.039,845,3.42]],["body/injectables/CustomLogger.html",[0,0.339,3,0.09,4,0.09,5,0.08,21,0.006,29,0.201,38,0.09,39,0.005,67,0.005,68,0.005,71,2.251,195,1.499,297,1.841,298,2.578,845,6.063,846,6.287,847,6.15,848,8.383,849,7.054]],["title/classes/Exam.html",[0,0.227,520,1.836]],["body/classes/Exam.html",[0,0.145,2,0.448,3,0.038,4,0.038,5,0.034,10,0.156,11,0.824,18,0.87,21,0.007,23,0.505,24,0.59,25,0.523,29,0.218,30,0.588,38,0.038,39,0.002,40,1.273,41,1.295,42,1.81,67,0.003,68,0.002,71,1.251,72,3.477,73,0.601,74,3.319,79,2.914,80,2.986,81,2.986,82,2.078,83,1.826,85,3.75,86,1.972,95,3.142,97,1.434,98,3.477,99,1.472,100,3.334,101,2.166,102,2.527,103,1.434,104,2.166,105,1.434,106,2.166,107,1.434,109,1.978,110,1.078,113,3.428,114,1.65,115,2.939,117,1.978,129,1.215,130,1.519,222,1.21,520,2.494,521,4.05,522,4.125,524,4.92,528,3.596,532,3.852,536,2.719,629,3.417,630,2.176,631,1.826,678,2.638,681,3.596,715,2.28,726,5.083,727,4.369,728,4.369,729,3.34,743,1.512,850,2.682,851,5.083,852,4.674,853,4.674,854,5.264,855,3.371,856,4.369,857,4.369,858,3.009,859,3.371,860,3.205,861,3.009,862,3.009,863,3.009,864,3.009,865,3.009,866,3.009,867,3.009,868,5.694,869,3.009,870,4.221,871,3.009,872,3.009,873,3.009,874,1.978,875,1.978,876,1.978,877,4.674,878,3.009,879,2.176,880,3.009,881,3.009,882,3.009,883,3.009,884,3.009,885,4.154,886,3.57,887,2.176,888,2.305,889,3.009,890,1.826,891,3.009,892,1.762,893,3.009,894,3.009,895,3.009,896,2.305,897,2.466,898,2.466,899,3.009,900,3.009]],["title/classes/Exam1620478273991.html",[0,0.227,901,3.876]],["body/classes/Exam1620478273991.html",[0,0.255,2,0.791,3,0.067,4,0.067,5,0.06,8,2.563,9,3.25,10,0.276,11,1.24,12,3.613,13,2.165,14,2.967,15,2.902,16,2.902,17,3.785,18,0.738,20,1.348,21,0.006,22,1.485,23,0.421,24,0.888,25,1.219,26,1.804,27,2.902,29,0.151,30,1.038,38,0.067,39,0.003,43,2.165,67,0.005,68,0.003,73,0.905,90,4.255,122,2.902,129,1.004,130,2.286,131,2.061,136,3.106,152,4.255,520,2.723,526,7.444,527,2.911,552,4.106,901,6.846,902,7.444,903,4.731,904,5.309,905,5.309,906,5.309]],["title/classes/ExamAgreement.html",[0,0.227,74,2.444]],["body/classes/ExamAgreement.html",[0,0.246,2,0.507,3,0.043,4,0.043,5,0.039,10,0.177,11,0.905,18,0.861,21,0.006,23,0.503,24,0.648,25,0.592,29,0.219,30,0.665,38,0.043,39,0.002,40,1.398,41,1.666,42,1.321,46,2.561,67,0.003,68,0.002,71,1.374,72,3.63,73,0.66,74,2.645,79,3.105,80,3.182,81,3.182,82,2.08,83,3.106,85,3.591,86,2.896,91,3.364,92,2.406,95,3.349,97,1.622,98,3.63,99,1.665,100,2.994,101,2.379,102,2.726,103,1.622,104,2.379,105,1.622,106,2.379,107,1.622,108,6.206,113,3.463,114,1.866,115,3.88,117,2.236,129,1.294,130,2.231,180,3.01,222,0.883,224,3.734,409,1.926,520,3.107,521,3.227,528,3.88,544,4.713,545,4.044,715,3.773,719,2.236,743,1.71,837,4.45,860,3.52,874,2.236,875,2.236,876,2.236,887,2.461,892,1.992,907,3.032,908,6.845,909,3.403,910,3.403,911,3.403,912,3.403,913,5.309,914,3.403,915,3.403,916,3.403,917,3.403,918,3.403,919,6.153,920,3.403,921,3.403,922,2.789,923,3.403,924,3.403,925,3.403,926,2.789,927,3.403,928,2.606]],["title/classes/ExamAgreement1622332886234.html",[0,0.227,929,3.876]],["body/classes/ExamAgreement1622332886234.html",[0,0.21,2,0.651,3,0.056,4,0.056,5,0.05,8,2.244,9,2.939,10,0.227,11,1.086,12,3.408,13,2.042,14,2.599,15,2.542,16,2.542,17,3.632,18,0.667,20,1.181,21,0.006,22,1.387,23,0.381,24,0.778,25,1.068,26,1.664,27,2.542,29,0.124,30,0.854,38,0.056,39,0.003,43,2.724,66,2.487,67,0.004,68,0.003,73,0.792,86,1.849,113,1.891,122,2.939,129,0.826,130,1.425,131,1.697,136,3.909,141,2.786,150,4.36,153,3.777,154,3.727,156,4.674,157,3.727,159,4.51,164,3.669,295,4.694,296,5.563,421,2.755,543,6.068,544,5.9,546,3.161,550,4.883,552,3.596,556,3.347,580,3.895,929,6.312,930,6.864,931,3.895,932,4.37,933,4.37,934,4.37,935,4.37,936,6.141,937,6.141]],["title/classes/ExamAgreementAnonymousDefault1622334780336.html",[0,0.227,938,3.876]],["body/classes/ExamAgreementAnonymousDefault1622334780336.html",[0,0.251,2,0.778,3,0.066,4,0.066,5,0.059,8,2.535,9,3.224,10,0.271,11,1.227,12,3.597,13,2.155,14,2.936,15,2.871,16,2.871,17,3.773,18,0.732,20,1.334,21,0.006,22,1.477,23,0.418,24,0.879,25,1.206,26,1.793,27,2.871,29,0.149,30,1.021,38,0.066,39,0.003,43,2.142,67,0.005,68,0.003,73,0.895,90,4.21,122,2.871,129,0.988,130,2.262,131,2.028,136,3.073,295,3.691,296,4.374,527,2.864,543,4.771,545,5.455,552,4.062,938,6.802,939,7.397,940,4.655,941,5.224,942,5.224,943,5.224]],["title/controllers/ExamAgreementController.html",[166,1.957,944,3.623]],["body/controllers/ExamAgreementController.html",[0,0.217,3,0.057,4,0.057,5,0.051,10,0.235,11,1.112,13,2.064,18,0.591,20,1.209,21,0.006,22,1.075,23,0.388,24,0.797,25,1.094,26,1.689,29,0.257,38,0.057,39,0.003,40,1.718,41,1.642,46,2.502,67,0.004,68,0.003,74,3.737,82,1.428,109,2.972,166,1.871,168,2.003,170,2.647,186,3.27,188,4.234,189,4.234,190,3.109,192,3.109,193,4.325,194,2.744,195,0.961,196,4.325,197,4.325,198,2.647,199,2.102,200,2.337,201,3.109,203,2.851,204,3.817,205,2.972,206,3.109,215,2.744,216,2.337,217,1.371,222,1.632,226,3.27,306,4.753,323,3.706,490,2.56,520,2.808,712,5.654,722,5.155,892,4.234,944,4.818,945,5.927,946,4.03,947,6.445,948,7.232,949,4.03,950,5.654,951,4.522,952,5.605,953,4.522,954,6.967,955,5.654,956,3.706,957,4.522,958,2.851,959,3.109,960,3.109,961,3.706,962,3.706,963,4.522,964,4.522,965,4.522]],["title/classes/ExamAgreementDto.html",[0,0.227,721,3.623]],["body/classes/ExamAgreementDto.html",[0,0.379,2,0.951,3,0.081,4,0.081,5,0.072,10,0.332,18,0.742,21,0.006,23,0.423,29,0.224,38,0.081,39,0.004,41,2.031,67,0.005,68,0.004,73,1.018,82,1.791,180,4.19,199,2.968,224,5.197,447,2.968,662,5.015,714,4.891,721,6.045,966,7.019,967,6.385,968,8.565,969,6.385]],["title/classes/ExamAgreementObservation1622417032753.html",[0,0.227,970,3.876]],["body/classes/ExamAgreementObservation1622417032753.html",[0,0.254,2,0.789,3,0.067,4,0.067,5,0.06,8,2.558,9,3.246,10,0.275,11,1.238,12,3.611,13,2.163,14,2.962,15,2.897,16,2.897,17,3.783,18,0.737,20,1.346,21,0.006,22,1.484,23,0.421,24,0.887,25,1.217,26,1.802,27,2.897,29,0.151,30,1.035,38,0.067,39,0.003,43,2.161,67,0.005,68,0.003,73,0.903,113,2.292,122,2.191,129,1.001,130,1.726,131,2.056,136,3.101,153,2.816,164,2.736,295,3.724,296,4.414,521,3.338,543,4.814,837,5.063,970,6.838,971,7.436,972,4.718,973,5.294,974,5.294,975,5.294]],["title/classes/ExamAgreementRepository.html",[0,0.227,976,3.42]],["body/classes/ExamAgreementRepository.html",[0,0.327,2,1.014,3,0.087,4,0.087,5,0.077,21,0.006,29,0.251,30,1.605,38,0.087,39,0.004,67,0.005,68,0.004,71,2.203,74,3.518,109,4.474,248,4.686,249,3.622,250,2.818,251,2.818,252,2.818,959,4.682,976,5.935,977,5.58,978,6.068,979,6.808]],["title/injectables/ExamAgreementService.html",[297,1.039,306,3.108]],["body/injectables/ExamAgreementService.html",[0,0.142,3,0.038,4,0.038,5,0.034,10,0.154,11,0.814,13,2.076,18,0.716,20,1.466,21,0.007,22,1.303,23,0.434,24,0.965,25,1.27,26,1.848,29,0.243,30,0.9,33,2.155,38,0.038,39,0.002,40,1.543,41,1.566,43,1.967,46,2.208,49,2.919,50,2.288,66,1.2,67,0.003,68,0.002,74,3.292,79,1.344,82,1.282,100,2.836,109,1.948,123,2.27,175,3.866,180,1.45,195,0.63,203,2.904,217,1.397,222,1.895,224,3.428,225,3.027,250,3.261,251,1.227,252,1.227,277,1.227,297,1.011,298,1.083,302,2.697,303,1.865,306,3.027,317,2.795,318,1.577,322,6.036,327,1.683,406,1.735,486,2.27,490,1.678,494,2.429,520,2.836,712,4.607,722,3.774,743,1.489,856,2.27,857,4.88,887,2.143,892,4.843,913,2.143,928,3.528,947,5.034,949,2.641,950,4.607,952,5.034,954,5.677,955,4.607,958,1.869,959,2.038,960,3.167,976,4.607,980,2.641,981,4.606,982,4.606,983,4.606,984,5.649,985,1.798,986,4.968,987,2.964,988,2.795,989,4.606,990,2.964,991,2.964,992,4.606,993,4.105,994,2.964,995,3.774,996,4.606,997,2.964,998,4.606,999,2.964,1000,2.964,1001,2.964,1002,2.964,1003,2.429,1004,2.641,1005,2.964,1006,2.964,1007,2.964,1008,3.774,1009,3.331,1010,2.964,1011,2.641,1012,2.429,1013,5.649,1014,2.641,1015,4.105,1016,2.964,1017,2.964,1018,3.167,1019,2.964,1020,3.528,1021,2.964]],["title/interfaces/ExamAgreementUser.html",[606,1.27,950,3.42]],["body/interfaces/ExamAgreementUser.html",[3,0.085,4,0.085,5,0.076,10,0.349,11,1.439,18,0.631,21,0.006,23,0.36,25,1.168,38,0.085,39,0.004,40,2.486,41,1.988,67,0.005,68,0.004,73,1.05,202,6.234,606,1.803,607,2.719,609,4.856,715,3.981,892,4.765,950,5.886,1022,9.103,1023,6.715]],["title/controllers/ExamController.html",[166,1.957,1024,3.623]],["body/controllers/ExamController.html",[0,0.172,3,0.046,4,0.046,5,0.041,10,0.186,11,0.941,13,2.269,18,0.739,20,1.443,21,0.007,22,1.283,23,0.448,24,0.95,25,1.367,26,1.928,29,0.247,38,0.046,39,0.002,40,2.147,41,1.939,42,1.392,46,1.703,66,1.451,67,0.003,68,0.002,82,1.785,141,2.879,166,1.483,168,1.588,170,2.098,171,2.536,172,3.355,175,4.262,181,2.26,182,4.076,186,3.848,188,3.115,189,3.115,190,2.464,192,2.464,193,4.83,194,2.175,195,0.761,196,3.659,197,4.83,198,2.098,199,1.666,200,1.852,201,2.464,203,2.26,204,2.175,205,2.355,206,2.464,215,2.175,216,1.852,217,1.087,222,2.04,226,2.592,228,2.745,301,4.616,302,3.115,312,2.355,315,2.355,490,2.029,520,2.914,549,2.098,724,5.406,958,2.26,960,2.464,962,2.937,986,4.002,1024,4.076,1025,3.194,1026,4.076,1027,3.194,1028,2.937,1029,3.584,1030,2.745,1031,3.584,1032,4.361,1033,3.584,1034,3.194,1035,3.584,1036,4.59,1037,3.584,1038,3.584,1039,6.047,1040,3.584,1041,3.194,1042,4.361,1043,2.592,1044,2.592,1045,3.194,1046,3.584,1047,3.584,1048,3.584,1049,3.584,1050,3.584,1051,3.584,1052,3.584,1053,2.937,1054,3.584,1055,3.584,1056,3.584]],["title/modules/ExamModule.html",[256,1.631,268,3.108]],["body/modules/ExamModule.html",[0,0.209,3,0.055,4,0.055,5,0.049,21,0.007,29,0.268,38,0.055,39,0.003,67,0.004,68,0.003,168,2.716,195,0.926,256,2.445,258,2.078,259,2.027,260,2.191,261,2.191,262,2.078,263,3.564,264,3.47,268,6.307,270,3.081,271,2.191,272,2.191,274,3.362,276,2.749,277,1.805,306,6.092,323,3.573,378,5.302,605,3.573,744,2.85,944,5.432,961,5.025,976,4.435,986,5.845,1003,5.025,1004,3.886,1024,5.432,1041,3.886,1057,3.886,1058,3.886,1059,3.886,1060,4.36,1061,5.526,1062,5.526,1063,5.783,1064,4.36,1065,5.432,1066,4.36,1067,4.435,1068,3.886,1069,4.435,1070,3.886,1071,3.573,1072,6.132,1073,4.36,1074,4.36,1075,3.886,1076,3.886,1077,3.886,1078,3.886,1079,3.573]],["title/classes/ExamPersonalResult.html",[0,0.227,1036,3.42]],["body/classes/ExamPersonalResult.html",[0,0.307,2,0.951,3,0.081,4,0.081,5,0.072,10,0.332,18,0.805,21,0.006,23,0.459,29,0.182,38,0.081,39,0.004,67,0.005,68,0.004,73,1.018,520,3.685,549,5.238,1008,7.019,1036,5.707,1043,4.618,1080,6.853,1081,5.691,1082,7.019,1083,7.633,1084,6.385,1085,6.385,1086,6.385]],["title/classes/ExamRepository.html",[0,0.227,1067,3.42]],["body/classes/ExamRepository.html",[0,0.163,2,0.507,3,0.043,4,0.043,5,0.039,10,0.177,11,0.905,13,1.871,18,0.578,20,1.183,21,0.007,22,1.052,23,0.33,24,0.779,25,1.07,26,1.478,29,0.234,30,1.001,33,1.732,38,0.043,39,0.002,45,3.52,46,1.089,50,2.073,67,0.003,68,0.002,71,1.374,100,2.85,122,2.119,123,5.622,175,4.154,203,2.145,222,1.597,224,3.106,225,2.236,248,3.273,249,1.81,250,1.408,251,1.408,252,1.408,327,2.249,520,2.994,528,3.227,529,4.195,729,4.298,743,2.572,744,2.86,856,5.243,857,4.713,868,2.789,870,3.364,887,3.702,888,2.606,892,2.997,913,2.461,926,2.789,928,2.606,959,2.34,960,2.34,1015,4.562,1043,2.461,1067,3.702,1082,4.195,1087,3.032,1088,6.153,1089,5.119,1090,6.153,1091,3.403,1092,5.243,1093,3.403,1094,4.562,1095,4.562,1096,5.61,1097,4.562,1098,6.153,1099,7.34,1100,6.153,1101,4.562,1102,5.043,1103,6.153,1104,6.153,1105,5.484,1106,6.1,1107,5.119,1108,5.119,1109,5.119,1110,5.119,1111,3.403,1112,3.403,1113,7.712,1114,3.403,1115,6.557,1116,3.032,1117,2.461,1118,3.403,1119,2.789,1120,5.119,1121,3.403,1122,3.403,1123,3.403,1124,3.403,1125,3.403,1126,3.403,1127,5.119,1128,5.119,1129,3.403,1130,3.403,1131,3.403,1132,3.403,1133,3.403,1134,5.119,1135,3.403,1136,3.403,1137,3.403,1138,5.119,1139,3.403,1140,3.403,1141,3.403]],["title/injectables/ExamService.html",[297,1.039,986,2.982]],["body/injectables/ExamService.html",[0,0.126,3,0.033,4,0.033,5,0.03,10,0.137,11,0.742,13,2.156,18,0.733,20,1.401,21,0.007,22,1.245,23,0.406,24,0.923,25,1.267,26,1.794,29,0.246,30,0.515,33,2.704,38,0.033,39,0.003,40,1.78,41,1.77,43,2.406,46,0.842,49,2.168,50,1.699,66,1.066,67,0.003,68,0.002,73,0.541,82,1.354,130,0.858,131,1.022,141,1.903,171,2,172,2.645,175,3.62,181,2.645,195,0.559,203,1.66,217,2.106,222,1.802,250,3.307,251,1.089,252,1.089,277,1.089,297,0.921,298,0.962,301,3.921,302,2.456,303,1.699,312,2.757,315,2.757,317,3.174,318,1.4,319,2.757,320,1.81,321,1.904,327,2.849,356,2.016,490,1.49,520,3.168,532,2.108,549,1.541,589,5.009,724,5.201,729,4.066,743,1.323,851,3.739,852,3.438,887,1.904,892,1.541,913,1.904,926,2.157,928,2.016,958,1.66,960,1.81,985,1.597,986,2.645,988,2.546,1008,3.438,1011,3.739,1014,2.346,1018,1.81,1020,4.992,1026,3.213,1027,3.739,1034,3.739,1036,1.904,1039,5.779,1042,3.438,1043,1.904,1044,1.904,1045,2.346,1062,3.921,1067,4.315,1068,2.346,1071,2.157,1082,3.438,1083,3.739,1119,2.157,1142,2.346,1143,4.286,1144,4.195,1145,4.661,1146,2.632,1147,2.632,1148,2.632,1149,2.632,1150,2.632,1151,4.195,1152,2.632,1153,3.739,1154,2.632,1155,2.632,1156,2.632,1157,2.632,1158,2.632,1159,2.346,1160,2.632,1161,4.286,1162,2.632,1163,2.632,1164,2.632,1165,2.632,1166,2.632,1167,2.632,1168,2.632,1169,2.346,1170,2.632,1171,2.632,1172,2.157,1173,2.632,1174,4.195,1175,4.195,1176,2.632,1177,2.346,1178,2.632,1179,2.632,1180,2.632,1181,2.632,1182,2.632,1183,2.346,1184,2.157]],["title/classes/ExamTarget.html",[0,0.227,870,3.108]],["body/classes/ExamTarget.html",[0,0.235,2,0.727,3,0.062,4,0.062,5,0.055,10,0.254,18,0.852,21,0.006,23,0.507,29,0.214,30,0.955,38,0.062,39,0.003,40,1.811,41,1.109,67,0.004,68,0.003,71,1.781,72,4.041,73,0.856,79,3.664,80,3.754,81,3.754,82,2.058,85,2.389,92,2.331,95,3.951,97,2.328,98,4.041,99,2.389,100,3.382,101,3.083,102,3.335,103,2.328,104,3.083,105,2.328,106,3.083,107,2.328,108,4.796,113,2.87,114,2.678,119,2.215,409,3.754,413,3.532,736,4.781,743,2.454,744,2.27,870,4.358,874,3.209,875,3.209,876,3.209,1185,4.352,1186,4.884,1187,4.884]],["title/classes/ExamTarget1622326106015.html",[0,0.227,1188,3.876]],["body/classes/ExamTarget1622326106015.html",[0,0.172,2,0.533,3,0.045,4,0.045,5,0.041,8,1.942,9,2.624,10,0.444,11,0.94,12,3.182,13,1.906,14,2.249,15,2.199,16,2.199,17,3.458,18,0.596,20,1.022,21,0.006,22,1.282,23,0.421,24,0.673,25,0.924,26,1.516,27,2.199,29,0.102,30,0.699,33,1.21,38,0.045,39,0.002,40,1.451,43,2.852,62,2.587,66,2.152,67,0.003,68,0.002,73,0.686,86,2.683,95,2.6,113,1.548,122,3.459,129,0.676,130,2.067,131,1.389,136,3.849,137,2.351,138,4.166,139,4.166,140,2.351,141,2.876,142,2.351,143,2.351,149,3.492,150,4.448,151,3.492,153,3.373,154,3.225,156,4.258,157,3.225,159,3.111,164,4.203,171,3.022,295,4.797,296,4.954,409,2.025,428,4.07,548,4.424,550,4.825,556,2.74,581,4.736,729,2.094,744,3.262,843,3.101,844,2.947,1097,7.447,1102,5.751,1188,5.751,1189,5.751,1190,2.932,1191,3.577,1192,3.577,1193,3.577,1194,4.736,1195,5.314,1196,3.577,1197,3.188,1198,7.017,1199,5.314,1200,5.314,1201,5.314,1202,5.314,1203,3.577]],["title/classes/ExamTargetAdd1622378888497.html",[0,0.227,1204,3.876]],["body/classes/ExamTargetAdd1622378888497.html",[0,0.229,2,0.71,3,0.061,4,0.061,5,0.054,8,2.383,9,3.077,10,0.248,11,1.153,12,3.501,13,2.098,14,2.759,15,2.699,16,2.699,17,3.702,18,0.699,20,1.254,21,0.006,22,1.431,23,0.49,24,0.826,25,1.134,26,1.727,27,2.699,29,0.136,30,0.932,33,1.612,38,0.061,39,0.003,43,2.468,62,3.446,66,1.93,67,0.004,68,0.003,73,0.841,95,3.19,122,2.699,129,0.901,130,1.553,131,1.85,136,2.889,232,2.889,295,3.955,296,4.111,340,3.905,534,3.818,552,3.818,744,2.215,843,3.19,844,3.031,1096,3.905,1102,6.551,1197,4.246,1204,6.551,1205,6.551,1206,3.905,1207,4.765,1208,4.765,1209,4.765,1210,6.093,1211,4.765,1212,4.765]],["title/controllers/ExamTargetController.html",[166,1.957,1065,3.623]],["body/controllers/ExamTargetController.html",[0,0.245,3,0.065,4,0.065,5,0.058,10,0.265,11,1.208,13,1.868,18,0.642,20,0.981,21,0.007,22,0.872,23,0.366,24,0.646,25,1.187,26,1.475,29,0.256,38,0.065,39,0.003,42,2.651,46,2.186,67,0.004,68,0.003,82,1.55,119,2.314,129,0.965,166,2.111,168,2.259,170,2.986,175,4.989,194,3.095,195,1.084,197,4.696,198,2.986,199,2.371,200,2.636,201,3.508,203,3.216,204,3.095,205,3.352,206,3.508,215,3.095,216,2.636,217,1.547,222,1.772,520,1.981,736,2.888,743,2.563,744,3.578,945,6.309,960,3.508,961,4.18,962,4.18,1030,3.907,1062,4.488,1065,5.231,1071,4.18,1145,4.546,1177,4.546,1213,4.546,1214,6.829,1215,7.327,1216,5.101,1217,5.101,1218,5.101,1219,6.086,1220,5.101,1221,6.829,1222,5.101,1223,5.101,1224,5.101,1225,5.101,1226,5.101,1227,5.101]],["title/interfaces/ExamTargetManagerDto.html",[606,1.27,1228,3.876]],["body/interfaces/ExamTargetManagerDto.html",[3,0.087,4,0.087,5,0.077,10,0.355,21,0.006,23,0.366,24,1.042,29,0.194,38,0.087,39,0.004,67,0.005,68,0.004,73,1.061,119,3.099,606,1.834,607,2.767,729,5.361,736,5.184,743,3.433,744,3.823,966,5.599,1228,6.74,1229,6.089]],["title/classes/ExamTargetNode.html",[0,0.227,1230,3.108]],["body/classes/ExamTargetNode.html",[0,0.257,2,0.797,3,0.068,4,0.068,5,0.061,10,0.278,11,1.247,18,0.788,20,1.029,21,0.006,22,0.915,23,0.502,24,0.678,25,0.931,29,0.152,33,2.386,38,0.068,39,0.003,42,2.078,67,0.005,68,0.003,73,0.91,119,2.428,129,1.491,222,2.175,715,2.618,736,4.464,743,2.69,744,4.157,855,5.099,1080,6.671,1230,5.723,1231,4.386,1232,6.039,1233,7.051,1234,7.885,1235,5.353,1236,5.353,1237,7.051,1238,5.353,1239,4.784,1240,5.353,1241,5.353,1242,5.353,1243,5.353,1244,5.353,1245,4.386,1246,5.353,1247,7.885,1248,5.353]],["title/injectables/ExamTargetNodeFactory.html",[297,1.039,1061,3.108]],["body/injectables/ExamTargetNodeFactory.html",[0,0.279,3,0.074,4,0.074,5,0.066,10,0.302,11,1.316,18,0.546,20,1.118,21,0.006,22,0.994,23,0.399,24,0.736,25,1.011,29,0.233,33,1.967,38,0.074,39,0.004,50,2.355,67,0.005,68,0.004,119,2.638,195,1.235,222,1.509,297,1.634,298,2.125,606,1.561,736,4.212,743,2.922,744,4.021,1044,4.205,1061,4.89,1219,5.182,1230,5.684,1232,4.454,1245,6.098,1249,6.098,1250,4.765,1251,7.44,1252,6.631,1253,6.848,1254,5.815,1255,4.765,1256,5.182,1257,5.182,1258,5.182,1259,5.182,1260,5.182]],["title/interfaces/ExamTargetNodeSchema.html",[606,1.27,1253,3.623]],["body/interfaces/ExamTargetNodeSchema.html",[0,0.281,3,0.074,4,0.074,5,0.066,10,0.304,21,0.006,23,0.491,24,0.946,29,0.234,33,1.979,38,0.074,39,0.004,50,2.369,67,0.005,68,0.004,73,0.964,119,2.654,195,1.243,222,1.518,297,1.64,606,1.571,607,2.369,736,4.907,743,2.94,744,3.825,1044,4.231,1061,3.844,1230,5.407,1232,6.64,1245,6.121,1249,4.794,1250,4.794,1252,5.213,1253,7.016,1255,4.794,1256,5.213,1257,5.213,1258,5.213,1259,5.213,1260,5.213]],["title/classes/ExamTargetRepository.html",[0,0.227,1069,3.42]],["body/classes/ExamTargetRepository.html",[0,0.327,2,1.014,3,0.087,4,0.087,5,0.077,21,0.006,29,0.251,30,1.605,38,0.087,39,0.004,67,0.005,68,0.004,71,2.203,248,4.686,249,3.622,250,2.818,251,2.818,252,2.818,870,4.474,888,5.215,959,4.682,977,5.58,1069,5.935,1261,6.068,1262,6.808]],["title/injectables/ExamTargetService.html",[297,1.039,1062,3.108]],["body/injectables/ExamTargetService.html",[0,0.199,3,0.053,4,0.053,5,0.047,10,0.216,11,1.047,13,2.007,18,0.777,20,1.138,21,0.007,22,1.012,23,0.37,24,0.953,25,1.308,26,1.787,29,0.242,33,2.002,38,0.053,39,0.003,43,1.827,50,2.397,67,0.004,68,0.003,73,0.763,119,1.881,129,1.305,195,0.881,217,1.795,222,1.953,277,1.716,297,1.3,298,1.516,303,2.397,318,2.206,322,6.522,327,3.181,336,4.28,729,2.428,736,3.906,743,2.084,744,3.498,870,2.725,888,3.177,959,2.852,985,2.517,988,3.591,1003,3.399,1018,2.852,1062,3.889,1063,5.174,1069,5.442,1070,3.696,1075,3.696,1076,3.696,1105,5.274,1169,3.696,1215,6.706,1263,3.696,1264,6.9,1265,7.524,1266,5.918,1267,7.524,1268,6.9,1269,5.918,1270,4.147,1271,4.147,1272,5.918,1273,4.147,1274,4.147,1275,3.399,1276,4.147,1277,4.147,1278,5.918,1279,5.918,1280,4.28,1281,4.147,1282,4.147,1283,5.918,1284,4.147,1285,4.147,1286,4.147,1287,4.147,1288,4.147,1289,4.147]],["title/injectables/ExamTargetTree.html",[297,1.039,1063,3.252]],["body/injectables/ExamTargetTree.html",[0,0.239,3,0.063,4,0.063,5,0.056,10,0.258,11,1.187,18,0.714,20,1.291,21,0.007,22,1.147,23,0.48,24,0.85,25,0.864,29,0.231,33,1.682,38,0.063,39,0.003,49,2.569,50,2.013,67,0.004,68,0.003,73,0.866,119,2.255,129,1.437,195,1.056,217,2.304,222,1.29,297,1.474,298,1.817,303,2.013,317,3.016,327,2.777,736,2.814,743,2.498,744,4.287,1044,3.595,1061,5.347,1063,4.615,1077,4.43,1078,4.43,1230,5.584,1232,5.141,1239,4.611,1255,4.074,1290,7.251,1291,4.43,1292,7.598,1293,6.711,1294,6.711,1295,6.711,1296,4.971,1297,6.711,1298,4.971,1299,4.971,1300,4.971,1301,4.971,1302,4.971,1303,4.971,1304,4.971,1305,4.971,1306,4.971]],["title/classes/ExamTitle1621036457247.html",[0,0.227,1307,3.876]],["body/classes/ExamTitle1621036457247.html",[0,0.256,2,0.795,3,0.068,4,0.068,5,0.061,8,2.572,9,3.259,10,0.277,11,1.245,12,3.619,13,2.168,14,2.978,15,2.913,16,2.913,17,3.789,18,0.74,20,1.353,21,0.006,22,1.488,23,0.422,24,0.891,25,1.224,26,1.808,27,2.913,29,0.152,30,1.044,38,0.068,39,0.003,43,2.173,67,0.005,68,0.003,73,0.908,122,2.913,129,1.009,130,1.74,131,2.073,136,3.118,152,4.271,520,2.733,521,5.278,536,3.355,552,4.121,1307,6.86,1308,7.46,1309,4.757,1310,5.338,1311,5.338,1312,5.338]],["title/interfaces/ExamUser.html",[175,2.87,606,1.27]],["body/interfaces/ExamUser.html",[3,0.085,4,0.085,5,0.076,10,0.349,21,0.006,23,0.508,29,0.191,38,0.085,39,0.004,40,2.486,41,1.988,67,0.005,68,0.004,73,1.05,119,3.046,175,4.938,202,5.143,606,1.803,607,2.719,609,4.856,806,5.74,1313,6.715]],["title/controllers/ExportationController.html",[166,1.957,1314,3.623]],["body/controllers/ExportationController.html",[0,0.282,3,0.075,4,0.075,5,0.067,10,0.305,11,1.323,13,1.999,18,0.551,20,1.128,21,0.006,22,1.003,23,0.315,24,0.743,25,1.02,29,0.247,38,0.095,39,0.004,41,1.87,67,0.005,68,0.004,82,1.332,166,2.428,168,2.599,170,3.435,180,3.661,188,3.435,190,4.035,193,5.146,194,3.56,195,1.246,196,5.146,198,3.435,199,2.727,200,3.032,201,4.035,215,3.56,216,3.032,217,1.779,222,1.523,1314,5.732,1315,5.229,1316,6.669,1317,5.229,1318,7.483,1319,5.867,1320,5.146,1321,5.229,1322,5.867,1323,5.867,1324,4.494,1325,5.867,1326,5.867]],["title/modules/ExportationModule.html",[256,1.631,380,3.42]],["body/modules/ExportationModule.html",[0,0.265,3,0.07,4,0.07,5,0.063,21,0.006,29,0.257,38,0.07,39,0.004,67,0.005,68,0.004,168,3.187,195,1.172,256,2.76,258,2.631,259,2.565,260,2.773,261,2.773,262,2.631,263,4.022,264,3.915,270,3.615,271,2.773,272,2.773,274,3.945,276,3.48,277,2.284,380,6.921,381,6.201,605,4.523,1314,6.13,1320,6.621,1321,4.918,1327,4.918,1328,5.519,1329,4.918,1330,4.918,1331,6.201,1332,5.519,1333,5.519,1334,5.519,1335,4.918]],["title/injectables/ExportationRepository.html",[297,1.039,1331,3.252]],["body/injectables/ExportationRepository.html",[0,0.192,3,0.051,4,0.051,5,0.045,10,0.208,11,1.019,13,1.639,17,1.618,18,0.541,20,1.108,21,0.006,22,0.985,23,0.309,24,0.73,25,0.695,26,1.244,29,0.232,30,0.781,33,1.949,38,0.051,39,0.003,41,1.534,43,1.233,45,2.747,46,1.279,67,0.004,68,0.003,69,2.064,76,1.584,78,2.625,122,1.653,146,3.274,180,2.818,195,0.849,217,1.211,222,1.495,232,1.769,277,1.653,295,2.125,297,1.265,298,1.46,303,1.618,327,1.46,520,1.551,538,2.261,543,2.747,545,2.625,548,2.519,553,2.747,770,3.274,772,5.134,775,3.56,816,2.889,819,3.56,820,3.56,821,3.56,822,3.274,823,4.721,824,3.56,825,3.56,826,3.56,827,3.56,828,3.274,829,3.56,830,3.274,831,4.413,832,3.274,834,3.56,835,3.56,836,3.56,837,2.889,838,3.56,839,3.56,840,3.56,841,3.56,842,3.56,1094,3.56,1095,5.134,1096,6.901,1101,6.988,1331,3.961,1336,3.56,1337,5.761,1338,3.995,1339,8.169,1340,3.995,1341,5.761,1342,3.995,1343,5.134,1344,3.56,1345,3.995,1346,3.995,1347,3.274,1348,3.995,1349,3.995,1350,3.995,1351,3.995,1352,3.56,1353,3.995,1354,6.757,1355,3.995,1356,3.995,1357,3.995,1358,5.761,1359,3.995,1360,3.995,1361,3.995,1362,3.995,1363,3.995,1364,3.995,1365,3.995,1366,3.06,1367,3.995,1368,3.995,1369,6.757,1370,3.995,1371,3.995,1372,3.995,1373,3.995,1374,5.761,1375,3.274,1376,3.995,1377,3.995,1378,3.995,1379,3.995,1380,3.995,1381,3.995,1382,3.995,1383,3.995,1384,3.995,1385,3.995,1386,6.757,1387,3.995,1388,3.995,1389,3.995,1390,3.995,1391,3.995,1392,3.995,1393,3.995,1394,3.995,1395,3.995,1396,3.995,1397,3.995,1398,3.995,1399,3.995,1400,3.995]],["title/injectables/ExportationService.html",[297,1.039,1320,3.252]],["body/injectables/ExportationService.html",[0,0.197,3,0.052,4,0.052,5,0.047,10,0.213,11,1.039,13,2,18,0.704,20,1.44,21,0.006,22,1.28,23,0.402,24,0.948,25,1.193,26,1.617,29,0.234,33,2.789,38,0.075,39,0.003,41,1.871,43,1.813,49,2.12,50,2.778,67,0.004,68,0.003,92,1.442,100,1.593,119,1.861,129,1.111,180,3.356,195,0.872,217,1.781,222,1.78,264,2.008,297,1.29,298,1.5,303,2.379,317,2.49,327,3.173,816,5.731,985,2.49,988,3.564,1316,5.234,1317,5.234,1320,4.039,1331,5.149,1335,3.657,1343,3.657,1344,3.657,1352,5.234,1401,3.657,1402,5.874,1403,6.86,1404,6.86,1405,4.721,1406,4.104,1407,5.874,1408,4.104,1409,4.104,1410,4.104,1411,7.565,1412,4.104,1413,4.104,1414,3.657,1415,3.657,1416,4.104,1417,4.104,1418,4.104,1419,4.104,1420,4.104,1421,4.104,1422,4.104,1423,4.104,1424,4.104,1425,4.104,1426,4.104,1427,4.104,1428,4.104,1429,4.104,1430,4.104,1431,4.104,1432,4.104,1433,5.874,1434,4.104,1435,4.104,1436,4.248,1437,4.104,1438,4.104,1439,3.363,1440,3.657,1441,3.657,1442,4.104,1443,3.657,1444,4.104,1445,3.657,1446,4.104,1447,3.657]],["title/classes/FFEntity.html",[0,0.227,72,2.145]],["body/classes/FFEntity.html",[0,0.285,2,0.885,3,0.075,4,0.075,5,0.067,10,0.309,18,0.819,21,0.006,23,0.467,29,0.215,30,1.161,38,0.075,39,0.004,40,2.263,41,1.712,67,0.005,68,0.004,71,2.025,72,3.421,73,0.973,79,3.421,80,3.505,81,3.505,82,1.979,97,3.95,98,3.759,100,3.217,101,2.76,102,4.073,103,2.831,104,2.76,105,2.831,106,2.76,107,2.831,1448,5.292,1449,5.939,1450,5.939]],["title/interfaces/FileSendDto.html",[606,1.27,1451,3.42]],["body/interfaces/FileSendDto.html",[3,0.077,4,0.077,5,0.069,10,0.314,21,0.006,23,0.495,24,0.966,38,0.077,39,0.004,41,1.897,67,0.005,68,0.004,73,0.984,129,1.811,606,1.624,607,2.45,715,4.088,1439,7.687,1440,7.821,1441,7.821,1443,7.821,1445,7.821,1447,7.821,1451,5.518,1452,5.391,1453,5.391]],["title/interfaces/FindExamByUserDto.html",[606,1.27,1092,3.623]],["body/interfaces/FindExamByUserDto.html",[3,0.083,4,0.083,5,0.074,10,0.341,21,0.006,23,0.43,29,0.228,38,0.083,39,0.004,67,0.005,68,0.004,73,1.035,119,2.974,520,3.596,606,1.76,607,2.656,729,5.287,736,5.112,743,3.295,744,3.048,799,5.373,1043,4.742,1092,6.144,1119,7.4,1454,5.843]],["title/classes/FindPersonalDto.html",[0,0.227,1455,3.623]],["body/classes/FindPersonalDto.html",[0,0.308,2,0.954,3,0.081,4,0.081,5,0.073,10,0.333,18,0.743,21,0.006,23,0.424,29,0.225,38,0.081,39,0.004,41,1.795,46,3,67,0.005,68,0.004,73,1.02,110,3.074,180,4.196,922,5.25,1455,6.057,1456,7.644,1457,5.709,1458,6.406,1459,6.57,1460,6.406,1461,5.709,1462,5.25]],["title/injectables/FirebaseAdmin.html",[297,1.039,1463,2.87]],["body/injectables/FirebaseAdmin.html",[0,0.159,3,0.042,4,0.042,5,0.038,8,1.21,10,0.172,11,0.887,18,0.863,20,0.964,21,0.006,22,1.24,23,0.325,24,0.635,25,1.544,26,1.083,29,0.192,38,0.042,39,0.002,49,2.591,50,2.031,60,3.302,64,1.874,66,2.734,67,0.003,68,0.002,73,0.647,129,1.277,195,0.703,217,1.835,222,2.305,297,1.101,298,1.21,303,1.341,327,2.211,406,1.938,607,1.341,855,3.626,1463,3.042,1464,7.077,1465,8.234,1466,2.95,1467,5.393,1468,6.75,1469,4.468,1470,5.532,1471,6.75,1472,6.75,1473,6.75,1474,6.75,1475,6.75,1476,6.75,1477,6.75,1478,5.171,1479,5.556,1480,3.31,1481,4.256,1482,5.014,1483,3.31,1484,5.014,1485,3.31,1486,4.468,1487,5.014,1488,3.31,1489,3.31,1490,2.713,1491,5.014,1492,3.31,1493,3.31,1494,4.468,1495,3.31,1496,5.014,1497,3.31,1498,5.014,1499,3.31,1500,5.014,1501,3.31,1502,4.468,1503,3.31,1504,5.014,1505,3.31,1506,5.014,1507,3.31,1508,5.014,1509,3.31,1510,4.468,1511,6.052,1512,2.95,1513,3.31,1514,3.31,1515,3.31,1516,3.426,1517,2.536,1518,2.95,1519,3.31,1520,3.31,1521,3.31,1522,2.713,1523,3.31,1524,2.536,1525,3.31,1526,3.31,1527,3.31,1528,5.014,1529,5.014,1530,3.31,1531,3.31,1532,3.31,1533,3.31,1534,3.31,1535,3.31,1536,3.31,1537,3.31,1538,3.31,1539,3.31,1540,3.31,1541,3.31,1542,3.31,1543,3.31]],["title/modules/FirebaseAdminModule.html",[256,1.631,1544,3.42]],["body/modules/FirebaseAdminModule.html",[0,0.218,3,0.058,4,0.058,5,0.052,11,0.803,18,0.593,20,1.213,21,0.007,22,1.079,23,0.338,24,0.799,25,1.097,29,0.223,38,0.058,39,0.003,67,0.004,68,0.003,195,0.965,217,1.914,222,1.638,256,2.838,258,2.165,259,2.112,260,2.283,261,2.283,262,2.165,263,4.281,264,4.027,270,3.171,271,2.283,272,2.283,274,2.491,327,2.306,404,3.124,406,2.66,607,1.84,1143,6.982,1463,5.744,1464,5.554,1479,5.554,1481,4.939,1516,2.572,1517,5.554,1518,4.049,1544,6.543,1545,4.049,1546,4.049,1547,4.049,1548,5.554,1549,4.543,1550,4.049,1551,5.624,1552,4.543,1553,7.336,1554,4.049,1555,5.624,1556,5.387,1557,4.543,1558,5.624,1559,4.543,1560,4.543,1561,5.624,1562,4.543,1563,5.624,1564,4.543,1565,4.543,1566,4.543,1567,4.049]],["title/interfaces/FirebaseAsyncModuleOptions.html",[606,1.27,1556,3.252]],["body/interfaces/FirebaseAsyncModuleOptions.html",[3,0.079,4,0.079,5,0.07,10,0.321,13,1.5,21,0.006,23,0.415,24,0.98,26,1.335,29,0.22,38,0.098,39,0.004,64,3.5,67,0.005,68,0.004,71,2.077,73,0.998,129,1.463,195,1.313,256,2.132,404,6.082,406,5.179,606,2.077,607,2.504,1481,4.877,1516,4.379,1522,5.067,1524,4.736,1556,5.319,1568,4.736,1569,5.067,1570,6.894,1571,6.339,1572,5.51,1573,5.067,1574,5.51,1575,5.51]],["title/interfaces/FirebaseAuthDecodedToken.html",[606,1.27,1576,3.623]],["body/interfaces/FirebaseAuthDecodedToken.html",[3,0.083,4,0.083,5,0.074,10,0.338,21,0.006,23,0.463,24,1.141,38,0.083,39,0.004,60,3.186,67,0.005,68,0.004,73,1.031,129,1.779,508,6.9,606,1.749,607,2.638,715,4.227,1568,4.989,1576,6.119,1577,5.338,1578,5.804,1579,8.028,1580,8.028]],["title/injectables/FirebaseAuthService.html",[297,1.039,1581,3.42]],["body/injectables/FirebaseAuthService.html",[0,0.194,3,0.051,4,0.051,5,0.046,10,0.21,11,1.026,13,1.649,18,0.794,20,1.576,21,0.006,22,1.402,23,0.453,24,1.038,25,1.369,26,1.93,29,0.211,33,1.365,38,0.051,39,0.003,43,1.246,60,1.974,64,3.285,67,0.004,68,0.003,73,0.749,122,1.67,129,1.728,195,0.857,204,3.522,217,2.061,222,2.127,297,1.274,298,1.475,303,1.634,327,2.483,346,4.445,508,6.03,1463,4.777,1486,5.172,1516,3.847,1576,3.091,1577,4.756,1579,3.597,1580,3.597,1581,4.197,1582,6.251,1583,3.597,1584,6.796,1585,4.915,1586,5.804,1587,6.057,1588,5.804,1589,4.445,1590,5.804,1591,4.036,1592,6.796,1593,4.036,1594,5.804,1595,4.036,1596,5.804,1597,4.036,1598,4.036,1599,6.623,1600,6.796,1601,4.036,1602,5.804,1603,4.036,1604,3.597,1605,3.597,1606,4.036,1607,4.036,1608,4.036,1609,4.036,1610,4.036,1611,4.036,1612,4.036,1613,4.036,1614,3.091,1615,4.036,1616,4.036,1617,4.036,1618,4.036,1619,4.036]],["title/injectables/FirebaseCloudMessagingService.html",[297,1.039,1620,3.42]],["body/injectables/FirebaseCloudMessagingService.html",[0,0.256,3,0.068,4,0.068,5,0.061,10,0.277,11,1.245,18,0.74,20,1.353,21,0.006,22,1.203,23,0.422,24,0.891,25,0.928,26,1.52,29,0.224,38,0.068,39,0.003,64,3.984,67,0.005,68,0.003,73,0.908,129,1.489,195,1.134,217,2.388,222,1.385,297,1.545,298,1.951,303,2.162,327,2.877,1463,5.28,1479,6.412,1490,4.374,1502,6.272,1516,4.458,1582,6.054,1589,5.391,1604,6.272,1620,5.09,1621,6.86,1622,4.757,1623,7.874,1624,7.874,1625,7.038,1626,5.338,1627,6.412,1628,7.874,1629,7.874,1630,5.338,1631,5.338,1632,5.338,1633,5.338]],["title/injectables/FirebaseFirestoreService.html",[297,1.039,1634,3.623]],["body/injectables/FirebaseFirestoreService.html",[0,0.267,3,0.071,4,0.071,5,0.063,10,0.288,11,1.277,18,0.754,20,1.388,21,0.006,22,1.234,23,0.43,24,0.914,25,0.965,29,0.242,38,0.071,39,0.004,64,4.087,67,0.005,68,0.004,73,0.931,129,1.518,195,1.179,217,2.434,222,1.44,297,1.586,298,2.028,303,2.248,327,2.933,1463,5.346,1470,6.965,1494,6.435,1516,4.543,1582,6.147,1589,5.531,1634,5.531,1635,4.946,1636,7.22,1637,7.22,1638,7.22,1639,5.55,1640,5.55,1641,7.152,1642,5.55,1643,5.55,1644,5.55,1645,5.55,1646,5.55]],["title/modules/FirebaseModule.html",[256,1.631,1647,3.42]],["body/modules/FirebaseModule.html",[0,0.207,3,0.055,4,0.055,5,0.049,11,0.761,13,1.044,18,0.571,20,1.168,21,0.006,22,1.039,23,0.326,24,0.769,25,1.056,29,0.238,38,0.055,39,0.003,67,0.004,68,0.003,92,2.135,195,0.914,217,1.842,222,1.576,256,2.887,258,2.051,259,2,260,2.162,261,2.162,262,2.051,263,4.208,264,4.096,270,3.053,271,2.162,272,2.162,274,3.331,327,2.22,435,3.296,671,5.414,1143,6.862,1479,4.653,1481,4.823,1516,2.436,1544,3.112,1548,3.296,1550,3.834,1551,5.414,1553,7.19,1554,3.834,1555,5.414,1556,5.26,1558,6.275,1563,5.414,1567,5.414,1581,6.79,1605,3.834,1620,6.79,1621,3.526,1634,5.393,1647,6.689,1648,3.834,1649,3.834,1650,3.834,1651,4.303,1652,4.303,1653,4.303,1654,5.414,1655,4.303,1656,4.303,1657,4.303,1658,5.092,1659,4.303,1660,4.303,1661,4.303]],["title/interfaces/FirebaseModuleOptions.html",[606,1.27,1481,2.982]],["body/interfaces/FirebaseModuleOptions.html",[3,0.076,4,0.076,5,0.068,10,0.312,13,1.459,21,0.006,23,0.447,24,1.109,26,1.298,29,0.216,38,0.097,39,0.004,64,3.403,67,0.005,68,0.004,71,1.614,73,0.98,129,1.744,195,1.277,256,2.073,404,4.134,406,3.52,606,2.04,607,2.435,1481,5.254,1516,4.302,1522,7.176,1524,6.707,1556,4.134,1568,4.605,1569,4.927,1570,5.358,1572,5.358,1573,7.176,1574,7.427,1575,5.358]],["title/injectables/FirebaseStorageService.html",[297,1.039,1658,3.42]],["body/injectables/FirebaseStorageService.html",[0,0.242,3,0.064,4,0.064,5,0.077,10,0.262,11,1.199,12,2.746,13,1.858,18,0.72,20,1.304,21,0.006,22,1.159,23,0.411,24,0.859,25,0.878,26,1.465,29,0.233,33,1.708,38,0.064,39,0.003,42,1.96,43,1.558,64,3.839,67,0.004,68,0.003,73,0.875,92,1.774,129,1.448,195,1.072,217,2.322,222,1.31,297,1.489,298,1.845,303,2.044,327,2.798,697,4.137,1239,4.115,1436,3.651,1463,5.183,1478,6.271,1510,6.043,1516,4.335,1582,5.921,1589,5.194,1658,4.905,1662,4.499,1663,5.866,1664,6.781,1665,5.048,1666,6.271,1667,5.048,1668,5.048,1669,5.048,1670,5.048,1671,5.048,1672,5.557,1673,5.557,1674,4.499,1675,5.048,1676,5.048,1677,5.048,1678,4.499,1679,5.048,1680,5.048,1681,5.048]],["title/interfaces/FirebaseStorageUploadDto.html",[606,1.27,1666,3.623]],["body/interfaces/FirebaseStorageUploadDto.html",[3,0.081,4,0.081,5,0.072,10,0.332,21,0.006,23,0.48,24,0.999,38,0.081,39,0.004,67,0.005,68,0.004,73,1.018,129,1.771,606,1.714,607,2.586,715,4.19,1436,6.471,1439,7.019,1478,4.891,1666,6.045,1672,7.332,1673,7.332,1674,7.973,1682,5.691,1683,5.691]],["title/injectables/FirebaseUploader.html",[297,1.039,1684,3.623]],["body/injectables/FirebaseUploader.html",[0,0.235,3,0.062,4,0.062,5,0.056,8,1.789,10,0.254,11,1.175,13,1.829,18,0.709,20,1.45,21,0.006,22,1.289,23,0.404,24,0.955,25,1.155,26,1.435,29,0.24,38,0.062,39,0.003,67,0.004,68,0.003,92,1.721,129,1.686,130,1.596,131,1.901,195,1.04,216,2.53,217,1.485,222,1.957,297,1.459,298,1.789,303,1.983,327,2.755,1239,5.289,1405,4.188,1436,3.541,1451,6.447,1512,5.92,1658,5.848,1663,5.088,1672,4.012,1673,4.012,1684,5.088,1685,7.205,1686,4.363,1687,4.896,1688,4.896,1689,6.643,1690,6.643,1691,4.896,1692,5.92,1693,5.92,1694,4.896,1695,4.896,1696,4.896,1697,4.363,1698,4.363,1699,4.363,1700,4.363,1701,4.896,1702,4.896,1703,4.896,1704,4.896,1705,4.896,1706,4.896,1707,4.896]],["title/classes/Grade.html",[0,0.227,232,2.095]],["body/classes/Grade.html",[0,0.194,2,0.602,3,0.051,4,0.051,5,0.046,10,0.21,18,0.85,21,0.007,22,0.994,23,0.495,29,0.24,30,0.791,38,0.051,39,0.003,40,1.587,41,1.789,42,1.57,67,0.004,68,0.003,69,2.09,71,1.561,72,3.374,73,0.75,79,2.637,80,2.702,81,2.702,82,2.054,83,3.527,85,2.843,86,3.147,97,1.928,98,3.374,99,1.978,100,2.642,101,1.88,102,3.014,103,1.928,104,1.88,105,1.928,106,1.88,107,1.928,113,2.945,114,2.218,115,4.29,117,2.658,144,4.888,230,3.314,232,2.575,254,2.925,339,5.576,532,4.247,538,4.785,570,5.18,573,4.452,678,2.289,681,3.665,682,3.604,843,3.639,844,3.458,853,5.576,885,6.064,886,5.212,1708,3.604,1709,6.804,1710,6.804,1711,6.804,1712,4.044,1713,4.044,1714,4.044,1715,5.812,1716,4.044,1717,4.044,1718,4.044,1719,4.044,1720,4.044,1721,4.044,1722,4.044,1723,4.044,1724,4.044]],["title/classes/GradeIndex1624560625346.html",[0,0.227,1725,3.876]],["body/classes/GradeIndex1624560625346.html",[0,0.342,2,0.808,3,0.069,4,0.069,5,0.062,8,2.6,9,3.285,10,0.412,11,1.258,12,3.635,13,2.178,14,3.011,15,2.945,16,2.945,17,3.801,18,0.746,20,1.368,21,0.006,22,1.496,23,0.426,24,0.901,25,1.237,26,1.82,27,2.945,29,0.154,30,1.061,38,0.069,39,0.004,43,2.196,67,0.005,68,0.004,73,0.918,129,1.026,130,1.769,131,2.107,135,3.732,165,3.732,548,4.486,550,3.732,1725,6.905,1726,7.509,1727,4.836,1728,5.427,1729,5.427,1730,5.427,1731,7.115]],["title/classes/GradeRepository.html",[0,0.227,593,3.42]],["body/classes/GradeRepository.html",[0,0.251,2,0.778,3,0.066,4,0.066,5,0.059,10,0.271,11,1.227,18,0.491,20,1.004,21,0.007,22,0.893,23,0.28,24,0.662,25,0.908,26,1.498,29,0.258,30,1.356,33,1.767,38,0.066,39,0.003,46,2.765,67,0.005,68,0.003,71,1.863,222,1.356,224,4.21,225,3.433,232,2.314,248,4.144,249,2.779,250,2.162,251,2.162,252,2.162,532,4.554,538,2.957,593,5.018,843,3.394,844,3.225,853,5.686,1115,5.686,1459,6.358,1462,4.281,1732,4.655,1733,6.183,1734,6.183,1735,5.224,1736,4.655,1737,4.001,1738,4.281,1739,4.281,1740,4.655,1741,5.224,1742,5.224,1743,6.183,1744,5.224,1745,5.224,1746,5.224,1747,5.224,1748,4.281,1749,5.224,1750,5.224]],["title/injectables/GradeService.html",[297,1.039,588,3.252]],["body/injectables/GradeService.html",[0,0.258,3,0.068,4,0.068,5,0.061,10,0.28,11,1.251,18,0.743,20,1.361,21,0.006,22,1.21,23,0.424,24,0.896,25,1.23,26,1.814,29,0.255,38,0.068,39,0.004,46,1.723,67,0.005,68,0.004,195,1.143,217,1.632,222,1.836,232,2.384,277,2.227,297,1.554,298,1.967,301,5.519,303,2.866,318,2.863,327,1.967,532,4.655,588,4.866,593,6.477,594,4.796,1459,6.433,1462,4.411,1733,6.306,1734,6.306,1736,4.796,1737,4.122,1740,4.796,1751,4.796,1752,5.382,1753,5.382,1754,5.382,1755,5.382,1756,5.382,1757,5.382,1758,5.382]],["title/classes/HttpExceptionFilter.html",[0,0.227,668,3.108]],["body/classes/HttpExceptionFilter.html",[0,0.194,2,0.601,3,0.051,4,0.051,5,0.046,8,2.121,10,0.21,11,1.026,18,0.639,20,1.116,21,0.007,22,1.162,23,0.311,24,0.735,25,0.702,29,0.211,33,2.924,38,0.051,39,0.003,41,1.317,50,2.752,67,0.004,68,0.003,73,0.749,92,1.418,129,1.489,130,1.316,131,1.567,189,2.363,195,0.857,216,2.085,217,2.254,303,1.634,327,2.483,386,5.387,387,2.449,528,4.685,535,2.545,606,1.558,668,3.814,847,5.11,879,2.919,1239,3.522,1366,3.091,1614,5.206,1627,5.206,1759,5.692,1760,3.091,1761,5.569,1762,4.036,1763,5.804,1764,4.756,1765,4.756,1766,6.09,1767,5.206,1768,6.09,1769,4.036,1770,4.036,1771,4.445,1772,4.756,1773,2.919,1774,4.756,1775,3.091,1776,4.197,1777,5.569,1778,4.756,1779,3.307,1780,4.197,1781,3.091,1782,3.307,1783,3.091,1784,3.307,1785,3.307,1786,3.307,1787,3.307,1788,3.307,1789,3.307,1790,3.307,1791,3.307,1792,5.569,1793,3.307,1794,3.091,1795,3.307,1796,3.307,1797,4.756,1798,3.307,1799,3.307,1800,3.307,1801,3.307,1802,3.307,1803,4.756,1804,3.307,1805,3.307,1806,3.307,1807,3.307,1808,3.307,1809,3.307,1810,3.307,1811,3.307,1812,3.307,1813,3.307,1814,3.307,1815,3.307,1816,3.307,1817,3.307,1818,3.307]],["title/interfaces/IClassValidatorException.html",[606,1.27,1780,3.42]],["body/interfaces/IClassValidatorException.html",[0,0.207,3,0.055,4,0.055,5,0.049,8,1.576,10,0.224,21,0.007,22,0.737,23,0.378,29,0.218,33,2.975,38,0.055,39,0.003,41,1.738,50,2.464,67,0.004,68,0.003,73,0.785,92,1.516,129,1.691,189,2.525,195,0.916,216,2.228,217,1.845,327,1.576,386,4.633,387,2.617,528,4.828,535,2.719,606,1.634,607,1.746,668,2.834,847,4.184,1239,3.692,1366,3.303,1614,3.303,1627,6.418,1759,3.303,1760,3.303,1761,4.986,1764,3.534,1765,3.534,1766,4.986,1767,3.303,1768,4.986,1771,4.66,1772,4.986,1773,3.119,1774,4.986,1775,3.303,1776,4.4,1777,6.867,1778,4.986,1779,3.534,1780,5.098,1781,5.865,1782,3.534,1783,3.303,1784,3.534,1785,3.534,1786,3.534,1787,3.534,1788,3.534,1789,3.534,1790,3.534,1791,3.534,1792,5.777,1793,3.534,1794,3.303,1795,3.534,1796,3.534,1797,4.986,1798,3.534,1799,3.534,1800,3.534,1801,3.534,1802,3.534,1803,4.986,1804,3.534,1805,3.534,1806,3.534,1807,3.534,1808,3.534,1809,3.534,1810,3.534,1811,3.534,1812,3.534,1813,3.534,1814,3.534,1815,3.534,1816,3.534,1817,3.534,1818,3.534]],["title/interfaces/IEntity.html",[606,1.27,1819,3.623]],["body/interfaces/IEntity.html",[0,0.139,3,0.037,4,0.037,5,0.033,8,1.056,9,1.869,10,0.15,12,1.829,13,1.096,16,1.196,17,2.251,21,0.007,22,0.95,23,0.242,26,0.975,27,1.196,29,0.179,30,0.565,31,2.213,33,2.952,34,2.644,36,3.626,38,0.037,39,0.002,40,2.468,41,1.262,43,2.901,45,5.648,46,2.313,55,4.321,56,2.213,57,3.146,58,2.368,59,6.188,60,2.209,61,2.476,62,5.461,63,1.822,67,0.003,68,0.002,73,0.583,92,1.015,100,2.158,125,2.213,147,2.213,225,2.967,232,3.201,295,4.771,423,2.213,488,2.368,523,2.089,525,2.213,531,4.02,532,3.632,534,4.231,535,4.556,536,2.152,538,4.091,540,2.213,542,4.257,546,3.265,573,3.458,606,0.776,607,1.17,844,2.099,1375,3.7,1748,5.149,1819,6.513,1820,2.213,1821,2.213,1822,2.575,1823,2.575,1824,2.575,1825,2.368,1826,2.368,1827,2.575,1828,6.291,1829,2.368,1830,2.368,1831,2.368,1832,2.213,1833,2.575,1834,2.575,1835,2.575,1836,2.575,1837,2.575,1838,2.368,1839,2.575,1840,4.024,1841,5.6,1842,6.44,1843,2.575,1844,6.729]],["title/interfaces/IException.html",[606,1.27,1776,3.42]],["body/interfaces/IException.html",[0,0.195,3,0.052,4,0.052,5,0.046,8,1.484,10,0.211,21,0.007,22,1.274,23,0.454,24,1.04,29,0.212,33,2.929,38,0.052,39,0.003,41,1.692,50,2.361,67,0.004,68,0.003,73,0.752,92,1.427,129,1.713,189,4.363,195,0.863,216,2.098,217,1.768,327,1.484,386,4.482,387,2.464,528,4.699,535,2.56,606,1.565,607,1.645,668,2.669,847,4.009,1239,4.789,1366,3.111,1614,3.111,1627,6.292,1759,3.111,1760,3.111,1761,4.777,1764,3.328,1765,3.328,1766,4.777,1767,3.111,1768,4.777,1771,4.465,1772,4.777,1773,2.937,1774,4.777,1775,3.111,1776,4.932,1777,6.732,1778,6.468,1779,6.107,1780,4.216,1781,3.111,1782,3.328,1783,3.111,1784,3.328,1785,3.328,1786,3.328,1787,3.328,1788,3.328,1789,3.328,1790,3.328,1791,3.328,1792,5.589,1793,3.328,1794,3.111,1795,3.328,1796,3.328,1797,4.777,1798,3.328,1799,3.328,1800,3.328,1801,3.328,1802,3.328,1803,4.777,1804,3.328,1805,3.328,1806,3.328,1807,3.328,1808,3.328,1809,3.328,1810,3.328,1811,3.328,1812,3.328,1813,3.328,1814,3.328,1815,3.328,1816,3.328,1817,3.328,1818,3.328]],["title/modules/InfraModule.html",[256,1.631,381,3.252]],["body/modules/InfraModule.html",[0,0.264,3,0.07,4,0.07,5,0.062,21,0.006,29,0.256,38,0.07,39,0.004,67,0.005,68,0.004,168,3.181,195,1.169,256,2.756,258,2.623,259,2.558,260,2.766,261,2.766,262,2.623,263,3.608,264,3.91,270,3.608,271,2.766,272,2.766,274,4.383,381,6.311,385,5.5,386,5.567,387,3.339,404,3.784,406,3.222,1405,5.869,1561,4.905,1647,6.355,1654,4.905,1684,5.5,1697,4.905,1700,4.905,1845,4.905,1846,5.503,1847,4.905,1848,5.503,1849,6.122,1850,5.503,1851,4.905,1852,5.503,1853,5.503,1854,5.503]],["title/injectables/JwtGuard.html",[200,2.444,297,1.039]],["body/injectables/JwtGuard.html",[0,0.341,3,0.09,4,0.09,5,0.081,21,0.006,29,0.239,38,0.09,39,0.005,67,0.005,68,0.005,71,1.908,195,1.509,200,4.35,297,1.849,298,2.597,1855,6.333,1856,7.106,1857,5.823,1858,7.106]],["title/interfaces/JwtPayload.html",[606,1.27,1859,3.623]],["body/interfaces/JwtPayload.html",[3,0.087,4,0.087,5,0.078,10,0.356,21,0.006,23,0.511,38,0.087,39,0.004,67,0.005,68,0.004,73,1.063,129,1.801,508,7.022,606,1.841,607,2.777,1859,6.313,1860,6.11,1861,6.11]],["title/injectables/JwtStrategy.html",[297,1.039,453,3.42]],["body/injectables/JwtStrategy.html",[0,0.227,3,0.06,4,0.06,5,0.053,10,0.245,11,1.146,13,1.795,18,0.609,20,1.246,21,0.007,22,1.107,23,0.347,24,0.82,25,0.82,26,1.399,29,0.259,33,2.192,36,2.51,38,0.06,39,0.003,43,2,46,2.368,49,3.347,50,2.623,60,3.169,61,2.587,67,0.004,68,0.003,71,1.267,92,1.658,195,1.002,217,1.964,222,1.225,297,1.422,298,1.724,303,2.623,327,2.367,386,5.802,387,2.863,390,3.614,434,5.435,435,3.614,453,4.685,456,3.614,457,3.614,476,5.566,487,6.062,489,4.205,1857,3.867,1859,6.098,1862,4.205,1863,6.478,1864,4.719,1865,4.719,1866,6.478,1867,4.719,1868,4.719,1869,4.205,1870,4.719,1871,4.719,1872,4.719,1873,4.205,1874,3.867,1875,4.719,1876,4.719,1877,4.719,1878,4.719,1879,4.719,1880,4.719,1881,4.719,1882,4.719,1883,4.719,1884,4.719,1885,6.478,1886,4.719]],["title/modules/LoggerModule.html",[256,1.631,382,3.42]],["body/modules/LoggerModule.html",[0,0.303,3,0.08,4,0.08,5,0.071,21,0.006,29,0.223,38,0.08,39,0.004,67,0.005,68,0.004,195,1.339,256,2.936,258,3.004,259,2.93,260,3.167,261,3.167,262,3.004,263,4.279,264,4.166,270,3.934,271,3.167,272,3.167,382,6.845,845,7.092,1887,5.617,1888,5.617,1889,5.617,1890,6.303,1891,6.303]],["title/classes/LoginDto.html",[0,0.227,432,3.252]],["body/classes/LoginDto.html",[0,0.371,2,0.921,3,0.079,4,0.079,5,0.07,10,0.321,18,0.727,21,0.006,23,0.415,29,0.24,38,0.079,39,0.004,57,4.779,61,4.242,67,0.005,68,0.004,71,2.077,73,0.998,82,1.756,98,2.805,129,1.596,432,5.319,441,6.082,443,4.063,446,5.083,447,2.874,491,5.067,707,5.51,708,6.466,710,5.51,1892,5.51,1893,6.183,1894,6.183,1895,5.067,1896,6.183,1897,6.183]],["title/injectables/PayloadInterceptor.html",[297,1.039,669,3.42]],["body/injectables/PayloadInterceptor.html",[0,0.293,3,0.078,4,0.078,5,0.069,8,2.231,10,0.317,11,1.357,18,0.574,20,1.174,21,0.006,22,1.044,23,0.327,24,0.773,25,1.062,29,0.239,38,0.078,39,0.004,67,0.005,68,0.004,195,1.297,222,1.585,297,1.685,298,2.231,669,5.55,1275,5.004,1280,4.416,1436,4.416,1898,5.441,1899,7.674,1900,7.674,1901,7.847,1902,8.393,1903,8.806,1904,6.106,1905,8.393,1906,7.674,1907,5.441,1908,6.106,1909,6.106]],["title/classes/Period.html",[0,0.227,532,2.377]],["body/classes/Period.html",[0,0.225,2,0.699,3,0.06,4,0.06,5,0.053,10,0.335,18,0.844,21,0.006,22,1.261,23,0.499,24,0.818,29,0.21,30,0.918,38,0.06,39,0.003,40,1.763,41,1.066,42,1.823,67,0.004,68,0.003,71,1.733,72,3.604,73,0.833,79,2.929,80,3.001,81,3.001,82,2.039,85,3.609,91,4.243,92,2.269,97,2.238,98,3.604,99,2.297,100,3.423,101,2.183,102,3.268,103,2.238,104,2.183,105,2.238,106,2.183,107,2.238,113,3.439,114,2.575,129,1.221,408,3.78,413,3.396,520,3.234,524,6.086,532,3.244,678,2.658,681,4.071,727,6.086,728,6.086,1172,3.848,1910,4.185,1911,7.378,1912,4.696,1913,4.696,1914,4.696,1915,4.696,1916,3.848,1917,4.696,1918,4.696]],["title/classes/PeriodIndex1624547816204.html",[0,0.227,1919,3.876]],["body/classes/PeriodIndex1624547816204.html",[0,0.22,2,0.683,3,0.058,4,0.058,5,0.052,8,2.321,9,3.016,10,0.379,11,1.123,12,3.46,13,2.073,14,2.687,15,2.629,16,2.629,17,3.672,18,0.685,20,1.221,21,0.006,22,1.412,23,0.391,24,0.804,25,1.104,26,1.699,27,2.629,29,0.13,30,0.897,38,0.058,39,0.003,43,2.757,66,2.572,67,0.004,68,0.003,73,0.819,86,2.687,122,2.629,129,0.867,130,1.495,131,1.78,135,3.153,136,3.785,141,2.881,150,4.453,152,5.185,153,3.379,154,3.854,156,4.773,157,3.854,159,4.605,164,3.282,165,3.153,520,3.318,523,3.316,525,3.512,531,6.18,532,3.192,552,3.719,557,7.01,558,5.205,1919,6.446,1920,7.01,1921,4.087,1922,4.586,1923,4.586,1924,4.586,1925,6.351]],["title/classes/PeriodRepository.html",[0,0.227,595,3.42]],["body/classes/PeriodRepository.html",[0,0.329,2,1.021,3,0.087,4,0.087,5,0.078,21,0.006,29,0.251,30,1.611,38,0.087,39,0.004,67,0.005,68,0.004,71,2.213,248,4.7,249,3.647,250,2.838,251,2.838,252,2.838,532,3.445,595,5.96,1737,5.252,1926,6.11,1927,6.856]],["title/injectables/PeriodService.html",[297,1.039,589,3.252]],["body/injectables/PeriodService.html",[0,0.212,3,0.056,4,0.056,5,0.05,10,0.229,11,1.093,13,2.048,18,0.727,20,1.188,21,0.007,22,1.057,23,0.331,24,0.783,25,1.241,26,1.823,29,0.232,30,0.862,33,2.091,38,0.056,39,0.003,43,1.908,49,3.194,50,2.503,67,0.004,68,0.003,100,3.003,195,0.937,217,1.337,222,2.007,277,1.825,297,1.357,298,1.611,301,5.082,303,2.503,317,2.676,318,2.346,327,1.611,345,5.065,532,4.355,589,4.25,595,6.104,596,3.93,727,4.734,728,4.734,856,3.378,857,3.378,859,3.189,1737,3.378,1928,3.93,1929,7.733,1930,7.135,1931,4.41,1932,4.41,1933,4.41,1934,4.41,1935,4.41,1936,7.135,1937,4.41,1938,4.41,1939,4.41,1940,4.41,1941,4.41,1942,4.41,1943,4.41,1944,7.733,1945,6.18,1946,4.41,1947,6.18,1948,4.41,1949,6.18,1950,4.41,1951,4.41,1952,6.18,1953,6.18,1954,4.41,1955,4.41]],["title/injectables/PersonalQuestionGroup.html",[297,1.039,1956,3.252]],["body/injectables/PersonalQuestionGroup.html",[0,0.293,3,0.055,4,0.055,5,0.049,10,0.225,11,1.079,13,1.715,18,0.574,20,1.174,21,0.007,22,1.043,23,0.327,24,0.773,25,0.753,26,1.318,29,0.258,33,2.391,38,0.055,39,0.005,43,1.884,46,2.262,50,1.754,67,0.004,68,0.003,92,1.522,110,2.532,195,0.92,217,1.851,222,1.834,232,1.919,277,1.793,297,1.34,298,1.583,303,2.472,318,2.304,327,2.23,520,3.418,588,5.929,629,2.304,631,2.628,843,3.753,844,3.566,890,4.288,896,3.318,985,2.628,988,3.703,1018,2.978,1020,3.318,1172,3.55,1916,3.55,1956,4.197,1957,6.298,1958,3.86,1959,7.067,1960,5.276,1961,4.331,1962,4.331,1963,4.331,1964,3.86,1965,3.86,1966,4.331,1967,4.675,1968,3.55,1969,4.331,1970,2.978,1971,4.675,1972,3.55,1973,3.55,1974,3.55,1975,3.86,1976,3.318,1977,4.331,1978,4.331,1979,6.103,1980,4.331,1981,4.331,1982,6.103,1983,4.331,1984,4.331,1985,4.331,1986,3.86,1987,4.331,1988,4.331]],["title/classes/Professor.html",[0,0.227,843,2.314]],["body/classes/Professor.html",[0,0.211,2,0.655,3,0.056,4,0.056,5,0.05,10,0.229,18,0.865,21,0.006,23,0.498,26,1.539,29,0.203,30,0.86,34,3.613,36,3.282,38,0.056,39,0.003,40,1.685,41,0.999,42,2.396,46,2.829,63,3.891,67,0.004,68,0.003,71,1.657,72,1.996,73,0.796,74,2.273,79,2.799,80,2.868,81,2.868,82,2.066,85,3.779,92,2.715,95,3.779,97,2.097,98,4.075,99,2.152,100,2.767,101,2.045,102,3.157,103,2.097,104,2.045,105,2.097,106,2.045,107,2.097,129,1.167,130,1.434,222,1.142,232,2.733,243,5.057,254,3.182,408,3.613,409,3.493,625,3.606,632,4.243,678,2.491,806,3.891,843,3.019,855,4.463,886,4.726,1976,5.459,1989,3.921,1990,7.127,1991,5.057,1992,3.921,1993,5.499,1994,4.4,1995,3.921,1996,3.921,1997,3.921,1998,3.921,1999,3.921,2000,3.921,2001,4.4,2002,4.4]],["title/classes/ProfessorRepository.html",[0,0.227,597,3.42]],["body/classes/ProfessorRepository.html",[0,0.329,2,1.021,3,0.087,4,0.087,5,0.078,21,0.006,29,0.251,30,1.611,38,0.087,39,0.004,67,0.005,68,0.004,71,2.213,248,4.7,249,3.647,250,2.838,251,2.838,252,2.838,597,5.96,843,3.354,1738,5.619,2003,6.11,2004,6.856]],["title/injectables/ProfessorService.html",[297,1.039,590,3.252]],["body/injectables/ProfessorService.html",[0,0.246,3,0.065,4,0.065,5,0.058,10,0.266,11,1.21,18,0.724,20,1.482,21,0.007,22,1.318,23,0.413,24,0.976,25,1.19,26,1.778,29,0.256,30,1,33,1.73,38,0.065,39,0.003,67,0.004,68,0.003,82,1.161,195,1.086,217,1.551,222,1.775,250,3.406,251,2.117,252,2.117,277,2.117,297,1.502,298,1.869,302,4.005,303,2.77,318,2.72,327,1.869,346,3.917,590,4.704,597,5.952,598,4.558,797,5.189,843,3.347,985,3.103,988,4.151,1009,3.699,1117,3.699,1738,4.191,2005,4.558,2006,6.096,2007,5.114,2008,6.096,2009,5.114,2010,6.096,2011,6.07,2012,5.114,2013,4.558,2014,4.558,2015,5.114,2016,4.558,2017,5.114]],["title/classes/Question.html",[0,0.227,76,1.875]],["body/classes/Question.html",[0,0.171,2,0.532,3,0.045,4,0.045,5,0.04,10,0.276,18,0.862,21,0.006,23,0.508,24,0.888,29,0.199,30,0.698,38,0.045,39,0.002,40,1.449,41,1.701,42,1.386,67,0.003,68,0.002,69,3.871,71,1.425,72,3.688,73,0.685,76,2.104,79,3.18,80,3.259,81,3.259,82,2.082,83,2.167,85,3.665,86,2.967,91,4.607,92,2.759,97,1.702,98,3.688,99,1.747,100,3.049,101,2.467,102,2.805,103,1.702,104,2.467,105,1.702,106,2.467,107,1.702,110,3.112,113,3.519,114,2.91,115,3.346,129,1.485,130,2.286,339,5.19,408,3.107,413,2.582,521,4.42,527,2.91,568,3.843,629,3.729,630,2.582,631,2.167,661,3.843,678,2.021,681,3.346,715,2.596,760,5.644,761,5.644,762,5.19,763,5.19,859,3.838,874,2.347,875,2.347,876,2.347,890,3.843,2018,3.182,2019,3.571,2020,3.571,2021,3.571,2022,3.571,2023,3.571,2024,3.571,2025,3.571,2026,3.571,2027,3.571,2028,3.571,2029,3.571,2030,3.571]],["title/controllers/QuestionController.html",[166,1.957,2031,3.623]],["body/controllers/QuestionController.html",[0,0.15,3,0.04,4,0.04,5,0.035,10,0.162,11,0.846,13,2.257,18,0.729,20,1.492,21,0.007,22,1.327,23,0.47,24,0.983,25,1.349,26,1.87,29,0.239,38,0.04,39,0.002,40,2.035,41,1.965,42,2.263,66,1.262,67,0.003,68,0.002,76,3.257,82,1.762,110,2.87,141,2.644,166,1.289,168,1.38,170,1.824,172,3.018,181,1.964,182,2.386,186,2.253,188,2.802,189,4.133,190,2.142,192,2.142,193,4.854,194,1.89,195,0.662,197,5.508,198,1.824,199,1.448,200,1.61,215,1.89,216,1.61,217,0.945,222,2.014,226,2.253,228,2.386,302,2.802,305,3.675,312,2.047,315,2.047,490,2.71,661,2.904,746,4.008,754,4.698,755,4.216,757,5.508,956,2.553,958,1.964,995,3.922,1028,2.553,1030,2.386,1032,2.553,1053,2.553,1115,2.553,1968,2.553,2031,3.666,2032,2.776,2033,5.195,2034,4.266,2035,4.465,2036,2.776,2037,3.115,2038,2.776,2039,3.115,2040,3.115,2041,2.776,2042,4.731,2043,3.115,2044,2.776,2045,4.786,2046,3.115,2047,2.776,2048,3.115,2049,3.115,2050,4.731,2051,2.776,2052,3.115,2053,4.786,2054,5.793,2055,3.115,2056,4.266,2057,5.829,2058,2.553,2059,2.776,2060,2.386,2061,2.553,2062,2.776,2063,2.776,2064,2.776,2065,3.115,2066,3.115,2067,3.115,2068,3.115,2069,3.115,2070,3.115,2071,3.115,2072,3.115,2073,3.115,2074,3.115,2075,3.115]],["title/classes/QuestionFindDto.html",[0,0.227,2042,3.42]],["body/classes/QuestionFindDto.html",[0,0.389,2,0.993,3,0.085,4,0.085,5,0.076,10,0.347,18,0.627,21,0.006,23,0.358,24,1.026,29,0.19,38,0.085,39,0.004,41,1.84,67,0.005,68,0.004,73,1.046,82,1.514,110,2.904,447,3.1,661,5.298,662,4.745,696,4.918,2042,5.861,2076,6.642,2077,5.943,2078,6.669,2079,6.669]],["title/classes/QuestionGroup.html",[0,0.227,629,2.516]],["body/classes/QuestionGroup.html",[0,0.353,2,0.51,3,0.043,4,0.043,5,0.039,10,0.267,11,0.909,18,0.855,21,0.006,23,0.501,25,0.595,29,0.195,30,0.669,38,0.043,39,0.002,40,1.404,41,1.67,42,1.328,67,0.003,68,0.002,71,1.38,72,3.636,73,0.663,76,2.917,79,3.113,80,3.19,81,3.19,82,2.066,83,2.076,85,3.357,86,2.904,91,3.377,92,1.806,95,1.673,97,1.631,98,3.636,99,1.673,100,3,101,2.389,102,2.734,103,1.631,104,2.389,105,1.631,106,2.389,107,1.631,110,3.023,113,3.344,114,2.818,115,3.24,129,0.972,130,2.519,180,3.357,331,3.892,408,3.009,413,2.474,520,3.112,527,2.818,536,2.942,549,3.614,568,3.746,629,2.734,630,6.101,678,1.936,681,3.24,715,3.357,854,5.624,859,4.964,860,4.719,874,2.248,875,2.248,876,2.248,877,5.059,879,2.474,896,2.62,897,2.803,898,2.803,1916,2.803,2080,3.048,2081,3.421,2082,3.421,2083,3.421,2084,3.421,2085,3.048,2086,3.421,2087,3.421,2088,3.421,2089,3.421,2090,3.421,2091,3.421,2092,3.421,2093,3.421,2094,3.421,2095,3.421,2096,3.048,2097,3.421,2098,3.421,2099,3.421,2100,3.421,2101,3.421]],["title/classes/QuestionGroup1620179231630.html",[0,0.227,2102,3.876]],["body/classes/QuestionGroup1620179231630.html",[0,0.289,2,0.634,3,0.054,4,0.054,5,0.048,8,2.203,9,2.897,10,0.221,11,1.066,12,3.379,13,2.025,14,2.551,15,2.495,16,2.495,17,3.61,18,0.658,20,1.159,21,0.006,22,1.374,23,0.375,24,0.763,25,1.048,26,1.644,27,2.495,29,0.121,30,0.832,38,0.054,39,0.003,40,2.079,43,2.576,66,1.724,67,0.004,68,0.003,73,0.778,76,3.018,86,2.962,90,3.658,122,3.903,124,2.926,129,0.805,130,2.797,131,1.652,135,4.145,136,3.696,137,3.961,138,5.483,139,5.483,140,3.961,141,3.175,142,3.961,143,3.961,149,3.961,150,4.309,151,3.961,152,3.658,153,2.264,154,2.582,156,3.658,157,2.582,159,3.529,164,2.199,165,4.145,421,3.8,521,3.8,536,2.029,548,3.8,551,4.617,553,4.145,554,3.26,762,3.488,763,3.488,2102,6.238,2103,6.784,2104,3.793,2105,4.256,2106,4.256,2107,4.256,2108,3.793,2109,3.793]],["title/controllers/QuestionGroupController.html",[166,1.957,2110,3.623]],["body/controllers/QuestionGroupController.html",[0,0.137,3,0.036,4,0.036,5,0.032,10,0.149,11,0.792,13,2.26,18,0.732,20,1.446,21,0.007,22,1.286,23,0.467,24,0.953,25,1.354,26,1.918,29,0.237,38,0.036,39,0.002,40,1.965,41,1.925,42,2.144,46,2.492,66,1.158,67,0.003,68,0.002,76,2.69,82,1.767,110,2.868,141,2.504,166,1.183,168,1.267,170,1.674,171,2.632,172,2.824,180,2.701,181,1.803,182,2.19,186,2.068,188,2.622,189,3.972,190,1.966,192,3.08,193,4.665,194,1.735,195,0.607,196,3.08,197,5.504,198,1.674,199,1.329,200,1.478,204,2.718,205,1.879,206,1.966,215,1.735,216,1.478,217,0.867,219,2.548,222,2.021,226,2.068,228,2.19,301,4.106,302,2.622,312,1.879,315,1.879,490,1.619,629,4.258,631,1.735,658,5.204,788,4.948,890,2.718,922,2.343,956,2.343,958,1.803,1026,4.229,1028,2.343,1030,2.19,1032,2.343,1053,2.343,1970,1.966,2035,4.229,2044,2.548,2047,2.548,2051,2.548,2056,3.992,2057,6.046,2058,2.343,2060,2.19,2064,2.548,2110,3.431,2111,7.134,2112,2.548,2113,4.92,2114,2.548,2115,2.86,2116,5.521,2117,2.86,2118,2.548,2119,2.86,2120,2.86,2121,2.86,2122,2.86,2123,2.86,2124,2.86,2125,2.86,2126,2.86,2127,5.204,2128,2.86,2129,5.631,2130,2.86,2131,3.628,2132,2.548,2133,2.343,2134,5.12,2135,2.548,2136,2.86,2137,2.86,2138,2.86,2139,2.86,2140,2.86,2141,2.86,2142,2.86,2143,2.86,2144,2.86,2145,2.86]],["title/classes/QuestionGroupGrade.html",[0,0.227,1967,3.623]],["body/classes/QuestionGroupGrade.html",[0,0.323,2,0.59,3,0.05,4,0.05,5,0.045,10,0.206,11,1.013,18,0.882,21,0.006,23,0.5,25,0.689,29,0.163,38,0.05,39,0.003,40,1.564,41,1.527,42,1.538,67,0.004,68,0.003,71,1.538,72,3.342,73,0.739,76,1.571,79,3.342,80,3.425,81,3.425,82,2.118,83,2.404,85,3.605,86,2.423,91,2.604,92,1.393,97,1.889,98,4.232,99,1.938,100,3.163,101,2.662,102,2.979,103,1.889,104,2.662,105,1.889,106,2.662,107,1.889,110,2.052,129,0.749,130,2.193,180,2.802,232,3.609,242,3.531,331,3.611,408,2.32,520,2.611,527,2.173,536,2.73,549,3.353,568,3.475,629,4.794,631,2.404,678,2.243,715,2.802,854,5.512,859,4.142,860,3.938,874,2.604,875,2.604,876,2.604,877,3.247,879,2.866,890,3.475,1967,4.387,1970,2.725,2076,4.693,2085,3.531,2146,3.531,2147,3.962,2148,3.962,2149,3.962,2150,3.962,2151,3.962,2152,3.962,2153,3.962,2154,3.962,2155,3.962]],["title/classes/QuestionGroupGradeRemove1624883202213.html",[0,0.227,2156,3.876]],["body/classes/QuestionGroupGradeRemove1624883202213.html",[0,0.315,2,0.715,3,0.061,4,0.061,5,0.054,8,2.395,9,3.089,10,0.341,11,1.159,12,3.509,13,2.102,14,2.773,15,2.712,16,2.712,17,3.708,18,0.701,20,1.26,21,0.006,22,1.435,23,0.4,24,0.83,25,1.14,26,1.732,27,2.712,29,0.137,30,0.938,38,0.061,39,0.003,40,1.79,43,2.023,67,0.004,68,0.003,73,0.846,86,3.158,90,3.977,122,3.789,129,0.908,130,2.825,131,1.864,136,2.903,137,3.154,138,4.904,139,4.904,140,3.154,141,2.177,142,3.154,143,3.154,149,3.154,150,2.717,151,3.154,171,2.288,295,2.553,421,3.026,428,3.677,527,4.092,536,2.288,549,2.81,550,3.301,567,5.841,568,3.977,569,3.934,2156,6.572,2157,7.146,2158,4.278,2159,4.8,2160,4.8,2161,4.8]],["title/modules/QuestionGroupModule.html",[256,1.631,269,3.252]],["body/modules/QuestionGroupModule.html",[0,0.231,3,0.061,4,0.061,5,0.055,21,0.006,29,0.266,38,0.061,39,0.003,67,0.004,68,0.003,110,1.724,168,2.908,195,1.022,256,2.576,258,2.294,259,2.237,260,2.418,261,2.418,262,2.294,263,3.755,264,3.655,268,5.698,269,6.598,270,3.299,271,2.418,272,2.418,274,3.6,276,3.034,277,1.991,282,3.48,305,5.944,378,5.467,394,4.288,1079,3.943,1956,5.963,1960,3.309,1973,3.943,1974,3.943,2031,5.724,2062,4.288,2110,5.724,2131,5.698,2132,4.288,2133,3.943,2162,4.288,2163,4.288,2164,4.812,2165,4.288,2166,4.812,2167,4.812,2168,4.812,2169,4.812,2170,4.748,2171,4.288,2172,4.288,2173,4.288,2174,4.812]],["title/classes/QuestionGroupRepository.html",[0,0.227,1960,3.252]],["body/classes/QuestionGroupRepository.html",[0,0.326,2,1.011,3,0.086,4,0.086,5,0.077,21,0.006,29,0.25,30,1.601,38,0.086,39,0.004,67,0.005,68,0.004,71,2.199,110,2.431,248,4.679,249,3.609,250,2.808,251,2.808,252,2.808,629,3.609,631,4.117,1960,5.631,1970,4.666,2175,6.047,2176,6.047,2177,6.785]],["title/injectables/QuestionGroupService.html",[297,1.039,2131,3.108]],["body/injectables/QuestionGroupService.html",[0,0.17,3,0.027,4,0.027,5,0.024,10,0.111,11,0.627,13,2.162,18,0.702,20,1.394,21,0.007,22,1.239,23,0.389,24,0.918,25,1.26,26,1.8,29,0.247,30,0.694,33,2.593,38,0.027,39,0.003,40,2.041,41,1.778,42,0.831,43,2.573,46,1.453,49,1.833,50,1.839,66,0.867,67,0.002,68,0.001,76,2.32,82,1.329,110,2.746,124,2.439,141,2.06,171,2.165,172,2.236,180,3.086,181,2.236,195,0.455,217,1.601,222,1.814,250,3.242,251,0.886,252,0.886,277,0.886,297,0.779,298,0.782,301,3.47,302,2.077,303,1.437,305,4.211,312,2.331,315,1.407,317,2.755,318,1.139,319,2.331,320,1.472,321,1.549,327,2.441,331,1.35,336,1.549,340,1.755,356,1.64,490,1.212,520,2.272,527,1.174,568,2.755,629,4.378,631,1.299,658,4.562,788,4.338,843,1.735,844,1.649,852,1.755,860,1.472,890,3.551,896,1.64,897,1.755,898,1.755,958,1.35,985,1.299,986,4.211,988,2.152,1009,1.549,1012,1.755,1018,3.123,1020,3.478,1026,3.478,1116,1.908,1183,1.908,1184,1.755,1280,1.549,1455,4.045,1743,3.161,1956,3.631,1960,3.631,1964,1.908,1965,1.908,1970,1.472,1971,4.045,1972,1.755,1973,1.755,1974,1.755,1975,1.908,1986,1.908,2035,3.478,2060,1.64,2113,4.047,2114,1.908,2118,1.908,2127,3.819,2129,5.054,2131,2.331,2134,4.328,2135,1.908,2172,1.908,2173,1.908,2178,6.83,2179,1.908,2180,4.541,2181,4.541,2182,2.141,2183,2.141,2184,2.141,2185,2.141,2186,2.141,2187,2.141,2188,2.141,2189,2.141,2190,1.908,2191,2.141,2192,2.141,2193,2.141,2194,2.141,2195,2.141,2196,3.721,2197,2.141,2198,2.141,2199,1.64,2200,1.908,2201,2.141,2202,2.141,2203,3.547,2204,2.141,2205,2.141,2206,2.141,2207,3.547,2208,3.547,2209,3.547,2210,4.541,2211,2.141,2212,2.141,2213,3.547,2214,2.141,2215,2.141,2216,1.908,2217,2.141,2218,2.141,2219,2.141,2220,1.908,2221,2.141,2222,2.141,2223,2.141,2224,2.141,2225,3.547,2226,2.141,2227,2.141,2228,2.141,2229,2.141,2230,2.141]],["title/classes/QuestionGroupTarget1621992475274.html",[0,0.227,2231,3.876]],["body/classes/QuestionGroupTarget1621992475274.html",[0,0.207,2,0.642,3,0.055,4,0.055,5,0.049,8,2.223,9,2.918,10,0.447,11,1.076,12,3.394,13,2.033,14,2.574,15,2.518,16,2.518,17,3.621,18,0.662,20,1.17,21,0.006,22,1.381,23,0.48,24,0.771,25,1.058,26,1.654,27,2.518,29,0.123,30,0.843,38,0.055,39,0.003,43,2.856,46,2.862,67,0.004,68,0.003,73,0.785,95,2.976,113,3.051,122,2.918,129,0.815,130,1.406,131,1.674,136,3.712,153,3.75,164,4.33,171,3.36,294,4.986,295,4.821,296,4.828,421,2.719,427,6.824,548,4.828,744,3.277,843,2.976,844,2.828,1194,5.422,2231,6.275,2232,6.824,2233,3.843,2234,4.312,2235,4.312,2236,4.312]],["title/interfaces/QuestionGroupUser.html",[606,1.27,2237,3.876]],["body/interfaces/QuestionGroupUser.html",[3,0.089,4,0.089,5,0.08,10,0.365,21,0.006,23,0.377,38,0.089,39,0.005,40,2.525,41,2.027,67,0.005,68,0.005,73,1.079,110,2.519,606,1.887,607,2.847,609,5.084,890,4.265,2237,6.855,2238,6.264]],["title/classes/QuestionImage1620477869366.html",[0,0.227,2239,3.876]],["body/classes/QuestionImage1620477869366.html",[0,0.208,2,0.644,3,0.055,4,0.055,5,0.049,8,2.227,9,2.921,10,0.225,11,1.078,12,3.396,13,2.035,14,2.578,15,2.522,16,2.522,17,3.623,18,0.663,20,1.172,21,0.006,22,1.382,23,0.379,24,0.772,25,1.06,26,1.655,27,2.522,29,0.123,30,0.845,38,0.055,39,0.003,43,2.799,66,2.468,67,0.004,68,0.003,73,0.786,76,3.595,86,2.578,122,3.47,129,0.817,130,1.986,131,1.678,136,4.017,141,2.764,150,4.339,152,5.502,153,3.241,154,3.698,156,4.651,157,3.698,159,4.488,164,3.149,421,3.842,521,3.842,551,5.871,552,4.91,553,5.766,554,4.667,2108,6.831,2109,6.831,2239,6.281,2240,6.831,2241,3.851,2242,4.322,2243,4.322,2244,4.322]],["title/classes/QuestionPosition1620488935141.html",[0,0.227,2245,3.876]],["body/classes/QuestionPosition1620488935141.html",[0,0.246,2,0.762,3,0.065,4,0.065,5,0.058,8,2.5,9,3.19,10,0.266,11,1.21,12,3.575,13,2.142,14,2.895,15,2.831,16,2.831,17,3.757,18,0.724,20,1.315,21,0.006,22,1.467,23,0.413,24,0.866,25,1.19,26,1.778,27,2.831,29,0.145,30,1,38,0.065,39,0.003,43,2.541,67,0.004,68,0.003,73,0.883,76,2.712,86,2.895,113,2.961,122,2.831,129,0.967,130,2.513,131,1.986,136,3.646,152,4.994,153,3.639,164,3.535,527,3.751,548,4.313,568,4.994,2245,6.745,2246,7.335,2247,4.558,2248,5.114,2249,5.114,2250,5.114]],["title/classes/QuestionPositionIdx1620563708532.html",[0,0.227,2251,3.876]],["body/classes/QuestionPositionIdx1620563708532.html",[0,0.215,2,0.667,3,0.057,4,0.057,5,0.051,8,2.284,9,2.979,10,0.426,11,1.105,12,3.435,13,2.058,14,2.644,15,2.587,16,2.587,17,3.653,18,0.676,20,1.202,21,0.006,22,1.4,23,0.386,24,0.791,25,1.087,26,1.682,27,2.587,29,0.127,30,0.876,38,0.057,39,0.003,43,2.82,66,2.531,67,0.004,68,0.003,73,0.806,76,3.52,86,2.644,122,2.587,129,0.847,130,1.461,131,1.74,135,4.297,136,3.757,141,2.835,150,4.408,152,5.147,153,3.324,154,3.792,156,4.725,157,3.792,159,4.559,164,3.229,165,4.297,548,3.94,551,5.965,552,3.659,553,5.833,554,4.787,568,3.792,569,5.122,2251,6.382,2252,6.94,2253,3.993,2254,4.48,2255,4.48,2256,4.48,2257,6.25]],["title/classes/QuestionRepository.html",[0,0.227,2170,3.42]],["body/classes/QuestionRepository.html",[0,0.328,2,1.018,3,0.087,4,0.087,5,0.077,21,0.006,29,0.251,30,1.608,38,0.087,39,0.004,67,0.005,68,0.004,71,2.208,76,2.709,110,2.448,248,4.693,249,3.634,250,2.828,251,2.828,252,2.828,2061,5.599,2170,5.948,2258,6.089,2259,6.832]],["title/injectables/QuestionService.html",[297,1.039,305,2.982]],["body/injectables/QuestionService.html",[0,0.11,3,0.029,4,0.029,5,0.026,10,0.119,11,0.662,13,2.186,18,0.735,20,1.505,21,0.007,22,1.338,23,0.42,24,0.991,25,1.329,26,1.897,29,0.241,30,0.732,33,2.326,38,0.029,39,0.002,40,2.087,41,1.961,42,0.888,43,2.122,49,1.935,50,1.926,66,0.926,67,0.002,68,0.001,76,3.223,82,1.478,110,2.862,124,2.575,141,1.699,172,2.361,181,2.361,195,0.486,217,1.135,222,2.031,250,3.416,251,0.946,252,0.946,277,0.946,297,0.822,298,0.836,302,2.192,303,1.516,305,2.361,312,2.461,315,2.461,317,2.885,318,1.216,319,2.461,320,1.572,321,1.654,327,2.216,331,4.106,336,1.654,356,1.752,406,1.339,486,1.752,490,2.12,494,1.874,527,1.254,568,3.679,629,2.924,631,1.388,661,4.171,746,3.27,754,4.334,755,3.439,757,4.727,890,2.885,958,1.442,985,1.388,988,2.272,995,3.069,1009,1.654,1012,4.504,1018,2.575,1106,2.038,1153,2.038,1184,1.874,1280,1.654,1599,4.898,1968,1.874,1970,1.572,1972,1.874,2033,4.237,2034,3.337,2035,3.642,2036,2.038,2038,2.038,2041,3.337,2042,3.975,2050,3.975,2054,3.975,2059,2.038,2060,1.752,2061,1.874,2063,2.038,2131,3.985,2133,1.874,2170,3.975,2171,2.038,2190,2.038,2199,1.752,2200,2.038,2216,3.337,2260,2.038,2261,4.755,2262,3.744,2263,3.744,2264,4.755,2265,2.287,2266,2.287,2267,2.287,2268,2.287,2269,2.287,2270,2.287,2271,3.744,2272,2.287,2273,2.287,2274,3.744,2275,2.287,2276,2.287,2277,2.287,2278,2.287,2279,3.897,2280,2.287,2281,2.287,2282,2.287,2283,2.287,2284,3.744,2285,2.287,2286,2.287,2287,3.744,2288,2.287,2289,2.287,2290,2.287,2291,3.744,2292,2.287,2293,3.744,2294,2.287,2295,2.287,2296,3.744,2297,2.038,2298,2.287,2299,2.287,2300,2.287,2301,2.287,2302,2.287]],["title/classes/ReorderQuestionDto.html",[0,0.227,2050,3.42]],["body/classes/ReorderQuestionDto.html",[0,0.377,2,0.945,3,0.081,4,0.081,5,0.072,10,0.33,18,0.739,21,0.006,23,0.422,29,0.18,38,0.081,39,0.004,41,2.026,67,0.005,68,0.004,73,1.014,82,1.784,92,2.762,110,3.06,447,2.949,661,5.182,662,5,741,5.684,759,4.859,2050,5.684,2297,7.611,2303,6.999,2304,6.344,2305,5.654,2306,6.344,2307,6.344]],["title/classes/ReorderQuestionGroupDto.html",[0,0.227,2127,3.42]],["body/classes/ReorderQuestionGroupDto.html",[0,0.374,2,0.93,3,0.079,4,0.079,5,0.071,10,0.324,18,0.731,21,0.006,23,0.417,29,0.178,38,0.079,39,0.004,41,2.015,67,0.005,68,0.004,73,1.004,76,3.361,82,1.766,92,2.735,110,3.038,180,4.148,447,2.902,660,4.515,662,5.197,664,5.563,738,4.782,741,5.628,2127,5.628,2220,7.556,2303,6.948,2305,5.563,2308,6.242]],["title/classes/SeedAuxiliary1624412129413.html",[0,0.227,1832,3.623]],["body/classes/SeedAuxiliary1624412129413.html",[0,0.132,2,0.408,3,0.035,4,0.035,5,0.031,8,1.582,9,2.222,10,0.142,11,0.766,12,2.861,13,1.714,14,1.832,15,1.792,16,1.792,17,3.198,18,0.407,20,0.833,21,0.007,22,1.136,23,0.288,24,0.548,25,0.753,26,1.318,27,1.792,29,0.174,30,0.536,31,2.098,33,2.917,34,2.535,36,3.535,38,0.035,39,0.002,40,2.381,41,0.622,43,2.881,45,5.561,46,2.261,55,4.196,56,2.098,57,3.04,58,2.245,59,6.064,60,2.118,61,2.374,62,5.351,63,1.727,67,0.003,68,0.002,92,0.963,100,2.085,125,2.098,147,2.098,225,2.845,232,3.13,295,4.724,423,2.098,488,2.245,523,1.981,525,2.098,531,3.883,532,3.55,534,4.137,535,4.455,536,2.064,538,4,540,2.098,542,4.113,546,3.132,573,3.317,606,0.735,844,2.013,1375,3.548,1748,5,1819,6.319,1820,4.113,1821,2.098,1822,2.441,1823,2.441,1824,2.441,1825,2.245,1826,2.245,1827,2.441,1828,6.195,1829,2.245,1830,2.245,1831,2.245,1832,3.317,1833,2.441,1834,2.441,1835,2.441,1836,2.441,1837,2.441,1838,2.245,1839,2.441,1840,3.859,1841,5.438,1842,6.297,1843,2.441,1844,6.594,2309,2.739,2310,2.739]],["title/interfaces/SoftDeleteResult.html",[319,3.108,606,1.27]],["body/interfaces/SoftDeleteResult.html",[3,0.088,4,0.088,5,0.079,10,0.36,21,0.006,23,0.476,38,0.088,39,0.005,41,1.573,66,2.806,67,0.005,68,0.005,73,1.07,319,5.45,320,4.765,606,1.86,607,2.806,993,7.391,2311,5.679,2312,9.2,2313,6.929]],["title/classes/Student.html",[0,0.227,844,2.198]],["body/classes/Student.html",[0,0.211,2,0.655,3,0.056,4,0.056,5,0.05,10,0.229,18,0.865,21,0.006,23,0.498,26,1.539,29,0.203,30,0.86,34,3.613,36,3.282,38,0.056,39,0.003,40,1.685,41,0.999,42,2.396,46,2.829,63,3.891,67,0.004,68,0.003,71,1.657,72,1.996,73,0.796,74,2.273,79,2.799,80,2.868,81,2.868,82,2.066,85,3.779,92,2.715,95,3.779,97,2.097,98,4.075,99,2.152,100,2.767,101,2.045,102,3.157,103,2.097,104,2.045,105,2.097,106,2.045,107,2.097,129,1.167,130,1.434,222,1.142,232,2.733,243,5.057,254,3.182,408,3.613,409,3.493,625,3.606,632,4.243,678,2.491,806,3.891,844,2.868,855,4.463,886,4.726,1976,5.459,1991,5.057,1992,3.921,1993,5.499,1995,3.921,1996,3.921,1997,3.921,1998,3.921,1999,3.921,2000,3.921,2314,3.921,2315,7.127,2316,4.4,2317,4.4,2318,4.4]],["title/classes/StudentRepository.html",[0,0.227,599,3.42]],["body/classes/StudentRepository.html",[0,0.329,2,1.021,3,0.087,4,0.087,5,0.078,21,0.006,29,0.251,30,1.611,38,0.087,39,0.004,67,0.005,68,0.004,71,2.213,248,4.7,249,3.647,250,2.838,251,2.838,252,2.838,599,5.96,844,3.187,1739,5.619,2319,6.11,2320,6.856]],["title/injectables/StudentService.html",[297,1.039,591,3.252]],["body/injectables/StudentService.html",[0,0.246,3,0.065,4,0.065,5,0.058,10,0.266,11,1.21,18,0.724,20,1.482,21,0.007,22,1.318,23,0.413,24,0.976,25,1.19,26,1.778,29,0.256,30,1,33,1.73,38,0.065,39,0.003,67,0.004,68,0.003,82,1.161,195,1.086,217,1.551,222,1.775,250,3.406,251,2.117,252,2.117,277,2.117,297,1.502,298,1.869,302,4.005,303,2.77,318,2.72,327,1.869,346,3.917,591,4.704,599,5.952,600,4.558,797,5.189,844,3.18,985,3.103,988,4.151,1009,3.699,1117,3.699,1739,4.191,2006,6.096,2008,6.096,2010,6.096,2011,6.07,2013,4.558,2014,4.558,2016,4.558,2321,4.558,2322,5.114,2323,5.114,2324,5.114,2325,5.114,2326,5.114]],["title/classes/Subject.html",[0,0.227,538,2.677]],["body/classes/Subject.html",[0,0.218,2,0.675,3,0.058,4,0.058,5,0.051,10,0.236,18,0.85,21,0.006,23,0.501,29,0.223,30,0.886,38,0.058,39,0.003,40,1.721,41,1.644,42,1.76,67,0.004,68,0.003,71,1.692,72,3.55,73,0.813,79,2.858,80,2.928,81,2.928,82,2.053,83,2.75,85,3.542,86,2.666,92,2.214,97,2.16,98,3.55,99,2.217,100,2.812,101,2.107,102,3.208,103,2.16,104,2.107,105,2.16,106,2.107,107,2.16,113,3.387,114,2.485,115,3.972,117,2.979,129,1.48,232,3.643,254,3.278,408,4.582,409,3.566,534,5.113,535,4.566,536,3.452,538,3.566,678,2.566,681,3.972,1976,5.547,2327,4.039,2328,7.241,2329,4.532,2330,4.532,2331,4.532,2332,4.532,2333,4.532,2334,4.532,2335,4.532,2336,4.532]],["title/interfaces/SwaggerOptions.html",[606,1.27,2337,3.623]],["body/interfaces/SwaggerOptions.html",[3,0.082,4,0.082,5,0.073,10,0.336,21,0.006,23,0.482,38,0.082,39,0.004,67,0.005,68,0.004,73,1.026,129,1.832,522,6.5,536,4.284,606,1.737,607,2.62,2337,6.094,2338,5.766,2339,8.01,2340,8.01,2341,8.615]],["title/classes/TimestampEntity.html",[0,0.227,102,2.095]],["body/classes/TimestampEntity.html",[0,0.296,2,0.918,3,0.078,4,0.078,5,0.07,10,0.32,18,0.792,21,0.006,23,0.452,29,0.175,30,1.205,38,0.078,39,0.004,67,0.005,68,0.004,71,2.073,73,0.996,79,3.824,80,3.918,81,3.918,82,1.913,100,3.604,101,3.918,102,3.42,104,3.918,106,3.918,2342,5.493,2343,8.429,2344,6.164,2345,6.164,2346,6.164]],["title/classes/UpdateAnswerDto.html",[0,0.227,185,3.42]],["body/classes/UpdateAnswerDto.html",[0,0.339,2,1.051,3,0.09,4,0.09,5,0.08,21,0.006,29,0.238,38,0.09,39,0.005,67,0.005,68,0.005,71,1.894,171,3.363,177,4.851,185,6.063,210,5.781,686,5.781,2347,6.287,2348,5.404,2349,5.781,2350,5.781,2351,7.054]],["title/classes/UpdateExamAgreementDto.html",[0,0.227,955,3.42]],["body/classes/UpdateExamAgreementDto.html",[0,0.401,2,0.901,3,0.077,4,0.077,5,0.069,10,0.314,18,0.717,21,0.006,23,0.471,24,1.111,29,0.217,38,0.077,39,0.004,67,0.005,68,0.004,73,0.984,82,1.732,129,1.443,445,5.246,446,5.014,447,2.812,520,3.245,545,5.492,696,5.071,714,4.633,715,4.088,716,5.391,719,3.975,720,5.518,765,5.391,837,6.044,955,5.518,2352,6.849,2353,6.049,2354,6.049]],["title/classes/UpdateExamDto.html",[0,0.227,1039,3.42]],["body/classes/UpdateExamDto.html",[0,0.339,2,1.051,3,0.09,4,0.09,5,0.08,21,0.006,29,0.238,38,0.09,39,0.005,67,0.005,68,0.005,71,1.894,171,3.363,724,4.851,725,5.781,1039,6.063,1042,5.781,2348,5.404,2349,5.781,2350,5.781,2352,5.781,2355,7.054]],["title/classes/UpdateQuestionDto.html",[0,0.227,2054,3.42]],["body/classes/UpdateQuestionDto.html",[0,0.339,2,1.051,3,0.09,4,0.09,5,0.08,21,0.006,29,0.238,38,0.09,39,0.005,67,0.005,68,0.005,71,1.894,110,2.528,171,3.363,199,3.279,754,4.448,755,5.102,759,5.404,2054,6.063,2348,5.404,2356,5.781,2357,7.054]],["title/classes/UpdateQuestionGroupDto.html",[0,0.227,2129,3.42]],["body/classes/UpdateQuestionGroupDto.html",[0,0.335,2,1.04,3,0.089,4,0.089,5,0.079,21,0.006,29,0.237,38,0.089,39,0.005,67,0.005,68,0.005,71,1.874,76,3.302,110,2.501,171,3.327,660,5.047,788,4.799,2129,6.024,2134,5.719,2348,5.346,2349,5.719,2350,5.719,2356,5.719,2358,6.979]],["title/controllers/UploadController.html",[166,1.957,1849,3.623]],["body/controllers/UploadController.html",[0,0.272,3,0.072,4,0.072,5,0.092,10,0.294,11,1.294,13,1.966,18,0.532,20,1.089,21,0.006,22,0.968,23,0.304,24,0.717,25,0.985,29,0.258,38,0.072,39,0.004,67,0.005,68,0.004,82,1.286,166,2.344,168,2.509,170,3.316,188,4.283,194,3.436,195,1.203,196,5.03,198,3.316,199,2.632,200,2.926,201,3.894,215,3.436,216,2.926,217,1.717,222,1.47,1324,4.338,1405,4.612,1663,6.207,1773,4.096,1849,5.603,1851,5.047,2359,5.047,2360,5.663,2361,8.103,2362,5.663,2363,5.663,2364,5.663,2365,5.663,2366,5.663,2367,5.047,2368,5.995,2369,5.663,2370,5.663,2371,5.663,2372,5.663,2373,5.663,2374,5.663]],["title/classes/UploaderService.html",[0,0.227,1405,2.982]],["body/classes/UploaderService.html",[0,0.311,2,0.964,3,0.082,4,0.082,5,0.073,10,0.336,11,1.407,18,0.608,20,1.244,21,0.006,22,1.106,23,0.347,24,0.819,25,1.125,26,1.718,29,0.184,38,0.082,39,0.004,67,0.005,68,0.004,129,1.629,1239,5.228,1405,5.016,1451,6.5,1490,5.302,1663,6.094,1692,5.766,1693,7.09,1698,5.766,1699,5.766,2375,5.766,2376,8.988,2377,6.47]],["title/classes/User.html",[0,0.227,46,1.514]],["body/classes/User.html",[0,0.186,2,0.577,3,0.049,4,0.049,5,0.044,10,0.201,18,0.852,21,0.006,22,0.663,23,0.513,29,0.22,30,0.758,34,3.889,36,3.533,38,0.049,39,0.003,40,1.539,41,0.88,42,2.188,46,1.804,63,4.188,67,0.004,68,0.003,71,1.513,72,3.785,73,0.727,74,3.768,79,3.308,80,3.39,81,3.39,82,2.059,85,3.568,92,2.563,95,4.331,97,1.847,98,3.785,99,1.896,100,3.139,101,2.62,102,2.942,103,1.847,104,2.62,105,1.847,106,2.62,107,1.847,108,2.803,109,2.547,113,3.499,114,2.125,116,5.023,117,2.547,119,1.758,129,1.379,130,1.837,408,4.27,409,4.128,632,5.328,634,3.176,678,2.194,681,3.554,806,5.097,813,4.317,874,2.547,875,2.547,876,2.547,892,2.269,1991,5.443,2378,3.454,2379,3.876,2380,3.876,2381,3.876,2382,3.876,2383,3.876,2384,3.876,2385,3.876,2386,3.876]],["title/controllers/UserController.html",[166,1.957,2387,3.623]],["body/controllers/UserController.html",[0,0.248,3,0.066,4,0.066,5,0.058,10,0.268,11,1.216,18,0.646,20,1.322,21,0.007,22,1.176,23,0.369,24,0.871,25,1.196,29,0.257,38,0.066,39,0.003,46,2.937,67,0.004,68,0.003,82,1.561,166,2.133,168,2.283,170,3.018,188,4.531,189,3.018,192,3.545,194,3.128,195,1.095,198,3.018,199,2.396,200,2.664,204,4.696,206,3.545,215,4.173,216,2.664,217,1.563,222,2.008,476,4.879,490,2.918,797,5.579,1117,3.728,1585,4.974,1587,4.594,2058,4.224,2387,5.268,2388,4.594,2389,4.224,2390,5.155,2391,5.155,2392,5.155,2393,5.155,2394,5.155,2395,4.224,2396,4.594,2397,5.155,2398,5.155,2399,5.155,2400,5.155,2401,5.155,2402,5.155]],["title/classes/UserDto.html",[0,0.227,2011,3.252]],["body/classes/UserDto.html",[0,0.394,2,1.014,3,0.087,4,0.087,5,0.077,10,0.354,18,0.64,21,0.006,23,0.365,29,0.194,36,4.686,38,0.087,39,0.004,67,0.005,68,0.004,73,1.059,82,1.546,129,1.552,443,4.474,445,5.643,446,5.393,447,3.165,2011,5.643,2403,6.068,2404,6.808]],["title/modules/UserModule.html",[256,1.631,383,3.252]],["body/modules/UserModule.html",[0,0.268,3,0.071,4,0.071,5,0.063,21,0.006,29,0.262,38,0.071,39,0.004,67,0.005,68,0.004,168,3.21,195,1.186,256,2.775,258,2.661,259,2.595,260,2.805,261,2.805,262,2.661,263,4.044,264,3.937,270,3.642,271,2.805,272,2.805,274,3.061,276,3.519,277,2.31,377,4.983,378,4.569,383,6.333,392,4.975,476,6.081,486,6.164,1079,4.575,2387,6.164,2396,4.975,2405,4.975,2406,4.975,2407,4.975,2408,5.582,2409,5.582,2410,4.037,2411,4.975,2412,5.582]],["title/classes/UserRepository.html",[0,0.227,2410,3.42]],["body/classes/UserRepository.html",[0,0.329,2,1.021,3,0.087,4,0.087,5,0.078,21,0.006,29,0.251,30,1.611,38,0.087,39,0.004,46,2.195,67,0.005,68,0.004,71,2.213,248,4.7,249,3.647,250,2.838,251,2.838,252,2.838,2395,5.619,2410,5.96,2413,6.11,2414,6.856]],["title/interfaces/UserResult.html",[606,1.27,2415,3.623]],["body/interfaces/UserResult.html",[3,0.084,4,0.084,5,0.075,10,0.345,21,0.006,23,0.507,29,0.189,38,0.084,39,0.004,40,2.478,41,1.979,67,0.005,68,0.004,73,1.043,119,3.015,217,2.453,606,1.784,607,2.692,806,5.72,813,5.091,2311,5.447,2415,6.195,2416,5.923,2417,5.447]],["title/injectables/UserService.html",[297,1.039,476,2.982]],["body/injectables/UserService.html",[0,0.144,3,0.038,4,0.038,5,0.034,10,0.155,11,0.82,13,2.154,18,0.719,20,1.471,21,0.007,22,1.307,23,0.424,24,0.969,25,1.275,26,1.852,29,0.244,30,0.585,33,2.166,38,0.038,39,0.002,40,0.817,42,1.801,43,2.44,45,2.057,46,2.841,49,3.308,50,2.593,57,1.693,60,1.463,61,1.64,67,0.003,68,0.002,82,0.679,119,1.357,130,1.512,195,0.635,217,1.941,222,1.985,250,2.65,251,1.238,252,1.238,277,1.238,297,1.019,298,1.093,303,1.879,318,1.591,321,2.163,327,2.795,434,4.822,476,2.925,487,3.801,490,1.693,590,5.259,591,5.259,638,4.134,640,5.705,643,4.134,797,5.117,806,1.886,813,2.291,1117,2.163,1585,3.355,2011,6.326,2389,3.801,2395,2.451,2410,5.302,2411,2.665,2415,3.553,2417,2.451,2418,2.665,2419,4.639,2420,4.639,2421,4.639,2422,4.639,2423,4.639,2424,2.991,2425,2.991,2426,2.991,2427,4.639,2428,2.991,2429,4.639,2430,2.991,2431,4.639,2432,2.991,2433,4.639,2434,2.991,2435,4.639,2436,2.991,2437,4.639,2438,2.991,2439,2.991,2440,2.991,2441,2.991,2442,2.991,2443,2.991,2444,2.991,2445,2.991,2446,2.991,2447,2.991,2448,2.991,2449,2.991,2450,2.991,2451,2.991,2452,2.991,2453,2.991,2454,2.991,2455,2.991,2456,4.639,2457,2.991,2458,4.639,2459,2.991,2460,5.682,2461,2.991,2462,4.639,2463,4.639,2464,2.991,2465,2.991,2466,2.991,2467,2.991]],["title/coverage.html",[2468,5.782]],["body/coverage.html",[0,0.456,1,1.047,5,0.014,6,2.517,7,2.517,13,0.552,21,0.006,23,0.068,34,0.748,36,0.679,39,0.001,46,0.409,50,0.517,60,1.112,66,0.517,67,0.001,68,0.001,69,0.66,70,1.138,72,0.579,74,0.66,76,1.694,102,0.566,108,1.644,110,2.883,126,1.047,127,1.138,128,1.138,136,0.566,144,0.839,166,2.6,167,0.978,169,1.138,175,0.775,177,0.878,185,0.924,200,0.66,202,1.741,204,0.775,205,0.839,207,0.878,230,1.047,231,1.138,232,0.566,245,0.924,246,1.138,247,1.138,256,0.784,262,0.609,278,0.924,282,0.924,286,1.138,288,1.047,289,1.138,290,1.138,297,1.81,299,1.138,305,0.805,306,0.839,309,0.978,319,0.839,320,0.878,322,1.741,361,0.978,362,1.138,388,1.047,389,1.047,407,1.138,415,1.047,416,1.138,417,1.138,429,0.978,430,1.138,432,0.878,434,0.805,441,0.878,442,1.138,453,0.924,457,0.978,459,0.924,467,1.138,470,1.138,476,0.805,479,0.924,514,1.047,515,1.138,516,1.863,520,1.447,527,5.453,532,0.642,534,0.748,538,0.723,549,0.748,564,1.047,565,1.138,588,0.878,589,0.878,590,0.878,591,0.878,593,0.924,595,0.924,597,0.924,599,0.924,606,2.073,608,1.138,609,2.695,610,0.924,611,1.047,612,1.047,629,0.679,630,0.924,658,0.924,659,1.138,660,2.695,668,0.839,669,0.924,675,1.138,685,1.138,686,1.863,705,1.138,706,1.138,708,0.978,712,0.924,713,1.863,714,2.353,721,0.978,724,0.878,725,1.863,729,0.748,744,1.986,746,0.878,747,2.695,748,1.863,754,0.805,757,0.878,759,2.353,788,0.878,797,0.805,798,1.138,799,1.863,802,1.047,816,0.924,817,1.863,818,1.138,831,0.978,832,1.047,833,1.138,843,0.625,844,1.057,845,0.924,846,1.138,847,0.878,850,1.138,870,0.839,890,1.379,892,0.748,901,1.047,902,1.138,903,1.138,907,1.138,929,1.047,930,1.138,931,1.138,938,1.047,939,1.138,940,1.138,944,0.978,945,1.863,946,1.138,950,0.924,955,0.924,966,1.863,970,1.047,971,1.138,972,1.138,976,0.924,977,1.863,978,1.138,980,1.138,986,0.805,1024,0.978,1025,1.138,1036,0.924,1039,0.924,1061,0.839,1062,0.839,1063,0.878,1065,0.978,1067,0.924,1069,0.924,1080,1.741,1081,1.138,1087,1.138,1092,0.978,1142,1.138,1161,1.047,1185,1.138,1188,1.047,1189,1.863,1190,1.863,1204,1.047,1205,1.863,1206,1.863,1210,1.047,1213,1.138,1228,1.047,1229,1.138,1230,0.839,1231,1.047,1249,1.863,1250,1.863,1253,0.978,1261,1.138,1263,1.138,1290,1.138,1291,1.138,1307,1.047,1308,1.138,1309,1.138,1314,0.978,1315,1.138,1320,0.878,1331,0.878,1336,1.138,1347,1.047,1401,1.138,1405,0.805,1448,1.138,1451,0.924,1452,1.138,1453,1.138,1454,1.138,1455,0.978,1456,1.138,1457,1.138,1463,0.775,1464,1.741,1465,1.138,1466,1.138,1478,0.978,1481,0.805,1517,0.978,1548,0.978,1556,0.878,1568,2.353,1569,1.863,1571,4.953,1576,0.978,1577,1.047,1578,1.138,1581,0.924,1582,2.695,1583,1.138,1585,0.924,1620,0.924,1621,1.047,1622,1.138,1634,0.978,1635,1.138,1658,0.924,1662,1.138,1666,0.978,1682,1.138,1683,1.138,1684,0.978,1685,1.138,1686,1.138,1708,1.138,1725,1.047,1726,1.138,1727,1.138,1732,1.138,1751,1.138,1759,2.353,1760,2.353,1776,0.924,1780,0.924,1819,0.978,1820,2.854,1821,2.854,1828,0.978,1832,0.978,1849,0.978,1855,1.138,1859,0.978,1860,1.138,1861,1.138,1862,1.138,1892,1.138,1895,1.047,1898,1.138,1910,1.138,1919,1.047,1920,1.138,1921,1.138,1926,1.138,1928,1.138,1956,0.878,1957,1.138,1958,1.138,1960,0.878,1967,0.978,1971,0.978,1989,1.138,2003,1.138,2005,1.138,2011,0.878,2018,1.138,2031,0.978,2032,1.138,2042,0.924,2050,0.924,2054,0.924,2076,1.863,2077,1.138,2080,1.138,2102,1.047,2103,1.138,2104,1.138,2110,0.978,2111,1.138,2112,1.138,2127,0.924,2129,0.924,2131,0.839,2146,1.138,2156,1.047,2157,1.138,2158,1.138,2170,0.924,2175,1.138,2176,1.138,2178,1.138,2179,1.138,2196,1.047,2199,0.978,2231,1.047,2232,1.138,2233,1.138,2237,1.047,2238,1.138,2239,1.047,2240,1.138,2241,1.138,2245,1.047,2246,1.138,2247,1.138,2251,1.047,2252,1.138,2253,1.138,2258,1.138,2260,1.138,2279,1.047,2303,1.863,2311,1.863,2314,1.138,2319,1.138,2321,1.138,2327,1.138,2337,0.978,2338,1.138,2342,1.138,2347,1.138,2352,1.863,2356,1.863,2359,1.138,2368,1.047,2375,1.138,2378,1.138,2387,0.978,2388,1.138,2403,1.138,2410,0.924,2413,1.138,2415,0.978,2416,1.138,2417,1.047,2418,1.138,2468,1.138,2469,1.277,2470,1.277,2471,1.277,2472,8.629,2473,4.272,2474,5.476,2475,9.268,2476,2.273,2477,3.726,2478,8.047,2479,2.026,2480,8.589,2481,2.273,2482,7.41,2483,5.132,2484,2.273,2485,3.072,2486,3.072,2487,3.272,2488,1.047,2489,1.138,2490,1.138,2491,1.138,2492,1.138,2493,2.026,2494,1.138,2495,1.138,2496,1.138,2497,1.138,2498,2.026,2499,1.138,2500,2.026,2501,2.026,2502,1.138,2503,1.138,2504,1.138,2505,1.138,2506,2.026,2507,1.138,2508,1.138,2509,1.138,2510,1.138,2511,1.138,2512,1.138,2513,1.138,2514,2.273,2515,1.277,2516,1.138,2517,1.277,2518,1.277,2519,1.277,2520,1.138,2521,1.138,2522,1.138,2523,3.072,2524,1.138,2525,1.138,2526,1.138,2527,4.488,2528,1.138,2529,1.138,2530,1.138,2531,1.138,2532,1.138,2533,1.138,2534,1.138,2535,2.026,2536,1.138,2537,1.138,2538,1.138,2539,1.277]],["title/dependencies.html",[259,2.648,2540,3.933]],["body/dependencies.html",[0,0.372,21,0.007,30,1.513,32,4.594,39,0.003,60,2.522,64,2.918,67,0.004,68,0.003,100,2.001,195,1.095,199,2.396,250,2.133,251,2.133,252,2.133,259,2.396,277,2.133,387,3.128,447,3.197,456,3.948,621,4.594,719,3.387,809,4.594,1159,4.594,1414,4.594,1415,4.594,1516,2.918,1678,4.594,1773,5.971,1775,3.948,1825,4.224,1826,4.224,1857,4.224,1873,6.129,1874,4.224,1907,4.594,2367,4.594,2541,5.155,2542,7.739,2543,5.155,2544,5.155,2545,5.155,2546,6.877,2547,5.155,2548,6.877,2549,5.155,2550,5.155,2551,5.155,2552,5.155,2553,5.155,2554,5.155,2555,5.155,2556,5.155,2557,5.155,2558,5.155,2559,5.155,2560,5.155,2561,5.155,2562,5.155,2563,5.155,2564,5.155,2565,5.155,2566,5.155,2567,5.155,2568,5.155,2569,5.155,2570,5.155,2571,5.155,2572,5.155,2573,5.155,2574,5.155,2575,5.155,2576,5.155,2577,5.155,2578,5.155,2579,4.594,2580,5.155,2581,5.155,2582,5.155,2583,5.155,2584,5.155,2585,5.155,2586,5.155]],["title/miscellaneous/enumerations.html",[2587,2.48,2588,5.077]],["body/miscellaneous/enumerations.html",[10,0.252,21,0.006,39,0.003,46,2.112,64,3.735,66,2.672,67,0.004,68,0.003,69,3.409,94,4.772,131,3.83,141,2.993,144,3.186,171,3.145,232,2.923,423,5.054,424,5.88,529,5.407,530,5.88,534,3.863,576,5.407,577,5.88,626,5.88,632,4.537,633,5.88,736,3.735,744,3.067,806,4.16,822,5.407,828,3.973,843,3.939,844,3.743,868,5.407,892,3.863,913,4.772,1411,5.88,2587,3.056,2588,4.32,2589,4.848,2590,9.049,2591,4.32,2592,6.598,2593,6.685,2594,8.052,2595,4.848,2596,5.407,2597,6.598,2598,4.848,2599,4.848,2600,4.848,2601,6.598,2602,6.598,2603,7.501,2604,4.848,2605,6.598,2606,4.848]],["title/miscellaneous/functions.html",[2587,2.48,2607,5.077]],["body/miscellaneous/functions.html",[10,0.269,20,1.766,21,0.006,22,1.57,24,1.163,25,1.597,26,1.488,39,0.003,42,2.007,46,1.654,67,0.004,68,0.003,262,3.694,390,6.923,797,3.259,802,6.35,879,5.977,1467,7.366,1585,4.982,2199,5.277,2389,4.235,2487,3.959,2488,6.35,2511,4.606,2512,6.139,2513,4.606,2527,4.235,2528,6.139,2529,6.139,2530,6.139,2531,6.139,2532,6.139,2537,4.606,2538,6.139,2587,3.259,2607,4.606,2608,7.891,2609,5.168,2610,5.168,2611,5.168,2612,4.235,2613,5.168,2614,5.168,2615,5.168,2616,5.168,2617,5.168,2618,5.168,2619,5.168,2620,5.168,2621,5.168,2622,6.139]],["title/index.html",[10,0.204,576,3.223,2623,3.933]],["body/index.html",[15,2.626,21,0.006,39,0.004,52,6.441,67,0.005,68,0.004,259,2.949,637,5.654,823,5.199,1324,4.859,2096,5.654,2624,7.005,2625,7.005,2626,7.955,2627,7.86,2628,6.344,2629,6.344,2630,6.344,2631,6.344,2632,5.654,2633,6.344,2634,6.344,2635,6.344,2636,5.654,2637,6.344,2638,6.344,2639,6.344,2640,6.344,2641,6.344,2642,6.344,2643,8.54,2644,7.86,2645,6.344,2646,6.344,2647,6.344,2648,5.199,2649,6.344,2650,7.86,2651,6.344,2652,6.344,2653,6.344,2654,6.344,2655,6.344,2656,6.344]],["title/modules.html",[258,3.093]],["body/modules.html",[21,0.005,39,0.004,67,0.005,68,0.004,257,4.375,258,2.883,268,3.975,269,4.16,374,4.633,377,4.16,378,3.814,379,4.375,380,4.375,381,4.16,382,4.375,383,4.16,452,4.375,1544,4.375,1647,4.375,2657,9.831,2658,9.831,2659,9.831,2660,9.831]],["title/overview.html",[2661,5.782]],["body/overview.html",[2,0.422,21,0.006,39,0.002,67,0.003,68,0.002,168,1.256,200,3.874,207,3.775,256,0.977,257,5.773,258,1.351,259,1.318,260,1.424,261,1.424,262,1.351,263,1.424,264,1.387,265,2.526,266,2.526,267,2.526,268,5.958,269,6.038,270,2.235,271,1.424,272,1.424,298,1.036,305,4.727,306,4.927,374,7.062,375,2.526,376,2.526,377,6.095,378,5.635,379,5.422,380,5.908,381,5.155,382,5.185,383,5.155,434,4.727,448,2.526,449,2.526,450,2.526,451,2.526,452,5.908,453,3.971,476,4.727,585,2.526,586,2.526,587,2.526,588,5.155,589,5.155,590,5.155,591,5.155,607,1.148,610,5.422,652,2.526,653,2.526,654,2.526,665,2.526,666,2.526,667,2.526,668,4.086,669,5.422,845,5.422,986,4.727,1057,2.526,1058,2.526,1059,2.526,1061,3.608,1062,3.608,1063,3.775,1320,5.155,1327,2.526,1329,2.526,1330,2.526,1331,3.775,1405,3.921,1463,4.549,1544,4.886,1545,2.526,1546,2.526,1547,2.526,1581,5.422,1620,5.422,1647,5.773,1648,2.526,1649,2.526,1650,2.526,1845,2.526,1847,2.526,1887,2.526,1888,2.526,1889,2.526,1956,3.775,2131,3.608,2162,2.526,2163,2.526,2165,2.526,2405,2.526,2406,2.526,2407,2.526,2661,2.526,2662,2.835,2663,2.835,2664,2.835,2665,2.835,2666,2.835]],["title/miscellaneous/typealiases.html",[2587,2.48,2667,5.697]],["body/miscellaneous/typealiases.html",[10,0.335,21,0.006,23,0.346,39,0.004,42,2.504,67,0.005,68,0.004,611,5.285,612,7.05,616,5.747,620,5.747,635,7.076,636,7.076,744,3.691,843,3.155,844,2.998,1080,4.94,1230,4.238,1231,6.507,1239,4.818,1459,6.082,1461,5.747,1470,6.507,1571,5.285,1641,7.076,2487,4.94,2587,4.066,2591,7.076,2593,5.747,2596,5.285,2612,5.285,2622,7.076,2668,6.449,2669,5.747,2670,7.94,2671,7.94,2672,6.449,2673,6.449]],["title/miscellaneous/variables.html",[2587,2.48,2648,4.669]],["body/miscellaneous/variables.html",[6,1.94,7,3.99,10,0.123,21,0.007,23,0.488,33,0.801,34,2.851,35,2.11,36,2.59,37,2.11,39,0.002,41,1.105,46,0.758,49,1.99,50,2.501,52,3.156,53,2.11,57,1.34,67,0.003,68,0.002,76,0.939,92,0.832,110,1.38,124,1.628,129,1.595,130,3.072,131,3.658,204,2.337,205,1.556,222,1.264,232,1.049,282,1.712,331,2.428,336,1.712,345,3.99,388,3.156,389,3.99,457,3.73,520,0.919,522,1.712,534,1.386,536,1.128,629,1.259,697,1.94,708,2.95,729,2.255,830,1.94,843,2.382,844,2.608,847,2.648,860,1.628,1161,3.156,1189,1.94,1190,3.156,1205,1.94,1206,3.156,1210,3.156,1275,1.94,1280,1.712,1324,1.813,1347,3.156,1464,1.813,1469,3.432,1481,1.492,1516,1.34,1517,3.73,1524,1.813,1548,1.813,1573,1.94,1767,1.813,1771,1.813,1781,1.813,1783,1.813,1794,1.813,1820,1.813,1821,3.73,1828,2.95,1829,1.94,1830,1.94,1831,1.94,1838,1.94,1869,2.11,1874,1.94,1895,3.156,1901,2.11,1971,2.95,2196,3.156,2279,3.156,2337,1.813,2339,2.11,2340,2.11,2368,3.156,2479,2.11,2487,1.813,2488,1.94,2489,3.432,2490,4.339,2491,4.339,2492,4.339,2493,2.11,2494,4.339,2495,2.11,2496,4.339,2497,2.11,2498,2.11,2499,4.339,2500,2.11,2501,4.339,2502,4.339,2503,3.432,2504,2.11,2505,4.339,2506,2.11,2507,4.339,2508,4.339,2509,2.11,2510,3.432,2516,2.11,2520,2.11,2521,3.432,2522,3.432,2524,2.11,2525,5,2526,2.11,2527,1.94,2533,3.432,2534,3.432,2535,2.11,2536,3.432,2579,2.11,2587,1.492,2596,1.94,2608,3.432,2612,4.598,2624,3.432,2625,3.432,2626,2.11,2632,2.11,2636,2.11,2648,1.94,2669,2.11,2674,2.367,2675,2.367,2676,3.852,2677,3.852,2678,3.852,2679,2.367,2680,2.367,2681,2.367,2682,2.367,2683,2.367,2684,3.852,2685,3.852,2686,2.367,2687,3.852,2688,3.852,2689,2.367,2690,3.852,2691,2.367,2692,2.367,2693,2.367,2694,3.852,2695,2.367,2696,6.175,2697,2.367,2698,2.367,2699,2.367,2700,2.367,2701,3.852,2702,2.367,2703,2.367,2704,2.367,2705,2.367,2706,2.367,2707,2.367,2708,2.367,2709,2.367,2710,2.367,2711,2.367,2712,2.367,2713,2.367,2714,2.367,2715,4.869,2716,2.367,2717,2.367,2718,2.367,2719,2.367,2720,2.367,2721,2.367,2722,2.367,2723,2.367,2724,2.367,2725,2.367,2726,2.367,2727,2.367,2728,2.367,2729,2.367,2730,2.367,2731,2.367,2732,2.367,2733,2.367,2734,2.367,2735,2.367,2736,2.367,2737,3.852,2738,2.367,2739,2.367,2740,3.852,2741,2.367,2742,2.367,2743,2.367,2744,2.367,2745,2.367,2746,2.367,2747,2.367,2748,2.367,2749,2.367,2750,2.367,2751,2.367,2752,2.367,2753,2.367,2754,2.367,2755,2.367,2756,2.367,2757,2.367,2758,2.367,2759,2.367,2760,2.367,2761,2.367,2762,2.367,2763,2.367,2764,2.367,2765,2.367]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":527,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":2575,"title":{},"body":{"dependencies.html":{}}}],["0.1.20",{"_index":2586,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":2551,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":2553,"title":{},"body":{"dependencies.html":{}}}],["0.2.31",{"_index":2582,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":2552,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":2572,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":2543,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2475,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2486,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2477,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2484,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2476,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2519,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2523,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2514,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2482,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":2515,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2478,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2472,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2474,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2481,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2473,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2483,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2485,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":124,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/QuestionGroup1620179231630.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["1.10.0",{"_index":2568,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":2558,"title":{},"body":{"dependencies.html":{}}}],["1.3.6",{"_index":2571,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":2555,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":2518,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":2752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10h",{"_index":2751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11",{"_index":2663,"title":{},"body":{"overview.html":{}}}],["14",{"_index":2662,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":2585,"title":{},"body":{"dependencies.html":{}}}],["2.2.5",{"_index":2570,"title":{},"body":{"dependencies.html":{}}}],["2.22.1",{"_index":2556,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":2550,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1838,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":2699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["21",{"_index":2666,"title":{},"body":{"overview.html":{}}}],["25",{"_index":2517,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":2664,"title":{},"body":{"overview.html":{}}}],["29997856155",{"_index":35,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":2577,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":2729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":2573,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":2581,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":2566,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":2565,"title":{},"body":{"dependencies.html":{}}}],["4.7.15",{"_index":2547,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1810,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["4xx",{"_index":1802,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["5",{"_index":125,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["5.2.2",{"_index":2541,"title":{},"body":{"dependencies.html":{}}}],["5.2.6",{"_index":2561,"title":{},"body":{"dependencies.html":{}}}],["5.5.3",{"_index":2562,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1806,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["5000",{"_index":2713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["50172241065",{"_index":1830,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":2753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.5.1",{"_index":2548,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":2578,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":2757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.1.5",{"_index":2546,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2545,"title":{},"body":{"dependencies.html":{}}}],["7.6.13",{"_index":2542,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":2665,"title":{},"body":{"overview.html":{}}}],["9",{"_index":2732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.7.0",{"_index":2563,"title":{},"body":{"dependencies.html":{}}}],["989898",{"_index":1831,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["999999",{"_index":37,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["_",{"_index":1275,"title":{},"body":{"injectables/ExamTargetService.html":{},"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["__dirname",{"_index":2715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_rangeoverlapping",{"_index":1943,"title":{},"body":{"injectables/PeriodService.html":{}}}],["_targetmap",{"_index":1264,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["a.exam_agreement_id",{"_index":1373,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["a.grade_id",{"_index":1376,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["a.id",{"_index":1987,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["a.position",{"_index":897,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["a.score",{"_index":1353,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ability",{"_index":616,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory",{"_index":657,"title":{},"body":{"modules/CaslModule.html":{}}}],["ability.factory.ts",{"_index":612,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:32",{"_index":615,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":617,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":618,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abstract",{"_index":2376,"title":{},"body":{"classes/UploaderService.html":{}}}],["accessors",{"_index":855,"title":{},"body":{"classes/Exam.html":{},"classes/ExamTargetNode.html":{},"injectables/FirebaseAdmin.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["accesstoken",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":2736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["action",{"_index":159,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["action.enum",{"_index":628,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["action.enum.ts",{"_index":2592,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["active",{"_index":529,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamRepository.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":153,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["addmonths",{"_index":1822,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["addtargets",{"_index":1210,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addtargets.map((target",{"_index":1211,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["admin",{"_index":64,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["admin.constants",{"_index":1518,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{}}}],["admin.constants.ts",{"_index":2522,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.module",{"_index":1657,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["admin.module.ts",{"_index":1549,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:14",{"_index":1552,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:27",{"_index":1557,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider",{"_index":1560,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider.ts",{"_index":1466,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["admin.provider.ts:17",{"_index":1483,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:20",{"_index":1495,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:24",{"_index":1513,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:28",{"_index":1515,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:32",{"_index":1485,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:36",{"_index":1488,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:40",{"_index":1493,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:44",{"_index":1497,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:48",{"_index":1499,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:52",{"_index":1501,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:56",{"_index":1503,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:60",{"_index":1505,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:64",{"_index":1507,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:68",{"_index":1509,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:72",{"_index":1492,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:8",{"_index":1482,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin/firebase",{"_index":1548,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin/providers/firebase",{"_index":1465,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["adminuser.ts",{"_index":7,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminuser.ts:37",{"_index":19,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser.ts:8",{"_index":28,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser1620299822480",{"_index":1,"title":{"classes/AdminUser1620299822480.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{}}}],["affected",{"_index":358,"title":{},"body":{"injectables/AnswerService.html":{}}}],["affected.raw.affectedrows",{"_index":360,"title":{},"body":{"injectables/AnswerService.html":{}}}],["affectedrows",{"_index":2313,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["afterload",{"_index":877,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["age=31536000",{"_index":1680,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["agreed",{"_index":1011,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{}}}],["agreement",{"_index":892,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["agreement.controller",{"_index":1074,"title":{},"body":{"modules/ExamModule.html":{}}}],["agreement.controller.ts",{"_index":946,"title":{},"body":{"controllers/ExamAgreementController.html":{},"coverage.html":{}}}],["agreement.controller.ts:27",{"_index":951,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["agreement.controller.ts:36",{"_index":957,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["agreement.dto",{"_index":722,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["agreement.dto.ts",{"_index":714,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreementDto.html":{},"classes/UpdateExamAgreementDto.html":{},"coverage.html":{}}}],["agreement.dto.ts:12",{"_index":717,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["agreement.dto.ts:13",{"_index":2353,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{}}}],["agreement.dto.ts:6",{"_index":969,"title":{},"body":{"classes/ExamAgreementDto.html":{}}}],["agreement.dto.ts:8",{"_index":2354,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{}}}],["agreement.dto.ts:9",{"_index":967,"title":{},"body":{"classes/ExamAgreementDto.html":{}}}],["agreement.entity",{"_index":109,"title":{},"body":{"classes/Answer.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/User.html":{}}}],["agreement.entity.ts",{"_index":907,"title":{},"body":{"classes/ExamAgreement.html":{},"coverage.html":{}}}],["agreement.entity.ts:12",{"_index":918,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:15",{"_index":909,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:18",{"_index":912,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:25",{"_index":914,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:28",{"_index":916,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:31",{"_index":911,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:34",{"_index":915,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:37",{"_index":910,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:40",{"_index":920,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.exam",{"_index":893,"title":{},"body":{"classes/Exam.html":{}}}],["agreement.repository",{"_index":1004,"title":{},"body":{"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{}}}],["agreement.repository.ts",{"_index":978,"title":{},"body":{"classes/ExamAgreementRepository.html":{},"coverage.html":{}}}],["agreement.service",{"_index":323,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{}}}],["agreement.service.ts",{"_index":980,"title":{},"body":{"injectables/ExamAgreementService.html":{},"coverage.html":{}}}],["agreement.service.ts:100",{"_index":997,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:22",{"_index":987,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:31",{"_index":991,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:53",{"_index":1001,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:72",{"_index":990,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:77",{"_index":999,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:84",{"_index":994,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.status",{"_index":1015,"title":{},"body":{"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{}}}],["agreement.user",{"_index":2386,"title":{},"body":{"classes/User.html":{}}}],["agreements",{"_index":851,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamService.html":{}}}],["agreementsbydateinterval",{"_index":981,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreementsbydateinterval(start",{"_index":989,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["aliases",{"_index":2668,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow_anonymous",{"_index":526,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{}}}],["allowanonymous",{"_index":726,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{}}}],["allowedorigins",{"_index":2489,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["alreadyagreed",{"_index":1008,"title":{},"body":{"injectables/ExamAgreementService.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{}}}],["alter",{"_index":296,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["andwhere",{"_index":1137,"title":{},"body":{"classes/ExamRepository.html":{}}}],["andwhere(':date",{"_index":1126,"title":{},"body":{"classes/ExamRepository.html":{}}}],["andwhere('exam.created_at",{"_index":1133,"title":{},"body":{"classes/ExamRepository.html":{}}}],["andwhere('user.id",{"_index":1749,"title":{},"body":{"classes/GradeRepository.html":{}}}],["anonymous",{"_index":545,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateExamAgreementDto.html":{},"interfaces/CsvLineRow.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"injectables/ExportationRepository.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["answer",{"_index":69,"title":{"classes/Answer.html":{}},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExportationRepository.html":{},"classes/Grade.html":{},"classes/Question.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answer.controller",{"_index":275,"title":{},"body":{"modules/AnswerModule.html":{}}}],["answer.dto",{"_index":210,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{}}}],["answer.dto.ts",{"_index":686,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["answer.dto.ts:15",{"_index":691,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:18",{"_index":689,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:22",{"_index":694,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:26",{"_index":688,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.entity",{"_index":244,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer.grade",{"_index":1724,"title":{},"body":{"classes/Grade.html":{}}}],["answer.question",{"_index":2030,"title":{},"body":{"classes/Question.html":{}}}],["answer.service",{"_index":208,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{}}}],["answer.ts",{"_index":128,"title":{},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["answer.ts:13",{"_index":133,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer.ts:4",{"_index":132,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer.ts:6",{"_index":134,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer/answer.module",{"_index":395,"title":{},"body":{"modules/AppModule.html":{}}}],["answer/entities/answer.entity",{"_index":622,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["answer1622421768424",{"_index":126,"title":{"classes/Answer1622421768424.html":{}},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["answer:12",{"_index":240,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:15",{"_index":241,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:18",{"_index":237,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:21",{"_index":239,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:24",{"_index":236,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:27",{"_index":238,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer_grade",{"_index":2599,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["answercontroller",{"_index":167,"title":{"controllers/AnswerController.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"coverage.html":{}}}],["answerdto",{"_index":342,"title":{},"body":{"injectables/AnswerService.html":{}}}],["answerdto.type",{"_index":347,"title":{},"body":{"injectables/AnswerService.html":{}}}],["answered",{"_index":1082,"title":{},"body":{"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["answergrade",{"_index":144,"title":{"classes/AnswerGrade.html":{}},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answergraderepository",{"_index":245,"title":{"classes/AnswerGradeRepository.html":{}},"body":{"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"coverage.html":{}}}],["answermodule",{"_index":257,"title":{"modules/AnswerModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["answerrepository",{"_index":278,"title":{"classes/AnswerRepository.html":{}},"body":{"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"coverage.html":{}}}],["answers",{"_index":339,"title":{},"body":{"injectables/AnswerService.html":{},"classes/Grade.html":{},"classes/Question.html":{}}}],["answerscorecheck.ts",{"_index":290,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"coverage.html":{}}}],["answerscorecheck.ts:13",{"_index":292,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{}}}],["answerscorecheck.ts:4",{"_index":291,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{}}}],["answerscorecheck.ts:6",{"_index":293,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{}}}],["answerscorecheck1624750140568",{"_index":288,"title":{"classes/AnswerScoreCheck1624750140568.html":{}},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"coverage.html":{}}}],["answerservice",{"_index":207,"title":{"injectables/AnswerService.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"coverage.html":{},"overview.html":{}}}],["answertype",{"_index":94,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"miscellaneous/enumerations.html":{}}}],["answertype.answer",{"_index":692,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answertype.answer_grade",{"_index":348,"title":{},"body":{"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{}}}],["anônimo",{"_index":1394,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["api",{"_index":2626,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":196,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{}}}],["apiexcludeendpoint",{"_index":1221,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["apihideproperty",{"_index":968,"title":{},"body":{"classes/ExamAgreementDto.html":{}}}],["apinotfoundresponse",{"_index":2057,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiokresponse",{"_index":197,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiproperty",{"_index":785,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["apiproperty({type",{"_index":769,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["apitags",{"_index":198,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["apitags('answer",{"_index":214,"title":{},"body":{"controllers/AnswerController.html":{}}}],["apitags('auth",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('exam",{"_index":1046,"title":{},"body":{"controllers/ExamController.html":{}}}],["apitags('examagreement",{"_index":963,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["apitags('examtarget",{"_index":1222,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["apitags('exportation",{"_index":1323,"title":{},"body":{"controllers/ExportationController.html":{}}}],["apitags('question",{"_index":2065,"title":{},"body":{"controllers/QuestionController.html":{}}}],["apitags('questiongroup",{"_index":2136,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["apitags('upload",{"_index":2371,"title":{},"body":{"controllers/UploadController.html":{}}}],["apitags('user",{"_index":2398,"title":{},"body":{"controllers/UserController.html":{}}}],["aplica",{"_index":1398,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["app",{"_index":1467,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/functions.html":{}}}],["appability",{"_index":636,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["appcheck",{"_index":1468,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["appcontroller",{"_index":361,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applyglobals",{"_index":2528,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyglobals(app",{"_index":2613,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applyperflayer",{"_index":2529,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyperflayer(app",{"_index":2614,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applysecuritylayer",{"_index":2530,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applysecuritylayer(app",{"_index":2615,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appmodule",{"_index":374,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":1575,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["argumentshost",{"_index":1768,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["arr",{"_index":2619,"title":{},"body":{"miscellaneous/functions.html":{}}}],["array",{"_index":1985,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["array.from(map.values()).map((target",{"_index":1287,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["arrayminsize",{"_index":751,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["arrayminsize(1",{"_index":758,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["asc",{"_index":1386,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["async",{"_index":13,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"controllers/UploadController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["auth",{"_index":60,"title":{"classes/Auth.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["auth.constants",{"_index":1896,"title":{},"body":{"classes/LoginDto.html":{}}}],["auth.dto",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["auth.dto.ts",{"_index":706,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["auth.password",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FirebaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth.service.ts",{"_index":1583,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:14",{"_index":1603,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:27",{"_index":1597,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:31",{"_index":1593,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:37",{"_index":1601,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:44",{"_index":1595,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:9",{"_index":1590,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.ts",{"_index":417,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["auth.ts:15",{"_index":419,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:4",{"_index":418,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:6",{"_index":420,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth/auth.module",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["auth/dtos/create",{"_index":814,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["auth/guards/jwt.guard",{"_index":2058,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["auth1619445806509",{"_index":415,"title":{"classes/Auth1619445806509.html":{}},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["authcontroller",{"_index":429,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":441,"title":{"classes/AuthDto.html":{}},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["authdto.login",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto:6",{"_index":710,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["authguard",{"_index":1856,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('jwt",{"_index":1858,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authmodule",{"_index":377,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["authrepository",{"_index":459,"title":{"classes/AuthRepository.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authservice",{"_index":434,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["auto_increment",{"_index":143,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["auxiliary.ts",{"_index":516,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["auxiliary.ts:29",{"_index":566,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:4",{"_index":517,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:6",{"_index":519,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:60",{"_index":518,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["auxiliary/auxiliary.module",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["auxiliary1620477175799",{"_index":514,"title":{"classes/Auxiliary1620477175799.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["auxiliary1624416663574",{"_index":564,"title":{"classes/Auxiliary1624416663574.html":{}},"body":{"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["auxiliarymodule",{"_index":378,"title":{"modules/AuxiliaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["avaliacao",{"_index":2605,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":43,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{}}}],["b",{"_index":896,"title":{},"body":{"classes/Exam.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["b.id",{"_index":1988,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["b.position",{"_index":898,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["baseentity",{"_index":2343,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["baserepository",{"_index":248,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["basic",{"_index":2557,"title":{},"body":{"dependencies.html":{}}}],["batchuser",{"_index":309,"title":{"interfaces/BatchUser.html":{}},"body":{"injectables/AnswerService.html":{},"interfaces/BatchUser.html":{},"coverage.html":{}}}],["bcrypt",{"_index":31,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcrypt.compare(logindto.password",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":56,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcrypt.hash(createauthdto.password",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(process.env.admin_password",{"_index":58,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcryptjs",{"_index":32,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"dependencies.html":{}}}],["between",{"_index":123,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{}}}],["between(start",{"_index":1019,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["body",{"_index":189,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["body(new",{"_index":220,"title":{},"body":{"controllers/AnswerController.html":{}}}],["bool",{"_index":859,"title":{},"body":{"classes/Exam.html":{},"injectables/PeriodService.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["boolean",{"_index":715,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamTargetNode.html":{},"interfaces/FileSendDto.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["bootstrap",{"_index":262,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["br",{"_index":1420,"title":{},"body":{"injectables/ExportationService.html":{}}}],["brazilian",{"_index":809,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["break",{"_index":643,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["browse",{"_index":2660,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2657,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1674,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{}}}],["buffer",{"_index":1439,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{},"interfaces/FirebaseStorageUploadDto.html":{}}}],["buffer.from(await",{"_index":1428,"title":{},"body":{"injectables/ExportationService.html":{}}}],["build",{"_index":637,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"index.html":{}}}],["builder",{"_index":1426,"title":{},"body":{"injectables/ExportationService.html":{}}}],["builder.tostring",{"_index":1429,"title":{},"body":{"injectables/ExportationService.html":{}}}],["buildswaggerdoc",{"_index":2531,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["buildswaggerdoc(app",{"_index":2616,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cachecontrol",{"_index":1679,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["callback",{"_index":2622,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["callhandler",{"_index":1903,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["can(action.manage",{"_index":642,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.read",{"_index":645,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.update",{"_index":646,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["canagree",{"_index":1083,"title":{},"body":{"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{}}}],["cannot(action.delete",{"_index":647,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["cascade",{"_index":581,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{}}}],["case",{"_index":640,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["casl/ability",{"_index":621,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["casl/casl.module",{"_index":458,"title":{},"body":{"modules/AuthModule.html":{}}}],["caslabilityfactory",{"_index":610,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslaction",{"_index":626,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["caslmodule",{"_index":452,"title":{"modules/CaslModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["caslsubjects",{"_index":635,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["catch",{"_index":1614,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["catch((e",{"_index":1284,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["catch(exception",{"_index":1765,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["catch(httpexception",{"_index":1782,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["cert",{"_index":1573,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":552,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["check",{"_index":112,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{}}}],["check(`\"score",{"_index":121,"title":{},"body":{"classes/Answer.html":{}}}],["childentity",{"_index":243,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["childs",{"_index":1232,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["classvalidatorex",{"_index":1811,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["classvalidatorex.error",{"_index":1815,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["classvalidatorex.message",{"_index":1814,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["cli",{"_index":2724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloud",{"_index":1621,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["cls",{"_index":251,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["cluster_answermodule",{"_index":265,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_answermodule_imports",{"_index":267,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_answermodule_providers",{"_index":266,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":375,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":376,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":448,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":449,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":450,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":451,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule",{"_index":585,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_exports",{"_index":587,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_providers",{"_index":586,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":652,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":653,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":654,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":665,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_exports",{"_index":667,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_providers",{"_index":666,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_exammodule",{"_index":1057,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_exports",{"_index":1059,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_imports",{"_index":1060,"title":{},"body":{"modules/ExamModule.html":{}}}],["cluster_exammodule_providers",{"_index":1058,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exportationmodule",{"_index":1327,"title":{},"body":{"modules/ExportationModule.html":{},"overview.html":{}}}],["cluster_exportationmodule_exports",{"_index":1329,"title":{},"body":{"modules/ExportationModule.html":{},"overview.html":{}}}],["cluster_exportationmodule_imports",{"_index":1328,"title":{},"body":{"modules/ExportationModule.html":{}}}],["cluster_exportationmodule_providers",{"_index":1330,"title":{},"body":{"modules/ExportationModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule",{"_index":1545,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule_exports",{"_index":1546,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule_providers",{"_index":1547,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebasemodule",{"_index":1648,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_exports",{"_index":1650,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_providers",{"_index":1649,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_inframodule",{"_index":1845,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_exports",{"_index":1847,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_imports",{"_index":1846,"title":{},"body":{"modules/InfraModule.html":{}}}],["cluster_loggermodule",{"_index":1887,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1889,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1888,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule",{"_index":2162,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule_exports",{"_index":2165,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule_imports",{"_index":2164,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["cluster_questiongroupmodule_providers",{"_index":2163,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2405,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2406,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2407,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":535,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{}}}],["code_id",{"_index":539,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["collection",{"_index":1640,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type",{"_index":1643,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type.ts",{"_index":2670,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["column",{"_index":113,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["column({type",{"_index":85,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["command",{"_index":2655,"title":{},"body":{"index.html":{}}}],["completed",{"_index":2454,"title":{},"body":{"injectables/UserService.html":{}}}],["compose",{"_index":2644,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2554,"title":{},"body":{"dependencies.html":{}}}],["computador",{"_index":2642,"title":{},"body":{"index.html":{}}}],["config",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{}}}],["configmodule",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/InfraModule.html":{}}}],["configmodule.forroot",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('firebase",{"_index":1853,"title":{},"body":{"modules/InfraModule.html":{}}}],["configservice.get(databaseconfigkey",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(jwtconfigkey",{"_index":466,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(jwtconfigkey)!.secret",{"_index":1883,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["conflictexception",{"_index":1002,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["conflictexception('already",{"_index":1010,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["connection",{"_index":1339,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["console.error(e",{"_index":2451,"title":{},"body":{"injectables/UserService.html":{}}}],["console.error(exception",{"_index":1809,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["console.log('create",{"_index":2452,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":33,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":154,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["constructor",{"_index":303,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(firebase_options",{"_index":1519,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(@injectconnection",{"_index":1350,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["constructor(answerrepository",{"_index":304,"title":{},"body":{"injectables/AnswerService.html":{}}}],["constructor(authrepository",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":1864,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(configservice",{"_index":1762,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructor(connection",{"_index":1338,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["constructor(firebaseadmin",{"_index":1589,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{}}}],["constructor(graderepository",{"_index":1752,"title":{},"body":{"injectables/GradeService.html":{}}}],["constructor(options",{"_index":1480,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(periodrepository",{"_index":1931,"title":{},"body":{"injectables/PeriodService.html":{}}}],["constructor(private",{"_index":216,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["constructor(repository",{"_index":985,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExportationService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["constructor(storageservice",{"_index":1687,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["constructor(targetnodefactory",{"_index":1294,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["constructor(userrepository",{"_index":2424,"title":{},"body":{"injectables/UserService.html":{}}}],["contenttype",{"_index":1672,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{}}}],["controller",{"_index":166,"title":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('answer",{"_index":213,"title":{},"body":{"controllers/AnswerController.html":{}}}],["controller('auth",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('exam",{"_index":962,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{}}}],["controller('export",{"_index":1322,"title":{},"body":{"controllers/ExportationController.html":{}}}],["controller('question",{"_index":2064,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["controller('upload",{"_index":2370,"title":{},"body":{"controllers/UploadController.html":{}}}],["controller('user",{"_index":2397,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":168,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"modules/InfraModule.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers/app.controller",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["controllers/auth.controller",{"_index":462,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/exam",{"_index":1072,"title":{},"body":{"modules/ExamModule.html":{}}}],["controllers/exam.controller",{"_index":1066,"title":{},"body":{"modules/ExamModule.html":{}}}],["controllers/question",{"_index":2167,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/question.controller",{"_index":2169,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/upload.controller",{"_index":1850,"title":{},"body":{"modules/InfraModule.html":{}}}],["controllers/user.controller",{"_index":2409,"title":{},"body":{"modules/UserModule.html":{}}}],["copy",{"_index":2113,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copy(copyquestiongroupdto",{"_index":2114,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copying",{"_index":2649,"title":{},"body":{"index.html":{}}}],["copyquestiongroupdto",{"_index":658,"title":{"classes/CopyQuestionGroupDto.html":{}},"body":{"classes/CopyQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["copytogroup",{"_index":2261,"title":{},"body":{"injectables/QuestionService.html":{}}}],["copytogroup(group",{"_index":2266,"title":{},"body":{"injectables/QuestionService.html":{}}}],["core/core.module",{"_index":396,"title":{},"body":{"modules/AppModule.html":{}}}],["core/decorators/is",{"_index":811,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["core/entities/ff.entity",{"_index":117,"title":{},"body":{"classes/Answer.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["coremodule",{"_index":379,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["cors",{"_index":2700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corsconfig",{"_index":2490,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsconfigkey",{"_index":2491,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":2697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["count",{"_index":1837,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course",{"_index":534,"title":{"classes/Course.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["course.entity",{"_index":2334,"title":{},"body":{"classes/Subject.html":{}}}],["course.id",{"_index":1840,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course_id",{"_index":540,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course`(`id",{"_index":560,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["courseid",{"_index":2328,"title":{},"body":{"classes/Subject.html":{}}}],["coverage",{"_index":2468,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":2651,"title":{},"body":{"index.html":{}}}],["cpf",{"_index":34,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["create",{"_index":171,"title":{},"body":{"controllers/AnswerController.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"miscellaneous/enumerations.html":{}}}],["create(@body",{"_index":1047,"title":{},"body":{"controllers/ExamController.html":{}}}],["create(createexamdto",{"_index":1027,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["create(createquestiongroupdto",{"_index":2118,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["create(examid",{"_index":174,"title":{},"body":{"controllers/AnswerController.html":{}}}],["createagreement",{"_index":947,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createagreement(createagreementdto",{"_index":949,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createagreementdto",{"_index":952,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createanswerdto",{"_index":177,"title":{"classes/CreateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["createanswerdtos",{"_index":176,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["createanswerdtos.map((dto",{"_index":333,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createanswerdtos.map(async",{"_index":341,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createauth",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauth(createauthdto",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauthdto",{"_index":479,"title":{"classes/CreateAuthDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["createauthdto.login",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["createbatch",{"_index":300,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createbatch(createanswerdtos",{"_index":308,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createcsv",{"_index":1402,"title":{},"body":{"injectables/ExportationService.html":{}}}],["createcsv(csvlines",{"_index":1407,"title":{},"body":{"injectables/ExportationService.html":{}}}],["created_at",{"_index":137,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["createdat",{"_index":79,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdatecolumn",{"_index":101,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdto",{"_index":346,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createexamagreementdto",{"_index":712,"title":{"classes/CreateExamAgreementDto.html":{}},"body":{"classes/CreateExamAgreementDto.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"coverage.html":{}}}],["createexamdto",{"_index":724,"title":{"classes/CreateExamDto.html":{}},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["createforuser",{"_index":613,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":614,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createparamdecorator",{"_index":2741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquestion",{"_index":746,"title":{"classes/CreateQuestion.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["createquestion(createquestiondto",{"_index":2036,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestiondto",{"_index":754,"title":{"classes/CreateQuestionDto.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["createquestiongroupdto",{"_index":788,"title":{"classes/CreateQuestionGroupDto.html":{}},"body":{"classes/CreateQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["createquestiongroupdto.examid",{"_index":2207,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["createquestions",{"_index":2033,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestions(groupid",{"_index":2038,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestionsdto",{"_index":757,"title":{"classes/CreateQuestionsDto.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["createquestionsdto.questions.map((dto",{"_index":2285,"title":{},"body":{"injectables/QuestionService.html":{}}}],["createstudent",{"_index":2006,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createstudent(createdto",{"_index":2008,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createuser",{"_index":1585,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuser(@body",{"_index":2399,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createdto",{"_index":1591,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["createuser(createuserdto",{"_index":2389,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["createuserbytype",{"_index":2419,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserbytype(createuserdto",{"_index":2427,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":797,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuserdto.enrollment",{"_index":2447,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":2448,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.type",{"_index":2455,"title":{},"body":{"injectables/UserService.html":{}}}],["credential",{"_index":1526,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["crypto",{"_index":1696,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["csv",{"_index":1415,"title":{},"body":{"injectables/ExportationService.html":{},"dependencies.html":{}}}],["csvline",{"_index":816,"title":{"interfaces/CsvLine.html":{}},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"coverage.html":{}}}],["csvline.anonymous",{"_index":1393,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.group_title",{"_index":1388,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.is_personal",{"_index":1390,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.observation",{"_index":1399,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.question_statement",{"_index":1392,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.score",{"_index":1397,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.subject_title",{"_index":1389,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.unique_code",{"_index":1400,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.user_enrollment",{"_index":1395,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvlinerow",{"_index":831,"title":{"interfaces/CsvLineRow.html":{}},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{},"coverage.html":{}}}],["csvlines",{"_index":1352,"title":{},"body":{"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{}}}],["csvlines.length",{"_index":1431,"title":{},"body":{"injectables/ExportationService.html":{}}}],["csvlines.map((csvline",{"_index":1387,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ctx",{"_index":1783,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1786,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ctx.getresponse",{"_index":1785,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp(6",{"_index":139,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["customlogger",{"_index":845,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["código",{"_index":819,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["data",{"_index":1436,"title":{},"body":{"injectables/ExportationService.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"injectables/PayloadInterceptor.html":{}}}],["data.length",{"_index":1444,"title":{},"body":{"injectables/ExportationService.html":{}}}],["database",{"_index":1469,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/variables.html":{}}}],["database(url",{"_index":1487,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["database/migrations/*.{js,ts",{"_index":2718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":2494,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseconfigkey",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseurl",{"_index":1522,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["date",{"_index":100,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":1789,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["datetime",{"_index":524,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/Period.html":{}}}],["datetime(6",{"_index":138,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["de",{"_index":823,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{},"index.html":{}}}],["declarations",{"_index":261,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":1577,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["decoded.email",{"_index":1612,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.email_verified",{"_index":1613,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.uid",{"_index":1611,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decorators",{"_index":82,"title":{},"body":{"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["decoratos/get",{"_index":2394,"title":{},"body":{"controllers/UserController.html":{}}}],["default",{"_index":130,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateAnswerDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Student.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["default_port",{"_index":2533,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultagreementstatus",{"_index":1138,"title":{},"body":{"classes/ExamRepository.html":{}}}],["defaultname",{"_index":1828,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":66,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/FirebaseAdmin.html":{},"classes/PeriodIndex1624547816204.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":182,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["delete(':id')@apiokresponse()@apinotfoundresponse",{"_index":2047,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["deleted_at",{"_index":142,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["deletedat",{"_index":80,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deletedatecolumn",{"_index":104,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deleteuser",{"_index":1586,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["deleteuser(uid",{"_index":1594,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["dependencies",{"_index":259,"title":{"dependencies.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":522,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["detectsubjecttype",{"_index":649,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["development",{"_index":2636,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dfs",{"_index":1233,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["dfs(type",{"_index":1237,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["disciplina",{"_index":821,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["distinct",{"_index":1094,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExportationRepository.html":{}}}],["distinct(true",{"_index":1121,"title":{},"body":{"classes/ExamRepository.html":{}}}],["docker",{"_index":2643,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":2469,"title":{},"body":{"coverage.html":{}}}],["dont",{"_index":1801,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["down",{"_index":14,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["down(queryrunner",{"_index":16,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["drop",{"_index":164,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["dsn",{"_index":2761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":1153,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionService.html":{}}}],["dto.questionid",{"_index":334,"title":{},"body":{"injectables/AnswerService.html":{}}}],["dto/create",{"_index":209,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["dto/update",{"_index":211,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["dtos/auth.dto",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["dtos/copy",{"_index":2135,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["dtos/create",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/file",{"_index":1698,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["dtos/find",{"_index":1116,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/QuestionGroupService.html":{}}}],["dtos/firebase",{"_index":1668,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["dtos/login.dto",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/question",{"_index":1968,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["dtos/reorder",{"_index":2060,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["dtos/update",{"_index":958,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["dtos/user.dto",{"_index":2442,"title":{},"body":{"injectables/UserService.html":{}}}],["duration",{"_index":1944,"title":{},"body":{"injectables/PeriodService.html":{}}}],["dynamicmodule",{"_index":1553,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["e",{"_index":2450,"title":{},"body":{"injectables/UserService.html":{}}}],["ea",{"_index":1367,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.anonymous",{"_index":1362,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.exam_id",{"_index":1368,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.id",{"_index":1374,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.observation",{"_index":1363,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.user_id",{"_index":1372,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.uuid",{"_index":1364,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["each",{"_index":738,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["el.id",{"_index":1132,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ela",{"_index":779,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["em",{"_index":2096,"title":{},"body":{"classes/QuestionGroup.html":{},"index.html":{}}}],["email",{"_index":1579,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{}}}],["emailverified",{"_index":1580,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{}}}],["emit",{"_index":1799,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["encoding",{"_index":1445,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{}}}],["end",{"_index":857,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/PeriodService.html":{}}}],["enda",{"_index":1946,"title":{},"body":{"injectables/PeriodService.html":{}}}],["endb",{"_index":1948,"title":{},"body":{"injectables/PeriodService.html":{}}}],["ended_at",{"_index":525,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["endedat",{"_index":727,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{}}}],["endofmonth",{"_index":1823,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["endofmonth(addmonths(new",{"_index":1834,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["engine=innodb",{"_index":151,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["enrollment",{"_index":36,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{},"classes/UserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["enrollment.decorator",{"_index":812,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enrollment.decorator.ts",{"_index":2512,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["enrollmentlength",{"_index":2510,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":2714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/answer",{"_index":253,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entities/answer.entity",{"_index":212,"title":{},"body":{"controllers/AnswerController.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{}}}],["entities/auth.entity",{"_index":468,"title":{},"body":{"classes/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["entities/exam",{"_index":959,"title":{},"body":{"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{}}}],["entities/exam.entity",{"_index":1043,"title":{},"body":{"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"interfaces/FindExamByUserDto.html":{}}}],["entities/grade.entity",{"_index":1736,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["entities/period.entity",{"_index":1737,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{}}}],["entities/professor.entity",{"_index":1738,"title":{},"body":{"classes/GradeRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{}}}],["entities/question",{"_index":1970,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["entities/question.entity",{"_index":2061,"title":{},"body":{"controllers/QuestionController.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{}}}],["entities/student.entity",{"_index":1739,"title":{},"body":{"classes/GradeRepository.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{}}}],["entities/user.entity",{"_index":2395,"title":{},"body":{"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":114,"title":{},"body":{"classes/Answer.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["entity('answer",{"_index":120,"title":{},"body":{"classes/Answer.html":{}}}],["entity('auth",{"_index":414,"title":{},"body":{"classes/Auth.html":{}}}],["entity('course",{"_index":683,"title":{},"body":{"classes/Course.html":{}}}],["entity('exam",{"_index":889,"title":{},"body":{"classes/Exam.html":{}}}],["entity('exam_agreement",{"_index":924,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["entity('exam_target",{"_index":1187,"title":{},"body":{"classes/ExamTarget.html":{}}}],["entity('grade",{"_index":1723,"title":{},"body":{"classes/Grade.html":{}}}],["entity('period",{"_index":1917,"title":{},"body":{"classes/Period.html":{}}}],["entity('subject",{"_index":2335,"title":{},"body":{"classes/Subject.html":{}}}],["entity('user",{"_index":2384,"title":{},"body":{"classes/User.html":{}}}],["entity.{js,ts",{"_index":2716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entitylike",{"_index":1164,"title":{},"body":{"injectables/ExamService.html":{}}}],["entityrepository",{"_index":249,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(answer",{"_index":287,"title":{},"body":{"classes/AnswerRepository.html":{}}}],["entityrepository(answergrade",{"_index":255,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entityrepository(auth",{"_index":469,"title":{},"body":{"classes/AuthRepository.html":{}}}],["entityrepository(exam",{"_index":1118,"title":{},"body":{"classes/ExamRepository.html":{}}}],["entityrepository(examagreement",{"_index":979,"title":{},"body":{"classes/ExamAgreementRepository.html":{}}}],["entityrepository(examtarget",{"_index":1262,"title":{},"body":{"classes/ExamTargetRepository.html":{}}}],["entityrepository(grade",{"_index":1741,"title":{},"body":{"classes/GradeRepository.html":{}}}],["entityrepository(period",{"_index":1927,"title":{},"body":{"classes/PeriodRepository.html":{}}}],["entityrepository(professor",{"_index":2004,"title":{},"body":{"classes/ProfessorRepository.html":{}}}],["entityrepository(question",{"_index":2259,"title":{},"body":{"classes/QuestionRepository.html":{}}}],["entityrepository(questiongroup",{"_index":2177,"title":{},"body":{"classes/QuestionGroupRepository.html":{}}}],["entityrepository(student",{"_index":2320,"title":{},"body":{"classes/StudentRepository.html":{}}}],["entityrepository(user",{"_index":2414,"title":{},"body":{"classes/UserRepository.html":{}}}],["enum",{"_index":95,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Professor.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["enum/user",{"_index":813,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["enumerations",{"_index":2588,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/answer",{"_index":118,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{}}}],["enums/casl",{"_index":627,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["enums/exam",{"_index":743,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{}}}],["enums/exportation",{"_index":1416,"title":{},"body":{"injectables/ExportationService.html":{}}}],["env",{"_index":52,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["env.example",{"_index":2650,"title":{},"body":{"index.html":{}}}],["environment",{"_index":2647,"title":{},"body":{"index.html":{}}}],["err",{"_index":1615,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["error",{"_index":1781,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["error('admin_password",{"_index":51,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["error('method",{"_index":1528,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["error('needs",{"_index":2738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["essa",{"_index":776,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["essas",{"_index":2094,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["esses",{"_index":2639,"title":{},"body":{"index.html":{}}}],["estudante",{"_index":2765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["et",{"_index":1098,"title":{},"body":{"classes/ExamRepository.html":{}}}],["et.exam_id",{"_index":1100,"title":{},"body":{"classes/ExamRepository.html":{}}}],["et.exam_target_id",{"_index":1103,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ex",{"_index":1366,"title":{},"body":{"injectables/ExportationRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.body",{"_index":1816,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.deleted_at",{"_index":1384,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ex.id",{"_index":1369,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ex.message",{"_index":1813,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.name",{"_index":1797,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.stack",{"_index":1795,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exam",{"_index":520,"title":{"classes/Exam.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateExamAgreementDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationRepository.html":{},"interfaces/FindExamByUserDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateExamAgreementDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam.constants",{"_index":1162,"title":{},"body":{"injectables/ExamService.html":{}}}],["exam.created_at",{"_index":1108,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.deleted_at",{"_index":1109,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.dto",{"_index":1042,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{}}}],["exam.dto.ts",{"_index":725,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["exam.dto.ts:16",{"_index":740,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:20",{"_index":732,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:24",{"_index":735,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:28",{"_index":734,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:32",{"_index":731,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:37",{"_index":739,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.endedat",{"_index":1128,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.entity",{"_index":923,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["exam.id",{"_index":1099,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.period",{"_index":1172,"title":{},"body":{"injectables/ExamService.html":{},"classes/Period.html":{},"injectables/PersonalQuestionGroup.html":{}}}],["exam.service",{"_index":1005,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["exam.startedat",{"_index":1127,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.status",{"_index":1107,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.targets",{"_index":1168,"title":{},"body":{"injectables/ExamService.html":{}}}],["exam.ts",{"_index":903,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam.ts:10",{"_index":905,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:4",{"_index":904,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:6",{"_index":906,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam/entities/exam",{"_index":624,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/entities/exam.entity",{"_index":623,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/exam.module",{"_index":394,"title":{},"body":{"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{}}}],["exam1620478273991",{"_index":901,"title":{"classes/Exam1620478273991.html":{}},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam_agreement",{"_index":543,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExportationRepository.html":{}}}],["exam_agreement_id",{"_index":145,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["exam_agreement`(`id",{"_index":158,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["exam_id",{"_index":550,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/GradeIndex1624560625346.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["exam_not_found",{"_index":1161,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam_period",{"_index":1140,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam_target",{"_index":1102,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{}}}],["exam_target_id",{"_index":1198,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam_target`(`id",{"_index":1203,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam_targets_exam_target",{"_index":1097,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{}}}],["exam`(`id",{"_index":556,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{}}}],["examagreement",{"_index":74,"title":{"classes/ExamAgreement.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"coverage.html":{}}}],["examagreement.ts",{"_index":931,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["examagreement.ts:21",{"_index":933,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement.ts:4",{"_index":932,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement.ts:6",{"_index":934,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement1622332886234",{"_index":929,"title":{"classes/ExamAgreement1622332886234.html":{}},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["examagreementanonymousdefault.ts",{"_index":940,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["examagreementanonymousdefault.ts:13",{"_index":942,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault.ts:5",{"_index":941,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault.ts:7",{"_index":943,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault1622334780336",{"_index":938,"title":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["examagreementcontroller",{"_index":944,"title":{"controllers/ExamAgreementController.html":{}},"body":{"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examagreementdto",{"_index":721,"title":{"classes/ExamAgreementDto.html":{}},"body":{"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreementDto.html":{},"coverage.html":{}}}],["examagreementid",{"_index":75,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{}}}],["examagreementnotfinished",{"_index":648,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["examagreementobservation.ts",{"_index":972,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["examagreementobservation.ts:13",{"_index":974,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation.ts:5",{"_index":973,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation.ts:7",{"_index":975,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation1622417032753",{"_index":970,"title":{"classes/ExamAgreementObservation1622417032753.html":{}},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["examagreementrepository",{"_index":976,"title":{"classes/ExamAgreementRepository.html":{}},"body":{"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examagreements",{"_index":1991,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["examagreementservice",{"_index":306,"title":{"injectables/ExamAgreementService.html":{}},"body":{"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"coverage.html":{},"overview.html":{}}}],["examagreementstatus",{"_index":913,"title":{},"body":{"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"miscellaneous/enumerations.html":{}}}],["examagreementstatus.finished",{"_index":928,"title":{},"body":{"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["examagreementstatus.started",{"_index":926,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["examagreementuser",{"_index":950,"title":{"interfaces/ExamAgreementUser.html":{}},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"coverage.html":{}}}],["examcontroller",{"_index":1024,"title":{"controllers/ExamController.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examid",{"_index":180,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FindPersonalDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["exammodule",{"_index":268,"title":{"modules/ExamModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["exampersonalresult",{"_index":1036,"title":{"classes/ExamPersonalResult.html":{}},"body":{"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["example",{"_index":1223,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["examrepository",{"_index":1067,"title":{"classes/ExamRepository.html":{}},"body":{"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["exams",{"_index":1911,"title":{},"body":{"classes/Period.html":{}}}],["examservice",{"_index":986,"title":{"injectables/ExamService.html":{}},"body":{"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"overview.html":{}}}],["examservice.relations",{"_index":1175,"title":{},"body":{"injectables/ExamService.html":{}}}],["examstatus",{"_index":868,"title":{},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"miscellaneous/enumerations.html":{}}}],["examstatus.active",{"_index":1125,"title":{},"body":{"classes/ExamRepository.html":{}}}],["examtarget",{"_index":870,"title":{"classes/ExamTarget.html":{}},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["examtarget.ts",{"_index":1190,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examtarget.ts:30",{"_index":1192,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget.ts:6",{"_index":1191,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget.ts:8",{"_index":1193,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget1622326106015",{"_index":1188,"title":{"classes/ExamTarget1622326106015.html":{}},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{}}}],["examtargetadd.ts",{"_index":1206,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examtargetadd.ts:21",{"_index":1208,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd.ts:6",{"_index":1207,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd.ts:8",{"_index":1209,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd1622378888497",{"_index":1204,"title":{"classes/ExamTargetAdd1622378888497.html":{}},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{}}}],["examtargetcontroller",{"_index":1065,"title":{"controllers/ExamTargetController.html":{}},"body":{"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["examtargetmanagerdto",{"_index":1228,"title":{"interfaces/ExamTargetManagerDto.html":{}},"body":{"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["examtargetnode",{"_index":1230,"title":{"classes/ExamTargetNode.html":{}},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["examtargetnodefactory",{"_index":1061,"title":{"injectables/ExamTargetNodeFactory.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"overview.html":{}}}],["examtargetnodeschema",{"_index":1253,"title":{"interfaces/ExamTargetNodeSchema.html":{}},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["examtargetrepository",{"_index":1069,"title":{"classes/ExamTargetRepository.html":{}},"body":{"modules/ExamModule.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["examtargetservice",{"_index":1062,"title":{"injectables/ExamTargetService.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{},"overview.html":{}}}],["examtargettree",{"_index":1063,"title":{"injectables/ExamTargetTree.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"overview.html":{}}}],["examtargettype",{"_index":736,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["examtargettype.course",{"_index":1301,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.grade",{"_index":1302,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.professor",{"_index":1303,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.student",{"_index":1304,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtitle.ts",{"_index":1309,"title":{},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["examtitle.ts:10",{"_index":1311,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle.ts:4",{"_index":1310,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle.ts:6",{"_index":1312,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle1621036457247",{"_index":1307,"title":{"classes/ExamTitle1621036457247.html":{}},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["examuser",{"_index":175,"title":{"interfaces/ExamUser.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamUser.html":{},"coverage.html":{}}}],["exception",{"_index":1770,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter",{"_index":673,"title":{},"body":{"modules/CoreModule.html":{}}}],["exception.filter.ts",{"_index":1760,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["exception.filter.ts:31",{"_index":1763,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:34",{"_index":1769,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":1812,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.getstatus",{"_index":1787,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.initmessage",{"_index":1788,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.message",{"_index":1791,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.name",{"_index":1798,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.stack",{"_index":1796,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exceptionfilter",{"_index":1761,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exceptions",{"_index":1800,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["executioncontext",{"_index":1901,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":2750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":38,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["exportation",{"_index":1424,"title":{},"body":{"injectables/ExportationService.html":{}}}],["exportation.controller",{"_index":1334,"title":{},"body":{"modules/ExportationModule.html":{}}}],["exportation.repository",{"_index":1335,"title":{},"body":{"modules/ExportationModule.html":{},"injectables/ExportationService.html":{}}}],["exportation.service",{"_index":1321,"title":{},"body":{"controllers/ExportationController.html":{},"modules/ExportationModule.html":{}}}],["exportation/exportation.module",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["exportationcontroller",{"_index":1314,"title":{"controllers/ExportationController.html":{}},"body":{"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"coverage.html":{}}}],["exportationmodule",{"_index":380,"title":{"modules/ExportationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExportationModule.html":{},"modules.html":{},"overview.html":{}}}],["exportationrepository",{"_index":1331,"title":{"injectables/ExportationRepository.html":{}},"body":{"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"coverage.html":{},"overview.html":{}}}],["exportationservice",{"_index":1320,"title":{"injectables/ExportationService.html":{}},"body":{"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationService.html":{},"coverage.html":{},"overview.html":{}}}],["exportationtype",{"_index":1411,"title":{},"body":{"injectables/ExportationService.html":{},"miscellaneous/enumerations.html":{}}}],["exportationtype.avaliacao",{"_index":1435,"title":{},"body":{"injectables/ExportationService.html":{}}}],["exportationtype}_${examid}_${fileprefix}_${filedate}.csv",{"_index":1425,"title":{},"body":{"injectables/ExportationService.html":{}}}],["exports",{"_index":264,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"injectables/ExportationService.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exporttocsv",{"_index":1316,"title":{},"body":{"controllers/ExportationController.html":{},"injectables/ExportationService.html":{}}}],["exporttocsv(@param('examid",{"_index":1325,"title":{},"body":{"controllers/ExportationController.html":{}}}],["exporttocsv(examid",{"_index":1317,"title":{},"body":{"controllers/ExportationController.html":{},"injectables/ExportationService.html":{}}}],["expose",{"_index":919,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["express",{"_index":1773,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/UploadController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":2361,"title":{},"body":{"controllers/UploadController.html":{}}}],["extends",{"_index":71,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/AuthRepository.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTargetRepository.html":{},"classes/FFEntity.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodRepository.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":1871,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1880,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":619,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["factories/casl",{"_index":656,"title":{},"body":{"modules/CaslModule.html":{}}}],["factories/exam",{"_index":1077,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetTree.html":{}}}],["faker",{"_index":1826,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"dependencies.html":{}}}],["faker.random.alpha",{"_index":1836,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["faker.random.alphanumeric(20",{"_index":1835,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["false",{"_index":860,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":2624,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fcm",{"_index":1623,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["ff",{"_index":2632,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ff.uneb.br",{"_index":2749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ffentity",{"_index":72,"title":{"classes/FFEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"coverage.html":{}}}],["ffentity:10",{"_index":874,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:13",{"_index":876,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:16",{"_index":875,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:6",{"_index":99,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.publicurl",{"_index":1681,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file.save(data",{"_index":1676,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["filedate",{"_index":1418,"title":{},"body":{"injectables/ExportationService.html":{}}}],["filedto",{"_index":1692,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["filedto.buffer",{"_index":1706,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["filedto.mimetype",{"_index":1707,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["filedto.norandomname",{"_index":1701,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["fileinterceptor",{"_index":2366,"title":{},"body":{"controllers/UploadController.html":{}}}],["filename",{"_index":1433,"title":{},"body":{"injectables/ExportationService.html":{}}}],["fileprefix",{"_index":1422,"title":{},"body":{"injectables/ExportationService.html":{}}}],["filesenddto",{"_index":1451,"title":{"interfaces/FileSendDto.html":{}},"body":{"interfaces/FileSendDto.html":{},"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{},"coverage.html":{}}}],["filters/http",{"_index":672,"title":{},"body":{"modules/CoreModule.html":{}}}],["find",{"_index":2034,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find(@query",{"_index":2070,"title":{},"body":{"controllers/QuestionController.html":{}}}],["find(finddto",{"_index":2041,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto",{"_index":2059,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto.ts",{"_index":2077,"title":{},"body":{"classes/QuestionFindDto.html":{},"coverage.html":{}}}],["find.dto.ts:6",{"_index":2079,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["find.type",{"_index":1462,"title":{},"body":{"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["find.type.ts",{"_index":2671,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["findall",{"_index":301,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["findauth",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["findauth(authdto",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["findbyids",{"_index":2262,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findbyids(ids",{"_index":2271,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findbytargets",{"_index":1088,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbytargets(undefined",{"_index":1091,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbyuser",{"_index":1089,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbyuser(user",{"_index":1110,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbyuserandperiod",{"_index":1733,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["findbyuserandperiod(user",{"_index":1734,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["finddto",{"_index":995,"title":{},"body":{"injectables/ExamAgreementService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["finddto.groupid",{"_index":2288,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findexambyuserdto",{"_index":1092,"title":{"interfaces/FindExamByUserDto.html":{}},"body":{"classes/ExamRepository.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["findone",{"_index":302,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["findone(@param('id",{"_index":1053,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["findone(finddto",{"_index":992,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["findone(id",{"_index":312,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["findone(userdto",{"_index":2010,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["findpersonal",{"_index":1026,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["findpersonal(@getuser",{"_index":1051,"title":{},"body":{"controllers/ExamController.html":{}}}],["findpersonal(examid",{"_index":2122,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["findpersonal(undefined",{"_index":2187,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["findpersonal(user",{"_index":1034,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["findpersonaldto",{"_index":1455,"title":{"classes/FindPersonalDto.html":{}},"body":{"classes/FindPersonalDto.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["findspecializeduser",{"_index":2420,"title":{},"body":{"injectables/UserService.html":{}}}],["findspecializeduser(userdto",{"_index":2429,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser",{"_index":2421,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(userdto",{"_index":2431,"title":{},"body":{"injectables/UserService.html":{}}}],["finished",{"_index":577,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"miscellaneous/enumerations.html":{}}}],["finishexam",{"_index":982,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["finishexam(agreement",{"_index":996,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["firebase",{"_index":1516,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["firebase.app.app",{"_index":1511,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.appcheck.appcheck",{"_index":1484,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.appoptions",{"_index":1531,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.auth.auth",{"_index":1486,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.createrequest",{"_index":1592,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.updaterequest",{"_index":1600,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.credential.cert(options.cert",{"_index":1527,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.database.database",{"_index":1491,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.firestore.collectionreference",{"_index":2673,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["firebase.firestore.firestore",{"_index":1494,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{}}}],["firebase.initializeapp",{"_index":1521,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.installations.installations",{"_index":1496,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.instanceid.instanceid",{"_index":1498,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.machinelearning.machinelearning",{"_index":1500,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.messaging.messaging",{"_index":1502,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingoptions",{"_index":1629,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingpayload",{"_index":1628,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.projectmanagement.projectmanagement",{"_index":1504,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.remoteconfig.remoteconfig",{"_index":1506,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.securityrules.securityrules",{"_index":1508,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.serviceaccount",{"_index":1574,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["firebase.storage.storage",{"_index":1510,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{}}}],["firebase_admin",{"_index":2525,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebase_bucket",{"_index":2739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebase_options",{"_index":1517,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebaseadmin",{"_index":1463,"title":{"injectables/FirebaseAdmin.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{},"overview.html":{}}}],["firebaseadmin.auth",{"_index":1608,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseadmin.firestore",{"_index":1645,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firebaseadmin.messaging",{"_index":1632,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebaseadmin.storage",{"_index":1671,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["firebaseadminmodule",{"_index":1544,"title":{"modules/FirebaseAdminModule.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules.html":{},"overview.html":{}}}],["firebaseadminmodule.forroot(options",{"_index":1660,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseadminmodule.forrootasync(options",{"_index":1661,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseasyncmoduleoptions",{"_index":1556,"title":{"interfaces/FirebaseAsyncModuleOptions.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["firebaseauth",{"_index":1584,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseauthdecodedtoken",{"_index":1576,"title":{"interfaces/FirebaseAuthDecodedToken.html":{}},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["firebaseauthservice",{"_index":1581,"title":{"injectables/FirebaseAuthService.html":{}},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebasecloudmessagingservice",{"_index":1620,"title":{"injectables/FirebaseCloudMessagingService.html":{}},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebaseconfig",{"_index":2496,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasefirestorecollection",{"_index":1641,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firebasefirestoreservice",{"_index":1634,"title":{"injectables/FirebaseFirestoreService.html":{}},"body":{"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["firebasemodule",{"_index":1647,"title":{"modules/FirebaseModule.html":{}},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["firebasemodule.forrootasync",{"_index":1852,"title":{},"body":{"modules/InfraModule.html":{}}}],["firebasemoduleoptions",{"_index":1481,"title":{"interfaces/FirebaseModuleOptions.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasestorageservice",{"_index":1658,"title":{"injectables/FirebaseStorageService.html":{}},"body":{"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["firebasestorageuploaddto",{"_index":1666,"title":{"interfaces/FirebaseStorageUploadDto.html":{}},"body":{"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["firebaseuploader",{"_index":1684,"title":{"injectables/FirebaseUploader.html":{}},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"coverage.html":{}}}],["firestore",{"_index":1470,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firestore.service.ts",{"_index":1635,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"coverage.html":{}}}],["firestore.service.ts:14",{"_index":1639,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firestore.service.ts:8",{"_index":1637,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["first",{"_index":1158,"title":{},"body":{"injectables/ExamService.html":{}}}],["first(exam.agreements)?.status",{"_index":1180,"title":{},"body":{"injectables/ExamService.html":{}}}],["fk_1d110bd5138b275a2ea2944e290",{"_index":555,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_20bfb4e7c97aa20956be86c6beb",{"_index":936,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["fk_26862c959c4ecfc8f1b4a1a055c",{"_index":584,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_3b2789ae1c494ff1bf8dd4d4607",{"_index":551,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["fk_4a22969058fa5105ad6bee583f1",{"_index":1201,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["fk_7540599d89cb2b6e17cc56d5170",{"_index":583,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_7bdc7fbb138980e5471e2a19366",{"_index":937,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["fk_814144bcce3b80921f41f15b823",{"_index":155,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_971014f1fb44be716098484bb5a",{"_index":162,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_af1604ea5493f65a6c8d70d98ed",{"_index":1202,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["fk_b472107b61171823120f069fd50",{"_index":561,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_b9db72ddc93f196bf9d79132171",{"_index":559,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_ba483ad17eb41fb181aa3a77d4f",{"_index":557,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/PeriodIndex1624547816204.html":{}}}],["fk_ba86f32978b67a878005c5af78a",{"_index":578,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_c3d19a89541e4f0813f2fe09194",{"_index":160,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_d35fb46683694975ba85bcd804e",{"_index":563,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_df58a2a413f5647f6411002cb28",{"_index":582,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_f2d35d0b9823628374f51931ddd",{"_index":579,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["flags",{"_index":2095,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["fns",{"_index":1825,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"dependencies.html":{}}}],["following",{"_index":2654,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":156,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["form",{"_index":2625,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fornecida",{"_index":778,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["forroot",{"_index":1550,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forroot(options",{"_index":1551,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync",{"_index":1554,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync(options",{"_index":1555,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forwardref",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/QuestionService.html":{},"modules/UserModule.html":{}}}],["found",{"_index":345,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/PeriodService.html":{},"miscellaneous/variables.html":{}}}],["fullfil",{"_index":2645,"title":{},"body":{"index.html":{}}}],["function",{"_index":1571,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":2607,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":1251,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{}}}],["generate(schema",{"_index":1252,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["generated",{"_index":921,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["generated('uuid",{"_index":925,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["generated('uuid')@column({unique",{"_index":917,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["gerado",{"_index":1829,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["get(':id",{"_index":1032,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get(':id')@apiokresponse({type",{"_index":2044,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get('health",{"_index":365,"title":{},"body":{"controllers/AppController.html":{}}}],["get('me",{"_index":1050,"title":{},"body":{"controllers/ExamController.html":{}}}],["get('me')@apiokresponse({type",{"_index":1035,"title":{},"body":{"controllers/ExamController.html":{}}}],["get('me/:examid",{"_index":2139,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["get('me/:examid')@apiokresponse({type",{"_index":2123,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["get('user",{"_index":1226,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["get('user')@apiexcludeendpoint",{"_index":1217,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["get()@apiokresponse({type",{"_index":1030,"title":{},"body":{"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get()@useguards(jwtguard",{"_index":2392,"title":{},"body":{"controllers/UserController.html":{}}}],["getbyuser",{"_index":983,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["getbyuser(user",{"_index":998,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["getcollection",{"_index":1636,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getcollection(collection",{"_index":1638,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getcsvlines",{"_index":1337,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["getcsvlines(examid",{"_index":1341,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["getend",{"_index":882,"title":{},"body":{"classes/Exam.html":{}}}],["getfilename",{"_index":1403,"title":{},"body":{"injectables/ExportationService.html":{}}}],["getfilename(examid",{"_index":1410,"title":{},"body":{"injectables/ExportationService.html":{}}}],["getforuser",{"_index":1214,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getforuser(@getuser",{"_index":1227,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getforuser(user",{"_index":1216,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getgrades",{"_index":2000,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["getisleaf",{"_index":1240,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["getlastperiod",{"_index":1929,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getname",{"_index":1512,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseUploader.html":{}}}],["getname(filedto",{"_index":1690,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["getnextposition",{"_index":2263,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getnextposition(groupid",{"_index":2274,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getoptions",{"_index":1514,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["getperiodbyinterval",{"_index":1930,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getperiodbyinterval(undefined",{"_index":1935,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getpersonal",{"_index":1959,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["getpersonal(user",{"_index":1962,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["getstart",{"_index":880,"title":{},"body":{"classes/Exam.html":{}}}],["gettargetmap",{"_index":1265,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["gettargets",{"_index":1215,"title":{},"body":{"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{}}}],["gettargetsforuser",{"_index":1266,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["gettargetsforuser(target",{"_index":1272,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["getting",{"_index":2623,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":204,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"injectables/FirebaseAuthService.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuser(@getuser",{"_index":2401,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(uid",{"_index":1596,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["getuser(user",{"_index":2391,"title":{},"body":{"controllers/UserController.html":{}}}],["given",{"_index":1953,"title":{},"body":{"injectables/PeriodService.html":{}}}],["global",{"_index":671,"title":{},"body":{"modules/CoreModule.html":{},"modules/FirebaseModule.html":{}}}],["grade",{"_index":232,"title":{"classes/Grade.html":{}},"body":{"classes/AnswerGrade.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/ExportationRepository.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/QuestionGroupGrade.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["grade.dto",{"_index":1969,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["grade.dto.ts",{"_index":2146,"title":{},"body":{"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["grade.dto.ts:5",{"_index":2147,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["grade.entity",{"_index":254,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{}}}],["grade.entity.ts",{"_index":231,"title":{},"body":{"classes/AnswerGrade.html":{},"coverage.html":{}}}],["grade.entity.ts:11",{"_index":235,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["grade.entity.ts:8",{"_index":234,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["grade.id",{"_index":1375,"title":{},"body":{"injectables/ExportationRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["grade.repository",{"_index":281,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["grade.repository.ts",{"_index":247,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["grade.subject",{"_index":2336,"title":{},"body":{"classes/Subject.html":{}}}],["grade.subject_id",{"_index":1379,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["grade_id",{"_index":147,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["grade`(`id",{"_index":163,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{}}}],["gradeid",{"_index":233,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/CreateAnswerDto.html":{}}}],["gradeindex.ts",{"_index":1727,"title":{},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["gradeindex.ts:10",{"_index":1729,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex.ts:4",{"_index":1728,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex.ts:6",{"_index":1730,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex1624560625346",{"_index":1725,"title":{"classes/GradeIndex1624560625346.html":{}},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["graderepository",{"_index":593,"title":{"classes/GradeRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"coverage.html":{}}}],["grades",{"_index":1976,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{}}}],["grades.length",{"_index":1978,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["grades.map((grade",{"_index":1981,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["gradeservice",{"_index":588,"title":{"injectables/GradeService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/GradeService.html":{},"injectables/PersonalQuestionGroup.html":{},"coverage.html":{},"overview.html":{}}}],["group",{"_index":890,"title":{},"body":{"classes/Exam.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["group.constants",{"_index":2197,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.constants.ts",{"_index":2534,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group.controller",{"_index":2168,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.controller.ts",{"_index":2112,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group.controller.ts:39",{"_index":2119,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:47",{"_index":2120,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:53",{"_index":2124,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:63",{"_index":2121,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:70",{"_index":2130,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:80",{"_index":2117,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:88",{"_index":2128,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:97",{"_index":2125,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.dto",{"_index":2134,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["group.dto.ts",{"_index":660,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:12",{"_index":792,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:16",{"_index":789,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:20",{"_index":791,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:24",{"_index":790,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:5",{"_index":664,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["group.dto.ts:8",{"_index":663,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{}}}],["group.dto.ts:9",{"_index":2308,"title":{},"body":{"classes/ReorderQuestionGroupDto.html":{}}}],["group.entity",{"_index":631,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["group.entity.ts",{"_index":2080,"title":{},"body":{"classes/QuestionGroup.html":{},"coverage.html":{}}}],["group.entity.ts:17",{"_index":2088,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:21",{"_index":2081,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:24",{"_index":2084,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:28",{"_index":2086,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:31",{"_index":2083,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:34",{"_index":2087,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:37",{"_index":2082,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:40",{"_index":2089,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.exam",{"_index":891,"title":{},"body":{"classes/Exam.html":{}}}],["group.module",{"_index":283,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{}}}],["group.module.ts",{"_index":2166,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.position",{"_index":2225,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.provider",{"_index":2173,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["group.provider.ts",{"_index":1958,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"coverage.html":{}}}],["group.provider.ts:13",{"_index":1961,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["group.provider.ts:20",{"_index":1963,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["group.questions",{"_index":2217,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.repository",{"_index":1974,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["group.repository.ts",{"_index":2176,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group.service",{"_index":2133,"title":{},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionService.html":{}}}],["group.service.ts",{"_index":2179,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group.service.ts:100",{"_index":2183,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:124",{"_index":2191,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:147",{"_index":2188,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:167",{"_index":2189,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:24",{"_index":2182,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:33",{"_index":2193,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:44",{"_index":2184,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:57",{"_index":2185,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:61",{"_index":2186,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:75",{"_index":2194,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group/controllers/question",{"_index":2111,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts",{"_index":2032,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts:33",{"_index":2037,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:41",{"_index":2040,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:50",{"_index":2043,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:57",{"_index":2046,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:64",{"_index":2055,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:73",{"_index":2052,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:82",{"_index":2048,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/dtos/copy",{"_index":659,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dtos/create",{"_index":747,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"coverage.html":{}}}],["group/dtos/find",{"_index":1456,"title":{},"body":{"classes/FindPersonalDto.html":{},"coverage.html":{}}}],["group/dtos/question",{"_index":2076,"title":{},"body":{"classes/QuestionFindDto.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["group/dtos/reorder",{"_index":2303,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dtos/update",{"_index":2356,"title":{},"body":{"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group/entities/question",{"_index":630,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"coverage.html":{}}}],["group/entities/question.entity",{"_index":111,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{}}}],["group/entities/question.entity.ts",{"_index":2018,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["group/entities/question.entity.ts:12",{"_index":2023,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:15",{"_index":2022,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:18",{"_index":2026,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:21",{"_index":2021,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:25",{"_index":2025,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:28",{"_index":2020,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:31",{"_index":2019,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:9",{"_index":2027,"title":{},"body":{"classes/Question.html":{}}}],["group/interfaces/question",{"_index":2238,"title":{},"body":{"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["group/providers/personal",{"_index":1957,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"coverage.html":{}}}],["group/question",{"_index":282,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/question.constants.ts",{"_index":2535,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/repositories/question",{"_index":2175,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group/repositories/question.repository.ts",{"_index":2258,"title":{},"body":{"classes/QuestionRepository.html":{},"coverage.html":{}}}],["group/services/question",{"_index":2178,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group/services/question.service",{"_index":324,"title":{},"body":{"injectables/AnswerService.html":{}}}],["group/services/question.service.ts",{"_index":2260,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["group/services/question.service.ts:102",{"_index":2267,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:114",{"_index":2277,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:135",{"_index":2276,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:24",{"_index":2265,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:32",{"_index":2275,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:39",{"_index":2268,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:51",{"_index":2269,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:64",{"_index":2270,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:75",{"_index":2272,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:79",{"_index":2273,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:89",{"_index":2278,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group_id",{"_index":553,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["group_title",{"_index":834,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["groupby",{"_index":1157,"title":{},"body":{"injectables/ExamService.html":{}}}],["groupby(agreed",{"_index":1179,"title":{},"body":{"injectables/ExamService.html":{}}}],["groupgrade",{"_index":1982,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["groupgrade.grade",{"_index":1984,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["groupgrades",{"_index":1979,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["groupid",{"_index":661,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["groupidpositionmap",{"_index":2222,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupidpositionmap.get(group.id",{"_index":2226,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupids",{"_index":2220,"title":{},"body":{"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["groupids.map((id",{"_index":2223,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groups",{"_index":852,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["groups.map(async",{"_index":2224,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupservice",{"_index":2264,"title":{},"body":{"injectables/QuestionService.html":{}}}],["grupo",{"_index":822,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{},"miscellaneous/enumerations.html":{}}}],["grupopessoal",{"_index":2606,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["guards/jwt.guard",{"_index":461,"title":{},"body":{"modules/AuthModule.html":{}}}],["gzip",{"_index":1677,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["hasfinishedexam",{"_index":908,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["hasgrade",{"_index":1022,"title":{},"body":{"interfaces/ExamAgreementUser.html":{}}}],["healthy",{"_index":370,"title":{},"body":{"controllers/AppController.html":{}}}],["helmet",{"_index":2564,"title":{},"body":{"dependencies.html":{}}}],["hooked",{"_index":252,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["host",{"_index":1767,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":1784,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["http:\\/\\/localhost:(3000|5000",{"_index":2695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":369,"title":{},"body":{"controllers/AppController.html":{}}}],["httpcode(200",{"_index":372,"title":{},"body":{"controllers/AppController.html":{}}}],["httpexception",{"_index":1766,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["httpexceptionfilter",{"_index":668,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{},"overview.html":{}}}],["https:\\/\\/(.*\\.|)herokuapp.com",{"_index":2694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iclassvalidatorexception",{"_index":1780,"title":{"interfaces/IClassValidatorException.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["id",{"_index":40,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":2470,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1106,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/QuestionService.html":{}}}],["idx_26862c959c4ecfc8f1b4a1a055",{"_index":575,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_2b38bb607ef3e86920e9bd0163",{"_index":547,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_31ef2b4d30675d0c15056b7f6e",{"_index":427,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["idx_4a22969058fa5105ad6bee583f",{"_index":1199,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_5cf4963ae12285cda6432d5a3a",{"_index":537,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_7540599d89cb2b6e17cc56d517",{"_index":574,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_914f18c8fbe52b10a6b276bc0c",{"_index":425,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_92374adc6b583e8cf659977e48",{"_index":541,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_952e252e7470ff78b18a9ec786",{"_index":422,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_988f784cc581e38b7ed4943006",{"_index":1195,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_a6235b5ef0939d8deaad755fc8",{"_index":426,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_af1604ea5493f65a6c8d70d98e",{"_index":1200,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_df58a2a413f5647f6411002cb2",{"_index":572,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_ec3a69def9f89a993b8f75ee4d",{"_index":148,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["idx_f2d35d0b9823628374f51931dd",{"_index":571,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["ientity",{"_index":1819,"title":{"interfaces/IEntity.html":{}},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["iexception",{"_index":1776,"title":{"interfaces/IException.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["ignoreexams",{"_index":1119,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"interfaces/FindExamByUserDto.html":{}}}],["ignoreexams.length",{"_index":1129,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ignoreexams.map((el",{"_index":1131,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ignoreexpiration",{"_index":1881,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image_alt",{"_index":2109,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["image_url",{"_index":2108,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["imagealt",{"_index":760,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["imageurl",{"_index":761,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["implemented",{"_index":1529,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["import",{"_index":29,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":274,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["in(groupids",{"_index":2221,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["in(questionids",{"_index":2298,"title":{},"body":{"injectables/QuestionService.html":{}}}],["inactive",{"_index":530,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index('ix_period_started_at_ended_at",{"_index":1918,"title":{},"body":{"classes/Period.html":{}}}],["index('ix_question_group_class_examid",{"_index":2091,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["index('ix_question_group_position",{"_index":2098,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["index('ix_question_group_position')@column({type",{"_index":2085,"title":{},"body":{"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["index('ix_question_position",{"_index":2029,"title":{},"body":{"classes/Question.html":{}}}],["index('ix_question_position')@column({type",{"_index":2024,"title":{},"body":{"classes/Question.html":{}}}],["infersubjects",{"_index":620,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["infra.constants",{"_index":2369,"title":{},"body":{"controllers/UploadController.html":{}}}],["infra/infra.module",{"_index":398,"title":{},"body":{"modules/AppModule.html":{}}}],["inframodule",{"_index":381,"title":{"modules/InfraModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExportationModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["inherited",{"_index":98,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["initialize",{"_index":2652,"title":{},"body":{"index.html":{}}}],["inject",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{},"injectables/QuestionService.html":{}}}],["inject(forwardref",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/QuestionService.html":{}}}],["injectable",{"_index":297,"title":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":298,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectconnection",{"_index":1345,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["injectrepository",{"_index":318,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["injectrepository(answergraderepository",{"_index":328,"title":{},"body":{"injectables/AnswerService.html":{}}}],["injectrepository(answerrepository",{"_index":326,"title":{},"body":{"injectables/AnswerService.html":{}}}],["injectrepository(authrepository",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(examagreementrepository",{"_index":1006,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["injectrepository(examrepository",{"_index":1163,"title":{},"body":{"injectables/ExamService.html":{}}}],["injectrepository(examtargetrepository",{"_index":1277,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["injectrepository(graderepository",{"_index":1756,"title":{},"body":{"injectables/GradeService.html":{}}}],["injectrepository(periodrepository",{"_index":1941,"title":{},"body":{"injectables/PeriodService.html":{}}}],["injectrepository(professorrepository",{"_index":2015,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["injectrepository(questiongrouprepository",{"_index":1975,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["injectrepository(questionrepository",{"_index":2280,"title":{},"body":{"injectables/QuestionService.html":{}}}],["injectrepository(studentrepository",{"_index":2325,"title":{},"body":{"injectables/StudentService.html":{}}}],["injectrepository(userrepository",{"_index":2444,"title":{},"body":{"injectables/UserService.html":{}}}],["inner",{"_index":1101,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExportationRepository.html":{}}}],["innerjoinandselect('exam.agreements",{"_index":1135,"title":{},"body":{"classes/ExamRepository.html":{}}}],["innerjoinandselect('exam.period",{"_index":1139,"title":{},"body":{"classes/ExamRepository.html":{}}}],["innerjoinandselect('grade.subject",{"_index":1746,"title":{},"body":{"classes/GradeRepository.html":{}}}],["insert",{"_index":59,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["instalação",{"_index":2633,"title":{},"body":{"index.html":{}}}],["installations",{"_index":1471,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["instanceid",{"_index":1472,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["instanceof",{"_index":1743,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/QuestionGroupService.html":{}}}],["int",{"_index":86,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Grade.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Subject.html":{}}}],["intercept",{"_index":1899,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["intercept(_",{"_index":1900,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["interceptors/payload.interceptor",{"_index":674,"title":{},"body":{"modules/CoreModule.html":{}}}],["interface",{"_index":606,"title":{"interfaces/BatchUser.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{}},"body":{"interfaces/BatchUser.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["interfaces",{"_index":607,"title":{},"body":{"interfaces/BatchUser.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"overview.html":{}}}],["interfaces/batch",{"_index":325,"title":{},"body":{"injectables/AnswerService.html":{}}}],["interfaces/csv",{"_index":1343,"title":{},"body":{"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{}}}],["interfaces/exam",{"_index":960,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["interfaces/firebase",{"_index":1605,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{}}}],["interfaces/jwt",{"_index":1875,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["interfaces/user",{"_index":2443,"title":{},"body":{"injectables/UserService.html":{}}}],["interval",{"_index":1936,"title":{},"body":{"injectables/PeriodService.html":{}}}],["is_class",{"_index":835,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["is_personal",{"_index":836,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["isarray",{"_index":741,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isarray()@ispositive({each",{"_index":2305,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isarray()@validatenested({each",{"_index":793,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["isboolean",{"_index":720,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["iscpf",{"_index":800,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdate",{"_index":742,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdate()@type(undefined",{"_index":733,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdefined",{"_index":752,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["isenrollment",{"_index":802,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isenum",{"_index":695,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateUserDto.html":{}}}],["isenum(answertype",{"_index":702,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["isenum(examtargettype",{"_index":745,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isenum(userrole",{"_index":804,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(usertype",{"_index":807,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isleaf",{"_index":1234,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["isnotempty",{"_index":445,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UserDto.html":{}}}],["isoptional",{"_index":696,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/QuestionFindDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["isoptional()@isarray()@isenum(examtargettype",{"_index":737,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isoptional()@isboolean",{"_index":730,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@isboolean()@type(undefined",{"_index":716,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["isoptional()@isenum(answertype",{"_index":693,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["isoptional()@ispositive",{"_index":749,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@isstring()@isnotempty",{"_index":765,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["isoptional()@isurl",{"_index":767,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["isoptional()@min(1)@max(5",{"_index":690,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["ispositive",{"_index":662,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreementDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["ispositive()@isoptional",{"_index":2078,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["ispositive()@validateif(undefined",{"_index":687,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["ispositive({each",{"_index":2307,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["isprod",{"_index":2492,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":446,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/LoginDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UserDto.html":{}}}],["isstring()@isnotempty",{"_index":443,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["isstring()@length(password_min",{"_index":707,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["issuer",{"_index":2748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isurl",{"_index":786,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["item",{"_index":650,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":651,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["items",{"_index":221,"title":{},"body":{"controllers/AnswerController.html":{}}}],["ix_period_started_at_ended_at",{"_index":1925,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["ix_question_group_class_examid",{"_index":1731,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["ix_question_group_position",{"_index":569,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["ix_question_group_target",{"_index":1194,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["ix_question_position",{"_index":2257,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["join",{"_index":1096,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/ExportationRepository.html":{}}}],["jointable",{"_index":885,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{}}}],["json",{"_index":2735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.parse(process.env.firebase_admin",{"_index":2740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["juntar",{"_index":2093,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["jwt",{"_index":1874,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":2499,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfigkey",{"_index":457,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":1879,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":200,"title":{"injectables/JwtGuard.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AuthModule.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"injectables/JwtGuard.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtmodule",{"_index":455,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":465,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmoduleoptions",{"_index":1869,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwtpayload",{"_index":1859,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":453,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":150,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["last",{"_index":2199,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["last(arr",{"_index":2618,"title":{},"body":{"miscellaneous/functions.html":{}}}],["last(questiongroup.exam.groups)?.position",{"_index":2205,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["last(questions)?.position",{"_index":2282,"title":{},"body":{"injectables/QuestionService.html":{}}}],["lazy",{"_index":1993,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["left",{"_index":1095,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExportationRepository.html":{}}}],["leftjoin",{"_index":1123,"title":{},"body":{"classes/ExamRepository.html":{}}}],["leftjoin('exam_targets_exam_target",{"_index":1122,"title":{},"body":{"classes/ExamRepository.html":{}}}],["leftjoinandselect('exam.targets",{"_index":1141,"title":{},"body":{"classes/ExamRepository.html":{}}}],["legend",{"_index":260,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1894,"title":{},"body":{"classes/LoginDto.html":{}}}],["length(password_min",{"_index":1897,"title":{},"body":{"classes/LoginDto.html":{}}}],["lessthan",{"_index":1938,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthan(end",{"_index":1954,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthanorequal",{"_index":1939,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthanorequal(new",{"_index":1951,"title":{},"body":{"injectables/PeriodService.html":{}}}],["limit",{"_index":2560,"title":{},"body":{"dependencies.html":{}}}],["limit.config.ts",{"_index":2501,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":832,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{},"coverage.html":{}}}],["line.interface",{"_index":1344,"title":{},"body":{"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{}}}],["line.interface.ts",{"_index":818,"title":{},"body":{"interfaces/CsvLine.html":{},"coverage.html":{}}}],["literal",{"_index":993,"title":{},"body":{"injectables/ExamAgreementService.html":{},"interfaces/SoftDeleteResult.html":{}}}],["load",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["loadrelations",{"_index":1090,"title":{},"body":{"classes/ExamRepository.html":{}}}],["loadrelations(query",{"_index":1112,"title":{},"body":{"classes/ExamRepository.html":{}}}],["loadtargetmap",{"_index":1267,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["localmente",{"_index":2635,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":1159,"title":{},"body":{"injectables/ExamService.html":{},"dependencies.html":{}}}],["logger",{"_index":847,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('bootstrap",{"_index":2730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('httpexceptionfilter",{"_index":1764,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["logger.service",{"_index":1891,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger/logger.module",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":382,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["logging",{"_index":2722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":61,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{}}}],["login(@body",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto",{"_index":711,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["logindto",{"_index":432,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.login",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto:8",{"_index":709,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["lógica",{"_index":2629,"title":{},"body":{"index.html":{}}}],["machinelearning",{"_index":1473,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["manage",{"_index":2601,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manager",{"_index":423,"title":{},"body":{"classes/Auth1619445806509.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/enumerations.html":{}}}],["manager.dto.ts",{"_index":1229,"title":{},"body":{"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["manytomany",{"_index":886,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["manytomany(undefined",{"_index":1992,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["manytomany(undefined)@jointable",{"_index":871,"title":{},"body":{"classes/Exam.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":1715,"title":{},"body":{"classes/Grade.html":{}}}],["manytoone",{"_index":115,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{}}}],["manytoone(undefined",{"_index":83,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Subject.html":{}}}],["map",{"_index":1280,"title":{},"body":{"injectables/ExamTargetService.html":{},"injectables/PayloadInterceptor.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["map((_",{"_index":1212,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["map(questions.map((question",{"_index":337,"title":{},"body":{"injectables/AnswerService.html":{}}}],["maps/user",{"_index":1348,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["match",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matrícula",{"_index":825,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["max",{"_index":697,"title":{},"body":{"classes/CreateAnswerDto.html":{},"injectables/FirebaseStorageService.html":{},"miscellaneous/variables.html":{}}}],["max(5",{"_index":701,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["maxqueryexecutiontime",{"_index":2711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":1627,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["messaging",{"_index":1474,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["messaging.service",{"_index":1655,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["messaging.service.ts",{"_index":1622,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"coverage.html":{}}}],["messaging.service.ts:12",{"_index":1630,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["messaging.service.ts:7",{"_index":1625,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["metadata",{"_index":1678,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["migrations",{"_index":2717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":2725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mimetype",{"_index":1441,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{}}}],["min",{"_index":698,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["min(1",{"_index":700,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["miscellaneous",{"_index":2587,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2637,"title":{},"body":{"index.html":{}}}],["models/exam",{"_index":1044,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["module",{"_index":256,"title":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["modulemetadata",{"_index":1572,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["modules",{"_index":258,"title":{"modules.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["morethanorequal",{"_index":1940,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morethanorequal(new",{"_index":1950,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morethanorequal(start",{"_index":1955,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morgan",{"_index":2567,"title":{},"body":{"dependencies.html":{}}}],["mustfindauth",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindauth(authdto",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindspecializeduser",{"_index":2422,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfindspecializeduser(userdto",{"_index":2433,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser",{"_index":2423,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser(userdto",{"_index":2435,"title":{},"body":{"injectables/UserService.html":{}}}],["mysql",{"_index":2703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":2569,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":22,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["naming",{"_index":2583,"title":{},"body":{"dependencies.html":{}}}],["namingstrategy",{"_index":2727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessário",{"_index":2638,"title":{},"body":{"index.html":{}}}],["needed",{"_index":2646,"title":{},"body":{"index.html":{}}}],["needs",{"_index":2734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["negócio",{"_index":2630,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1906,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["nestjs/common",{"_index":195,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"injectables/CustomLogger.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2544,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":456,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2349,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["nestjs/passport",{"_index":1857,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2367,"title":{},"body":{"controllers/UploadController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":199,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"classes/UpdateQuestionDto.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":277,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":50,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newexam",{"_index":1144,"title":{},"body":{"injectables/ExamService.html":{}}}],["newexam(dto",{"_index":1151,"title":{},"body":{"injectables/ExamService.html":{}}}],["next",{"_index":1902,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1909,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["nico",{"_index":820,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["node",{"_index":1245,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node.childs",{"_index":1258,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node.dfs(type",{"_index":1248,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.factory",{"_index":1078,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetTree.html":{}}}],["node.factory.ts",{"_index":1250,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["node.factory.ts:12",{"_index":1254,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{}}}],["node.model",{"_index":1255,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["node.model.ts",{"_index":1231,"title":{},"body":{"classes/ExamTargetNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["node.model.ts:13",{"_index":1238,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:6",{"_index":1235,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:7",{"_index":1236,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:9",{"_index":1241,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.type",{"_index":1256,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node_env",{"_index":1792,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["norandomname",{"_index":1447,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{}}}],["nota",{"_index":826,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["notfoundexception",{"_index":317,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/PeriodService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["notfoundexception('nothing",{"_index":1432,"title":{},"body":{"injectables/ExportationService.html":{}}}],["notfoundexception('period",{"_index":1952,"title":{},"body":{"injectables/PeriodService.html":{}}}],["notfoundexception(answerdto",{"_index":344,"title":{},"body":{"injectables/AnswerService.html":{}}}],["notfoundexception(authdto",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(finddto",{"_index":1021,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["notfoundexception(this.root",{"_index":1306,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["null",{"_index":122,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationRepository.html":{},"injectables/FirebaseAuthService.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["nullable",{"_index":91,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/ExamAgreement.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["number",{"_index":41,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"classes/FindPersonalDto.html":{},"classes/Grade.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"miscellaneous/variables.html":{}}}],["não",{"_index":772,"title":{},"body":{"classes/CreateQuestionDto.html":{},"injectables/ExportationRepository.html":{}}}],["o.type",{"_index":704,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["object",{"_index":2731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(new",{"_index":1983,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["object.values(examtargettype",{"_index":1224,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["objects",{"_index":1414,"title":{},"body":{"injectables/ExportationService.html":{},"dependencies.html":{}}}],["objectstocsv",{"_index":1413,"title":{},"body":{"injectables/ExportationService.html":{}}}],["objectstocsv(csvlines",{"_index":1427,"title":{},"body":{"injectables/ExportationService.html":{}}}],["obrigatória",{"_index":774,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["observable",{"_index":1905,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["observation",{"_index":837,"title":{},"body":{"interfaces/CsvLineRow.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExportationRepository.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["observação",{"_index":827,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["omittype",{"_index":718,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["omittype(createquestiondto",{"_index":756,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["omittype(examagreementdto",{"_index":723,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["onetomany",{"_index":681,"title":{},"body":{"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":678,"title":{},"body":{"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["optional",{"_index":24,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1479,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{}}}],["options.databaseurl",{"_index":1523,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.imports",{"_index":1564,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.inject",{"_index":1566,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.interface",{"_index":1656,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["options.interface.ts",{"_index":1569,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["options.storagebucket",{"_index":1525,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.usefactory",{"_index":1565,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["optionssuccessstatus",{"_index":2698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["order",{"_index":1385,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["origin",{"_index":2488,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["origin(origin",{"_index":2621,"title":{},"body":{"miscellaneous/functions.html":{}}}],["originalname",{"_index":1440,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{}}}],["out",{"_index":272,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":2661,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.type",{"_index":1289,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["package",{"_index":2540,"title":{"dependencies.html":{}},"body":{}}],["padrão",{"_index":787,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["padrão'})@isboolean()@isoptional",{"_index":782,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["para",{"_index":2627,"title":{},"body":{"index.html":{}}}],["param",{"_index":190,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["param('examid",{"_index":219,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/QuestionGroupController.html":{}}}],["param('groupid",{"_index":2068,"title":{},"body":{"controllers/QuestionController.html":{}}}],["param('id",{"_index":226,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parsearraypipe",{"_index":191,"title":{},"body":{"controllers/AnswerController.html":{}}}],["parseint(process.env.db_port",{"_index":2710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.db_query_timeout",{"_index":2712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_max",{"_index":2758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_window_ms",{"_index":2756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseintpipe",{"_index":193,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["partialpath",{"_index":1247,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["partialtype",{"_index":2348,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["partialtype(createanswerdto",{"_index":2351,"title":{},"body":{"classes/UpdateAnswerDto.html":{}}}],["partialtype(createexamdto",{"_index":2355,"title":{},"body":{"classes/UpdateExamDto.html":{}}}],["partialtype(createquestiondto",{"_index":2357,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["partialtype(createquestiongroupdto",{"_index":2358,"title":{},"body":{"classes/UpdateQuestionGroupDto.html":{}}}],["partialuser",{"_index":2463,"title":{},"body":{"injectables/UserService.html":{}}}],["partialuser.type",{"_index":2464,"title":{},"body":{"injectables/UserService.html":{}}}],["passport",{"_index":1873,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":1870,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1877,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":57,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/LoginDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["password_max",{"_index":708,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_min",{"_index":1895,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":2056,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["patch()@apiokresponse({type",{"_index":2051,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["path",{"_index":1239,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"classes/UploaderService.html":{},"miscellaneous/typealiases.html":{}}}],["path).replace(/^\\//u",{"_index":1705,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["path}/${filedto.originalname",{"_index":1702,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["path}/${randombytes(32).tostring('hex",{"_index":1703,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["payload",{"_index":1868,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":1876,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":1861,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payload.uid",{"_index":1885,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payloadinterceptor",{"_index":669,"title":{"injectables/PayloadInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"injectables/PayloadInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["period",{"_index":532,"title":{"classes/Period.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"injectables/ExamService.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["period.entity",{"_index":1720,"title":{},"body":{"classes/Grade.html":{}}}],["period.id",{"_index":1748,"title":{},"body":{"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["period_id",{"_index":531,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["period`(`id",{"_index":558,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/PeriodIndex1624547816204.html":{}}}],["periodid",{"_index":853,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{}}}],["periodindex.ts",{"_index":1921,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["periodindex.ts:13",{"_index":1923,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex.ts:4",{"_index":1922,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex.ts:6",{"_index":1924,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex1624547816204",{"_index":1919,"title":{"classes/PeriodIndex1624547816204.html":{}},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["periodrepository",{"_index":595,"title":{"classes/PeriodRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"coverage.html":{}}}],["periodservice",{"_index":589,"title":{"injectables/PeriodService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/ExamService.html":{},"injectables/PeriodService.html":{},"coverage.html":{},"overview.html":{}}}],["personal",{"_index":549,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CreateQuestionGroupDto.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"coverage.html":{}}}],["personal.dto",{"_index":2201,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personal.dto.ts",{"_index":1457,"title":{},"body":{"classes/FindPersonalDto.html":{},"coverage.html":{}}}],["personal.dto.ts:5",{"_index":1458,"title":{},"body":{"classes/FindPersonalDto.html":{}}}],["personal.dto.ts:6",{"_index":1460,"title":{},"body":{"classes/FindPersonalDto.html":{}}}],["personalgroup",{"_index":2181,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personalgroups",{"_index":2228,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personalquestiongroup",{"_index":1956,"title":{"injectables/PersonalQuestionGroup.html":{}},"body":{"injectables/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"overview.html":{}}}],["pessoal",{"_index":828,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{},"miscellaneous/enumerations.html":{}}}],["pick",{"_index":1570,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["picktype",{"_index":810,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["picktype(createauthdto",{"_index":815,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ping",{"_index":363,"title":{},"body":{"controllers/AppController.html":{}}}],["pode",{"_index":771,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["pong",{"_index":364,"title":{},"body":{"controllers/AppController.html":{}}}],["por",{"_index":781,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["port",{"_index":2709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["position",{"_index":568,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{}}}],["post",{"_index":188,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["post('/csv/:examid",{"_index":1318,"title":{},"body":{"controllers/ExportationController.html":{}}}],["post(':groupid",{"_index":2067,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post(':groupid')@apiokresponse({type",{"_index":2039,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post('batch/:examid",{"_index":218,"title":{},"body":{"controllers/AnswerController.html":{}}}],["post('batch/:examid')@apiokresponse({type",{"_index":178,"title":{},"body":{"controllers/AnswerController.html":{}}}],["post('health",{"_index":371,"title":{},"body":{"controllers/AppController.html":{}}}],["post('health')@httpcode(200",{"_index":367,"title":{},"body":{"controllers/AppController.html":{}}}],["post()@apiokresponse({type",{"_index":1028,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["post()@useinterceptors(undefined",{"_index":2362,"title":{},"body":{"controllers/UploadController.html":{}}}],["prefix",{"_index":170,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":149,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["primarygeneratedcolumn",{"_index":97,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["private",{"_index":327,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["process.env.admin_password",{"_index":48,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["process.env.db_database",{"_index":2708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":2704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_logging",{"_index":2723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":2706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.exported_file_prefix",{"_index":1423,"title":{},"body":{"injectables/ExportationService.html":{}}}],["process.env.firebase_admin",{"_index":2733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.firebase_bucket",{"_index":2737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":2746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":2701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.sentry_dsn",{"_index":2762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1794,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["professor",{"_index":843,"title":{"classes/Professor.html":{}},"body":{"interfaces/CsvLineRow.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["professor.entity",{"_index":1721,"title":{},"body":{"classes/Grade.html":{}}}],["professor_grade",{"_index":570,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Grade.html":{}}}],["professorgrades",{"_index":1990,"title":{},"body":{"classes/Professor.html":{}}}],["professorrepository",{"_index":597,"title":{"classes/ProfessorRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"coverage.html":{}}}],["professors",{"_index":1709,"title":{},"body":{"classes/Grade.html":{}}}],["professorservice",{"_index":590,"title":{"injectables/ProfessorService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["programas",{"_index":2640,"title":{},"body":{"index.html":{}}}],["projectmanagement",{"_index":1475,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["promise",{"_index":26,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/UploaderService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":1281,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["promise.all",{"_index":340,"title":{},"body":{"injectables/AnswerService.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/QuestionGroupService.html":{}}}],["promise.all(targets.map(target",{"_index":1196,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["properties",{"_index":73,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{}}}],["propriedade",{"_index":777,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["provide",{"_index":1561,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/InfraModule.html":{}}}],["provider",{"_index":1558,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["providers",{"_index":263,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/exam",{"_index":1075,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["providers/firebase",{"_index":1559,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["providers/personal",{"_index":2172,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["public",{"_index":12,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseStorageService.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["publicfile",{"_index":1673,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{}}}],["put",{"_index":192,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":186,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put(':id')@apiokresponse({type",{"_index":956,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put()@apiokresponse({type",{"_index":2115,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["q",{"_index":1382,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["q.group_id",{"_index":1383,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["q.id",{"_index":1358,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["q.statement",{"_index":1359,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["qb",{"_index":2287,"title":{},"body":{"injectables/QuestionService.html":{}}}],["qb.where(`${qb.alias}.groupid",{"_index":2289,"title":{},"body":{"injectables/QuestionService.html":{}}}],["qg",{"_index":1380,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["qg.class",{"_index":1356,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["qg.exam_id",{"_index":1381,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["qg.id",{"_index":1354,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["qg.personal",{"_index":1357,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["qg.title",{"_index":1355,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["query",{"_index":1115,"title":{},"body":{"classes/ExamRepository.html":{},"classes/GradeRepository.html":{},"controllers/QuestionController.html":{}}}],["query.andwhere('exam.id",{"_index":1130,"title":{},"body":{"classes/ExamRepository.html":{}}}],["query.getmany",{"_index":1750,"title":{},"body":{"classes/GradeRepository.html":{}}}],["query.innerjoin('grade.professors",{"_index":1745,"title":{},"body":{"classes/GradeRepository.html":{}}}],["query.innerjoin('grade.students",{"_index":1744,"title":{},"body":{"classes/GradeRepository.html":{}}}],["queryrunner",{"_index":17,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationRepository.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["queryrunner.manager.query",{"_index":44,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.manager.query('delete",{"_index":65,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.query",{"_index":295,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/ExportationRepository.html":{},"interfaces/IEntity.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["queryrunner.query(\"alter",{"_index":152,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query(\"create",{"_index":135,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query(\"drop",{"_index":165,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query('alter",{"_index":294,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["queryrunner.query('delete",{"_index":1844,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["queryrunner.query('drop",{"_index":428,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["queryrunner.query('insert",{"_index":1197,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{}}}],["querytarget",{"_index":1293,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["querytarget(target",{"_index":1297,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["question",{"_index":76,"title":{"classes/Question.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"injectables/ExportationRepository.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["question.constants",{"_index":1972,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["question.dto",{"_index":755,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{}}}],["question.dto.ts",{"_index":759,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:14",{"_index":784,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:18",{"_index":768,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:23",{"_index":766,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:32",{"_index":783,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:35",{"_index":764,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:5",{"_index":2304,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.dto.ts:9",{"_index":2306,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.entity",{"_index":2090,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["question.group",{"_index":2099,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["question.groupid",{"_index":2292,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.id",{"_index":338,"title":{},"body":{"injectables/AnswerService.html":{}}}],["question.position",{"_index":2293,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.service",{"_index":2198,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["question_group",{"_index":548,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"injectables/ExportationRepository.html":{},"classes/GradeIndex1624560625346.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["question_group_grade",{"_index":567,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["question_group`(`id",{"_index":554,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["question_id",{"_index":146,"title":{},"body":{"classes/Answer1622421768424.html":{},"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["question_statement",{"_index":838,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["question`(`id",{"_index":161,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["questioncontroller",{"_index":2031,"title":{"controllers/QuestionController.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questionfinddto",{"_index":2042,"title":{"classes/QuestionFindDto.html":{}},"body":{"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questiongroup",{"_index":629,"title":{"classes/QuestionGroup.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongroup.exam",{"_index":2202,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.examid",{"_index":2211,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.position",{"_index":2204,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.ts",{"_index":2104,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroup.ts:12",{"_index":2106,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:4",{"_index":2105,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:6",{"_index":2107,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup1620179231630",{"_index":2102,"title":{"classes/QuestionGroup1620179231630.html":{}},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroup:17",{"_index":2154,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:21",{"_index":2148,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:24",{"_index":2151,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:28",{"_index":2152,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:31",{"_index":2150,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:34",{"_index":2153,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:37",{"_index":2149,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:40",{"_index":2155,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroupcontroller",{"_index":2110,"title":{"controllers/QuestionGroupController.html":{}},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questiongroupgrade",{"_index":1967,"title":{"classes/QuestionGroupGrade.html":{}},"body":{"injectables/PersonalQuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["questiongroupgraderemove.ts",{"_index":2158,"title":{},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{},"coverage.html":{}}}],["questiongroupgraderemove.ts:12",{"_index":2160,"title":{},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["questiongroupgraderemove.ts:6",{"_index":2159,"title":{},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["questiongroupgraderemove.ts:8",{"_index":2161,"title":{},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["questiongroupgraderemove1624883202213",{"_index":2156,"title":{"classes/QuestionGroupGradeRemove1624883202213.html":{}},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{},"coverage.html":{}}}],["questiongroupmodule",{"_index":269,"title":{"modules/QuestionGroupModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["questiongroupnotfound",{"_index":2196,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongrouprelations",{"_index":1971,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongrouprepository",{"_index":1960,"title":{"classes/QuestionGroupRepository.html":{}},"body":{"injectables/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["questiongroupservice",{"_index":2131,"title":{"injectables/QuestionGroupService.html":{}},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["questiongrouptarget.ts",{"_index":2233,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["questiongrouptarget.ts:25",{"_index":2235,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget.ts:4",{"_index":2234,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget.ts:6",{"_index":2236,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget1621992475274",{"_index":2231,"title":{"classes/QuestionGroupTarget1621992475274.html":{}},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["questiongroupuser",{"_index":2237,"title":{"interfaces/QuestionGroupUser.html":{}},"body":{"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["questiongroup})@apinotfoundresponse",{"_index":2116,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["questionid",{"_index":77,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/CreateAnswerDto.html":{}}}],["questionids",{"_index":2297,"title":{},"body":{"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["questionids.map((id",{"_index":2300,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionimage.ts",{"_index":2241,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionimage.ts:14",{"_index":2243,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:4",{"_index":2242,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:6",{"_index":2244,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage1620477869366",{"_index":2239,"title":{"classes/QuestionImage1620477869366.html":{}},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionmap",{"_index":335,"title":{},"body":{"injectables/AnswerService.html":{}}}],["questionmap.get(answerdto.questionid",{"_index":343,"title":{},"body":{"injectables/AnswerService.html":{}}}],["questionnotfound",{"_index":2279,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionposition.ts",{"_index":2247,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionposition.ts:11",{"_index":2249,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:4",{"_index":2248,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:6",{"_index":2250,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition1620488935141",{"_index":2245,"title":{"classes/QuestionPosition1620488935141.html":{}},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionpositionidx.ts",{"_index":2253,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["questionpositionidx.ts:14",{"_index":2255,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx.ts:4",{"_index":2254,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx.ts:6",{"_index":2256,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx1620563708532",{"_index":2251,"title":{"classes/QuestionPositionIdx1620563708532.html":{}},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["questionpositionmap",{"_index":2299,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionpositionmap.get(question.id",{"_index":2301,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionrepository",{"_index":2170,"title":{"classes/QuestionRepository.html":{}},"body":{"modules/QuestionGroupModule.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questions",{"_index":331,"title":{},"body":{"injectables/AnswerService.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["questions.dto",{"_index":2063,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["questions.dto.ts",{"_index":748,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"coverage.html":{}}}],["questions.dto.ts:16",{"_index":750,"title":{},"body":{"classes/CreateQuestion.html":{}}}],["questions.dto.ts:25",{"_index":796,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["questions.map((question",{"_index":2296,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionservice",{"_index":305,"title":{"injectables/QuestionService.html":{}},"body":{"injectables/AnswerService.html":{},"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["question})@apinotfoundresponse",{"_index":2045,"title":{},"body":{"controllers/QuestionController.html":{}}}],["questão",{"_index":770,"title":{},"body":{"classes/CreateQuestionDto.html":{},"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["questões",{"_index":824,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["randombytes",{"_index":1695,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["rate",{"_index":2559,"title":{},"body":{"dependencies.html":{}}}],["ratelimit",{"_index":2759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ratelimitconfig",{"_index":2502,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ratelimitconfigkey",{"_index":2503,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["raw",{"_index":2312,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["read",{"_index":2602,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":217,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["readonlymap",{"_index":336,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamTargetService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["record",{"_index":2341,"title":{},"body":{"interfaces/SwaggerOptions.html":{}}}],["reduce",{"_index":1980,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["references",{"_index":157,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["reflect",{"_index":2574,"title":{},"body":{"dependencies.html":{}}}],["regexp",{"_index":2693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras",{"_index":2696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('sentry",{"_index":2760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(ratelimitconfigkey",{"_index":2754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regular",{"_index":424,"title":{},"body":{"classes/Auth1619445806509.html":{},"miscellaneous/enumerations.html":{}}}],["reject",{"_index":1282,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["reject(e",{"_index":1285,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["relations",{"_index":1020,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["remoteconfig",{"_index":1476,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["remove",{"_index":172,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["remove(@param('id",{"_index":228,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["remove(id",{"_index":181,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorder",{"_index":2035,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorder(reorderquesitondto",{"_index":2049,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorder(reorderquestiongroupdto",{"_index":2126,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["reorder(undefined",{"_index":2190,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorderquesitondto",{"_index":2053,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorderquestiondto",{"_index":2050,"title":{"classes/ReorderQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"coverage.html":{}}}],["reorderquestiongroupdto",{"_index":2127,"title":{"classes/ReorderQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["replace(/\\//gu",{"_index":1421,"title":{},"body":{"injectables/ExportationService.html":{}}}],["repositories/answer",{"_index":280,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["repositories/answer.repository",{"_index":279,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["repositories/auth.repository",{"_index":460,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["repositories/exam",{"_index":1003,"title":{},"body":{"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["repositories/exam.repository",{"_index":1068,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{}}}],["repositories/grade.repository",{"_index":594,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/GradeService.html":{}}}],["repositories/period.repository",{"_index":596,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/PeriodService.html":{}}}],["repositories/professor.repository",{"_index":598,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{}}}],["repositories/question",{"_index":1973,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["repositories/question.repository",{"_index":2171,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionService.html":{}}}],["repositories/student.repository",{"_index":600,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{}}}],["repositories/user.repository",{"_index":2411,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":988,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExportationService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["request",{"_index":1771,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["request.body",{"_index":1817,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["request.url",{"_index":1790,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["request.user",{"_index":2744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('bcryptjs",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["require('faker",{"_index":1827,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["require('lodash",{"_index":1276,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["required",{"_index":762,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["reset",{"_index":271,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve(_.clonedeep(this._targetmap",{"_index":1283,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["response",{"_index":1772,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["response.status(status).send(ex",{"_index":1818,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["result",{"_index":39,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.interface",{"_index":321,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{}}}],["result.interface.ts",{"_index":2311,"title":{},"body":{"interfaces/SoftDeleteResult.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["result.model",{"_index":1045,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["result.model.ts",{"_index":1081,"title":{},"body":{"classes/ExamPersonalResult.html":{},"coverage.html":{}}}],["result.model.ts:4",{"_index":1084,"title":{},"body":{"classes/ExamPersonalResult.html":{}}}],["result.model.ts:5",{"_index":1086,"title":{},"body":{"classes/ExamPersonalResult.html":{}}}],["result.model.ts:6",{"_index":1085,"title":{},"body":{"classes/ExamPersonalResult.html":{}}}],["result.push(...personalgroups",{"_index":2230,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["result.raw.affectedrows",{"_index":1184,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["result?.length",{"_index":47,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["results",{"_index":68,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":222,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":2576,"title":{},"body":{"dependencies.html":{}}}],["rodar",{"_index":2634,"title":{},"body":{"index.html":{}}}],["role",{"_index":63,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["role.enum",{"_index":634,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["role.enum.ts",{"_index":2597,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["root",{"_index":1292,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["row.interface",{"_index":1346,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["row.interface.ts",{"_index":833,"title":{},"body":{"interfaces/CsvLineRow.html":{},"coverage.html":{}}}],["runontransactioncomplete",{"_index":2441,"title":{},"body":{"injectables/UserService.html":{}}}],["runontransactioncomplete((e",{"_index":2449,"title":{},"body":{"injectables/UserService.html":{}}}],["rxjs",{"_index":1907,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1908,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["s",{"_index":1377,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["s.id",{"_index":1378,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["s.title",{"_index":1365,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["salt",{"_index":55,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["schema",{"_index":1219,"title":{},"body":{"controllers/ExamTargetController.html":{},"injectables/ExamTargetNodeFactory.html":{}}}],["schema.childs?.map((node",{"_index":1259,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["schema.type",{"_index":1257,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["scope",{"_index":848,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["scope.transient",{"_index":849,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["score",{"_index":78,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/CreateAnswerDto.html":{},"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["se",{"_index":775,"title":{},"body":{"classes/CreateQuestionDto.html":{},"injectables/ExportationRepository.html":{}}}],["secret",{"_index":2745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1882,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["securityrules",{"_index":1477,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["seedauxiliary1.ts",{"_index":1821,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seedauxiliary1.ts:17",{"_index":2310,"title":{},"body":{"classes/SeedAuxiliary1624412129413.html":{}}}],["seedauxiliary1.ts:90",{"_index":2309,"title":{},"body":{"classes/SeedAuxiliary1624412129413.html":{}}}],["seedauxiliary1624412129413",{"_index":1832,"title":{"classes/SeedAuxiliary1624412129413.html":{}},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["select",{"_index":45,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/ExamRepository.html":{},"injectables/ExportationRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{}}}],["selectquerybuilder",{"_index":1113,"title":{},"body":{"classes/ExamRepository.html":{}}}],["send.dto",{"_index":1699,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["send.dto.ts",{"_index":1453,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["sendtodevice",{"_index":1624,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["sendtodevice(token",{"_index":1626,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["sendtosentry",{"_index":1803,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["senhaforte",{"_index":2764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sentry",{"_index":1774,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["sentry.captureexception(exception",{"_index":1807,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["sentry/node",{"_index":1775,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"dependencies.html":{}}}],["sentry/tracing",{"_index":2549,"title":{},"body":{"dependencies.html":{}}}],["sentryconfig",{"_index":2505,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sentryinit",{"_index":2532,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sentryinit(config",{"_index":2617,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ser",{"_index":773,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["service",{"_index":1324,"title":{},"body":{"controllers/ExportationController.html":{},"controllers/UploadController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["services",{"_index":1659,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["services/exam",{"_index":961,"title":{},"body":{"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{}}}],["services/exam.service",{"_index":1041,"title":{},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{}}}],["services/firebase",{"_index":1654,"title":{},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{}}}],["services/grade.service",{"_index":601,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/period.service",{"_index":602,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/professor.service",{"_index":603,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/question",{"_index":2132,"title":{},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{}}}],["services/question.service",{"_index":2062,"title":{},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{}}}],["services/student.service",{"_index":604,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/uploader.service",{"_index":1851,"title":{},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{}}}],["set",{"_index":54,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["setexamandposition",{"_index":2180,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["setexamandposition(questiongroup",{"_index":2192,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["seu",{"_index":2641,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":2747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sim",{"_index":1391,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["sistema",{"_index":2631,"title":{},"body":{"index.html":{}}}],["size",{"_index":1443,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{}}}],["snakenamingstrategy",{"_index":2728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["softdeleteresult",{"_index":319,"title":{"interfaces/SoftDeleteResult.html":{}},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["sort((a",{"_index":1986,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["sortitems",{"_index":854,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["specialized",{"_index":2417,"title":{},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/.../1620299822480",{"_index":2676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1622326106015",{"_index":2691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1622378888497",{"_index":2674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1624416663575",{"_index":2678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../answer",{"_index":2589,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":2685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../casl",{"_index":2591,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../core.constants.ts",{"_index":2679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":2612,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":2609,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../database.config.ts",{"_index":2677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exam",{"_index":2593,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../exam.constants.ts",{"_index":2680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exportation",{"_index":2595,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../firebase",{"_index":2669,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../firebase.config.ts",{"_index":2682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase.constants.ts",{"_index":2681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":2675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../infra.constants.ts",{"_index":2692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":2610,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.config.ts",{"_index":2684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../last.util.ts",{"_index":2611,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2608,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../question",{"_index":2686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../question.constants.ts",{"_index":2687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rate",{"_index":2688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sentry.config.ts",{"_index":2689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":2690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":2596,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/answer/answer.controller.ts",{"_index":169,"title":{},"body":{"controllers/AnswerController.html":{},"coverage.html":{}}}],["src/answer/answer.controller.ts:30",{"_index":179,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:43",{"_index":187,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:51",{"_index":183,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.module.ts",{"_index":273,"title":{},"body":{"modules/AnswerModule.html":{}}}],["src/answer/answer.service.ts",{"_index":299,"title":{},"body":{"injectables/AnswerService.html":{},"coverage.html":{}}}],["src/answer/answer.service.ts:17",{"_index":307,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:28",{"_index":310,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:66",{"_index":311,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:70",{"_index":313,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:79",{"_index":316,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:87",{"_index":314,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/dto/create",{"_index":685,"title":{},"body":{"classes/CreateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/dto/update",{"_index":2347,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/entities/answer",{"_index":230,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Grade.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity",{"_index":2028,"title":{},"body":{"classes/Question.html":{}}}],["src/answer/entities/answer.entity.ts",{"_index":70,"title":{},"body":{"classes/Answer.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity.ts:12",{"_index":93,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:15",{"_index":96,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:18",{"_index":87,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:21",{"_index":89,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:24",{"_index":84,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:27",{"_index":88,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/enums/answer",{"_index":2598,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/answer/interfaces/batch",{"_index":608,"title":{},"body":{"interfaces/BatchUser.html":{},"coverage.html":{}}}],["src/answer/repositories/answer",{"_index":246,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["src/answer/repositories/answer.repository.ts",{"_index":286,"title":{},"body":{"classes/AnswerRepository.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.constants.ts",{"_index":2479,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.module.ts",{"_index":454,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":2438,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:23",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/casl/casl.module.ts",{"_index":655,"title":{},"body":{"modules/CaslModule.html":{}}}],["src/auth/casl/enums/casl",{"_index":2600,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/casl/factories/casl",{"_index":611,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/controllers/auth.controller.ts",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/controllers/auth.controller.ts:12",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/dtos/auth.dto.ts",{"_index":442,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/auth.dto.ts:6",{"_index":444,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dtos/create",{"_index":705,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts",{"_index":1892,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts:8",{"_index":1893,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":407,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts:10",{"_index":411,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:13",{"_index":412,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:7",{"_index":410,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/guards/jwt.guard",{"_index":201,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/UploadController.html":{}}}],["src/auth/guards/jwt.guard.ts",{"_index":1855,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/interfaces/jwt",{"_index":1860,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/repositories/auth.repository.ts",{"_index":467,"title":{},"body":{"classes/AuthRepository.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1862,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:14",{"_index":1865,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:27",{"_index":1867,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auxiliary/auxiliary.module",{"_index":1079,"title":{},"body":{"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["src/auxiliary/auxiliary.module.ts",{"_index":592,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["src/auxiliary/entities/course.entity.ts",{"_index":675,"title":{},"body":{"classes/Course.html":{},"coverage.html":{}}}],["src/auxiliary/entities/course.entity.ts:11",{"_index":680,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:14",{"_index":679,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:8",{"_index":677,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/grade.entity",{"_index":242,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/QuestionGroupGrade.html":{}}}],["src/auxiliary/entities/grade.entity.ts",{"_index":1708,"title":{},"body":{"classes/Grade.html":{},"coverage.html":{}}}],["src/auxiliary/entities/grade.entity.ts:20",{"_index":1719,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:23",{"_index":1714,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:26",{"_index":1718,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:29",{"_index":1713,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:32",{"_index":1712,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:36",{"_index":1717,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:40",{"_index":1716,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/period.entity",{"_index":884,"title":{},"body":{"classes/Exam.html":{}}}],["src/auxiliary/entities/period.entity.ts",{"_index":1910,"title":{},"body":{"classes/Period.html":{},"coverage.html":{}}}],["src/auxiliary/entities/period.entity.ts:12",{"_index":1915,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:15",{"_index":1912,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:18",{"_index":1913,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:9",{"_index":1914,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/professor.entity",{"_index":1964,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["src/auxiliary/entities/professor.entity.ts",{"_index":1989,"title":{},"body":{"classes/Professor.html":{},"coverage.html":{}}}],["src/auxiliary/entities/professor.entity.ts:10",{"_index":2001,"title":{},"body":{"classes/Professor.html":{}}}],["src/auxiliary/entities/professor.entity.ts:8",{"_index":1994,"title":{},"body":{"classes/Professor.html":{}}}],["src/auxiliary/entities/student.entity",{"_index":1965,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["src/auxiliary/entities/student.entity.ts",{"_index":2314,"title":{},"body":{"classes/Student.html":{},"coverage.html":{}}}],["src/auxiliary/entities/student.entity.ts:10",{"_index":2317,"title":{},"body":{"classes/Student.html":{}}}],["src/auxiliary/entities/student.entity.ts:8",{"_index":2316,"title":{},"body":{"classes/Student.html":{}}}],["src/auxiliary/entities/subject.entity.ts",{"_index":2327,"title":{},"body":{"classes/Subject.html":{},"coverage.html":{}}}],["src/auxiliary/entities/subject.entity.ts:10",{"_index":2329,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:13",{"_index":2333,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:16",{"_index":2331,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:19",{"_index":2330,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:22",{"_index":2332,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/repositories/grade.repository.ts",{"_index":1732,"title":{},"body":{"classes/GradeRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/grade.repository.ts:11",{"_index":1735,"title":{},"body":{"classes/GradeRepository.html":{}}}],["src/auxiliary/repositories/period.repository.ts",{"_index":1926,"title":{},"body":{"classes/PeriodRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/professor.repository.ts",{"_index":2003,"title":{},"body":{"classes/ProfessorRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/student.repository.ts",{"_index":2319,"title":{},"body":{"classes/StudentRepository.html":{},"coverage.html":{}}}],["src/auxiliary/services/grade.service",{"_index":1966,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["src/auxiliary/services/grade.service.ts",{"_index":1751,"title":{},"body":{"injectables/GradeService.html":{},"coverage.html":{}}}],["src/auxiliary/services/grade.service.ts:15",{"_index":1754,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/grade.service.ts:19",{"_index":1755,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/grade.service.ts:9",{"_index":1753,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/period.service",{"_index":1160,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/auxiliary/services/period.service.ts",{"_index":1928,"title":{},"body":{"injectables/PeriodService.html":{},"coverage.html":{}}}],["src/auxiliary/services/period.service.ts:14",{"_index":1933,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:27",{"_index":1934,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:42",{"_index":1937,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:8",{"_index":1932,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/professor.service",{"_index":2439,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/professor.service.ts",{"_index":2005,"title":{},"body":{"injectables/ProfessorService.html":{},"coverage.html":{}}}],["src/auxiliary/services/professor.service.ts:11",{"_index":2007,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:18",{"_index":2009,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:24",{"_index":2012,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/student.service",{"_index":2440,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/student.service.ts",{"_index":2321,"title":{},"body":{"injectables/StudentService.html":{},"coverage.html":{}}}],["src/auxiliary/services/student.service.ts:11",{"_index":2322,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:18",{"_index":2323,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:24",{"_index":2324,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/types/user",{"_index":1461,"title":{},"body":{"classes/FindPersonalDto.html":{},"miscellaneous/typealiases.html":{}}}],["src/config/cors.config.ts",{"_index":2487,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/config/database.config.ts",{"_index":2493,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/firebase.config.ts",{"_index":2495,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/index.ts",{"_index":2497,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/interfaces/swagger.interface.ts",{"_index":2338,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{}}}],["src/config/jwt.config.ts",{"_index":2498,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/rate",{"_index":2500,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/sentry.config.ts",{"_index":2504,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.config.ts",{"_index":2506,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controllers/app.controller.ts",{"_index":362,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/controllers/app.controller.ts:12",{"_index":368,"title":{},"body":{"controllers/AppController.html":{}}}],["src/controllers/app.controller.ts:6",{"_index":366,"title":{},"body":{"controllers/AppController.html":{}}}],["src/core/core.constants.ts",{"_index":2509,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":670,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/decorators/is",{"_index":2511,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/entities/ff.entity",{"_index":413,"title":{},"body":{"classes/Auth.html":{},"classes/ExamTarget.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["src/core/entities/ff.entity.ts",{"_index":1448,"title":{},"body":{"classes/FFEntity.html":{},"coverage.html":{}}}],["src/core/entities/ff.entity.ts:6",{"_index":1449,"title":{},"body":{"classes/FFEntity.html":{}}}],["src/core/entities/timestamp.entity.ts",{"_index":2342,"title":{},"body":{"classes/TimestampEntity.html":{},"coverage.html":{}}}],["src/core/entities/timestamp.entity.ts:10",{"_index":2344,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:13",{"_index":2346,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:16",{"_index":2345,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/filters/http",{"_index":1759,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["src/core/interceptors/payload.interceptor.ts",{"_index":1898,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/payload.interceptor.ts:12",{"_index":1904,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["src/core/interfaces/soft",{"_index":320,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["src/core/utils/last.util",{"_index":2200,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["src/core/utils/last.util.ts",{"_index":2513,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/migrations",{"_index":2726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/migrations/1619445806509",{"_index":416,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["src/database/migrations/1620179231630",{"_index":2103,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["src/database/migrations/1620299822480",{"_index":6,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1620477175799",{"_index":515,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["src/database/migrations/1620477869366",{"_index":2240,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["src/database/migrations/1620478273991",{"_index":902,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["src/database/migrations/1620488935141",{"_index":2246,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["src/database/migrations/1620563708532",{"_index":2252,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["src/database/migrations/1621036457247",{"_index":1308,"title":{},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["src/database/migrations/1621992475274",{"_index":2232,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["src/database/migrations/1622326106015",{"_index":1189,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1622332886234",{"_index":930,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["src/database/migrations/1622334780336",{"_index":939,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["src/database/migrations/1622378888497",{"_index":1205,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1622417032753",{"_index":971,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["src/database/migrations/1622421768424",{"_index":127,"title":{},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["src/database/migrations/1624416663574",{"_index":565,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["src/database/migrations/1624416663575",{"_index":1820,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1624547816204",{"_index":1920,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["src/database/migrations/1624560625346",{"_index":1726,"title":{},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["src/database/migrations/1624750140569",{"_index":289,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"coverage.html":{}}}],["src/database/migrations/1624883202214",{"_index":2157,"title":{},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{},"coverage.html":{}}}],["src/exam/controllers/exam",{"_index":945,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["src/exam/controllers/exam.controller.ts",{"_index":1025,"title":{},"body":{"controllers/ExamController.html":{},"coverage.html":{}}}],["src/exam/controllers/exam.controller.ts:31",{"_index":1029,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:37",{"_index":1031,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:43",{"_index":1037,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:48",{"_index":1033,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:53",{"_index":1040,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:61",{"_index":1038,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/dtos/create",{"_index":713,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"coverage.html":{}}}],["src/exam/dtos/exam",{"_index":966,"title":{},"body":{"classes/ExamAgreementDto.html":{},"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["src/exam/dtos/find",{"_index":1454,"title":{},"body":{"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["src/exam/dtos/update",{"_index":2352,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["src/exam/entities/exam",{"_index":108,"title":{},"body":{"classes/Answer.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/User.html":{},"coverage.html":{}}}],["src/exam/entities/exam.entity",{"_index":1916,"title":{},"body":{"classes/Period.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{}}}],["src/exam/entities/exam.entity.ts",{"_index":850,"title":{},"body":{"classes/Exam.html":{},"coverage.html":{}}}],["src/exam/entities/exam.entity.ts:20",{"_index":873,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:23",{"_index":862,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:26",{"_index":867,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:29",{"_index":863,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:32",{"_index":861,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:35",{"_index":869,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:38",{"_index":866,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:42",{"_index":872,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:45",{"_index":865,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:48",{"_index":864,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:51",{"_index":858,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:54",{"_index":878,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:58",{"_index":881,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:62",{"_index":883,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/enums/exam",{"_index":2603,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/exam/exam.constants.ts",{"_index":2516,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/exam/exam.module",{"_index":284,"title":{},"body":{"modules/AnswerModule.html":{}}}],["src/exam/exam.module.ts",{"_index":1064,"title":{},"body":{"modules/ExamModule.html":{}}}],["src/exam/factories/exam",{"_index":1249,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["src/exam/interfaces/exam",{"_index":202,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamUser.html":{},"coverage.html":{}}}],["src/exam/models/exam",{"_index":1080,"title":{},"body":{"classes/ExamPersonalResult.html":{},"classes/ExamTargetNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/exam/providers/exam",{"_index":1290,"title":{},"body":{"injectables/ExamTargetTree.html":{},"coverage.html":{}}}],["src/exam/repositories/exam",{"_index":977,"title":{},"body":{"classes/ExamAgreementRepository.html":{},"classes/ExamTargetRepository.html":{},"coverage.html":{}}}],["src/exam/repositories/exam.repository.ts",{"_index":1087,"title":{},"body":{"classes/ExamRepository.html":{},"coverage.html":{}}}],["src/exam/repositories/exam.repository.ts:25",{"_index":1093,"title":{},"body":{"classes/ExamRepository.html":{}}}],["src/exam/repositories/exam.repository.ts:55",{"_index":1111,"title":{},"body":{"classes/ExamRepository.html":{}}}],["src/exam/repositories/exam.repository.ts:73",{"_index":1114,"title":{},"body":{"classes/ExamRepository.html":{}}}],["src/exam/services/exam",{"_index":322,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["src/exam/services/exam.service",{"_index":2195,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["src/exam/services/exam.service.ts",{"_index":1142,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{}}}],["src/exam/services/exam.service.ts:19",{"_index":1156,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:24",{"_index":1146,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:33",{"_index":1152,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:46",{"_index":1147,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:53",{"_index":1148,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:57",{"_index":1149,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:69",{"_index":1150,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:88",{"_index":1155,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:97",{"_index":1154,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exportation/enums/exportation",{"_index":2604,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/exportation/exportation.controller.ts",{"_index":1315,"title":{},"body":{"controllers/ExportationController.html":{},"coverage.html":{}}}],["src/exportation/exportation.controller.ts:19",{"_index":1319,"title":{},"body":{"controllers/ExportationController.html":{}}}],["src/exportation/exportation.module.ts",{"_index":1332,"title":{},"body":{"modules/ExportationModule.html":{}}}],["src/exportation/exportation.repository.ts",{"_index":1336,"title":{},"body":{"injectables/ExportationRepository.html":{},"coverage.html":{}}}],["src/exportation/exportation.repository.ts:12",{"_index":1342,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["src/exportation/exportation.repository.ts:9",{"_index":1340,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["src/exportation/exportation.service.ts",{"_index":1401,"title":{},"body":{"injectables/ExportationService.html":{},"coverage.html":{}}}],["src/exportation/exportation.service.ts:11",{"_index":1406,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/exportation.service.ts:17",{"_index":1412,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/exportation.service.ts:28",{"_index":1408,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/exportation.service.ts:34",{"_index":1409,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/interfaces/csv",{"_index":817,"title":{},"body":{"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"coverage.html":{}}}],["src/exportation/maps/user",{"_index":2520,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase",{"_index":1697,"title":{},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["src/firebase/dtos/firebase",{"_index":1682,"title":{},"body":{"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["src/firebase/firebase",{"_index":1464,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.constants.ts",{"_index":2524,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.module.ts",{"_index":1651,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:31",{"_index":1652,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:41",{"_index":1653,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/interfaces/firebase",{"_index":1568,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["src/firebase/services/firebase",{"_index":1582,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["src/firebase/types/firebase",{"_index":2672,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/infra/controllers/upload.controller.ts",{"_index":2359,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{}}}],["src/infra/controllers/upload.controller.ts:23",{"_index":2363,"title":{},"body":{"controllers/UploadController.html":{}}}],["src/infra/dtos/file",{"_index":1452,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["src/infra/infra.constants.ts",{"_index":2526,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infra/infra.module",{"_index":1333,"title":{},"body":{"modules/ExportationModule.html":{}}}],["src/infra/infra.module.ts",{"_index":1848,"title":{},"body":{"modules/InfraModule.html":{}}}],["src/infra/services/firebase",{"_index":1685,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["src/infra/services/uploader.service",{"_index":1417,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/infra/services/uploader.service.ts",{"_index":2375,"title":{},"body":{"classes/UploaderService.html":{},"coverage.html":{}}}],["src/infra/services/uploader.service.ts:4",{"_index":2377,"title":{},"body":{"classes/UploaderService.html":{}}}],["src/logger/logger.module.ts",{"_index":1890,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logger.service.ts",{"_index":846,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":2527,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/question",{"_index":110,"title":{},"body":{"classes/Answer.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/FindPersonalDto.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/controllers/user.controller.ts",{"_index":2388,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/controllers/user.controller.ts:15",{"_index":2390,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controllers/user.controller.ts:21",{"_index":2393,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/decoratos/get",{"_index":205,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionGroupController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dtos/create",{"_index":798,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto",{"_index":2013,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["src/user/dtos/user.dto.ts",{"_index":2403,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto.ts:6",{"_index":2404,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/entities/user.entity",{"_index":922,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/FindPersonalDto.html":{},"controllers/QuestionGroupController.html":{}}}],["src/user/entities/user.entity.ts",{"_index":2378,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:11",{"_index":2380,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:14",{"_index":2379,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":2383,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:20",{"_index":2382,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:23",{"_index":2381,"title":{},"body":{"classes/User.html":{}}}],["src/user/enum/user",{"_index":633,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/helpers/create",{"_index":2537,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/user/interfaces/user",{"_index":2416,"title":{},"body":{"interfaces/UserResult.html":{},"coverage.html":{}}}],["src/user/repositories/user.repository.ts",{"_index":2413,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/user/user.module.ts",{"_index":2408,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":2418,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:23",{"_index":2425,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:33",{"_index":2426,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:46",{"_index":2428,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:57",{"_index":2432,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:61",{"_index":2436,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:69",{"_index":2430,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:97",{"_index":2434,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":1779,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["start",{"_index":856,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/PeriodService.html":{}}}],["starta",{"_index":1945,"title":{},"body":{"injectables/PeriodService.html":{}}}],["startb",{"_index":1947,"title":{},"body":{"injectables/PeriodService.html":{}}}],["started",{"_index":576,"title":{"index.html":{}},"body":{"classes/Auxiliary1624416663574.html":{},"miscellaneous/enumerations.html":{}}}],["started_at",{"_index":523,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["startedat",{"_index":728,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{}}}],["startofmonth",{"_index":1824,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["startofmonth(new",{"_index":1833,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["stated_at",{"_index":533,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["statement",{"_index":763,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["statements",{"_index":2471,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1143,"title":{},"body":{"injectables/ExamService.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["status",{"_index":528,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["status.enum",{"_index":887,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["status.enum.ts",{"_index":2594,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":1777,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["storage",{"_index":1478,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["storage.service.ts",{"_index":1662,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["storage.service.ts:15",{"_index":1667,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:9",{"_index":1664,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storagebucket",{"_index":1524,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["storageservice",{"_index":1689,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["strategies",{"_index":2584,"title":{},"body":{"dependencies.html":{}}}],["strategies/jwt.strategy",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1872,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":129,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["student",{"_index":844,"title":{"classes/Student.html":{}},"body":{"interfaces/CsvLineRow.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["student.cpf",{"_index":1843,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["student.enrollment",{"_index":1842,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["student.entity",{"_index":1722,"title":{},"body":{"classes/Grade.html":{}}}],["student_grade",{"_index":573,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["studentgrades",{"_index":2315,"title":{},"body":{"classes/Student.html":{}}}],["studentrepository",{"_index":599,"title":{"classes/StudentRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{}}}],["students",{"_index":1710,"title":{},"body":{"classes/Grade.html":{}}}],["studentservice",{"_index":591,"title":{"injectables/StudentService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["subject",{"_index":538,"title":{"classes/Subject.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"injectables/ExportationRepository.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{},"coverage.html":{}}}],["subject.course",{"_index":684,"title":{},"body":{"classes/Course.html":{}}}],["subject.entity",{"_index":682,"title":{},"body":{"classes/Course.html":{},"classes/Grade.html":{}}}],["subject.id",{"_index":1841,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["subject_id",{"_index":542,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["subject_title",{"_index":839,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["subject`(`id",{"_index":562,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["subjectid",{"_index":1711,"title":{},"body":{"classes/Grade.html":{}}}],["subjects",{"_index":676,"title":{},"body":{"classes/Course.html":{}}}],["subscriber.{js,ts",{"_index":2720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscribers",{"_index":2719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sudo",{"_index":2656,"title":{},"body":{"index.html":{}}}],["super",{"_index":1878,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":2658,"title":{},"body":{"modules.html":{}}}],["suprir",{"_index":2628,"title":{},"body":{"index.html":{}}}],["svg",{"_index":2659,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2579,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":2507,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfigkey",{"_index":2508,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2337,"title":{"interfaces/SwaggerOptions.html":{}},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":638,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["synchronize",{"_index":2721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":2620,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":136,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["tableinheritance",{"_index":116,"title":{},"body":{"classes/Answer.html":{},"classes/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2539,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":744,"title":{},"body":{"classes/CreateExamDto.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["target.controller",{"_index":1073,"title":{},"body":{"modules/ExamModule.html":{}}}],["target.controller.ts",{"_index":1213,"title":{},"body":{"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["target.controller.ts:20",{"_index":1220,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["target.controller.ts:26",{"_index":1218,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["target.entity",{"_index":888,"title":{},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{}}}],["target.entity.ts",{"_index":1185,"title":{},"body":{"classes/ExamTarget.html":{},"coverage.html":{}}}],["target.entity.ts:8",{"_index":1186,"title":{},"body":{"classes/ExamTarget.html":{}}}],["target.id",{"_index":1104,"title":{},"body":{"classes/ExamRepository.html":{}}}],["target.repository",{"_index":1070,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["target.repository.ts",{"_index":1261,"title":{},"body":{"classes/ExamTargetRepository.html":{},"coverage.html":{}}}],["target.service",{"_index":1071,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["target.service.ts",{"_index":1263,"title":{},"body":{"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["target.service.ts:12",{"_index":1269,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:22",{"_index":1274,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:30",{"_index":1270,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:42",{"_index":1271,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:48",{"_index":1273,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.type",{"_index":1105,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExamTargetService.html":{}}}],["targetmap",{"_index":1166,"title":{},"body":{"injectables/ExamService.html":{}}}],["targetmap.get(target",{"_index":1170,"title":{},"body":{"injectables/ExamService.html":{}}}],["targetnodefactory",{"_index":1296,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["targetnodefactory.generate",{"_index":1300,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["targets",{"_index":729,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targets.map((target",{"_index":1169,"title":{},"body":{"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{}}}],["targetservice",{"_index":1145,"title":{},"body":{"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["testing",{"_index":1805,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["text",{"_index":521,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTitle1621036457247.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["text/csv",{"_index":1442,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this._targetmap",{"_index":1279,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.answergraderepository.create(createdto",{"_index":349,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answergraderepository.save(answer",{"_index":350,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.create(createdto",{"_index":351,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.delete",{"_index":330,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.find",{"_index":354,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.findone(id",{"_index":355,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.merge(answer",{"_index":357,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.save(answer",{"_index":352,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.softdelete",{"_index":359,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerservice.createbatch(createanswerdtos",{"_index":223,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.remove(id",{"_index":229,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.update(id",{"_index":227,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.app",{"_index":1520,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.auth",{"_index":1533,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.database(url",{"_index":1534,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.delete",{"_index":1543,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.firestore",{"_index":1535,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.instanceid",{"_index":1536,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.machinelearning",{"_index":1537,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.messaging",{"_index":1538,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.name",{"_index":1530,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.options",{"_index":1532,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.projectmanagement",{"_index":1539,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.remoteconfig",{"_index":1540,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.securityrules",{"_index":1541,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.storage",{"_index":1542,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.authrepository.findone",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authrepository.save",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.createauth",{"_index":2446,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.findauth",{"_index":1884,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.login(logindto",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.childs",{"_index":1246,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.childs.length",{"_index":1242,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.configservice.get('node_env",{"_index":1793,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.configservice.get('skip_sentry",{"_index":1804,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.connection.createqueryrunner",{"_index":1351,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["this.createcsv(csvlines",{"_index":1437,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.createquerybuilder('exam",{"_index":1120,"title":{},"body":{"classes/ExamRepository.html":{}}}],["this.createquerybuilder('grade",{"_index":1742,"title":{},"body":{"classes/GradeRepository.html":{}}}],["this.createuserbytype(createuserdto",{"_index":2445,"title":{},"body":{"injectables/UserService.html":{}}}],["this.endedat",{"_index":900,"title":{},"body":{"classes/Exam.html":{}}}],["this.examagreementservice.createagreement(createagreementdto",{"_index":964,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["this.examagreementservice.findone(user",{"_index":329,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.examagreementservice.finishexam(examagreement",{"_index":353,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.examagreementservice.updateagreement(id",{"_index":965,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["this.examservice.create(createexamdto",{"_index":1048,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findall",{"_index":1049,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findone(copyquestiongroupdto.examid",{"_index":2215,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(createagreementdto.examid",{"_index":1007,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.examservice.findone(examid",{"_index":2203,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(id",{"_index":1054,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findpersonal(user",{"_index":1052,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.remove(id",{"_index":1056,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.update(id",{"_index":1055,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.exports",{"_index":1567,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.fcm",{"_index":1631,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.fcm.sendtodevice(token",{"_index":1633,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.findauth",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findone(copyquestiongroupdto.groupid",{"_index":2214,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.findone(id",{"_index":356,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.findspecializeduser(userdto",{"_index":2467,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduser(userdto",{"_index":2461,"title":{},"body":{"injectables/UserService.html":{}}}],["this.firebaseauth",{"_index":1607,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.createuser(createdto",{"_index":1617,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.deleteuser(uid",{"_index":1619,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.getuser(uid",{"_index":1616,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.updateuser(uid",{"_index":1618,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.verifyidtoken(token",{"_index":1610,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firestore",{"_index":1644,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.firestore.collection(collection",{"_index":1646,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.generate(node",{"_index":1260,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["this.getfilename(examid",{"_index":1434,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.getnextposition(createquestiondto.groupid",{"_index":2283,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.getnextposition(updatedto.groupid",{"_index":2294,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.gettargetmap",{"_index":1286,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.graderepository.find",{"_index":1757,"title":{},"body":{"injectables/GradeService.html":{}}}],["this.graderepository.findbyuserandperiod(user",{"_index":1758,"title":{},"body":{"injectables/GradeService.html":{}}}],["this.gradeservice.findbyuserandperiod",{"_index":1977,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["this.groups",{"_index":894,"title":{},"body":{"classes/Exam.html":{}}}],["this.groups?.sort((a",{"_index":895,"title":{},"body":{"classes/Exam.html":{}}}],["this.groupservice.findone(groupid",{"_index":2281,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.isleaf",{"_index":1244,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.jwtservice.signasync",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loadrelations(query).getmany",{"_index":1134,"title":{},"body":{"classes/ExamRepository.html":{}}}],["this.loadtargetmap",{"_index":1278,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.logger.error('catched",{"_index":1808,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.mustfindauth(logindto",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.newexam(createexamdto",{"_index":1171,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.newexam(updateexamdto",{"_index":1182,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.periodrepository.find",{"_index":1942,"title":{},"body":{"injectables/PeriodService.html":{}}}],["this.periodrepository.findone",{"_index":1949,"title":{},"body":{"injectables/PeriodService.html":{}}}],["this.periodservice.getperiodbyinterval(exam",{"_index":1173,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.personalgroup.getpersonal(user",{"_index":2229,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.professorgrades",{"_index":2002,"title":{},"body":{"classes/Professor.html":{}}}],["this.professorservice.createstudent(createuserdto",{"_index":2457,"title":{},"body":{"injectables/UserService.html":{}}}],["this.professorservice.findone(userdto",{"_index":2465,"title":{},"body":{"injectables/UserService.html":{}}}],["this.providers",{"_index":1563,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.questiongroupservice.copy(copyquestiongroupdto",{"_index":2143,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.create(createquestiongroupdto",{"_index":2137,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findall",{"_index":2138,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findone(id",{"_index":2141,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findpersonal",{"_index":2140,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.remove(id",{"_index":2145,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.reorder(reorderquestiongroupdto",{"_index":2144,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.update(id",{"_index":2142,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questions",{"_index":2100,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questions?.sort((a",{"_index":2101,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questionservice.copytogroup",{"_index":2218,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.questionservice.createquestion(createquestiondto",{"_index":2066,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.createquestions(groupid",{"_index":2069,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.find(finddto",{"_index":2071,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findbyids",{"_index":332,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.questionservice.findone(id",{"_index":2072,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.remove(id",{"_index":2075,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.reorder(reorderquesitondto",{"_index":2074,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.update(id",{"_index":2073,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.repository.create",{"_index":1012,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.create(createdto",{"_index":2016,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["this.repository.create(createquestiongroupdto",{"_index":2206,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.create(entitylike",{"_index":1165,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.find",{"_index":1018,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.findbyids(ids",{"_index":2290,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.findbytargets",{"_index":1178,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.findbyuser(user",{"_index":1176,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.findone",{"_index":1009,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["this.repository.findone(id",{"_index":1014,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{}}}],["this.repository.getcsvlines(examid",{"_index":1430,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.repository.merge",{"_index":2212,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.merge(agreement",{"_index":1017,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.repository.merge(exam",{"_index":1181,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.merge(question",{"_index":2295,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save",{"_index":2216,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.save(agreement",{"_index":1013,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.repository.save(exam",{"_index":1174,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.save(professor",{"_index":2017,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["this.repository.save(question",{"_index":2284,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save(questiongroup",{"_index":2209,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.save(questions",{"_index":2286,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save(student",{"_index":2326,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.repository.softdelete",{"_index":2302,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.softdelete(id",{"_index":1183,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["this.repository.update(group.id",{"_index":2227,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.root",{"_index":1299,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["this.root.dfs(target",{"_index":1305,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["this.service.exporttocsv(examid",{"_index":1326,"title":{},"body":{"controllers/ExportationController.html":{}}}],["this.service.upload(file",{"_index":2374,"title":{},"body":{"controllers/UploadController.html":{}}}],["this.setexamandposition",{"_index":2208,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.startedat",{"_index":899,"title":{},"body":{"classes/Exam.html":{}}}],["this.status",{"_index":927,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["this.storage",{"_index":1670,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storage.bucket(bucket).file(path",{"_index":1675,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storageservice.upload(this.getname(filedto",{"_index":1704,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["this.studentgrades",{"_index":2318,"title":{},"body":{"classes/Student.html":{}}}],["this.studentservice.createstudent(createuserdto",{"_index":2459,"title":{},"body":{"injectables/UserService.html":{}}}],["this.studentservice.findone(userdto",{"_index":2466,"title":{},"body":{"injectables/UserService.html":{}}}],["this.targetservice.gettargetmap",{"_index":1167,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.targetservice.gettargets",{"_index":1225,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["this.targetservice.gettargetsforuser(user.type",{"_index":1177,"title":{},"body":{"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["this.tree.querytarget(target).map((p",{"_index":1288,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.type",{"_index":1243,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.uploadservice.upload",{"_index":1438,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.userrepository.findone",{"_index":2460,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":2400,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findspecializeduser",{"_index":1886,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.mustfinduser",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateuser",{"_index":2402,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":49,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["timestamp",{"_index":1778,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["timestamp.entity",{"_index":1450,"title":{},"body":{"classes/FFEntity.html":{}}}],["timestampentity",{"_index":102,"title":{"classes/TimestampEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"coverage.html":{}}}],["timestampentity:10",{"_index":103,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:13",{"_index":107,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:16",{"_index":105,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timewindow",{"_index":2755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tinyint",{"_index":90,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["tipo",{"_index":829,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["title",{"_index":536,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/IEntity.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["tocopy",{"_index":2213,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["tocopy.questions",{"_index":2219,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["todo",{"_index":2092,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["token",{"_index":1604,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["token.interface",{"_index":1606,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["token.interface.ts",{"_index":1578,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"coverage.html":{}}}],["tolocaledatestring('pt",{"_index":1419,"title":{},"body":{"injectables/ExportationService.html":{}}}],["transaction",{"_index":2453,"title":{},"body":{"injectables/UserService.html":{}}}],["transactional",{"_index":250,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["transformer",{"_index":719,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreement.html":{},"classes/UpdateExamAgreementDto.html":{},"dependencies.html":{}}}],["tree",{"_index":1268,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["tree.provider",{"_index":1076,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["tree.provider.ts",{"_index":1291,"title":{},"body":{"injectables/ExamTargetTree.html":{},"coverage.html":{}}}],["tree.provider.ts:25",{"_index":1298,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["tree.provider.ts:8",{"_index":1295,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["true",{"_index":92,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"injectables/ExportationService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"classes/Period.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["true})@arrayminsize(1",{"_index":795,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["true})@type(undefined)@isdefined({each",{"_index":794,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["try",{"_index":1609,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":119,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateUserDto.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/ExamUser.html":{},"injectables/ExportationService.html":{},"interfaces/FindExamByUserDto.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["type.enum.ts",{"_index":2590,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["type.map",{"_index":1349,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["type.map.ts",{"_index":2521,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2667,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":30,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationRepository.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":276,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":605,"title":{},"body":{"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{}}}],["typeormmodule.forfeature([answerrepository",{"_index":285,"title":{},"body":{"modules/AnswerModule.html":{}}}],["typeormmodule.forfeature([authrepository",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([questiongrouprepository",{"_index":2174,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":2412,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":403,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":2350,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["types/firebase",{"_index":1642,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["types/user",{"_index":1740,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["u",{"_index":1370,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["u.enrollment",{"_index":1360,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["u.id",{"_index":1371,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["u.type",{"_index":1361,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["uh",{"_index":373,"title":{},"body":{"controllers/AppController.html":{}}}],["ui",{"_index":2580,"title":{},"body":{"dependencies.html":{}}}],["uid",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/JwtPayload.html":{}}}],["um",{"_index":2097,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["unauthorizedexception",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception(logindto",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(userdto",{"_index":2462,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":42,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/FirebaseStorageService.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":409,"title":{},"body":{"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["unique_code",{"_index":840,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["unknown",{"_index":2742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unprocessableentityexception",{"_index":2437,"title":{},"body":{"injectables/UserService.html":{}}}],["up",{"_index":15,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{},"index.html":{}}}],["up(queryrunner",{"_index":27,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["upcase",{"_index":1839,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["update",{"_index":141,"title":{},"body":{"classes/Answer1622421768424.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"miscellaneous/enumerations.html":{}}}],["update(id",{"_index":315,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["updateagreement",{"_index":984,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["updateagreement(id",{"_index":1000,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["updateagreementdto",{"_index":954,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["updateagreementdto.anonymous",{"_index":1016,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["updateagreemment",{"_index":948,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["updateagreemment(id",{"_index":953,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["updateanswerdto",{"_index":185,"title":{"classes/UpdateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["updated_at",{"_index":140,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["updatedat",{"_index":81,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedatecolumn",{"_index":106,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedto",{"_index":1599,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/QuestionService.html":{}}}],["updatedto.groupid",{"_index":2291,"title":{},"body":{"injectables/QuestionService.html":{}}}],["updateexamagreementdto",{"_index":955,"title":{"classes/UpdateExamAgreementDto.html":{}},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"classes/UpdateExamAgreementDto.html":{},"coverage.html":{}}}],["updateexamdto",{"_index":1039,"title":{"classes/UpdateExamDto.html":{}},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["updateone",{"_index":173,"title":{},"body":{"controllers/AnswerController.html":{}}}],["updateone(id",{"_index":184,"title":{},"body":{"controllers/AnswerController.html":{}}}],["updatequestiondto",{"_index":2054,"title":{"classes/UpdateQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["updatequestiongroupdto",{"_index":2129,"title":{"classes/UpdateQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["updatequestiongroupdto.examid",{"_index":2210,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["updateuser",{"_index":1587,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{}}}],["updateuser(uid",{"_index":1598,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["upload",{"_index":1663,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{}}}],["upload(@uploadedfile",{"_index":2373,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(file",{"_index":2360,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(filedto",{"_index":1693,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["upload(path",{"_index":1665,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["upload.dto",{"_index":1669,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["upload.dto.ts",{"_index":1683,"title":{},"body":{"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["upload_path",{"_index":2368,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadcontroller",{"_index":1849,"title":{"controllers/UploadController.html":{}},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":2364,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploader.service",{"_index":1700,"title":{},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["uploader.service.ts",{"_index":1686,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["uploader.service.ts:11",{"_index":1691,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploader.service.ts:19",{"_index":1694,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploader.service.ts:8",{"_index":1688,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploaderservice",{"_index":1405,"title":{"classes/UploaderService.html":{}},"body":{"injectables/ExportationService.html":{},"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadservice",{"_index":1404,"title":{},"body":{"injectables/ExportationService.html":{}}}],["url",{"_index":1489,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["useclass",{"_index":1854,"title":{},"body":{"modules/InfraModule.html":{}}}],["usefactory",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{}}}],["useguards",{"_index":194,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtguard",{"_index":215,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useinterceptors",{"_index":2365,"title":{},"body":{"controllers/UploadController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2372,"title":{},"body":{"controllers/UploadController.html":{}}}],["user",{"_index":46,"title":{"classes/User.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CsvLineRow.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExportationRepository.html":{},"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":206,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["user.decorator.ts",{"_index":2536,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1117,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":799,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":801,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":803,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":808,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":805,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.enrollment",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.helper.ts",{"_index":2538,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["user.id",{"_index":225,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["user.interface",{"_index":203,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["user.interface.ts",{"_index":609,"title":{},"body":{"interfaces/BatchUser.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamUser.html":{},"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["user.interface.ts:3",{"_index":1023,"title":{},"body":{"interfaces/ExamAgreementUser.html":{}}}],["user.role",{"_index":639,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.service",{"_index":2396,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.type",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/dtos/create",{"_index":2014,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["user/entities/user.entity",{"_index":625,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["user/enum/user",{"_index":1313,"title":{},"body":{"interfaces/ExamUser.html":{}}}],["user/user.module",{"_index":393,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user:11",{"_index":1996,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:14",{"_index":1995,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:17",{"_index":1999,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:20",{"_index":1998,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:23",{"_index":1997,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user_enrollment",{"_index":841,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["user_id",{"_index":546,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["user_type",{"_index":842,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["user`(`id",{"_index":580,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{}}}],["usercontroller",{"_index":2387,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":2011,"title":{"classes/UserDto.html":{}},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":224,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/GradeRepository.html":{}}}],["usermodule",{"_index":383,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":2705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":2410,"title":{"classes/UserRepository.html":{}},"body":{"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userresult",{"_index":2415,"title":{"interfaces/UserResult.html":{}},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userrole",{"_index":632,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":641,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.manager",{"_index":644,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.regular",{"_index":2385,"title":{},"body":{"classes/User.html":{}}}],["users",{"_index":2339,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":476,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertofind",{"_index":1459,"title":{},"body":{"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"miscellaneous/typealiases.html":{}}}],["usertype",{"_index":806,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ExamUser.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["usertype.professor",{"_index":2456,"title":{},"body":{"injectables/UserService.html":{}}}],["usertype.student",{"_index":2458,"title":{},"body":{"injectables/UserService.html":{}}}],["usertypemap",{"_index":1347,"title":{},"body":{"injectables/ExportationRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usertypemap.get(csvline.user_type",{"_index":1396,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["usevalue",{"_index":1562,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["using",{"_index":2653,"title":{},"body":{"index.html":{}}}],["usuário",{"_index":830,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{},"miscellaneous/variables.html":{}}}],["utf8",{"_index":1446,"title":{},"body":{"injectables/ExportationService.html":{}}}],["uuid",{"_index":544,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{}}}],["v0.0.1",{"_index":2763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":1863,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":1866,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":699,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["validateif((o",{"_index":703,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["validatenested",{"_index":753,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["validator",{"_index":447,"title":{},"body":{"classes/AuthDto.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/ExamAgreementDto.html":{},"classes/LoginDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["value",{"_index":131,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CreateAnswerDto.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":62,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["var",{"_index":53,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":408,"title":{},"body":{"classes/Auth.html":{},"classes/Course.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["varchar(255",{"_index":421,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{}}}],["varchar(36",{"_index":935,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["variable",{"_index":2480,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2648,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verdadeira",{"_index":780,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["verifytoken",{"_index":1588,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["verifytoken(token",{"_index":1602,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["version",{"_index":2340,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":879,"title":{},"body":{"classes/Exam.html":{},"classes/HttpExceptionFilter.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"miscellaneous/functions.html":{}}}],["where('agreement.userid",{"_index":1136,"title":{},"body":{"classes/ExamRepository.html":{}}}],["where('exam.status",{"_index":1124,"title":{},"body":{"classes/ExamRepository.html":{}}}],["where('grade.periodid",{"_index":1747,"title":{},"body":{"classes/GradeRepository.html":{}}}],["yes",{"_index":1490,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{},"classes/UploaderService.html":{}}}],["zoom",{"_index":270,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUser1620299822480.html":{"url":"classes/AdminUser1620299822480.html","title":"class - AdminUser1620299822480","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUser1620299822480\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620299822480-AdminUser.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\n\nconst cpf = '29997856155';\nconst enrollment = '999999';\n\nexport class AdminUser1620299822480 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    const result:\n      | {\n          id: number;\n        }[]\n      | undefined = await queryRunner.manager.query(\n      'SELECT id FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n\n    if (!result?.length) {\n      if (!process.env.ADMIN_PASSWORD) {\n        throw new Error('ADMIN_PASSWORD env var not set');\n      }\n\n      const salt = await bcrypt.genSalt();\n      const password = await bcrypt.hash(process.env.ADMIN_PASSWORD, salt);\n\n      await queryRunner.manager.query(\n        'INSERT INTO auth (login, password, salt) VALUES (?, ?, ?)',\n        [enrollment, password, salt],\n      );\n      await queryRunner.manager.query(\n        'INSERT INTO user (enrollment, cpf, type, role) VALUES (?, ?, ?, ?)',\n        [enrollment, cpf, 'User', 'admin'],\n      );\n    }\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.manager.query('DELETE FROM auth WHERE login = ?', [\n      enrollment,\n    ]);\n    await queryRunner.manager.query(\n      'DELETE FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Answer.html":{"url":"classes/Answer.html","title":"class - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examAgreement\n                            \n                            \n                                examAgreementId\n                            \n                            \n                                question\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreementId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'tinyint', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/exam-agreement.entity';\nimport { Question } from 'src/question-group/entities/question.entity';\nimport { Check, Column, Entity, ManyToOne, TableInheritance } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { AnswerType } from '../enums/answer-type.enum';\n\n@Entity('answer')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: AnswerType } })\n@Check(`\"score\" IS NULL OR \"score\" BETWEEN 1 AND 5`)\nexport class Answer extends FFEntity {\n  @Column({ type: 'tinyint', nullable: true })\n  score?: number;\n\n  @Column({ type: 'enum', enum: AnswerType })\n  type: AnswerType;\n\n  @Column({ type: 'int' })\n  examAgreementId: number;\n\n  @Column({ type: 'int' })\n  questionId: number;\n\n  @ManyToOne(() => ExamAgreement)\n  examAgreement: ExamAgreement;\n\n  @ManyToOne(() => Question)\n  question: Question;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Answer1622421768424.html":{"url":"classes/Answer1622421768424.html","title":"class - Answer1622421768424","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer1622421768424\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622421768424-Answer.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Answer1622421768424'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622421768424-Answer.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622421768424-Answer.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622421768424-Answer.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Answer1622421768424 implements MigrationInterface {\n    name = 'Answer1622421768424'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `answer` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `score` int NULL, `type` enum ('Answer', 'AnswerGrade') NOT NULL, `exam_agreement_id` int NOT NULL, `question_id` int NOT NULL, `grade_id` int NULL, INDEX `IDX_ec3a69def9f89a993b8f75ee4d` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_814144bcce3b80921f41f15b823` FOREIGN KEY (`exam_agreement_id`) REFERENCES `exam_agreement`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_c3d19a89541e4f0813f2fe09194` FOREIGN KEY (`question_id`) REFERENCES `question`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_971014f1fb44be716098484bb5a` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_971014f1fb44be716098484bb5a`\");\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_c3d19a89541e4f0813f2fe09194`\");\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_814144bcce3b80921f41f15b823`\");\n        await queryRunner.query(\"DROP INDEX `IDX_ec3a69def9f89a993b8f75ee4d` ON `answer`\");\n        await queryRunner.query(\"DROP TABLE `answer`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnswerController.html":{"url":"controllers/AnswerController.html","title":"controller - AnswerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnswerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                answer\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(examId: number, user: ExamUser, createAnswerDtos: CreateAnswerDto[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('batch/:examId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createAnswerDtos\n                                    \n                                            CreateAnswerDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(id: number, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  Delete,\n  ParseArrayPipe,\n  Put,\n  ParseIntPipe,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ExamUser } from 'src/exam/interfaces/exam-user.interface';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { AnswerService } from './answer.service';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\nimport { Answer } from './entities/answer.entity';\n\n@Controller('answer')\n@ApiTags('Answer')\n@ApiBearerAuth()\n@UseGuards(JwtGuard)\nexport class AnswerController {\n  constructor(private readonly answerService: AnswerService) {}\n\n  @Post('batch/:examId')\n  @ApiOkResponse({ type: [CreateAnswerDto] })\n  async create(\n    @Param('examId', ParseIntPipe) examId: number,\n    @GetUser() user: ExamUser,\n    @Body(new ParseArrayPipe({ items: CreateAnswerDto }))\n    createAnswerDtos: CreateAnswerDto[],\n  ) {\n    return this.answerService.createBatch(createAnswerDtos, {\n      userId: user.id,\n      examId,\n    });\n  }\n\n  @Put(':id')\n  async updateOne(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAnswerDto: UpdateAnswerDto,\n  ): Promise {\n    return this.answerService.update(id, updateAnswerDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number) {\n    return this.answerService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGrade.html":{"url":"classes/AnswerGrade.html","title":"class - AnswerGrade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGrade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer-grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Answer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                grade\n                            \n                            \n                                gradeId\n                            \n                            \n                                examAgreement\n                            \n                            \n                                examAgreementId\n                            \n                            \n                                question\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grade\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer-grade.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gradeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer-grade.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:24\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreementId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:18\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:27\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:21\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'tinyint', nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:15\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Grade } from 'src/auxiliary/entities/grade.entity';\nimport { ChildEntity, Column, ManyToOne } from 'typeorm';\nimport { Answer } from './answer.entity';\n\n@ChildEntity()\nexport class AnswerGrade extends Answer {\n  @ManyToOne(() => Grade)\n  grade: Grade;\n\n  @Column({ type: 'int' })\n  gradeId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGradeRepository.html":{"url":"classes/AnswerGradeRepository.html","title":"class - AnswerGradeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGradeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer-grade.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { AnswerGrade } from '../entities/answer-grade.entity';\n\n@EntityRepository(AnswerGrade)\nexport class AnswerGradeRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnswerModule.html":{"url":"modules/AnswerModule.html","title":"module - AnswerModule","body":"\n                   \n\n\n\n\n    Modules\n    AnswerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_providers\n\n\n\ncluster_AnswerModule_imports\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nExamModule->AnswerModule\n\n\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nAnswerModule -->\n\nQuestionGroupModule->AnswerModule\n\n\n\n\n\nAnswerService\n\nAnswerService\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/answer/answer.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnswerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnswerController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ExamModule\n                        \n                        \n                            QuestionGroupModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AnswerService } from './answer.service';\nimport { AnswerController } from './answer.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnswerRepository } from './repositories/answer.repository';\nimport { AnswerGradeRepository } from './repositories/answer-grade.repository';\nimport { QuestionGroupModule } from 'src/question-group/question-group.module';\nimport { ExamModule } from 'src/exam/exam.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AnswerRepository, AnswerGradeRepository]),\n    QuestionGroupModule,\n    ExamModule,\n  ],\n  controllers: [AnswerController],\n  providers: [AnswerService],\n})\nexport class AnswerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerRepository.html":{"url":"classes/AnswerRepository.html","title":"class - AnswerRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Answer } from '../entities/answer.entity';\n\n@EntityRepository(Answer)\nexport class AnswerRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerScoreCheck1624750140568.html":{"url":"classes/AnswerScoreCheck1624750140568.html","title":"class - AnswerScoreCheck1624750140568","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerScoreCheck1624750140568\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624750140569-AnswerScoreCheck.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'AnswerScoreCheck1624750140568'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624750140569-AnswerScoreCheck.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624750140569-AnswerScoreCheck.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624750140569-AnswerScoreCheck.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AnswerScoreCheck1624750140568 implements MigrationInterface {\n  name = 'AnswerScoreCheck1624750140568';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query('ALTER TABLE `answer` DROP COLUMN `score`');\n    await queryRunner.query(\n      'ALTER TABLE `answer` ADD `score` tinyint NULL CHECK (`score` IS NULL OR `score` BETWEEN 1 AND 5)',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query('ALTER TABLE `answer` DROP COLUMN `score`');\n    await queryRunner.query('ALTER TABLE `answer` ADD `score` int NULL');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnswerService.html":{"url":"injectables/AnswerService.html","title":"injectable - AnswerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AnswerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createBatch\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(answerRepository: AnswerRepository, answerGradeRepository: AnswerGradeRepository, questionService: QuestionService, examAgreementService: ExamAgreementService)\n                    \n                \n                        \n                            \n                                Defined in src/answer/answer.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        answerRepository\n                                                  \n                                                        \n                                                                        AnswerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        answerGradeRepository\n                                                  \n                                                        \n                                                                        AnswerGradeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examAgreementService\n                                                  \n                                                        \n                                                                        ExamAgreementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createBatch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createBatch(createAnswerDtos: CreateAnswerDto[], user: BatchUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAnswerDtos\n                                    \n                                            CreateAnswerDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                BatchUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { ExamAgreementService } from 'src/exam/services/exam-agreement.service';\nimport { Question } from 'src/question-group/entities/question.entity';\nimport { QuestionService } from 'src/question-group/services/question.service';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\nimport { Answer } from './entities/answer.entity';\nimport { AnswerType } from './enums/answer-type.enum';\nimport { BatchUser } from './interfaces/batch-user.interface';\nimport { AnswerGradeRepository } from './repositories/answer-grade.repository';\nimport { AnswerRepository } from './repositories/answer.repository';\n\n@Injectable()\nexport class AnswerService {\n  constructor(\n    @InjectRepository(AnswerRepository)\n    private readonly answerRepository: AnswerRepository,\n    @InjectRepository(AnswerGradeRepository)\n    private readonly answerGradeRepository: AnswerGradeRepository,\n    private readonly questionService: QuestionService,\n    private readonly examAgreementService: ExamAgreementService,\n  ) {}\n\n  @Transactional()\n  async createBatch(\n    createAnswerDtos: CreateAnswerDto[],\n    user: BatchUser,\n  ): Promise {\n    const examAgreement = await this.examAgreementService.findOne(user);\n    await this.answerRepository.delete({ examAgreement });\n    const questions = await this.questionService.findByIds(\n      createAnswerDtos.map((dto) => dto.questionId),\n    );\n    const questionMap: ReadonlyMap = new Map(questions.map((question) => [question.id, question]));\n\n    const answers = await Promise.all(\n      createAnswerDtos.map(async (answerDto) => {\n        const question = questionMap.get(answerDto.questionId);\n        if (!question) {\n          throw new NotFoundException(answerDto, 'Question not found');\n        }\n\n        const createDto = { ...answerDto, examAgreement };\n\n        if (answerDto.type === AnswerType.ANSWER_GRADE) {\n          const answer = this.answerGradeRepository.create(createDto);\n          return this.answerGradeRepository.save(answer);\n        }\n\n        const answer = this.answerRepository.create(createDto);\n        return this.answerRepository.save(answer);\n      }),\n    );\n\n    await this.examAgreementService.finishExam(examAgreement);\n\n    return answers;\n  }\n\n  findAll() {\n    return this.answerRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const answer = await this.answerRepository.findOne(id);\n    if (!answer) {\n      throw new NotFoundException({ id });\n    }\n    return answer;\n  }\n\n  @Transactional()\n  async update(id: number, updateAnswerDto: UpdateAnswerDto): Promise {\n    let answer = await this.findOne(id);\n    answer = this.answerRepository.merge(answer, updateAnswerDto);\n\n    return this.answerRepository.save(answer);\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const affected: SoftDeleteResult = await this.answerRepository.softDelete(\n      id,\n    );\n\n    if (!affected.raw.affectedRows) {\n      throw new NotFoundException({ id });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ping\n                            \n                            \n                                pong\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ping\n                        \n                        \n                    \n                \n            \n            \n                \nping()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in src/controllers/app.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pong\n                        \n                        \n                    \n                \n            \n            \n                \npong()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('health')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/controllers/app.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, Post } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get('health')\n  ping(): string {\n    return 'Healthy';\n  }\n\n  @Post('health')\n  @HttpCode(200)\n  pong() {\n    return \"Uh\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnswerModule\n\nAnswerModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnswerModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nExportationModule\n\nExportationModule\n\nAppModule -->\n\nExportationModule->AppModule\n\n\n\n\n\nInfraModule\n\nInfraModule\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnswerModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            AuxiliaryModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            ExamModule\n                        \n                        \n                            ExportationModule\n                        \n                        \n                            InfraModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            QuestionGroupModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { configs, databaseConfigKey } from './config';\n\nimport { LoggerModule } from './logger/logger.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './user/user.module';\nimport { ExamModule } from './exam/exam.module';\nimport { QuestionGroupModule } from './question-group/question-group.module';\nimport { AnswerModule } from './answer/answer.module';\nimport { CoreModule } from './core/core.module';\nimport { AuxiliaryModule } from './auxiliary/auxiliary.module';\nimport { InfraModule } from './infra/infra.module';\nimport { AppController } from './controllers/app.controller';\nimport { ExportationModule } from './exportation/exportation.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ load: configs }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(databaseConfigKey)!,\n      inject: [ConfigService],\n    }),\n    CoreModule,\n    LoggerModule,\n    AuthModule,\n    UserModule,\n    ExamModule,\n    QuestionGroupModule,\n    AnswerModule,\n    AuxiliaryModule,\n    InfraModule,\n    ExportationModule,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity } from 'typeorm';\n\n@Entity('auth')\nexport class Auth extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  login: string;\n\n  @Column({ type: 'varchar' })\n  password: string;\n\n  @Column({ type: 'varchar' })\n  salt: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth1619445806509.html":{"url":"classes/Auth1619445806509.html","title":"class - Auth1619445806509","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth1619445806509\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1619445806509-Auth.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auth1619445806509'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1619445806509-Auth.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Auth1619445806509 implements MigrationInterface {\n  name = 'Auth1619445806509';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'CREATE TABLE `auth` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `login` varchar(255) NOT NULL, `password` varchar(255) NOT NULL, `salt` varchar(255) NOT NULL, UNIQUE INDEX `IDX_952e252e7470ff78b18a9ec786` (`login`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      \"CREATE TABLE `user` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `enrollment` varchar(255) NOT NULL, `cpf` varchar(255) NOT NULL, `type` varchar(255) NOT NULL, `role` enum ('manager', 'admin', 'regular') NOT NULL DEFAULT 'regular', UNIQUE INDEX `IDX_914f18c8fbe52b10a6b276bc0c` (`enrollment`), UNIQUE INDEX `IDX_a6235b5ef0939d8deaad755fc8` (`cpf`), INDEX `IDX_31ef2b4d30675d0c15056b7f6e` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_a6235b5ef0939d8deaad755fc8` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_914f18c8fbe52b10a6b276bc0c` ON `user`',\n    );\n    await queryRunner.query('DROP TABLE `user`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_952e252e7470ff78b18a9ec786` ON `auth`',\n    );\n    await queryRunner.query('DROP TABLE `auth`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/auth/controllers/auth.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthService } from '../auth.service';\nimport { LoginDto } from '../dtos/login.dto';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  login(@Body() loginDto: LoginDto): Promise {\n    return this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/auth.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  login: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtGuard\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            CaslModule\n                        \n                        \n                            JwtGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserModule } from '../user/user.module';\nimport { jwtConfigKey } from '../config';\n\nimport { CaslModule } from './casl/casl.module';\n\nimport { AuthService } from './auth.service';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { JwtGuard } from './guards/jwt.guard';\nimport { AuthController } from './controllers/auth.controller';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AuthRepository]),\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(jwtConfigKey)!,\n      inject: [ConfigService],\n    }),\n    UserModule,\n    CaslModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtGuard, JwtStrategy],\n  exports: [AuthService, JwtGuard, CaslModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthRepository.html":{"url":"classes/AuthRepository.html","title":"class - AuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/repositories/auth.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Auth } from '../entities/auth.entity';\n\n@EntityRepository(Auth)\nexport class AuthRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuth\n                            \n                            \n                                findAuth\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                mustFindAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authRepository: AuthRepository, jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        AuthRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAuth(createAuthDto: CreateAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAuthDto\n                                    \n                                                CreateAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAuth\n                        \n                        \n                    \n                \n            \n            \n                \nfindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport bcrypt = require('bcryptjs');\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { UserService } from '../user/user.service';\n\nimport { LoginDto } from './dtos/login.dto';\nimport { Auth } from './entities/auth.entity';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { CreateAuthDto } from './dtos/create-auth.dto';\nimport { AuthDto } from './dtos/auth.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(AuthRepository)\n    private readonly authRepository: AuthRepository,\n    private readonly jwtService: JwtService,\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  findAuth(authDto: AuthDto): Promise {\n    return this.authRepository.findOne({ ...authDto });\n  }\n\n  async mustFindAuth(authDto: AuthDto): Promise {\n    const auth = await this.findAuth({ login: authDto.login });\n    if (!auth) {\n      throw new NotFoundException(authDto);\n    }\n\n    return auth;\n  }\n\n  async login(loginDto: LoginDto): Promise {\n    const auth = await this.mustFindAuth(loginDto);\n\n    const match = await bcrypt.compare(loginDto.password, auth.password);\n    if (!match) {\n      throw new UnauthorizedException(loginDto);\n    }\n\n    const user = await this.userService.mustFindUser({\n      enrollment: loginDto.login,\n    });\n    const accessToken = await this.jwtService.signAsync({\n      uid: user.enrollment,\n      type: user.type,\n    });\n\n    return accessToken;\n  }\n\n  @Transactional()\n  async createAuth(createAuthDto: CreateAuthDto): Promise {\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(createAuthDto.password, salt);\n\n    await this.authRepository.save({\n      login: createAuthDto.login,\n      salt,\n      password,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auxiliary1620477175799.html":{"url":"classes/Auxiliary1620477175799.html","title":"class - Auxiliary1620477175799","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auxiliary1620477175799\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477175799-Auxiliary.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auxiliary1620477175799'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Auxiliary1620477175799 implements MigrationInterface {\n  name = 'Auxiliary1620477175799';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"CREATE TABLE `exam` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `text` text NOT NULL, `description` text NOT NULL, `started_at` datetime NOT NULL, `ended_at` datetime NOT NULL, `allow_anonymous` tinyint NOT NULL DEFAULT 0, `status` enum ('active', 'inactive') NOT NULL, `period_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n    await queryRunner.query(\n      'CREATE TABLE `period` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) NULL, `stated_at` datetime NOT NULL, `ended_at` datetime NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `course` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, UNIQUE INDEX `IDX_5cf4963ae12285cda6432d5a3a` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `subject` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, `code_id` int NOT NULL, `course_id` int NULL, UNIQUE INDEX `IDX_92374adc6b583e8cf659977e48` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `subject_id` int NULL, `period_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `exam_agreement` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `uuid` varchar(255) NOT NULL, `anonymous` tinyint NOT NULL, `user_id` int NOT NULL, UNIQUE INDEX `IDX_2b38bb607ef3e86920e9bd0163` (`uuid`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD `personal` tinyint NOT NULL DEFAULT 0',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD `exam_id` int NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL DEFAULT 0',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD CONSTRAINT `FK_1d110bd5138b275a2ea2944e290` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP FOREIGN KEY `FK_1d110bd5138b275a2ea2944e290`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `period_id`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `status`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `allow_anonymous`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `ended_at`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `started_at`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `description`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `text`');\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `exam_id`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `personal`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_2b38bb607ef3e86920e9bd0163` ON `exam_agreement`',\n    );\n    await queryRunner.query('DROP TABLE `exam_agreement`');\n    await queryRunner.query('DROP TABLE `grade`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_92374adc6b583e8cf659977e48` ON `subject`',\n    );\n    await queryRunner.query('DROP TABLE `subject`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_5cf4963ae12285cda6432d5a3a` ON `course`',\n    );\n    await queryRunner.query('DROP TABLE `course`');\n    await queryRunner.query('DROP TABLE `period`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auxiliary1624416663574.html":{"url":"classes/Auxiliary1624416663574.html","title":"class - Auxiliary1624416663574","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auxiliary1624416663574\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663574-Auxiliary.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auxiliary1624416663574'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Auxiliary1624416663574 implements MigrationInterface {\n    name = 'Auxiliary1624416663574'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `period` CHANGE `stated_at` `started_at` datetime NOT NULL\");\n        await queryRunner.query(\"CREATE TABLE `question_group_grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL DEFAULT 0, `personal` tinyint NOT NULL DEFAULT 0, `position` int NOT NULL DEFAULT '0', `exam_id` int NULL, INDEX `IX_question_group_position` (`position`), PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `professor_grade` (`user_id` int NOT NULL, `grade_id` int NOT NULL, INDEX `IDX_f2d35d0b9823628374f51931dd` (`user_id`), INDEX `IDX_df58a2a413f5647f6411002cb2` (`grade_id`), PRIMARY KEY (`user_id`, `grade_id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `student_grade` (`user_id` int NOT NULL, `grade_id` int NOT NULL, INDEX `IDX_7540599d89cb2b6e17cc56d517` (`user_id`), INDEX `IDX_26862c959c4ecfc8f1b4a1a055` (`grade_id`), PRIMARY KEY (`user_id`, `grade_id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP COLUMN `code_id`\");\n        await queryRunner.query(\"ALTER TABLE `exam_agreement` ADD `status` enum ('started', 'finished') NOT NULL DEFAULT 'started'\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`\");\n        await queryRunner.query(\"ALTER TABLE `subject` CHANGE `course_id` `course_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `subject_id` `subject_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `period_id` `period_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `question_group_grade` ADD CONSTRAINT `FK_ba86f32978b67a878005c5af78a` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` ADD CONSTRAINT `FK_f2d35d0b9823628374f51931ddd` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` ADD CONSTRAINT `FK_df58a2a413f5647f6411002cb28` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` ADD CONSTRAINT `FK_7540599d89cb2b6e17cc56d5170` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` ADD CONSTRAINT `FK_26862c959c4ecfc8f1b4a1a055c` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `student_grade` DROP FOREIGN KEY `FK_26862c959c4ecfc8f1b4a1a055c`\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` DROP FOREIGN KEY `FK_7540599d89cb2b6e17cc56d5170`\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` DROP FOREIGN KEY `FK_df58a2a413f5647f6411002cb28`\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` DROP FOREIGN KEY `FK_f2d35d0b9823628374f51931ddd`\");\n        await queryRunner.query(\"ALTER TABLE `question_group_grade` DROP FOREIGN KEY `FK_ba86f32978b67a878005c5af78a`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `period_id` `period_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `subject_id` `subject_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `subject` CHANGE `course_id` `course_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `exam_agreement` DROP COLUMN `status`\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD `code_id` int NOT NULL\");\n        await queryRunner.query(\"DROP INDEX `IDX_26862c959c4ecfc8f1b4a1a055` ON `student_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_7540599d89cb2b6e17cc56d517` ON `student_grade`\");\n        await queryRunner.query(\"DROP TABLE `student_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_df58a2a413f5647f6411002cb2` ON `professor_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_f2d35d0b9823628374f51931dd` ON `professor_grade`\");\n        await queryRunner.query(\"DROP TABLE `professor_grade`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_group_position` ON `question_group_grade`\");\n        await queryRunner.query(\"DROP TABLE `question_group_grade`\");\n        await queryRunner.query(\"ALTER TABLE `period` CHANGE `started_at` `stated_at` datetime NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuxiliaryModule.html":{"url":"modules/AuxiliaryModule.html","title":"module - AuxiliaryModule","body":"\n                   \n\n\n\n\n    Modules\n    AuxiliaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\n\nGradeService \n\nGradeService \n\n\n\nPeriodService \n\nPeriodService \n\n\n\nProfessorService \n\nProfessorService \n\n\n\nStudentService \n\nStudentService \n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nGradeService  -->\n\nAuxiliaryModule->GradeService \n\n\n\nPeriodService  -->\n\nAuxiliaryModule->PeriodService \n\n\n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nGradeService\n\nGradeService\n\nAuxiliaryModule -->\n\nGradeService->AuxiliaryModule\n\n\n\n\n\nPeriodService\n\nPeriodService\n\nAuxiliaryModule -->\n\nPeriodService->AuxiliaryModule\n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auxiliary/auxiliary.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GradeService\n                        \n                        \n                            PeriodService\n                        \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GradeService\n                        \n                        \n                            PeriodService\n                        \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { GradeRepository } from './repositories/grade.repository';\nimport { PeriodRepository } from './repositories/period.repository';\nimport { ProfessorRepository } from './repositories/professor.repository';\nimport { StudentRepository } from './repositories/student.repository';\n\nimport { GradeService } from './services/grade.service';\nimport { PeriodService } from './services/period.service';\nimport { ProfessorService } from './services/professor.service';\nimport { StudentService } from './services/student.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      StudentRepository,\n      ProfessorRepository,\n      GradeRepository,\n      PeriodRepository,\n    ]),\n  ],\n  providers: [StudentService, ProfessorService, GradeService, PeriodService],\n  exports: [StudentService, ProfessorService, GradeService, PeriodService],\n})\nexport class AuxiliaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BatchUser.html":{"url":"interfaces/BatchUser.html","title":"interface - BatchUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BatchUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/interfaces/batch-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        examId\n                                \n                                \n                                        userId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        examId\n                                    \n                                \n                                \n                                    \n                                        examId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BatchUser {\n  userId: number;\n  examId: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/casl/factories/casl-ability.factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createForUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/casl/factories/casl-ability.factory.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { Answer } from '../../../answer/entities/answer.entity';\nimport { Exam } from '../../../exam/entities/exam.entity';\nimport { ExamAgreement } from '../../../exam/entities/exam-agreement.entity';\nimport { User } from '../../../user/entities/user.entity';\nimport { CaslAction as Action } from '../enums/casl-action.enum';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { UserRole } from 'src/user/enum/user-role.enum';\n\ntype CaslSubjects =\n  | InferSubjects\n  | 'all';\n\ntype AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder(\n      Ability as AbilityClass,\n    );\n\n    switch (user.role) {\n      case UserRole.ADMIN:\n        can(Action.MANAGE, 'all');\n        break;\n      case UserRole.MANAGER:\n        can(Action.READ, 'all');\n        can(Action.MANAGE, QuestionGroup);\n        break;\n      default:\n        can(Action.READ, User);\n        can(Action.READ, ExamAgreement, { userId: user.id });\n    }\n\n    // User\n    can(Action.UPDATE, User, { id: user.id });\n\n    can(Action.MANAGE, Answer, {});\n\n    // ExamAgreement\n    cannot(Action.DELETE, ExamAgreement, { uuid: undefined });\n\n    const examAgreementNotFinished = {\n      userId: user.id,\n      uuid: undefined,\n    };\n\n    can(Action.MANAGE, ExamAgreement, examAgreementNotFinished);\n\n    // Answer\n    can(Action.MANAGE, Answer, {\n      examAgreement: examAgreementNotFinished,\n    });\n\n    // Answer Grade\n\n    return build({\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/casl/casl.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './factories/casl-ability.factory';\n\n@Module({ providers: [CaslAbilityFactory], exports: [CaslAbilityFactory] })\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CopyQuestionGroupDto.html":{"url":"classes/CopyQuestionGroupDto.html","title":"class - CopyQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CopyQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/copy-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/copy-question-group.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/copy-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPositive } from 'class-validator';\n\nexport class CopyQuestionGroupDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsPositive()\n  examId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_CoreModule_exports\n\n\n\n\nHttpExceptionFilter \n\nHttpExceptionFilter \n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\n\n\nCoreModule\n\nCoreModule\n\nHttpExceptionFilter  -->\n\nCoreModule->HttpExceptionFilter \n\n\n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HttpExceptionFilter\n                        \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { HttpExceptionFilter } from './filters/http-exception.filter';\nimport { PayloadInterceptor } from './interceptors/payload.interceptor';\n\n@Global()\n@Module({\n  imports: [ConfigModule],\n  providers: [PayloadInterceptor, HttpExceptionFilter],\n  exports: [PayloadInterceptor, HttpExceptionFilter],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Course.html":{"url":"classes/Course.html","title":"class - Course","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Course\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/course.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                subjects\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subjects\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('course')\nexport class Course extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @OneToMany(() => Subject, (subject) => subject.course)\n  subjects: Subject[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnswerDto.html":{"url":"classes/CreateAnswerDto.html","title":"class - CreateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/create-answer.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                gradeId\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            gradeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()@ValidateIf(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Min(1)@Max(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Default value : AnswerType.ANSWER\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsEnum(AnswerType)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEnum,\n  IsOptional,\n  IsPositive,\n  Max,\n  Min,\n  ValidateIf,\n} from 'class-validator';\nimport { AnswerType } from '../enums/answer-type.enum';\n\nexport class CreateAnswerDto {\n  @IsOptional()\n  @Min(1)\n  @Max(5)\n  score?: number;\n\n  @IsPositive()\n  questionId: number;\n\n  @IsOptional()\n  @IsEnum(AnswerType)\n  type: AnswerType = AnswerType.ANSWER;\n\n  @IsPositive()\n  @ValidateIf((o: CreateAnswerDto) => o.type === AnswerType.ANSWER_GRADE)\n  gradeId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/create-auth.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        LoginDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         LoginDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         LoginDto:8\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { LoginDto } from './login.dto';\n\nexport class CreateAuthDto extends LoginDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamAgreementDto.html":{"url":"classes/CreateExamAgreementDto.html","title":"class - CreateExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                anonymous\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam-agreement.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsBoolean, IsOptional } from 'class-validator';\nimport { ExamAgreementDto } from './exam-agreement.dto';\n\nexport class CreateExamAgreementDto extends OmitType(ExamAgreementDto, [\n  'userId',\n]) {\n  @IsOptional()\n  @IsBoolean()\n  @Type(() => Boolean)\n  anonymous?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamDto.html":{"url":"classes/CreateExamDto.html","title":"class - CreateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                startedAt\n                            \n                            \n                                    Optional\n                                targets\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsArray()@IsEnum(ExamTargetType, {each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\n\nexport class CreateExamDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsDate()\n  @Type(() => Date)\n  startedAt: Date;\n\n  @IsDate()\n  @Type(() => Date)\n  endedAt: Date;\n\n  @IsOptional()\n  @IsBoolean()\n  allowAnonymous?: boolean;\n\n  @IsOptional()\n  @IsArray()\n  @IsEnum(ExamTargetType, {each: true})\n  targets?: ExamTargetType[];\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestion.html":{"url":"classes/CreateQuestion.html","title":"class - CreateQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-questions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-questions.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsDefined,\n  IsOptional,\n  IsPositive,\n  ValidateNested,\n} from 'class-validator';\nimport { CreateQuestionDto } from './create-question.dto';\n\nclass CreateQuestion extends OmitType(CreateQuestionDto, ['groupId']) {\n  @IsOptional()\n  @IsPositive()\n  id?: number;\n}\n\nexport class CreateQuestionsDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateQuestion)\n  @IsDefined({ each: true })\n  @ArrayMinSize(1)\n  questions: CreateQuestion[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionDto.html":{"url":"classes/CreateQuestionDto.html","title":"class - CreateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    Optional\n                                required\n                            \n                            \n                                statement\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsUrl()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Boolean, title: 'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão'})@IsBoolean()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class CreateQuestionDto {\n  @IsString()\n  @IsNotEmpty()\n  statement: string;\n\n  @IsOptional()\n  @IsUrl()\n  imageUrl?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  imageAlt?: string;\n\n  @ApiProperty({\n    type: Boolean,\n    title:\n      'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão',\n  })\n  @IsBoolean()\n  @IsOptional()\n  required?: boolean;\n\n  @IsPositive()\n  groupId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionGroupDto.html":{"url":"classes/CreateQuestionGroupDto.html","title":"class - CreateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                class\n                            \n                            \n                                    Optional\n                                examId\n                            \n                            \n                                    Optional\n                                personal\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n} from 'class-validator';\n\nexport class CreateQuestionGroupDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsOptional()\n  @IsBoolean()\n  class?: boolean;\n\n  @IsOptional()\n  @IsBoolean()\n  personal?: boolean;\n\n  @IsOptional()\n  @IsPositive()\n  examId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionsDto.html":{"url":"classes/CreateQuestionsDto.html","title":"class - CreateQuestionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-questions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                questions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CreateQuestion[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ValidateNested({each: true})@Type(undefined)@IsDefined({each: true})@ArrayMinSize(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-questions.dto.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsDefined,\n  IsOptional,\n  IsPositive,\n  ValidateNested,\n} from 'class-validator';\nimport { CreateQuestionDto } from './create-question.dto';\n\nclass CreateQuestion extends OmitType(CreateQuestionDto, ['groupId']) {\n  @IsOptional()\n  @IsPositive()\n  id?: number;\n}\n\nexport class CreateQuestionsDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateQuestion)\n  @IsDefined({ each: true })\n  @ArrayMinSize(1)\n  questions: CreateQuestion[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsCPF()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnrollment()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserRole)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserType)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum } from 'class-validator';\nimport { IsCPF } from 'brazilian-class-validator';\nimport { PickType } from '@nestjs/swagger';\n\nimport { IsEnrollment } from '../../core/decorators/is-enrollment.decorator';\nimport { UserType } from '../enum/user-type.enum';\nimport { CreateAuthDto } from '../../auth/dtos/create-auth.dto';\nimport { UserRole } from '../enum/user-role.enum';\n\nexport class CreateUserDto extends PickType(CreateAuthDto, ['password']) {\n  @IsCPF()\n  cpf: string;\n\n  @IsEnrollment()\n  enrollment: string;\n\n  @IsEnum(UserType)\n  type: UserType;\n\n  @IsEnum(UserRole)\n  role: UserRole;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CsvLine.html":{"url":"interfaces/CsvLine.html","title":"interface - CsvLine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CsvLine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/interfaces/csv-line.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Código Único\n                                \n                                \n                                            Optional\n                                        Disciplina\n                                \n                                \n                                        Grupo de Questões\n                                \n                                \n                                        Matrícula\n                                \n                                \n                                        Nota\n                                \n                                \n                                            Optional\n                                        Observação\n                                \n                                \n                                        Pessoal\n                                \n                                \n                                        Questão\n                                \n                                \n                                        Tipo de Usuário\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Código Único\n                                    \n                                \n                                \n                                    \n                                        Código Único:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Disciplina\n                                    \n                                \n                                \n                                    \n                                        Disciplina:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Grupo de Questões\n                                    \n                                \n                                \n                                    \n                                        Grupo de Questões:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Matrícula\n                                    \n                                \n                                \n                                    \n                                        Matrícula:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Nota\n                                    \n                                \n                                \n                                    \n                                        Nota:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Observação\n                                    \n                                \n                                \n                                    \n                                        Observação:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Pessoal\n                                    \n                                \n                                \n                                    \n                                        Pessoal:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Questão\n                                    \n                                \n                                \n                                    \n                                        Questão:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Tipo de Usuário\n                                    \n                                \n                                \n                                    \n                                        Tipo de Usuário:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CsvLine {\n  'Grupo de Questões': string;\n  'Tipo de Usuário': string;\n  Disciplina?: string;\n  Pessoal: string;\n  Questão: string;\n  Matrícula: string;\n  Nota: string;\n  'Código Único': string;\n  Observação?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CsvLineRow.html":{"url":"interfaces/CsvLineRow.html","title":"interface - CsvLineRow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CsvLineRow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/interfaces/csv-line-row.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        anonymous\n                                \n                                \n                                        group_id\n                                \n                                \n                                        group_title\n                                \n                                \n                                        is_class\n                                \n                                \n                                        is_personal\n                                \n                                \n                                            Optional\n                                        observation\n                                \n                                \n                                        question_id\n                                \n                                \n                                        question_statement\n                                \n                                \n                                            Optional\n                                        score\n                                \n                                \n                                            Optional\n                                        subject_title\n                                \n                                \n                                        unique_code\n                                \n                                \n                                        user_enrollment\n                                \n                                \n                                        user_type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        anonymous\n                                    \n                                \n                                \n                                    \n                                        anonymous:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group_id\n                                    \n                                \n                                \n                                    \n                                        group_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group_title\n                                    \n                                \n                                \n                                    \n                                        group_title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        is_class\n                                    \n                                \n                                \n                                    \n                                        is_class:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        is_personal\n                                    \n                                \n                                \n                                    \n                                        is_personal:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        observation\n                                    \n                                \n                                \n                                    \n                                        observation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        question_id\n                                    \n                                \n                                \n                                    \n                                        question_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        question_statement\n                                    \n                                \n                                \n                                    \n                                        question_statement:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        score\n                                    \n                                \n                                \n                                    \n                                        score:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject_title\n                                    \n                                \n                                \n                                    \n                                        subject_title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unique_code\n                                    \n                                \n                                \n                                    \n                                        unique_code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_enrollment\n                                    \n                                \n                                \n                                    \n                                        user_enrollment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_type\n                                    \n                                \n                                \n                                    \n                                        user_type:     \"Professor\" | \"Student\" | \"User\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Professor\" | \"Student\" | \"User\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CsvLineRow {\n  score?: string;\n  group_id: number;\n  group_title: string;\n  is_class: boolean;\n  is_personal: boolean;\n  question_id: number;\n  question_statement: string;\n  user_enrollment: string;\n  user_type: 'Professor' | 'Student' | 'User';\n  anonymous: boolean;\n  subject_title?: string;\n  unique_code: string;\n  observation?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger, Injectable, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class CustomLogger extends Logger {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam.html":{"url":"classes/Exam.html","title":"class - Exam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                agreements\n                            \n                            \n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                groups\n                            \n                            \n                                period\n                            \n                            \n                                periodId\n                            \n                            \n                                startedAt\n                            \n                            \n                                status\n                            \n                            \n                                    Optional\n                                targets\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    start\n                                \n                                \n                                    end\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            agreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groups\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QuestionGroup[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            periodId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamStatus})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamTarget[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/exam/entities/exam.entity.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        start\n                    \n                \n\n                \n                    \n                        getstart()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/entities/exam.entity.ts:58\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        end\n                    \n                \n\n                \n                    \n                        getend()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/entities/exam.entity.ts:62\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Period } from 'src/auxiliary/entities/period.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport {\n  AfterLoad,\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { ExamStatus } from '../enums/exam-status.enum';\nimport { ExamAgreement } from './exam-agreement.entity';\nimport { ExamTarget } from './exam-target.entity';\n\n@Entity('exam')\nexport class Exam extends FFEntity {\n  @Column({ type: 'text' })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'datetime' })\n  startedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @Column({ type: 'bool', default: false })\n  allowAnonymous: boolean;\n\n  @Column({ type: 'enum', enum: ExamStatus })\n  status: ExamStatus;\n\n  @Column({ type: 'int' })\n  periodId: number;\n\n  @ManyToMany(() => ExamTarget)\n  @JoinTable()\n  targets?: ExamTarget[];\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => QuestionGroup, (group) => group.exam)\n  groups: QuestionGroup[];\n\n  @OneToMany(() => ExamAgreement, (agreement) => agreement.exam)\n  agreements: ExamAgreement[];\n\n  @AfterLoad()\n  sortItems() {\n    this.groups = this.groups?.sort((a, b) => a.position - b.position) ?? [];\n  }\n\n  get start(): Date {\n    return this.startedAt;\n  }\n\n  get end(): Date {\n    return this.endedAt;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam1620478273991.html":{"url":"classes/Exam1620478273991.html","title":"class - Exam1620478273991","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam1620478273991\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620478273991-Exam.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam1620478273991'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620478273991-Exam.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Exam1620478273991 implements MigrationInterface {\n    name = 'Exam1620478273991'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL DEFAULT 0\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreement.html":{"url":"classes/ExamAgreement.html","title":"class - ExamAgreement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam-agreement.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anonymous\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                    Optional\n                                observation\n                            \n                            \n                                status\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                uuid\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasFinishedExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'boolean', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            observation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreementStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamAgreementStatus, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uuid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Generated('uuid')@Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasFinishedExam\n                        \n                        \n                    \n                \n            \n            \n                \nhasFinishedExam()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Expose()\n                \n            \n\n            \n                \n                    Defined in src/exam/entities/exam-agreement.entity.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from '../../core/entities/ff.entity';\nimport { Column, Entity, Generated, ManyToOne } from 'typeorm';\nimport { User } from 'src/user/entities/user.entity';\nimport { Exam } from './exam.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { Expose } from 'class-transformer';\n\n@Entity('exam_agreement')\nexport class ExamAgreement extends FFEntity {\n  @Generated('uuid')\n  @Column({ unique: true })\n  uuid: string;\n\n  @Column({ type: 'boolean', default: false })\n  anonymous: boolean;\n\n  @Column({ type: 'text', nullable: true })\n  observation?: string;\n\n  @Column({\n    type: 'enum',\n    enum: ExamAgreementStatus,\n    default: ExamAgreementStatus.STARTED,\n  })\n  status: ExamAgreementStatus;\n\n  @Column({ type: 'int' })\n  userId: number;\n\n  @Column({ type: 'int' })\n  examId: number;\n\n  @ManyToOne(() => User)\n  user: User;\n\n  @ManyToOne(() => Exam)\n  exam: Exam;\n\n  @Expose()\n  hasFinishedExam(): boolean {\n    return this.status === ExamAgreementStatus.FINISHED;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreement1622332886234.html":{"url":"classes/ExamAgreement1622332886234.html","title":"class - ExamAgreement1622332886234","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreement1622332886234\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622332886234-ExamAgreement.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreement1622332886234'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreement1622332886234 implements MigrationInterface {\n  name = 'ExamAgreement1622332886234';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD `exam_id` int NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `uuid` `uuid` varchar(36) NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD CONSTRAINT `FK_20bfb4e7c97aa20956be86c6beb` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD CONSTRAINT `FK_7bdc7fbb138980e5471e2a19366` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP FOREIGN KEY `FK_7bdc7fbb138980e5471e2a19366`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP FOREIGN KEY `FK_20bfb4e7c97aa20956be86c6beb`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `uuid` `uuid` varchar(255) NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP COLUMN `exam_id`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementAnonymousDefault1622334780336.html":{"url":"classes/ExamAgreementAnonymousDefault1622334780336.html","title":"class - ExamAgreementAnonymousDefault1622334780336","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementAnonymousDefault1622334780336\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreementAnonymousDefault1622334780336'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreementAnonymousDefault1622334780336\n  implements MigrationInterface {\n  name = 'ExamAgreementAnonymousDefault1622334780336';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `anonymous` `anonymous` tinyint NOT NULL DEFAULT 0',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `anonymous` `anonymous` tinyint NOT NULL',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamAgreementController.html":{"url":"controllers/ExamAgreementController.html","title":"controller - ExamAgreementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamAgreementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam-agreement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam-agreement\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAgreement\n                            \n                            \n                                    Async\n                                updateAgreemment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAgreement(createAgreementDto: CreateExamAgreementDto, user: ExamAgreementUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-agreement.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAgreementDto\n                                    \n                                                CreateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamAgreementUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAgreemment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAgreemment(id: number, updateAgreementDto: UpdateExamAgreementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: ExamAgreement})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-agreement.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAgreementDto\n                                    \n                                                UpdateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { CreateExamAgreementDto } from '../dtos/create-exam-agreement.dto';\nimport { UpdateExamAgreementDto } from '../dtos/update-exam-agreement.dto';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\nimport { ExamAgreementUser } from '../interfaces/exam-agreement-user.interface';\nimport { ExamAgreementService } from '../services/exam-agreement.service';\n\n@Controller('exam-agreement')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\n@ApiTags('ExamAgreement')\nexport class ExamAgreementController {\n  constructor(private readonly examAgreementService: ExamAgreementService) {}\n\n  @Post()\n  async createAgreement(\n    @Body() createAgreementDto: CreateExamAgreementDto,\n    @GetUser() user: ExamAgreementUser,\n  ): Promise {\n    return this.examAgreementService.createAgreement(createAgreementDto, user);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: ExamAgreement })\n  async updateAgreemment(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAgreementDto: UpdateExamAgreementDto,\n  ): Promise {\n    return this.examAgreementService.updateAgreement(id, updateAgreementDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementDto.html":{"url":"classes/ExamAgreementDto.html","title":"class - ExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/exam-agreement.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/exam-agreement.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from '@nestjs/swagger';\nimport { IsPositive } from 'class-validator';\n\nexport class ExamAgreementDto {\n  @ApiHideProperty()\n  userId: number;\n\n  @IsPositive()\n  examId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementObservation1622417032753.html":{"url":"classes/ExamAgreementObservation1622417032753.html","title":"class - ExamAgreementObservation1622417032753","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementObservation1622417032753\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622417032753-ExamAgreementObservation.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreementObservation1622417032753'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreementObservation1622417032753\n  implements MigrationInterface {\n  name = 'ExamAgreementObservation1622417032753';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD `observation` text NULL',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP COLUMN `observation`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementRepository.html":{"url":"classes/ExamAgreementRepository.html","title":"class - ExamAgreementRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam-agreement.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\n\n@EntityRepository(ExamAgreement)\nexport class ExamAgreementRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamAgreementService.html":{"url":"injectables/ExamAgreementService.html","title":"injectable - ExamAgreementService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamAgreementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam-agreement.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                agreementsByDateInterval\n                            \n                            \n                                    Async\n                                createAgreement\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                finishExam\n                            \n                            \n                                getByUser\n                            \n                            \n                                    Async\n                                updateAgreement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamAgreementRepository, examService: ExamService)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam-agreement.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamAgreementRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examService\n                                                  \n                                                        \n                                                                        ExamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            agreementsByDateInterval\n                        \n                        \n                    \n                \n            \n            \n                \nagreementsByDateInterval(start: Date, end: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAgreement(createAgreementDto: CreateExamAgreementDto, user: ExamAgreementUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAgreementDto\n                                    \n                                                CreateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamAgreementUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(findDto: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            finishExam\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    finishExam(agreement: ExamAgreement)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    agreement\n                                    \n                                                ExamAgreement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetByUser(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAgreement(id: number, updateAgreementDto: UpdateExamAgreementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAgreementDto\n                                    \n                                                UpdateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport { Between } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateExamAgreementDto } from '../dtos/create-exam-agreement.dto';\nimport { UpdateExamAgreementDto } from '../dtos/update-exam-agreement.dto';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { ExamAgreementUser } from '../interfaces/exam-agreement-user.interface';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamAgreementRepository } from '../repositories/exam-agreement.repository';\nimport { ExamService } from './exam.service';\n\n@Injectable()\nexport class ExamAgreementService {\n  constructor(\n    @InjectRepository(ExamAgreementRepository)\n    private readonly repository: ExamAgreementRepository,\n    @Inject(forwardRef(() => ExamService))\n    private readonly examService: ExamService,\n  ) {}\n\n  @Transactional()\n  async createAgreement(\n    createAgreementDto: CreateExamAgreementDto,\n    user: ExamAgreementUser,\n  ): Promise {\n    const exam = await this.examService.findOne(createAgreementDto.examId);\n    const alreadyAgreed = await this.repository.findOne({\n      where: { exam, user },\n    });\n\n    if (alreadyAgreed) {\n      throw new ConflictException('already agreed');\n    }\n\n    const agreement = this.repository.create({\n      ...createAgreementDto,\n      userId: user.id,\n    });\n\n    return this.repository.save(agreement);\n  }\n\n  @Transactional()\n  async updateAgreement(\n    id: number,\n    updateAgreementDto: UpdateExamAgreementDto,\n  ): Promise {\n    let agreement = await this.repository.findOne(id);\n\n    if (!agreement) {\n      throw new NotFoundException({ id });\n    }\n\n    if (agreement.status === ExamAgreementStatus.FINISHED) {\n      delete updateAgreementDto.anonymous;\n    }\n\n    agreement = this.repository.merge(agreement, updateAgreementDto);\n\n    return this.repository.save(agreement);\n  }\n\n  agreementsByDateInterval(start: Date, end: Date): Promise {\n    return this.repository.find({ where: { createdAt: Between(start, end) } });\n  }\n\n  @Transactional()\n  getByUser(user: ExamUser): Promise {\n    return this.repository.find({\n      where: { userId: user.id },\n      relations: ['exam'],\n    });\n  }\n\n  async findOne(findDto: {\n    userId: number;\n    examId: number;\n  }): Promise {\n    const agreement = await this.repository.findOne({\n      where: findDto,\n      relations: ['exam'],\n    });\n\n    if (!agreement) {\n      throw new NotFoundException(findDto);\n    }\n\n    return agreement;\n  }\n\n  async finishExam(agreement: ExamAgreement): Promise {\n    agreement.status = ExamAgreementStatus.FINISHED;\n\n    return this.repository.save(agreement);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamAgreementUser.html":{"url":"interfaces/ExamAgreementUser.html","title":"interface - ExamAgreementUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamAgreementUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/interfaces/exam-agreement-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasGrade\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasGrade\n                        \n                        \n                    \n                \n            \n            \n                \nhasGrade()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/interfaces/exam-agreement-user.interface.ts:3\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ExamAgreementUser {\n  id: number;\n  hasGrade(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamController.html":{"url":"controllers/ExamController.html","title":"controller - ExamController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Exam})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@ApiOkResponse({type: ExamPersonalResult})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n} from '@nestjs/common';\nimport { ExamService } from '../services/exam.service';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { UpdateExamDto } from '../dtos/update-exam.dto';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { Exam } from '../entities/exam.entity';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamPersonalResult } from '../models/exam-personal-result.model';\n\n@Controller('exam')\n@ApiTags('Exam')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class ExamController {\n  constructor(private readonly examService: ExamService) {}\n\n  @Post()\n  @ApiOkResponse({ type: Exam })\n  async create(@Body() createExamDto: CreateExamDto): Promise {\n    return this.examService.create(createExamDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Exam] })\n  async findAll(): Promise {\n    return this.examService.findAll();\n  }\n\n  @Get('me')\n  @ApiOkResponse({ type: ExamPersonalResult })\n  async findPersonal(@GetUser() user: ExamUser): Promise {\n    return this.examService.findPersonal(user);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.examService.findOne(id);\n  }\n\n  @Put(':id')\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateExamDto: UpdateExamDto,\n  ): Promise {\n    return this.examService.update(id, updateExamDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.examService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExamModule.html":{"url":"modules/ExamModule.html","title":"module - ExamModule","body":"\n                   \n\n\n\n\n    Modules\n    ExamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_imports\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\n\n\nExamModule\n\nExamModule\n\nExamModule -->\n\nAuxiliaryModule->ExamModule\n\n\n\n\n\nExamAgreementService \n\nExamAgreementService \n\nExamAgreementService  -->\n\nExamModule->ExamAgreementService \n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\n\n\nExamAgreementService\n\nExamAgreementService\n\nExamModule -->\n\nExamAgreementService->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nExamTargetNodeFactory\n\nExamTargetNodeFactory\n\nExamModule -->\n\nExamTargetNodeFactory->ExamModule\n\n\n\n\n\nExamTargetService\n\nExamTargetService\n\nExamModule -->\n\nExamTargetService->ExamModule\n\n\n\n\n\nExamTargetTree\n\nExamTargetTree\n\nExamModule -->\n\nExamTargetTree->ExamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exam/exam.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExamAgreementService\n                        \n                        \n                            ExamService\n                        \n                        \n                            ExamTargetNodeFactory\n                        \n                        \n                            ExamTargetService\n                        \n                        \n                            ExamTargetTree\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExamController\n                        \n                        \n                            ExamTargetController\n                        \n                        \n                            ExamAgreementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuxiliaryModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExamAgreementService\n                        \n                        \n                            ExamService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { ExamService } from './services/exam.service';\nimport { ExamController } from './controllers/exam.controller';\nimport { ExamRepository } from './repositories/exam.repository';\nimport { ExamTargetRepository } from './repositories/exam-target.repository';\nimport { ExamTargetService } from './services/exam-target.service';\nimport { ExamTargetController } from './controllers/exam-target.controller';\nimport { ExamAgreementService } from './services/exam-agreement.service';\nimport { ExamAgreementRepository } from './repositories/exam-agreement.repository';\nimport { ExamAgreementController } from './controllers/exam-agreement.controller';\nimport { ExamTargetTree } from './providers/exam-target-tree.provider';\nimport { ExamTargetNodeFactory } from './factories/exam-target-node.factory';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      ExamRepository,\n      ExamTargetRepository,\n      ExamAgreementRepository,\n    ]),\n    AuxiliaryModule,\n  ],\n  controllers: [ExamController, ExamTargetController, ExamAgreementController],\n  providers: [\n    ExamService,\n    ExamTargetService,\n    ExamAgreementService,\n    ExamTargetTree,\n    ExamTargetNodeFactory,\n  ],\n  exports: [ExamService, ExamAgreementService],\n})\nexport class ExamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamPersonalResult.html":{"url":"classes/ExamPersonalResult.html","title":"class - ExamPersonalResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamPersonalResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/models/exam-personal-result.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alreadyAgreed\n                            \n                            \n                                answered\n                            \n                            \n                                canAgree\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alreadyAgreed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-personal-result.model.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answered\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-personal-result.model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            canAgree\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-personal-result.model.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exam } from '../entities/exam.entity';\n\nexport class ExamPersonalResult {\n  alreadyAgreed: Exam[];\n  canAgree: Exam[];\n  answered: Exam[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamRepository.html":{"url":"classes/ExamRepository.html","title":"class - ExamRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findByTargets\n                            \n                            \n                                    Async\n                                findByUser\n                            \n                            \n                                    Private\n                                loadRelations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByTargets(undefined: FindExamByUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/repositories/exam.repository.ts:25\n                \n            \n\n\n            \n                \n                    SELECT DISTINCT exam.*\nFROM exam\nLEFT JOIN exam_targets_exam_target et\n  ON exam.id = et.exam_id\nINNER JOIN exam_target target\n  on et.exam_target_id = target.id AND target.type IN :targets\nWHERE\n  (exam.id NOT IN :ids)\n  (exam.status = \"ACTIVE\") AND\n  (exam.created_at BETWEEN :start AND :end) AND\n  (exam.deleted_at IS NULL)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindExamByUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUser(user: ExamUser)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/repositories/exam.repository.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            loadRelations\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadRelations(query: SelectQueryBuilder)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/repositories/exam.repository.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, SelectQueryBuilder } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { FindExamByUserDto } from '../dtos/find-exam-by-user.dto';\nimport { ExamTarget } from '../entities/exam-target.entity';\nimport { Exam } from '../entities/exam.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { ExamStatus } from '../enums/exam-status.enum';\nimport { ExamUser } from '../interfaces/exam-user.interface';\n\n@EntityRepository(Exam)\nexport class ExamRepository extends BaseRepository {\n  /**\n   * SELECT DISTINCT exam.*\n   * FROM exam\n   * LEFT JOIN exam_targets_exam_target et\n   *  ON exam.id = et.exam_id\n   * INNER JOIN exam_target target\n   *  on et.exam_target_id = target.id AND target.type IN :targets\n   * WHERE\n   *  (exam.id NOT IN :ids)\n   *  (exam.status = \"ACTIVE\") AND\n   *  (exam.created_at BETWEEN :start AND :end) AND\n   *  (exam.deleted_at IS NULL)\n   */\n  async findByTargets({\n    ignoreExams,\n    targets,\n  }: FindExamByUserDto): Promise {\n    const query = this.createQueryBuilder('exam');\n\n    query\n      .distinct(true)\n      .leftJoin('exam_targets_exam_target', 'et', 'exam.id = et.exam_id')\n      .leftJoin(\n        ExamTarget,\n        'target',\n        'et.exam_target_id = target.id AND target.type IN (:...targets)',\n        { targets },\n      )\n      .where('exam.status = :status', { status: ExamStatus.ACTIVE })\n      .andWhere(':date BETWEEN exam.startedAt AND exam.endedAt', {\n        date: new Date(),\n      });\n\n    if (ignoreExams.length) {\n      query.andWhere('exam.id NOT IN (:...ids)', {\n        ids: ignoreExams.map((el) => el.id),\n      });\n    }\n    // .andWhere('exam.created_at BETWEEN :start AND :end', {start})\n\n    return this.loadRelations(query).getMany();\n  }\n\n  async findByUser(user: ExamUser): Promise {\n    const query = this.createQueryBuilder('exam');\n\n    query\n      .innerJoinAndSelect('exam.agreements', 'agreement')\n      .where('agreement.userId = :userId', { userId: user.id })\n      .andWhere(\n        '(agreement.status = :answered OR (agreement.status = :defaultAgreementStatus AND :date BETWEEN exam.startedAt AND exam.endedAt))',\n        {\n          answered: ExamAgreementStatus.FINISHED,\n          defaultAgreementStatus: ExamAgreementStatus.STARTED,\n          date: new Date(),\n        },\n      );\n\n    return this.loadRelations(query).getMany();\n  }\n\n  private loadRelations(\n    query: SelectQueryBuilder,\n  ): SelectQueryBuilder {\n    return query\n      .innerJoinAndSelect('exam.period', 'exam_period')\n      .leftJoinAndSelect('exam.targets', 'exam_target');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamService.html":{"url":"injectables/ExamService.html","title":"injectable - ExamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                relations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Private\n                                    Async\n                                newExam\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamRepository, targetService: ExamTargetService, periodService: PeriodService)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetService\n                                                  \n                                                        \n                                                                        ExamTargetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        periodService\n                                                  \n                                                        \n                                                                        PeriodService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            newExam\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newExam(dto: CreateExamDto | UpdateExamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateExamDto | UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                                Readonly\n                            relations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    'groups',\n    'period',\n    'agreements',\n    'targets',\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/services/exam.service.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { groupBy, first } from 'lodash';\nimport { PeriodService } from 'src/auxiliary/services/period.service';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { UpdateExamDto } from '../dtos/update-exam.dto';\nimport { Exam } from '../entities/exam.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { EXAM_NOT_FOUND } from '../exam.constants';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamPersonalResult } from '../models/exam-personal-result.model';\nimport { ExamRepository } from '../repositories/exam.repository';\nimport { ExamTargetService } from './exam-target.service';\n\n@Injectable()\nexport class ExamService {\n  private static readonly relations = [\n    'groups',\n    'period',\n    'agreements',\n    'targets',\n  ];\n\n  constructor(\n    @InjectRepository(ExamRepository)\n    private readonly repository: ExamRepository,\n    private readonly targetService: ExamTargetService,\n    private readonly periodService: PeriodService,\n  ) {}\n\n  private async newExam(dto: CreateExamDto | UpdateExamDto): Promise {\n    const { targets, ...entityLike } = dto;\n    const exam = this.repository.create(entityLike);\n\n    if (targets) {\n      const targetMap = await this.targetService.getTargetMap();\n      exam.targets = targets.map((target) => targetMap.get(target)!);\n    }\n\n    return exam;\n  }\n\n  @Transactional()\n  async create(createExamDto: CreateExamDto): Promise {\n    const exam = await this.newExam(createExamDto);\n    exam.period = await this.periodService.getPeriodByInterval(exam);\n\n    return this.repository.save(exam);\n  }\n\n  findAll(): Promise {\n    return this.repository.find({ relations: ExamService.relations });\n  }\n\n  async findOne(id: number): Promise {\n    const exam = await this.repository.findOne(id, {\n      relations: ExamService.relations,\n    });\n    if (!exam) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n\n    return exam;\n  }\n\n  @Transactional()\n  async findPersonal(user: ExamUser): Promise {\n    const agreed = await this.repository.findByUser(user);\n\n    const targets = this.targetService.getTargetsForUser(user.type);\n\n    const canAgree = await this.repository.findByTargets({\n      ignoreExams: agreed,\n      targets,\n    });\n\n    const {\n      [ExamAgreementStatus.STARTED]: alreadyAgreed = [],\n      [ExamAgreementStatus.FINISHED]: answered = [],\n    } = groupBy(agreed, (exam) => first(exam.agreements)?.status);\n\n    return { alreadyAgreed, answered, canAgree };\n  }\n\n  @Transactional()\n  async update(id: number, updateExamDto: UpdateExamDto) {\n    let exam = await this.findOne(id);\n\n    exam = this.repository.merge(exam, await this.newExam(updateExamDto));\n\n    return this.repository.save(exam);\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTarget.html":{"url":"classes/ExamTarget.html","title":"class - ExamTarget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTarget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam-target.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamTargetType, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-target.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity } from 'typeorm';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\n\n@Entity('exam_target')\nexport class ExamTarget extends FFEntity {\n  @Column({ type: 'enum', enum: ExamTargetType, unique: true })\n  type: ExamTargetType;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTarget1622326106015.html":{"url":"classes/ExamTarget1622326106015.html","title":"class - ExamTarget1622326106015","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTarget1622326106015\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622326106015-ExamTarget.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTarget1622326106015'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nconst targets = [\"Student\", \"Professor\"];\n\nexport class ExamTarget1622326106015 implements MigrationInterface {\n  name = 'ExamTarget1622326106015';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IX_question_group_target` ON `question_group`',\n    );\n    await queryRunner.query(\n      \"CREATE TABLE `exam_target` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `type` enum ('Student', 'Professor') NOT NULL, UNIQUE INDEX `IDX_988f784cc581e38b7ed4943006` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n    await Promise.all(targets.map(target => queryRunner.query('INSERT INTO `exam_target` (`type`) VALUES (?)', [target])));\n    await queryRunner.query(\n      'CREATE TABLE `exam_targets_exam_target` (`exam_id` int NOT NULL, `exam_target_id` int NOT NULL, INDEX `IDX_4a22969058fa5105ad6bee583f` (`exam_id`), INDEX `IDX_af1604ea5493f65a6c8d70d98e` (`exam_target_id`), PRIMARY KEY (`exam_id`, `exam_target_id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `target`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` ADD CONSTRAINT `FK_4a22969058fa5105ad6bee583f1` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` ADD CONSTRAINT `FK_af1604ea5493f65a6c8d70d98ed` FOREIGN KEY (`exam_target_id`) REFERENCES `exam_target`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` DROP FOREIGN KEY `FK_af1604ea5493f65a6c8d70d98ed`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` DROP FOREIGN KEY `FK_4a22969058fa5105ad6bee583f1`',\n    );\n    await queryRunner.query(\n      \"ALTER TABLE `question_group` ADD `target` enum ('Student', 'Professor') NULL\",\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_af1604ea5493f65a6c8d70d98e` ON `exam_targets_exam_target`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_4a22969058fa5105ad6bee583f` ON `exam_targets_exam_target`',\n    );\n    await queryRunner.query('DROP TABLE `exam_targets_exam_target`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_988f784cc581e38b7ed4943006` ON `exam_target`',\n    );\n    await queryRunner.query('DROP TABLE `exam_target`');\n    await queryRunner.query(\n      'CREATE INDEX `IX_question_group_target` ON `question_group` (`target`)',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetAdd1622378888497.html":{"url":"classes/ExamTargetAdd1622378888497.html","title":"class - ExamTargetAdd1622378888497","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetAdd1622378888497\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622378888497-ExamTargetAdd.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTargetAdd1622378888497'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nconst addTargets = ['Course', 'Grade'];\n\nexport class ExamTargetAdd1622378888497 implements MigrationInterface {\n  name = 'ExamTargetAdd1622378888497';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"ALTER TABLE `exam_target` CHANGE `type` `type` enum ('Student', 'Professor', 'Course', 'Grade') NOT NULL\",\n    );\n    await Promise.all(\n      addTargets.map((target) =>\n        queryRunner.query('INSERT INTO exam_target (`type`) VALUES (?)', [\n          target,\n        ]),\n      ),\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `DELETE FROM exam_target WHERE type IN (${addTargets\n        .map((_) => '?')\n        .join(', ')})`,\n      [...addTargets],\n    );\n    await queryRunner.query(\n      \"ALTER TABLE `exam_target` CHANGE `type` `type` enum ('Student', 'Professor') NOT NULL\",\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamTargetController.html":{"url":"controllers/ExamTargetController.html","title":"controller - ExamTargetController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamTargetController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam-target.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam-target\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getForUser\n                            \n                            \n                                    Async\n                                getTargets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getForUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetForUser(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user')@ApiExcludeEndpoint()\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-target.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTargets()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined, schema: undefined})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-target.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { ApiExcludeEndpoint, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamTargetService } from '../services/exam-target.service';\n\n@Controller('exam-target')\n@ApiTags('ExamTarget')\n@UseGuards(JwtGuard)\nexport class ExamTargetController {\n  constructor(private readonly targetService: ExamTargetService) {}\n\n  @Get()\n  @ApiOkResponse({\n    type: [String],\n    schema: { example: Object.values(ExamTargetType) },\n  })\n  async getTargets(): Promise {\n    return this.targetService.getTargets();\n  }\n\n  @Get('user')\n  @ApiExcludeEndpoint()\n  getForUser(@GetUser() user: ExamUser) {\n    return this.targetService.getTargetsForUser(user.type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamTargetManagerDto.html":{"url":"interfaces/ExamTargetManagerDto.html","title":"interface - ExamTargetManagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamTargetManagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/exam-target-manager.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        targets\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        targets\n                                    \n                                \n                                \n                                    \n                                        targets:         ExamTargetType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ExamTargetType } from '../enums/exam-target-type.enum';\n\nexport interface ExamTargetManagerDto {\n  targets?: ExamTargetType[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetNode.html":{"url":"classes/ExamTargetNode.html","title":"class - ExamTargetNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/models/exam-target-node.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                childs\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dfs\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isLeaf\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamTargetNode[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-target-node.model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-target-node.model.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dfs\n                        \n                        \n                    \n                \n            \n            \n                \ndfs(type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/models/exam-target-node.model.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Path\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isLeaf\n                    \n                \n\n                \n                    \n                        getisLeaf()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/models/exam-target-node.model.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ExamTargetType } from '../enums/exam-target-type.enum';\n\ntype Path = ExamTargetNode[] | undefined;\n\nexport class ExamTargetNode {\n  childs: ExamTargetNode[];\n  type: ExamTargetType;\n\n  get isLeaf(): boolean {\n    return !this.childs.length;\n  }\n\n  dfs(type: string): Path {\n    if (this.type === type) {\n      return [this];\n    }\n    if (this.isLeaf) return;\n    for (const node of this.childs) {\n      const partialPath = node.dfs(type);\n      if (partialPath) {\n        return [this, ...partialPath];\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetNodeFactory.html":{"url":"injectables/ExamTargetNodeFactory.html","title":"injectable - ExamTargetNodeFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetNodeFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/factories/exam-target-node.factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generate\n                        \n                        \n                    \n                \n            \n            \n                \ngenerate(schema: ExamTargetNodeSchema)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/factories/exam-target-node.factory.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ExamTargetNodeSchema\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExamTargetNode\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\ninterface ExamTargetNodeSchema {\n  type: ExamTargetType;\n  childs?: ExamTargetNodeSchema[];\n}\n\n@Injectable()\nexport class ExamTargetNodeFactory {\n  generate(schema: ExamTargetNodeSchema): ExamTargetNode {\n    const node = new ExamTargetNode();\n    node.type = schema.type;\n\n    node.childs = schema.childs?.map((node) => this.generate(node)) ?? [];\n\n    return node;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamTargetNodeSchema.html":{"url":"interfaces/ExamTargetNodeSchema.html","title":"interface - ExamTargetNodeSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamTargetNodeSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/factories/exam-target-node.factory.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        childs\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        childs\n                                    \n                                \n                                \n                                    \n                                        childs:         ExamTargetNodeSchema[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetNodeSchema[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ExamTargetType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\ninterface ExamTargetNodeSchema {\n  type: ExamTargetType;\n  childs?: ExamTargetNodeSchema[];\n}\n\n@Injectable()\nexport class ExamTargetNodeFactory {\n  generate(schema: ExamTargetNodeSchema): ExamTargetNode {\n    const node = new ExamTargetNode();\n    node.type = schema.type;\n\n    node.childs = schema.childs?.map((node) => this.generate(node)) ?? [];\n\n    return node;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetRepository.html":{"url":"classes/ExamTargetRepository.html","title":"class - ExamTargetRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam-target.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { ExamTarget } from '../entities/exam-target.entity';\n\n@EntityRepository(ExamTarget)\nexport class ExamTargetRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetService.html":{"url":"injectables/ExamTargetService.html","title":"injectable - ExamTargetService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam-target.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _targetMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTargetMap\n                            \n                            \n                                    Async\n                                getTargets\n                            \n                            \n                                getTargetsForUser\n                            \n                            \n                                    Private\n                                    Async\n                                loadTargetMap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamTargetRepository, tree: ExamTargetTree)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam-target.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamTargetRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        ExamTargetTree\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTargetMap\n                        \n                        \n                    \n                \n            \n            \n                \ngetTargetMap()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTargets()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTargetsForUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetTargetsForUser(target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExamTargetType[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            loadTargetMap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadTargetMap()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Optional\n                            _targetMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReadonlyMap\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/services/exam-target.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport _ = require('lodash');\n\nimport { ExamTarget } from '../entities/exam-target.entity';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetTree } from '../providers/exam-target-tree.provider';\nimport { ExamTargetRepository } from '../repositories/exam-target.repository';\n\n@Injectable()\nexport class ExamTargetService {\n  private _targetMap?: ReadonlyMap;\n\n  constructor(\n    @InjectRepository(ExamTargetRepository)\n    private readonly repository: ExamTargetRepository,\n    private readonly tree: ExamTargetTree,\n  ) {\n    this.loadTargetMap();\n  }\n\n  private async loadTargetMap(): Promise {\n    const targets = await this.repository.find();\n\n    this._targetMap = new Map(\n      targets.map((target) => [target.type, target]),\n    );\n  }\n\n  getTargetMap(): Promise> {\n    return new Promise((resolve, reject) => {\n      if (!this._targetMap) {\n        return this.loadTargetMap()\n          .then(() => resolve(_.cloneDeep(this._targetMap!)))\n          .catch((e) => reject(e));\n      }\n\n      resolve(_.cloneDeep(this._targetMap));\n    });\n  }\n\n  async getTargets(): Promise {\n    const map = await this.getTargetMap();\n\n    return Array.from(map.values()).map((target) => target.type);\n  }\n\n  getTargetsForUser(target: string): ExamTargetType[] {\n    return this.tree.queryTarget(target).map((p) => p.type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetTree.html":{"url":"injectables/ExamTargetTree.html","title":"injectable - ExamTargetTree","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetTree\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/exam-target-tree.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                root\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                queryTarget\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(targetNodeFactory: ExamTargetNodeFactory)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/exam-target-tree.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        targetNodeFactory\n                                                  \n                                                        \n                                                                        ExamTargetNodeFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            queryTarget\n                        \n                        \n                    \n                \n            \n            \n                \nqueryTarget(target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/providers/exam-target-tree.provider.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ExamTargetNode[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            root\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/providers/exam-target-tree.provider.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNodeFactory } from '../factories/exam-target-node.factory';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\n@Injectable()\nexport class ExamTargetTree {\n  private readonly root: ExamTargetNode;\n\n  constructor(targetNodeFactory: ExamTargetNodeFactory) {\n    this.root = targetNodeFactory.generate({\n      type: ExamTargetType.COURSE,\n      childs: [\n        {\n          type: ExamTargetType.GRADE,\n          childs: [\n            { type: ExamTargetType.PROFESSOR },\n            { type: ExamTargetType.STUDENT },\n          ],\n        },\n      ],\n    });\n  }\n\n  queryTarget(target: string): ExamTargetNode[] {\n    const path = this.root.dfs(target);\n\n    if (!path) {\n      throw new NotFoundException(this.root, target);\n    }\n\n    return path;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTitle1621036457247.html":{"url":"classes/ExamTitle1621036457247.html","title":"class - ExamTitle1621036457247","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTitle1621036457247\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621036457247-ExamTitle.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTitle1621036457247'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class ExamTitle1621036457247 implements MigrationInterface {\n    name = 'ExamTitle1621036457247'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `text` `title` text NOT NULL\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `title` `text` text NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamUser.html":{"url":"interfaces/ExamUser.html","title":"interface - ExamUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/interfaces/exam-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         UserType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserType } from '../../user/enum/user-type.enum';\n\nexport interface ExamUser {\n  id: number;\n  type: UserType;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExportationController.html":{"url":"controllers/ExportationController.html","title":"controller - ExportationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExportationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/exportation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                export\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                exportToCsv\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            exportToCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportToCsv(examId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/csv/:examId')\n                \n            \n\n            \n                \n                    Defined in src/exportation/exportation.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  ParseIntPipe,\n  Post,\n  Param,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ExportationService } from './exportation.service';\n\n@Controller('export')\n@ApiTags('Exportation')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class ExportationController {\n  constructor(private readonly service: ExportationService) {}\n  @Post('/csv/:examId')\n  async exportToCsv(@Param('examId', ParseIntPipe) examId: number) {\n    return this.service.exportToCsv(examId);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExportationModule.html":{"url":"modules/ExportationModule.html","title":"module - ExportationModule","body":"\n                   \n\n\n\n\n    Modules\n    ExportationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExportationModule\n\n\n\ncluster_ExportationModule_imports\n\n\n\ncluster_ExportationModule_exports\n\n\n\ncluster_ExportationModule_providers\n\n\n\n\nInfraModule\n\nInfraModule\n\n\n\nExportationModule\n\nExportationModule\n\nExportationModule -->\n\nInfraModule->ExportationModule\n\n\n\n\n\nExportationService \n\nExportationService \n\nExportationService  -->\n\nExportationModule->ExportationService \n\n\n\n\n\nExportationRepository\n\nExportationRepository\n\nExportationModule -->\n\nExportationRepository->ExportationModule\n\n\n\n\n\nExportationService\n\nExportationService\n\nExportationModule -->\n\nExportationService->ExportationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exportation/exportation.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExportationRepository\n                        \n                        \n                            ExportationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExportationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            InfraModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExportationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { InfraModule } from 'src/infra/infra.module';\nimport { ExportationController } from './exportation.controller';\nimport { ExportationRepository } from './exportation.repository';\nimport { ExportationService } from './exportation.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature(), InfraModule],\n  providers: [ExportationService, ExportationRepository],\n  exports: [ExportationService],\n  controllers: [ExportationController],\n})\nexport class ExportationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExportationRepository.html":{"url":"injectables/ExportationRepository.html","title":"injectable - ExportationRepository","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExportationRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/exportation.repository.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCsvLines\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/exportation/exportation.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCsvLines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCsvLines(examId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.repository.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CsvLine } from './interfaces/csv-line.interface';\nimport { Connection } from 'typeorm';\nimport { InjectConnection } from '@nestjs/typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { CsvLineRow } from './interfaces/csv-line-row.interface';\nimport { userTypeMap } from './maps/user-type.map';\n\n@Injectable()\nexport class ExportationRepository {\n  constructor(@InjectConnection() private readonly connection: Connection) {}\n\n  async getCsvLines(examId: number): Promise {\n    const queryRunner = this.connection.createQueryRunner();\n\n    const csvLines: CsvLineRow[] = await queryRunner.query(\n      `\n        SELECT DISTINCT\n            a.score AS 'score',\n            qg.id AS 'group_id',\n            qg.title AS 'group_title',\n            qg.class AS 'is_class',\n            qg.personal AS 'is_personal',\n            q.id AS 'question_id',\n            q.statement AS 'question_statement',\n            u.enrollment AS 'user_enrollment',\n            u.type AS 'user_type',\n            ea.anonymous AS 'anonymous',\n            ea.observation AS 'observation',\n            ea.uuid AS 'unique_code',\n            s.title AS 'subject_title'\n        FROM\n            exam ex\n        INNER JOIN exam_agreement ea ON\n            ea.exam_id = ex.id\n        INNER JOIN user u ON\n            u.id = ea.user_id\n        INNER JOIN answer a ON\n            a.exam_agreement_id = ea.id\n        LEFT JOIN grade ON\n            grade.id = a.grade_id\n        LEFT JOIN subject s ON\n            s.id = grade.subject_id\n        INNER JOIN question_group qg ON\n            qg.exam_id = ex.id\n        INNER JOIN question q ON\n            q.group_id = qg.id\n        WHERE\n            ex.id = ? AND\n            ex.deleted_at IS NULL\n        ORDER BY\n            ea.id ASC, qg.id ASC, q.id ASC\n      `,\n      [examId],\n    );\n\n    return csvLines.map((csvLine) => {\n      return {\n        'Grupo de Questões': csvLine.group_title,\n        Disciplina: csvLine.subject_title,\n        Pessoal: csvLine.is_personal ? 'Sim' : 'Não',\n        Questão: csvLine.question_statement,\n        Matrícula: csvLine.anonymous ? 'Anônimo' : csvLine.user_enrollment,\n        'Tipo de Usuário': userTypeMap.get(csvLine.user_type)!,\n        Nota: csvLine.score ?? 'Não se aplica',\n        Observação: csvLine.observation,\n        'Código Único': csvLine.unique_code,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExportationService.html":{"url":"injectables/ExportationService.html","title":"injectable - ExportationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExportationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/exportation.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createCsv\n                            \n                            \n                                    Async\n                                exportToCsv\n                            \n                            \n                                    Private\n                                getFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExportationRepository, uploadService: UploaderService)\n                    \n                \n                        \n                            \n                                Defined in src/exportation/exportation.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExportationRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        UploaderService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCsv(csvLines: CsvLine[])\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    csvLines\n                                    \n                                                CsvLine[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            exportToCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportToCsv(examId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getFileName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFileName(examId: number, exportationType: ExportationType)\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exportationType\n                                    \n                                                ExportationType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport ObjectsToCsv from 'objects-to-csv';\n\nimport { ExportationRepository } from './exportation.repository';\n\nimport { ExportationType } from './enums/exportation-type.enum';\nimport { CsvLine } from './interfaces/csv-line.interface';\nimport { UploaderService } from 'src/infra/services/uploader.service';\n\n@Injectable()\nexport class ExportationService {\n  constructor(\n    private readonly repository: ExportationRepository,\n    private readonly uploadService: UploaderService,\n  ) {}\n\n  private getFileName(\n    examId: number,\n    exportationType: ExportationType,\n  ): string {\n    const fileDate = new Date()\n      .toLocaleDateString('pt-BR')\n      .replace(/\\//gu, '-');\n    const filePrefix = process.env.EXPORTED_FILE_PREFIX || 'exportation';\n    return `${exportationType}_${examId}_${filePrefix}_${fileDate}.csv`;\n  }\n\n  private async createCsv(csvLines: CsvLine[]): Promise {\n    const builder = new ObjectsToCsv(csvLines);\n\n    return Buffer.from(await builder.toString());\n  }\n\n  async exportToCsv(examId: number): Promise {\n    const csvLines: CsvLine[] = await this.repository.getCsvLines(examId);\n\n    if (!csvLines.length) {\n      throw new NotFoundException('Nothing to export');\n    }\n\n    const fileName = this.getFileName(examId, ExportationType.AVALIACAO);\n    const data = await this.createCsv(csvLines);\n\n    return this.uploadService.upload(\n      {\n        buffer: data,\n        originalname: fileName,\n        mimetype: 'text/csv',\n        size: data.length,\n        encoding: 'utf8',\n        noRandomName: true,\n      },\n      'exports',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FFEntity.html":{"url":"classes/FFEntity.html","title":"class - FFEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FFEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/ff.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        TimestampEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/ff.entity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PrimaryGeneratedColumn } from 'typeorm';\nimport { TimestampEntity } from './timestamp.entity';\n\nexport class FFEntity extends TimestampEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileSendDto.html":{"url":"interfaces/FileSendDto.html","title":"interface - FileSendDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileSendDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/dtos/file-send.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        buffer\n                                \n                                \n                                        encoding\n                                \n                                \n                                        mimetype\n                                \n                                \n                                            Optional\n                                        noRandomName\n                                \n                                \n                                        originalname\n                                \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        noRandomName\n                                    \n                                \n                                \n                                    \n                                        noRandomName:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalname\n                                    \n                                \n                                \n                                    \n                                        originalname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FileSendDto {\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n  buffer: Buffer;\n  size: number;\n  noRandomName?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindExamByUserDto.html":{"url":"interfaces/FindExamByUserDto.html","title":"interface - FindExamByUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindExamByUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/find-exam-by-user.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ignoreExams\n                                \n                                \n                                        targets\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreExams\n                                    \n                                \n                                \n                                    \n                                        ignoreExams:         Exam[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Exam[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targets\n                                    \n                                \n                                \n                                    \n                                        targets:         ExamTargetType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Exam } from '../entities/exam.entity';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nexport interface FindExamByUserDto {\n  ignoreExams: Exam[];\n  targets: ExamTargetType[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindPersonalDto.html":{"url":"classes/FindPersonalDto.html","title":"class - FindPersonalDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindPersonalDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/find-personal.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/find-personal.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserToFind | User\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/find-personal.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserToFind } from 'src/auxiliary/types/user-to-find.type';\nimport { User } from 'src/user/entities/user.entity';\n\nexport class FindPersonalDto {\n  examId: number;\n  user: UserToFind | User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAdmin.html":{"url":"injectables/FirebaseAdmin.html","title":"injectable - FirebaseAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                app\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                appCheck\n                            \n                            \n                                auth\n                            \n                            \n                                database\n                            \n                            \n                                delete\n                            \n                            \n                                firestore\n                            \n                            \n                                installations\n                            \n                            \n                                instanceId\n                            \n                            \n                                machineLearning\n                            \n                            \n                                messaging\n                            \n                            \n                                projectManagement\n                            \n                            \n                                remoteConfig\n                            \n                            \n                                securityRules\n                            \n                            \n                                storage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    options\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: FirebaseModuleOptions)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        FirebaseModuleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            appCheck\n                        \n                        \n                    \n                \n            \n            \n                \nappCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.appCheck.AppCheck\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            auth\n                        \n                        \n                    \n                \n            \n            \n                \nauth()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         firebase.auth.Auth\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            database\n                        \n                        \n                    \n                \n            \n            \n                \ndatabase(url?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     firebase.database.Database\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            firestore\n                        \n                        \n                    \n                \n            \n            \n                \nfirestore()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.firestore.Firestore\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            installations\n                        \n                        \n                    \n                \n            \n            \n                \ninstallations()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.installations.Installations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            instanceId\n                        \n                        \n                    \n                \n            \n            \n                \ninstanceId()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.instanceId.InstanceId\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            machineLearning\n                        \n                        \n                    \n                \n            \n            \n                \nmachineLearning()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.machineLearning.MachineLearning\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            messaging\n                        \n                        \n                    \n                \n            \n            \n                \nmessaging()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.messaging.Messaging\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            projectManagement\n                        \n                        \n                    \n                \n            \n            \n                \nprojectManagement()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.projectManagement.ProjectManagement\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remoteConfig\n                        \n                        \n                    \n                \n            \n            \n                \nremoteConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.remoteConfig.RemoteConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            securityRules\n                        \n                        \n                    \n                \n            \n            \n                \nsecurityRules()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.securityRules.SecurityRules\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            storage\n                        \n                        \n                    \n                \n            \n            \n                \nstorage()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.storage.Storage\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.app.App\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:24\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:28\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FIREBASE_OPTIONS } from '../firebase-admin.constants';\nimport { FirebaseModuleOptions } from '../../interfaces';\n\n@Injectable()\nexport class FirebaseAdmin implements firebase.app.App {\n  private readonly app: firebase.app.App;\n\n  constructor(@Inject(FIREBASE_OPTIONS) options: FirebaseModuleOptions) {\n    this.app = firebase.initializeApp({\n      databaseURL: options.databaseURL,\n      storageBucket: options.storageBucket,\n      credential: firebase.credential.cert(options.cert),\n    });\n  }\n  appCheck(): firebase.appCheck.AppCheck {\n    throw new Error('Method not implemented.');\n  }\n  installations(): firebase.installations.Installations {\n    throw new Error('Method not implemented.');\n  }\n\n  get name(): string {\n    return this.app.name;\n  }\n\n  get options(): firebase.AppOptions {\n    return this.app.options;\n  }\n\n  auth(): firebase.auth.Auth {\n    return this.app.auth();\n  }\n\n  database(url?: string): firebase.database.Database {\n    return this.app.database(url);\n  }\n\n  firestore(): firebase.firestore.Firestore {\n    return this.app.firestore();\n  }\n\n  instanceId(): firebase.instanceId.InstanceId {\n    return this.app.instanceId();\n  }\n\n  machineLearning(): firebase.machineLearning.MachineLearning {\n    return this.app.machineLearning();\n  }\n\n  messaging(): firebase.messaging.Messaging {\n    return this.app.messaging();\n  }\n\n  projectManagement(): firebase.projectManagement.ProjectManagement {\n    return this.app.projectManagement();\n  }\n\n  remoteConfig(): firebase.remoteConfig.RemoteConfig {\n    return this.app.remoteConfig();\n  }\n\n  securityRules(): firebase.securityRules.SecurityRules {\n    return this.app.securityRules();\n  }\n\n  storage(): firebase.storage.Storage {\n    return this.app.storage();\n  }\n\n  delete(): Promise {\n    return this.app.delete();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseAdminModule.html":{"url":"modules/FirebaseAdminModule.html","title":"module - FirebaseAdminModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseAdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FirebaseAdminModule\n\n\n\ncluster_FirebaseAdminModule_exports\n\n\n\ncluster_FirebaseAdminModule_providers\n\n\n\n\nFirebaseAdmin \n\nFirebaseAdmin \n\n\n\nFirebaseAdminModule\n\nFirebaseAdminModule\n\nFirebaseAdmin  -->\n\nFirebaseAdminModule->FirebaseAdmin \n\n\n\n\n\nFirebaseAdmin\n\nFirebaseAdmin\n\nFirebaseAdminModule -->\n\nFirebaseAdmin->FirebaseAdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase-admin/firebase-admin.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseAdmin\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseAdmin\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from '../interfaces';\nimport { FirebaseAdmin } from './providers/firebase-admin.provider';\nimport { FIREBASE_OPTIONS } from './firebase-admin.constants';\n\n@Module({ providers: [FirebaseAdmin], exports: [FirebaseAdmin] })\nexport class FirebaseAdminModule {\n  private static readonly exports = [FirebaseAdmin];\n  private static readonly providers: Provider[] = [FirebaseAdmin];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useValue: options,\n        },\n        ...this.providers,\n      ],\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      imports: options.imports ?? [],\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useFactory: options.useFactory,\n          inject: options.inject ?? [],\n        },\n        ...this.providers,\n      ],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAsyncModuleOptions.html":{"url":"interfaces/FirebaseAsyncModuleOptions.html","title":"interface - FirebaseAsyncModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAsyncModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        inject\n                                \n                                \n                                        useFactory\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAuthDecodedToken.html":{"url":"interfaces/FirebaseAuthDecodedToken.html","title":"interface - FirebaseAuthDecodedToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAuthDecodedToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        emailVerified\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailVerified\n                                    \n                                \n                                \n                                    \n                                        emailVerified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FirebaseAuthDecodedToken {\n  emailVerified?: boolean;\n  email?: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAuthService.html":{"url":"injectables/FirebaseAuthService.html","title":"injectable - FirebaseAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firebaseAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                deleteUser\n                            \n                            \n                                getUser\n                            \n                            \n                                updateUser\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createDto: firebase.auth.CreateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            firebase.auth.CreateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \nupdateUser(uid: string, updateDto: firebase.auth.UpdateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            firebase.auth.UpdateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firebaseAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         firebase.auth.Auth\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\n\nimport { FirebaseAuthDecodedToken } from '../interfaces/firebase-auth-decoded-token.interface';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseAuthService {\n  private readonly firebaseAuth: firebase.auth.Auth;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firebaseAuth = firebaseAdmin.auth();\n  }\n\n  async verifyToken(token: string): Promise {\n    try {\n      const decoded = await this.firebaseAuth.verifyIdToken(token);\n      return {\n        uid: decoded.uid,\n        email: decoded.email,\n        emailVerified: decoded.email_verified,\n      };\n    } catch (err) {\n      return null;\n    }\n  }\n\n  getUser(uid: string): Promise {\n    return this.firebaseAuth.getUser(uid);\n  }\n\n  createUser(\n    createDto: firebase.auth.CreateRequest,\n  ): Promise {\n    return this.firebaseAuth.createUser(createDto);\n  }\n\n  updateUser(\n    uid: string,\n    updateDto: firebase.auth.UpdateRequest,\n  ): Promise {\n    return this.firebaseAuth.updateUser(uid, updateDto);\n  }\n\n  deleteUser(uid: string): Promise {\n    return this.firebaseAuth.deleteUser(uid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseCloudMessagingService.html":{"url":"injectables/FirebaseCloudMessagingService.html","title":"injectable - FirebaseCloudMessagingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseCloudMessagingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-cloud-messaging.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                fcm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendToDevice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendToDevice\n                        \n                        \n                    \n                \n            \n            \n                \nsendToDevice(token: string, message: firebase.messaging.MessagingPayload, options?: firebase.messaging.MessagingOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            firebase.messaging.MessagingPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            firebase.messaging.MessagingOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            fcm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.messaging.Messaging\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseCloudMessagingService {\n  private readonly fcm: firebase.messaging.Messaging;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.fcm = firebaseAdmin.messaging();\n  }\n\n  sendToDevice(\n    token: string,\n    message: firebase.messaging.MessagingPayload,\n    options?: firebase.messaging.MessagingOptions,\n  ): Promise {\n    return this.fcm.sendToDevice(token, message, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseFirestoreService.html":{"url":"injectables/FirebaseFirestoreService.html","title":"injectable - FirebaseFirestoreService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseFirestoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-firestore.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firestore\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collection: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-firestore.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FirebaseFirestoreCollection\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firestore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.firestore.Firestore\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\nimport { FirebaseFirestoreCollection } from '../types/firebase-firestore-collection.type';\n\n@Injectable()\nexport class FirebaseFirestoreService {\n  private readonly firestore: firebase.firestore.Firestore;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firestore = firebaseAdmin.firestore();\n  }\n\n  getCollection(collection: string): FirebaseFirestoreCollection {\n    return this.firestore.collection(collection);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseModule.html":{"url":"modules/FirebaseModule.html","title":"module - FirebaseModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_FirebaseModule_exports\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module, Provider } from '@nestjs/common';\n\nimport { FirebaseAuthService } from './services/firebase-auth.service';\nimport { FirebaseCloudMessagingService } from './services/firebase-cloud-messaging.service';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from './interfaces/firebase-async-module-options.interface';\nimport { FirebaseAdminModule } from './firebase-admin/firebase-admin.module';\nimport { FirebaseStorageService, FirebaseFirestoreService } from './services';\n\n@Module({\n  providers: [FirebaseAuthService, FirebaseCloudMessagingService],\n  exports: [FirebaseAuthService, FirebaseCloudMessagingService],\n})\nexport class FirebaseModule {\n  private static readonly providers: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  private static readonly exports: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRoot(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRootAsync(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseModuleOptions.html":{"url":"interfaces/FirebaseModuleOptions.html","title":"interface - FirebaseModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cert\n                                \n                                \n                                            Optional\n                                        databaseURL\n                                \n                                \n                                            Optional\n                                        storageBucket\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cert\n                                    \n                                \n                                \n                                    \n                                        cert:     firebase.ServiceAccount\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     firebase.ServiceAccount\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        databaseURL\n                                    \n                                \n                                \n                                    \n                                        databaseURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storageBucket\n                                    \n                                \n                                \n                                    \n                                        storageBucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseStorageService.html":{"url":"injectables/FirebaseStorageService.html","title":"injectable - FirebaseStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-storage.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                storage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-storage.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(path: string, undefined: FirebaseStorageUploadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-storage.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FirebaseStorageUploadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            storage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.storage.Storage\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-storage.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { Injectable } from '@nestjs/common';\n\nimport { FirebaseAdmin } from '../firebase-admin';\nimport { FirebaseStorageUploadDto } from '../dtos/firebase-storage-upload.dto';\n\n@Injectable()\nexport class FirebaseStorageService {\n  private readonly storage: firebase.storage.Storage;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.storage = firebaseAdmin.storage();\n  }\n\n  async upload(\n    path: string,\n    { data, contentType, publicFile, bucket }: FirebaseStorageUploadDto,\n  ): Promise {\n    const file = this.storage.bucket(bucket).file(path);\n    await file.save(data, {\n      gzip: true,\n      contentType,\n      public: publicFile,\n      metadata: {\n        cacheControl: 'public, max-age=31536000',\n      },\n    });\n    return file.publicUrl();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseStorageUploadDto.html":{"url":"interfaces/FirebaseStorageUploadDto.html","title":"interface - FirebaseStorageUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseStorageUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/dtos/firebase-storage-upload.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bucket\n                                \n                                \n                                        contentType\n                                \n                                \n                                        data\n                                \n                                \n                                        publicFile\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bucket\n                                    \n                                \n                                \n                                    \n                                        bucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contentType\n                                    \n                                \n                                \n                                    \n                                        contentType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicFile\n                                    \n                                \n                                \n                                    \n                                        publicFile:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FirebaseStorageUploadDto {\n  data: Buffer;\n  contentType: string;\n  publicFile: boolean;\n  bucket?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseUploader.html":{"url":"injectables/FirebaseUploader.html","title":"injectable - FirebaseUploader","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseUploader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/firebase-uploader.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getName\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: FirebaseStorageService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/services/firebase-uploader.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        FirebaseStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getName(fileDto: FileSendDto, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/firebase-uploader.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/firebase-uploader.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { randomBytes } from 'crypto';\nimport { FirebaseStorageService } from 'src/firebase';\nimport { FileSendDto } from '../dtos/file-send.dto';\nimport { UploaderService } from './uploader.service';\n\n@Injectable()\nexport class FirebaseUploader implements UploaderService {\n  constructor(private readonly storageService: FirebaseStorageService) {}\n\n  private getName(fileDto: FileSendDto, path: string): string {\n    if (fileDto.noRandomName) {\n      return `${path}/${fileDto.originalname}`;\n    }\n\n    return `${path}/${randomBytes(32).toString('hex')}`;\n  }\n\n  async upload(fileDto: FileSendDto, path = ''): Promise {\n    return this.storageService.upload(this.getName(fileDto, path).replace(/^\\//u, ''), {\n      data: fileDto.buffer,\n      contentType: fileDto.mimetype,\n      publicFile: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grade.html":{"url":"classes/Grade.html","title":"class - Grade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                period\n                            \n                            \n                                periodId\n                            \n                            \n                                professors\n                            \n                            \n                                students\n                            \n                            \n                                subject\n                            \n                            \n                                subjectId\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AnswerGrade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            periodId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            professors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Professor[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable({name: 'professor_grade'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            students\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Student[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable({name: 'student_grade'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subjectId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnswerGrade } from 'src/answer/entities/answer-grade.entity';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Period } from './period.entity';\nimport { Professor } from './professor.entity';\nimport { Student } from './student.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('grade')\nexport class Grade extends FFEntity {\n  @Column({ type: 'int' })\n  subjectId: number;\n\n  @Column({ type: 'int' })\n  periodId: number;\n\n  @ManyToOne(() => Subject)\n  subject: Subject;\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => AnswerGrade, (answer) => answer.grade)\n  answers: AnswerGrade[];\n\n  @ManyToMany(() => Student)\n  @JoinTable({ name: 'student_grade' })\n  students: Student[];\n\n  @ManyToMany(() => Professor)\n  @JoinTable({ name: 'professor_grade' })\n  professors: Professor[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GradeIndex1624560625346.html":{"url":"classes/GradeIndex1624560625346.html","title":"class - GradeIndex1624560625346","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GradeIndex1624560625346\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624560625346-GradeIndex.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'GradeIndex1624560625346'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class GradeIndex1624560625346 implements MigrationInterface {\n    name = 'GradeIndex1624560625346'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE INDEX `IX_question_group_class_examId` ON `question_group` (`class`, `exam_id`)\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"DROP INDEX `IX_question_group_class_examId` ON `question_group`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GradeRepository.html":{"url":"classes/GradeRepository.html","title":"class - GradeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GradeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/grade.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findByUserAndPeriod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByUserAndPeriod\n                        \n                        \n                    \n                \n            \n            \n                \nfindByUserAndPeriod(user: UserToFind, period: Period)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/repositories/grade.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserToFind\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    period\n                                    \n                                                Period\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Grade } from '../entities/grade.entity';\nimport { Period } from '../entities/period.entity';\nimport { Professor } from '../entities/professor.entity';\nimport { Student } from '../entities/student.entity';\nimport { UserToFind } from '../types/user-to-find.type';\n\n@EntityRepository(Grade)\nexport class GradeRepository extends BaseRepository {\n  findByUserAndPeriod(user: UserToFind, period: Period): Promise {\n    const query = this.createQueryBuilder('grade');\n\n    if (user instanceof Student) {\n      query.innerJoin('grade.students', 'user');\n    }\n\n    if (user instanceof Professor) {\n      query.innerJoin('grade.professors', 'user');\n    }\n\n    query\n      .innerJoinAndSelect('grade.subject', 'subject')\n      .where('grade.periodId = :periodId', { periodId: period.id })\n      .andWhere('user.id = :userId', { userId: user.id });\n\n    return query.getMany();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GradeService.html":{"url":"injectables/GradeService.html","title":"injectable - GradeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GradeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/grade.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                findByUserAndPeriod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gradeRepository: GradeRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/grade.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gradeRepository\n                                                  \n                                                        \n                                                                        GradeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/grade.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByUserAndPeriod\n                        \n                        \n                    \n                \n            \n            \n                \nfindByUserAndPeriod(user: UserToFind, period: Period)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/grade.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserToFind\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    period\n                                    \n                                                Period\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Grade } from '../entities/grade.entity';\nimport { Period } from '../entities/period.entity';\nimport { GradeRepository } from '../repositories/grade.repository';\nimport type { UserToFind } from '../types/user-to-find.type';\n\n@Injectable()\nexport class GradeService {\n  constructor(\n    @InjectRepository(GradeRepository)\n    private readonly gradeRepository: GradeRepository,\n  ) {}\n\n  findAll(): Promise {\n    return this.gradeRepository.find();\n  }\n\n  findByUserAndPeriod(user: UserToFind, period: Period): Promise {\n    return this.gradeRepository.findByUserAndPeriod(user, period);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/http-exception.filter.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('HttpExceptionFilter')\n                        \n                    \n                        \n                            \n                                    Defined in src/core/filters/http-exception.filter.ts:31\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http-exception.filter.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IClassValidatorException.html":{"url":"interfaces/IClassValidatorException.html","title":"interface - IClassValidatorException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IClassValidatorException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        message\n                                \n                                \n                                        statusCode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IEntity.html":{"url":"interfaces/IEntity.html","title":"interface - IEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663575-SeedAuxiliary1.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { addMonths, endOfMonth, startOfMonth } from 'date-fns';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\nimport faker = require('faker');\nimport bcrypt = require('bcryptjs');\n\ninterface IEntity {\n  id: number;\n}\n\nconst defaultName = 'Gerado';\nconst student = {\n  cpf: '50172241065',\n  enrollment: '989898',\n};\n\nexport class SeedAuxiliary1624412129413 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'INSERT INTO `period` (`name`, `started_at`, `ended_at`) VALUES (?, ?, ?)',\n      [\n        defaultName,\n        startOfMonth(new Date()),\n        endOfMonth(addMonths(new Date(), 5)),\n      ],\n    );\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `course` (`code`, `title`) VALUES (?, ?)',\n      [defaultName, faker.random.alphaNumeric(20)],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `subject` (`code`, `title`, `course_id`) VALUES (?, ?, ?)',\n      [defaultName, faker.random.alpha({ count: 20, upcase: true }), course.id],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `grade` (`subject_id`, `period_id`) VALUES (?, ?)',\n      [subject.id, period.id],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(process.env.ADMIN_PASSWORD!, salt);\n\n    await queryRunner.query(\n      'INSERT INTO `auth` (`login`, `password`, `salt`) VALUES (?, ?, ?)',\n      [student.enrollment, password, salt],\n    );\n    await queryRunner.query(\n      'INSERT INTO `user` (`enrollment`, `cpf`, `type`, `role`) VALUES (?, ?, ?, ?)',\n      [student.enrollment, student.cpf, 'Student', 'manager'],\n    );\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `student_grade` (`user_id`, `grade_id`) VALUES (?, ?)',\n      [user.id, grade.id],\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n    await queryRunner.query('DELETE FROM `student_grade` WHERE `user_id` = ?', [\n      user.id,\n    ]);\n    await queryRunner.query('DELETE FROM `user` WHERE `enrollment` = ?', [\n      student.enrollment,\n    ]);\n    await queryRunner.query('DELETE FROM `auth` WHERE `login` = ?', [\n      student.enrollment,\n    ]);\n\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    await queryRunner.query('DELETE FROM `subject` WHERE `id` = ?', [\n      subject.id,\n    ]);\n    await queryRunner.query('DELETE FROM `course` WHERE `id` = ?', [course.id]);\n    await queryRunner.query('DELETE FROM `grade` WHERE `id` = ?', [grade.id]);\n    await queryRunner.query('DELETE FROM `period` WHERE `id` = ?', [period.id]);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IException.html":{"url":"interfaces/IException.html","title":"interface - IException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        body\n                                \n                                \n                                        message\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                        path\n                                \n                                \n                                            Optional\n                                        stack\n                                \n                                \n                                        statusCode\n                                \n                                \n                                        timestamp\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stack\n                                    \n                                \n                                \n                                    \n                                        stack:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InfraModule.html":{"url":"modules/InfraModule.html","title":"module - InfraModule","body":"\n                   \n\n\n\n\n    Modules\n    InfraModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_imports\n\n\n\ncluster_InfraModule_exports\n\n\n\n\nFirebaseModule\n\nFirebaseModule\n\n\n\nInfraModule\n\nInfraModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/infra.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UploadController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FirebaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UploaderService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { FirebaseModule } from 'src/firebase';\nimport { UploadController } from './controllers/upload.controller';\nimport { FirebaseUploader } from './services/firebase-uploader.service';\nimport { UploaderService } from './services/uploader.service';\n\n@Module({\n  imports: [\n    FirebaseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get('firebase')!,\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [{ provide: UploaderService, useClass: FirebaseUploader }],\n  controllers: [UploadController],\n  exports: [UploaderService],\n})\nexport class InfraModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        type\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  type: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userService: UserService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModuleOptions } from '@nestjs/jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { jwtConfigKey } from '../../config';\n\nimport { UserService } from '../../user/user.service';\nimport { AuthService } from '../auth.service';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n    configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true,\n      secretOrKey: configService.get(jwtConfigKey)!.secret,\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const auth = await this.authService.findAuth({ login: payload.uid });\n    if (!auth) {\n      throw new UnauthorizedException();\n    }\n\n    const user = await this.userService.findSpecializedUser({\n      enrollment: payload.uid,\n    });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_LoggerModule_exports\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CustomLogger } from './logger.service';\n\n@Module({\n  providers: [CustomLogger],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/login.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        AuthDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/login.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, Length } from 'class-validator';\nimport { PASSWORD_MAX, PASSWORD_MIN } from '../auth.constants';\nimport { AuthDto } from './auth.dto';\n\nexport class LoginDto extends AuthDto {\n  @IsString()\n  @Length(PASSWORD_MIN, PASSWORD_MAX)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PayloadInterceptor.html":{"url":"injectables/PayloadInterceptor.html","title":"injectable - PayloadInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PayloadInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/payload.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(_: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/payload.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class PayloadInterceptor implements NestInterceptor {\n  intercept(_: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Period.html":{"url":"classes/Period.html","title":"class - Period","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Period\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/period.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                endedAt\n                            \n                            \n                                exams\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                startedAt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exams\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport { Column, Entity, Index, OneToMany } from 'typeorm';\n\n@Entity('period')\n@Index('IX_period_started_at_ended_at', ['startedAt', 'endedAt'])\nexport class Period extends FFEntity {\n  @Column({ type: 'varchar', nullable: true })\n  name?: string;\n\n  @Column({ type: 'datetime' })\n  startedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @OneToMany(() => Exam, (exam) => exam.period)\n  exams: Exam[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PeriodIndex1624547816204.html":{"url":"classes/PeriodIndex1624547816204.html","title":"class - PeriodIndex1624547816204","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PeriodIndex1624547816204\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624547816204-PeriodIndex.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'PeriodIndex1624547816204'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class PeriodIndex1624547816204 implements MigrationInterface {\n    name = 'PeriodIndex1624547816204'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`\");\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `period_id` `period_id` int NOT NULL\");\n        await queryRunner.query(\"CREATE INDEX `IX_period_started_at_ended_at` ON `period` (`started_at`, `ended_at`)\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`\");\n        await queryRunner.query(\"DROP INDEX `IX_period_started_at_ended_at` ON `period`\");\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `period_id` `period_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PeriodRepository.html":{"url":"classes/PeriodRepository.html","title":"class - PeriodRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PeriodRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/period.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Period } from '../entities/period.entity';\n\n@EntityRepository(Period)\nexport class PeriodRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PeriodService.html":{"url":"injectables/PeriodService.html","title":"injectable - PeriodService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PeriodService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/period.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                getLastPeriod\n                            \n                            \n                                    Async\n                                getPeriodByInterval\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(periodRepository: PeriodRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/period.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        periodRepository\n                                                  \n                                                        \n                                                                        PeriodRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLastPeriod\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLastPeriod()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPeriodByInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPeriodByInterval(undefined: Interval)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Interval\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { LessThan, LessThanOrEqual, MoreThanOrEqual } from 'typeorm';\nimport { Period } from '../entities/period.entity';\nimport { PeriodRepository } from '../repositories/period.repository';\n\n@Injectable()\nexport class PeriodService {\n  constructor(\n    @InjectRepository(PeriodRepository)\n    private readonly periodRepository: PeriodRepository,\n  ) {}\n\n  findAll(): Promise {\n    return this.periodRepository.find();\n  }\n\n  // bool _rangeOverlapping(\n  //   Duration startA,\n  //   Duration endA,\n  //   Duration startB,\n  //   Duration endB,\n  // ) {\n  //   return (startA = startB);\n  // }\n\n  async getLastPeriod(): Promise {\n    const period = await this.periodRepository.findOne({\n      where: {\n        startedAt: MoreThanOrEqual(new Date()),\n        endedAt: LessThanOrEqual(new Date()),\n      },\n    });\n\n    if (!period) {\n      throw new NotFoundException('period not found for given date');\n    }\n\n    return period;\n  }\n\n  async getPeriodByInterval({ start, end }: Interval): Promise {\n    const period = await this.periodRepository.findOne({\n      where: {\n        startedAt: LessThan(end),\n        endedAt: MoreThanOrEqual(start),\n      },\n    });\n\n    if (!period) {\n      throw new NotFoundException('period not found for given date');\n    }\n\n    return period;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersonalQuestionGroup.html":{"url":"injectables/PersonalQuestionGroup.html","title":"injectable - PersonalQuestionGroup","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PersonalQuestionGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/providers/personal-group.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPersonal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionGroupRepository, gradeService: GradeService)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/providers/personal-group.provider.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionGroupRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gradeService\n                                                  \n                                                        \n                                                                        GradeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPersonal(user: Student | Professor, exam: Exam)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/providers/personal-group.provider.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            Student | Professor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exam\n                                    \n                                                Exam\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Professor } from 'src/auxiliary/entities/professor.entity';\nimport { Student } from 'src/auxiliary/entities/student.entity';\nimport { GradeService } from 'src/auxiliary/services/grade.service';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport { QuestionGroupGrade } from '../dtos/question-group-grade.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { questionGroupRelations } from '../question.constants';\nimport { QuestionGroupRepository } from '../repositories/question-group.repository';\n\n@Injectable()\nexport class PersonalQuestionGroup {\n  constructor(\n    @InjectRepository(QuestionGroupRepository)\n    private readonly repository: QuestionGroupRepository,\n    private readonly gradeService: GradeService,\n  ) {}\n\n  async getPersonal(\n    user: Student | Professor,\n    exam: Exam,\n  ): Promise {\n    const grades = await this.gradeService.findByUserAndPeriod(\n      user,\n      exam.period,\n    );\n    if (!grades.length) {\n      return [];\n    }\n\n    const groupGrades = await this.repository.find({\n      where: { class: true, exam },\n      relations: questionGroupRelations,\n    });\n\n    return groupGrades\n      .reduce(\n        (result, group) => [\n          ...result,\n          ...grades.map((grade) => {\n            const groupGrade = Object.assign(new QuestionGroupGrade(), group);\n            groupGrade.grade = grade;\n            return groupGrade;\n          }),\n        ],\n        new Array(),\n      )\n      .sort((a, b) => a.id - b.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Professor.html":{"url":"classes/Professor.html","title":"class - Professor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Professor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/professor.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                professorGrades\n                            \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    grades\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            professorGrades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, {lazy: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/professor.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        grades\n                    \n                \n\n                \n                    \n                        getgrades()\n                    \n                \n                            \n                                \n                                    Defined in src/auxiliary/entities/professor.entity.ts:10\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ChildEntity, ManyToMany } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Grade } from './grade.entity';\n\n@ChildEntity()\nexport class Professor extends User {\n  @ManyToMany(() => Grade, { lazy: true })\n  professorGrades: Promise;\n\n  get grades(): Promise {\n    return this.professorGrades;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfessorRepository.html":{"url":"classes/ProfessorRepository.html","title":"class - ProfessorRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfessorRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/professor.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Professor } from '../entities/professor.entity';\n\n@EntityRepository(Professor)\nexport class ProfessorRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfessorService.html":{"url":"injectables/ProfessorService.html","title":"injectable - ProfessorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfessorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/professor.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ProfessorRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/professor.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ProfessorRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Professor } from '../entities/professor.entity';\nimport { ProfessorRepository } from '../repositories/professor.repository';\n\n@Injectable()\nexport class ProfessorService {\n  constructor(\n    @InjectRepository(ProfessorRepository)\n    private readonly repository: ProfessorRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const professor = this.repository.create(createDto);\n\n    return this.repository.save(professor);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                group\n                            \n                            \n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                position\n                            \n                            \n                                required\n                            \n                            \n                                statement\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Answer[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuestionGroup\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Answer } from 'src/answer/entities/answer.entity';\nimport { FFEntity } from 'src/core/entities/ff.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { Column, Entity, Index, ManyToOne, OneToMany } from 'typeorm';\n\n@Entity()\nexport class Question extends FFEntity {\n  @Column({ type: 'text' })\n  statement: string;\n\n  @Column({ type: 'text', nullable: true })\n  imageUrl?: string;\n\n  @Column({ type: 'varchar', nullable: true })\n  imageAlt?: string;\n\n  @Column({ type: 'bool', default: true })\n  required: boolean;\n\n  @Column({ type: 'int' })\n  groupId: number;\n\n  @Index('IX_question_position')\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @ManyToOne(() => QuestionGroup)\n  group: QuestionGroup;\n\n  @OneToMany(() => Answer, (answer) => answer.question)\n  answers: Answer[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createQuestion\n                            \n                            \n                                    Async\n                                createQuestions\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Question})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestions(groupId: number, createQuestionsDto: CreateQuestionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':groupId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createQuestionsDto\n                                    \n                                                CreateQuestionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(findDto: QuestionFindDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuesitonDto: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuesitonDto\n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiNotFoundResponse, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { CreateQuestionDto } from '../dtos/create-question.dto';\nimport { QuestionFindDto } from '../dtos/question-find.dto';\nimport { ReorderQuestionDto } from '../dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from '../dtos/update-question.dto';\nimport { Question } from '../entities/question.entity';\nimport { QuestionService } from '../services/question.service';\nimport { CreateQuestionsDto } from '../dtos/create-questions.dto';\n\n@Controller('question')\n@ApiTags('Question')\n@UseGuards(JwtGuard)\nexport class QuestionController {\n  constructor(private readonly questionService: QuestionService) {}\n\n  @Post()\n  @ApiOkResponse({ type: Question })\n  async createQuestion(\n    @Body() createQuestionDto: CreateQuestionDto,\n  ): Promise {\n    return this.questionService.createQuestion(createQuestionDto);\n  }\n\n  @Post(':groupId')\n  @ApiOkResponse({ type: [Question] })\n  async createQuestions(\n    @Param('groupId', ParseIntPipe) groupId: number,\n    @Body() createQuestionsDto: CreateQuestionsDto,\n  ): Promise {\n    return this.questionService.createQuestions(groupId, createQuestionsDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Question] })\n  async find(@Query() findDto: QuestionFindDto) {\n    return this.questionService.find(findDto);\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionDto: UpdateQuestionDto,\n  ): Promise {\n    return this.questionService.update(id, updateQuestionDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({ type: [Question] })\n  async reorder(\n    @Body() reorderQuesitonDto: ReorderQuestionDto,\n  ): Promise {\n    return this.questionService.reorder(reorderQuesitonDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionFindDto.html":{"url":"classes/QuestionFindDto.html","title":"class - QuestionFindDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionFindDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/question-find.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/question-find.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class QuestionFindDto {\n  @IsPositive()\n  @IsOptional()\n  groupId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup.html":{"url":"classes/QuestionGroup.html","title":"class - QuestionGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question-group.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                personal\n                            \n                            \n                                position\n                            \n                            \n                                questions\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_group_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/question-group/entities/question-group.entity.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport {\n  AfterLoad,\n  Column,\n  Entity,\n  Index,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { Question } from './question.entity';\n\n@Entity()\n@Index('IX_question_group_class_examId', ['class', 'examId'])\nexport class QuestionGroup extends FFEntity {\n  @Column({ type: 'varchar' })\n  title: string;\n\n  // TODO: juntar essas flags em um enum\n  @Column({ type: 'bool', default: false })\n  class: boolean;\n\n  @Column({ type: 'bool', default: false })\n  personal: boolean;\n\n  @Index('IX_question_group_position')\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @Column({ type: 'int', nullable: true })\n  examId: number;\n\n  @OneToMany(() => Question, (question) => question.group)\n  questions: Question[];\n\n  @ManyToOne(() => Exam)\n  exam: Exam;\n\n  @AfterLoad()\n  sortItems() {\n    this.questions =\n      this.questions?.sort((a, b) => a.position - b.position) ?? [];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup1620179231630.html":{"url":"classes/QuestionGroup1620179231630.html","title":"class - QuestionGroup1620179231630","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup1620179231630\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620179231630-QuestionGroup.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup1620179231630'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionGroup1620179231630 implements MigrationInterface {\n    name = 'QuestionGroup1620179231630'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `question` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `statement` text NOT NULL, `image_url` text NOT NULL, `image_alt` varchar(255) NOT NULL DEFAULT '', `required` tinyint NOT NULL DEFAULT 1, `group_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `question_group` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"DROP TABLE `question_group`\");\n        await queryRunner.query(\"DROP TABLE `question`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionGroupController.html":{"url":"controllers/QuestionGroupController.html","title":"controller - QuestionGroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionGroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question-group.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question-group\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: QuestionGroup})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(examId: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me/:examId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuestionGroupDto: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuestionGroupDto\n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n  Patch,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { QuestionGroupService } from '../services/question-group.service';\nimport { CreateQuestionGroupDto } from '../dtos/create-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dtos/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CopyQuestionGroupDto } from '../dtos/copy-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dtos/reorder-question-group.dto';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { User } from 'src/user/entities/user.entity';\n\n@Controller('question-group')\n@ApiTags('QuestionGroup')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class QuestionGroupController {\n  constructor(private readonly questionGroupService: QuestionGroupService) {}\n\n  @Post()\n  @ApiOkResponse({ type: QuestionGroup })\n  async create(\n    @Body() createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.create(createQuestionGroupDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async findAll(): Promise {\n    return this.questionGroupService.findAll();\n  }\n\n  @Get('me/:examId')\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async findPersonal(\n    @Param('examId', ParseIntPipe) examId: number,\n    @GetUser() user: User,\n  ): Promise {\n    return this.questionGroupService.findPersonal({ examId, user });\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionGroupService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.update(id, updateQuestionGroupDto);\n  }\n\n  @Put()\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async copy(\n    @Body() copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.copy(copyQuestionGroupDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async reorder(\n    @Body() reorderQuestionGroupDto: ReorderQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.reorder(reorderQuestionGroupDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionGroupService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupGrade.html":{"url":"classes/QuestionGroupGrade.html","title":"class - QuestionGroupGrade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupGrade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/question-group-grade.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        QuestionGroup\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                grade\n                            \n                            \n                                class\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                personal\n                            \n                            \n                                position\n                            \n                            \n                                questions\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grade\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/question-group-grade.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:21\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:37\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:31\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:24\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_group_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:28\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Inherited from         QuestionGroup\n\n                \n            \n            \n                \n                        Defined in         QuestionGroup:40\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Grade } from 'src/auxiliary/entities/grade.entity';\nimport { QuestionGroup } from '../entities/question-group.entity';\n\nexport class QuestionGroupGrade extends QuestionGroup {\n  grade: Grade;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupGradeRemove1624883202213.html":{"url":"classes/QuestionGroupGradeRemove1624883202213.html","title":"class - QuestionGroupGradeRemove1624883202213","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupGradeRemove1624883202213\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624883202214-QuestionGroupGradeRemove.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroupGradeRemove1624883202213'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624883202214-QuestionGroupGradeRemove.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624883202214-QuestionGroupGradeRemove.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624883202214-QuestionGroupGradeRemove.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class QuestionGroupGradeRemove1624883202213\n  implements MigrationInterface\n{\n  name = 'QuestionGroupGradeRemove1624883202213';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query('DROP TABLE `question_group_grade`');\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"CREATE TABLE `question_group_grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL DEFAULT 0, `personal` tinyint NOT NULL DEFAULT 0, `position` int NOT NULL DEFAULT '0', `exam_id` int NULL, INDEX `IX_question_group_position` (`position`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionGroupModule.html":{"url":"modules/QuestionGroupModule.html","title":"module - QuestionGroupModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionGroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\ncluster_QuestionGroupModule_imports\n\n\n\ncluster_QuestionGroupModule_exports\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nAuxiliaryModule->QuestionGroupModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionGroupModule->QuestionService \n\n\n\n\n\nPersonalQuestionGroup\n\nPersonalQuestionGroup\n\nQuestionGroupModule -->\n\nPersonalQuestionGroup->QuestionGroupModule\n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionGroupModule -->\n\nQuestionService->QuestionGroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question-group/question-group.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PersonalQuestionGroup\n                        \n                        \n                            QuestionGroupService\n                        \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionGroupController\n                        \n                        \n                            QuestionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuxiliaryModule\n                        \n                        \n                            ExamModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuestionGroupService } from './services/question-group.service';\nimport { QuestionGroupController } from './controllers/question-group.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QuestionGroupRepository } from './repositories/question-group.repository';\nimport { QuestionController } from './controllers/question.controller';\nimport { ExamModule } from '../exam/exam.module';\nimport { QuestionService } from './services/question.service';\nimport { QuestionRepository } from './repositories/question.repository';\nimport { PersonalQuestionGroup } from './providers/personal-group.provider';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([QuestionGroupRepository, QuestionRepository]),\n    ExamModule,\n    AuxiliaryModule,\n  ],\n  controllers: [QuestionGroupController, QuestionController],\n  providers: [QuestionGroupService, PersonalQuestionGroup, QuestionService],\n  exports: [QuestionService],\n})\nexport class QuestionGroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupRepository.html":{"url":"classes/QuestionGroupRepository.html","title":"class - QuestionGroupRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/repositories/question-group.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from \"typeorm\";\nimport { BaseRepository } from \"typeorm-transactional-cls-hooked\";\nimport { QuestionGroup } from \"../entities/question-group.entity\";\n\n@EntityRepository(QuestionGroup)\nexport class QuestionGroupRepository extends BaseRepository {}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionGroupService.html":{"url":"injectables/QuestionGroupService.html","title":"injectable - QuestionGroupService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionGroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/services/question-group.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Private\n                                    Async\n                                setExamAndPosition\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionGroupRepository, examService: ExamService, questionService: QuestionService, personalGroup: PersonalQuestionGroup)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/services/question-group.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionGroupRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examService\n                                                  \n                                                        \n                                                                        ExamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        personalGroup\n                                                  \n                                                        \n                                                                        PersonalQuestionGroup\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(undefined: FindPersonalDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindPersonalDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            setExamAndPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setExamAndPosition(questionGroup: QuestionGroup, examId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questionGroup\n                                    \n                                                QuestionGroup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { In } from 'typeorm';\n\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { ExamService } from 'src/exam/services/exam.service';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CopyQuestionGroupDto } from '../dtos/copy-question-group.dto';\nimport { CreateQuestionGroupDto } from '../dtos/create-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dtos/reorder-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dtos/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { questionGroupNotFound } from '../question-group.constants';\nimport { QuestionService } from './question.service';\nimport { QuestionGroupRepository } from '../repositories/question-group.repository';\nimport { last } from 'src/core/utils/last.util';\nimport { FindPersonalDto } from '../dtos/find-personal.dto';\nimport { PersonalQuestionGroup } from '../providers/personal-group.provider';\nimport { Student } from 'src/auxiliary/entities/student.entity';\nimport { Professor } from 'src/auxiliary/entities/professor.entity';\nimport { questionGroupRelations } from '../question.constants';\n\n@Injectable()\nexport class QuestionGroupService {\n  constructor(\n    @InjectRepository(QuestionGroupRepository)\n    private readonly repository: QuestionGroupRepository,\n    private readonly examService: ExamService,\n    private readonly questionService: QuestionService,\n    private readonly personalGroup: PersonalQuestionGroup,\n  ) {}\n\n  private async setExamAndPosition(\n    questionGroup: QuestionGroup,\n    examId: number,\n  ) {\n    questionGroup.exam = await this.examService.findOne(examId);\n\n    questionGroup.position =\n      (last(questionGroup.exam.groups)?.position ?? -1) + 1;\n  }\n\n  @Transactional()\n  async create(\n    createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    const questionGroup = this.repository.create(createQuestionGroupDto);\n    if (createQuestionGroupDto.examId) {\n      await this.setExamAndPosition(\n        questionGroup,\n        createQuestionGroupDto.examId,\n      );\n    }\n    return this.repository.save(questionGroup);\n  }\n\n  findAll(): Promise {\n    return this.repository.find({ relations: questionGroupRelations});\n  }\n\n  async findOne(id: number): Promise {\n    const questionGroup = await this.repository.findOne({\n      where: { id },\n      relations: questionGroupRelations,\n    });\n\n    if (!questionGroup) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n\n    return questionGroup;\n  }\n\n  @Transactional()\n  async update(\n    id: number,\n    updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    let questionGroup = await this.findOne(id);\n\n    if (\n      updateQuestionGroupDto.examId &&\n      updateQuestionGroupDto.examId !== questionGroup.examId\n    ) {\n      await this.setExamAndPosition(\n        questionGroup,\n        updateQuestionGroupDto.examId,\n      );\n    }\n\n    questionGroup = this.repository.merge(\n      questionGroup,\n      updateQuestionGroupDto,\n    );\n\n    return this.repository.save(questionGroup);\n  }\n\n  @Transactional()\n  async copy(\n    copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    const toCopy = await this.findOne(copyQuestionGroupDto.groupId);\n    const exam = await this.examService.findOne(copyQuestionGroupDto.examId);\n\n    const group = await this.repository.save(\n      this.repository.create({\n        ...toCopy,\n        questions: [],\n        exam,\n        id: undefined,\n      }),\n    );\n\n    group.questions = await this.questionService.copyToGroup(\n      group,\n      toCopy.questions,\n    );\n\n    return group;\n  }\n\n  @Transactional()\n  async reorder({\n    examId,\n    groupIds,\n  }: ReorderQuestionGroupDto): Promise {\n    const groups = await this.repository.find({\n      where: { examId, id: In(groupIds) },\n    });\n\n    const groupIdPositionMap: ReadonlyMap = new Map(\n      groupIds.map((id, position) => [id, position]),\n    );\n\n    return (\n      await Promise.all(\n        groups.map(async (group) => {\n          group.position = groupIdPositionMap.get(group.id) ?? 0;\n          await this.repository.update(group.id, { position: group.position });\n          return group;\n        }),\n      )\n    ).sort((a, b) => a.position - b.position);\n  }\n\n  async findPersonal({\n    examId,\n    user,\n  }: FindPersonalDto): Promise {\n    const exam = await this.examService.findOne(examId);\n\n    const result = await this.repository.find({\n      where: { exam, class: false },\n      relations: questionGroupRelations,\n    });\n\n    if (user instanceof Student || user instanceof Professor) {\n      const personalGroups = await this.personalGroup.getPersonal(user, exam);\n      result.push(...personalGroups);\n    }\n\n    return result;\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupTarget1621992475274.html":{"url":"classes/QuestionGroupTarget1621992475274.html","title":"class - QuestionGroupTarget1621992475274","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupTarget1621992475274\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621992475274-QuestionGroupTarget.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroupTarget1621992475274'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class QuestionGroupTarget1621992475274 implements MigrationInterface {\n  name = 'QuestionGroupTarget1621992475274';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"ALTER TABLE `question_group` ADD `target` enum ('Student', 'Professor') NULL\",\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query('ALTER TABLE `user` DROP COLUMN `type`');\n    await queryRunner.query(\n      \"ALTER TABLE `user` ADD `type` enum ('Professor', 'Student', 'User') NOT NULL\",\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IX_question_group_target` ON `question_group` (`target`)',\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user` (`type`)',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IX_question_group_target` ON `question_group`',\n    );\n    await queryRunner.query('ALTER TABLE `user` DROP COLUMN `type`');\n    await queryRunner.query(\n      'ALTER TABLE `user` ADD `type` varchar(255) NOT NULL',\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user` (`type`)',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `target`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuestionGroupUser.html":{"url":"interfaces/QuestionGroupUser.html","title":"interface - QuestionGroupUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  QuestionGroupUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/interfaces/question-group-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface QuestionGroupUser {\n  id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionImage1620477869366.html":{"url":"classes/QuestionImage1620477869366.html","title":"class - QuestionImage1620477869366","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionImage1620477869366\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477869366-QuestionImage.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionImage1620477869366'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionImage1620477869366 implements MigrationInterface {\n    name = 'QuestionImage1620477869366'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NOT NULL DEFAULT ''\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPosition1620488935141.html":{"url":"classes/QuestionPosition1620488935141.html","title":"class - QuestionPosition1620488935141","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPosition1620488935141\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620488935141-QuestionPosition.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionPosition1620488935141'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionPosition1620488935141 implements MigrationInterface {\n    name = 'QuestionPosition1620488935141'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` ADD `position` int NOT NULL DEFAULT '0'\");\n        await queryRunner.query(\"ALTER TABLE `question_group` ADD `position` int NOT NULL DEFAULT '0'\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question_group` DROP COLUMN `position`\");\n        await queryRunner.query(\"ALTER TABLE `question` DROP COLUMN `position`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPositionIdx1620563708532.html":{"url":"classes/QuestionPositionIdx1620563708532.html","title":"class - QuestionPositionIdx1620563708532","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPositionIdx1620563708532\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620563708532-QuestionPositionIdx.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionPositionIdx1620563708532'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionPositionIdx1620563708532 implements MigrationInterface {\n    name = 'QuestionPositionIdx1620563708532'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"CREATE INDEX `IX_question_position` ON `question` (`position`)\");\n        await queryRunner.query(\"CREATE INDEX `IX_question_group_position` ON `question_group` (`position`)\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_group_position` ON `question_group`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_position` ON `question`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionRepository.html":{"url":"classes/QuestionRepository.html","title":"class - QuestionRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/repositories/question.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Question } from '../entities/question.entity';\n\n@EntityRepository(Question)\nexport class QuestionRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/services/question.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copyToGroup\n                            \n                            \n                                    Async\n                                createQuestion\n                            \n                            \n                                    Async\n                                createQuestions\n                            \n                            \n                                find\n                            \n                            \n                                findByIds\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                    Async\n                                getNextPosition\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionRepository, groupService: QuestionGroupService)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/services/question.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        groupService\n                                                  \n                                                        \n                                                                        QuestionGroupService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copyToGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copyToGroup(group: QuestionGroup, questions: Question[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                QuestionGroup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questions\n                                    \n                                                Question[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestions(groupId: number, createQuestionsDto: CreateQuestionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createQuestionsDto\n                                    \n                                                CreateQuestionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(findDto: QuestionFindDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByIds\n                        \n                        \n                    \n                \n            \n            \n                \nfindByIds(ids: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getNextPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNextPosition(groupId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { In } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CreateQuestionDto } from '../dtos/create-question.dto';\nimport { QuestionFindDto } from '../dtos/question-find.dto';\nimport { ReorderQuestionDto } from '../dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from '../dtos/update-question.dto';\nimport { Question } from '../entities/question.entity';\nimport { questionNotFound } from '../question.constants';\nimport { QuestionRepository } from '../repositories/question.repository';\nimport { QuestionGroupService } from './question-group.service';\nimport { last } from 'src/core/utils/last.util';\nimport { CreateQuestionsDto } from '../dtos/create-questions.dto';\n\n@Injectable()\nexport class QuestionService {\n  constructor(\n    @InjectRepository(QuestionRepository)\n    private readonly repository: QuestionRepository,\n    @Inject(forwardRef(() => QuestionGroupService))\n    private readonly groupService: QuestionGroupService,\n  ) {}\n\n  private async getNextPosition(groupId: number): Promise {\n    const { questions } = await this.groupService.findOne(groupId);\n\n    return (last(questions)?.position ?? -1) + 1;\n  }\n\n  @Transactional()\n  async createQuestion(\n    createQuestionDto: CreateQuestionDto,\n  ): Promise {\n    const question = this.repository.create({\n      ...createQuestionDto,\n      position: await this.getNextPosition(createQuestionDto.groupId),\n    });\n\n    return this.repository.save(question);\n  }\n\n  @Transactional()\n  async createQuestions(\n    groupId: number,\n    createQuestionsDto: CreateQuestionsDto,\n  ): Promise {\n    const questions = this.repository.create(\n      createQuestionsDto.questions.map((dto, position) =>\n        this.repository.create({ ...dto, position, groupId }),\n      ),\n    );\n\n    return this.repository.save(questions);\n  }\n\n  find(findDto: QuestionFindDto): Promise {\n    return this.repository.find({\n      where: (qb) => {\n        if (findDto.groupId) {\n          qb.where(`${qb.alias}.groupId = :groupId`, findDto);\n        }\n        return qb;\n      },\n    });\n  }\n\n  findByIds(ids: number[]): Promise {\n    return this.repository.findByIds(ids);\n  }\n\n  async findOne(id: number): Promise {\n    const question = await this.repository.findOne({ id });\n    if (!question) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n\n    return question;\n  }\n\n  @Transactional()\n  async update(id: number, updateDto: UpdateQuestionDto): Promise {\n    let question = await this.findOne(id);\n\n    if (updateDto.groupId && question.groupId !== updateDto.groupId) {\n      question.position = await this.getNextPosition(updateDto.groupId);\n    }\n\n    question = this.repository.merge(question, updateDto);\n\n    return this.repository.save(question);\n  }\n\n  @Transactional()\n  async copyToGroup(\n    group: QuestionGroup,\n    questions: Question[],\n  ): Promise {\n    return this.repository.save(\n      questions.map((question) =>\n        this.repository.create({ ...question, group, id: undefined }),\n      ),\n    );\n  }\n\n  @Transactional()\n  async reorder({\n    groupId,\n    questionIds,\n  }: ReorderQuestionDto): Promise {\n    const questions = await this.repository.find({\n      where: { groupId, id: In(questionIds) },\n    });\n\n    const questionPositionMap: ReadonlyMap = new Map(\n      questionIds.map((id, position) => [id, position]),\n    );\n\n    return this.repository.save(\n      questions.map((question) => {\n        question.position = questionPositionMap.get(question.id) ?? 0;\n        return question;\n      }),\n    );\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete({ id });\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionDto.html":{"url":"classes/ReorderQuestionDto.html","title":"class - ReorderQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/reorder-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupId\n                            \n                            \n                                questionIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from \"class-validator\";\n\nexport class ReorderQuestionDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsArray()\n  @IsPositive({each: true})\n  questionIds: number[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionGroupDto.html":{"url":"classes/ReorderQuestionGroupDto.html","title":"class - ReorderQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/reorder-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question-group.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from 'class-validator';\n\nexport class ReorderQuestionGroupDto {\n  @IsPositive()\n  examId: number;\n\n  @IsArray()\n  @IsPositive({ each: true })\n  groupIds: number[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SeedAuxiliary1624412129413.html":{"url":"classes/SeedAuxiliary1624412129413.html","title":"class - SeedAuxiliary1624412129413","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SeedAuxiliary1624412129413\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663575-SeedAuxiliary1.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663575-SeedAuxiliary1.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663575-SeedAuxiliary1.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { addMonths, endOfMonth, startOfMonth } from 'date-fns';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\nimport faker = require('faker');\nimport bcrypt = require('bcryptjs');\n\ninterface IEntity {\n  id: number;\n}\n\nconst defaultName = 'Gerado';\nconst student = {\n  cpf: '50172241065',\n  enrollment: '989898',\n};\n\nexport class SeedAuxiliary1624412129413 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'INSERT INTO `period` (`name`, `started_at`, `ended_at`) VALUES (?, ?, ?)',\n      [\n        defaultName,\n        startOfMonth(new Date()),\n        endOfMonth(addMonths(new Date(), 5)),\n      ],\n    );\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `course` (`code`, `title`) VALUES (?, ?)',\n      [defaultName, faker.random.alphaNumeric(20)],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `subject` (`code`, `title`, `course_id`) VALUES (?, ?, ?)',\n      [defaultName, faker.random.alpha({ count: 20, upcase: true }), course.id],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `grade` (`subject_id`, `period_id`) VALUES (?, ?)',\n      [subject.id, period.id],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(process.env.ADMIN_PASSWORD!, salt);\n\n    await queryRunner.query(\n      'INSERT INTO `auth` (`login`, `password`, `salt`) VALUES (?, ?, ?)',\n      [student.enrollment, password, salt],\n    );\n    await queryRunner.query(\n      'INSERT INTO `user` (`enrollment`, `cpf`, `type`, `role`) VALUES (?, ?, ?, ?)',\n      [student.enrollment, student.cpf, 'Student', 'manager'],\n    );\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `student_grade` (`user_id`, `grade_id`) VALUES (?, ?)',\n      [user.id, grade.id],\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n    await queryRunner.query('DELETE FROM `student_grade` WHERE `user_id` = ?', [\n      user.id,\n    ]);\n    await queryRunner.query('DELETE FROM `user` WHERE `enrollment` = ?', [\n      student.enrollment,\n    ]);\n    await queryRunner.query('DELETE FROM `auth` WHERE `login` = ?', [\n      student.enrollment,\n    ]);\n\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    await queryRunner.query('DELETE FROM `subject` WHERE `id` = ?', [\n      subject.id,\n    ]);\n    await queryRunner.query('DELETE FROM `course` WHERE `id` = ?', [course.id]);\n    await queryRunner.query('DELETE FROM `grade` WHERE `id` = ?', [grade.id]);\n    await queryRunner.query('DELETE FROM `period` WHERE `id` = ?', [period.id]);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SoftDeleteResult.html":{"url":"interfaces/SoftDeleteResult.html","title":"interface - SoftDeleteResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SoftDeleteResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/soft-delete-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        raw\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        raw\n                                    \n                                \n                                \n                                    \n                                        raw:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SoftDeleteResult {\n  raw: {\n    affectedRows: number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Student.html":{"url":"classes/Student.html","title":"class - Student","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Student\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/student.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                studentGrades\n                            \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    grades\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            studentGrades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, {lazy: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/student.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        grades\n                    \n                \n\n                \n                    \n                        getgrades()\n                    \n                \n                            \n                                \n                                    Defined in src/auxiliary/entities/student.entity.ts:10\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ChildEntity, ManyToMany } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Grade } from './grade.entity';\n\n@ChildEntity()\nexport class Student extends User {\n  @ManyToMany(() => Grade, { lazy: true })\n  studentGrades!: Promise;\n\n  get grades(): Promise {\n    return this.studentGrades;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StudentRepository.html":{"url":"classes/StudentRepository.html","title":"class - StudentRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StudentRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/student.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Student } from '../entities/student.entity';\n\n@EntityRepository(Student)\nexport class StudentRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StudentService.html":{"url":"injectables/StudentService.html","title":"injectable - StudentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StudentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/student.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: StudentRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/student.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        StudentRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Student } from '../entities/student.entity';\nimport { StudentRepository } from '../repositories/student.repository';\n\n@Injectable()\nexport class StudentService {\n  constructor(\n    @InjectRepository(StudentRepository)\n    private readonly repository: StudentRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const student = this.repository.create(createDto);\n\n    return this.repository.save(student);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Subject.html":{"url":"classes/Subject.html","title":"class - Subject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/subject.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                course\n                            \n                            \n                                courseId\n                            \n                            \n                                grades\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Course\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            courseId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, OneToMany } from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Course } from './course.entity';\nimport { Grade } from './grade.entity';\n\n@Entity('subject')\nexport class Subject extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @Column({ type: 'int' })\n  courseId: number;\n\n  @ManyToOne(() => Course)\n  course: Course;\n\n  @OneToMany(() => Grade, (grade) => grade.subject)\n  grades: Grade[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerOptions.html":{"url":"interfaces/SwaggerOptions.html","title":"interface - SwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/interfaces/swagger.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        title\n                                \n                                \n                                        users\n                                \n                                \n                                        version\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        users\n                                    \n                                \n                                \n                                    \n                                        users:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerOptions {\n  title: string;\n  description: string;\n  version: string;\n  users: Record;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimestampEntity.html":{"url":"classes/TimestampEntity.html","title":"class - TimestampEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimestampEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/timestamp.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport class TimestampEntity extends BaseEntity {\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnswerDto.html":{"url":"classes/UpdateAnswerDto.html","title":"class - UpdateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/update-answer.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnswerDto } from './create-answer.dto';\n\nexport class UpdateAnswerDto extends PartialType(CreateAnswerDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamAgreementDto.html":{"url":"classes/UpdateExamAgreementDto.html","title":"class - UpdateExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                anonymous\n                            \n                            \n                                    Optional\n                                observation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/update-exam-agreement.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            observation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/update-exam-agreement.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsBoolean, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class UpdateExamAgreementDto {\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  observation?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Type(() => Boolean)\n  anonymous?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamDto.html":{"url":"classes/UpdateExamDto.html","title":"class - UpdateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateExamDto } from './create-exam.dto';\n\nexport class UpdateExamDto extends PartialType(CreateExamDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionDto.html":{"url":"classes/UpdateQuestionDto.html","title":"class - UpdateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/update-question.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateQuestionDto } from './create-question.dto';\n\nexport class UpdateQuestionDto extends PartialType(CreateQuestionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionGroupDto.html":{"url":"classes/UpdateQuestionGroupDto.html","title":"class - UpdateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/update-question-group.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateQuestionGroupDto } from './create-question-group.dto';\n\nexport class UpdateQuestionGroupDto extends PartialType(CreateQuestionGroupDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadController.html":{"url":"controllers/UploadController.html","title":"controller - UploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/controllers/upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                upload\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/infra/controllers/upload.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { UPLOAD_PATH } from '../infra.constants';\nimport { UploaderService } from '../services/uploader.service';\n\n@Controller('upload')\n@ApiTags('Upload')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class UploadController {\n  constructor(private readonly service: UploaderService) {}\n\n  @Post()\n  @UseInterceptors(FileInterceptor('file'))\n  async upload(@UploadedFile() file: Express.Multer.File) {\n    return this.service.upload(file, UPLOAD_PATH);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploaderService.html":{"url":"classes/UploaderService.html","title":"class - UploaderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploaderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/uploader.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/uploader.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileSendDto } from '../dtos/file-send.dto';\n\nexport abstract class UploaderService {\n  abstract upload(fileDto: FileSendDto, path?: string): Promise;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/exam-agreement.entity';\nimport { Column, Entity, OneToMany, TableInheritance } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { UserRole } from '../enum/user-role.enum';\nimport { UserType } from '../enum/user-type.enum';\n\n@Entity('user')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: UserType } })\nexport class User extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  enrollment: string;\n\n  @Column({ type: 'varchar', unique: true })\n  cpf: string;\n\n  @Column({ type: 'enum', enum: UserType })\n  type: UserType;\n\n  @Column({ type: 'enum', default: UserRole.REGULAR, enum: UserRole })\n  role: UserRole;\n\n  @OneToMany(() => ExamAgreement, (agreement) => agreement.user)\n  examAgreements: ExamAgreement[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\nimport { GetUser } from '../decoratos/get-user.decorator';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../entities/user.entity';\nimport { UserService } from '../user.service';\n\n@Controller('user')\n@ApiTags('User')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  createUser(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUser(createUserDto);\n  }\n\n  @Get()\n  @UseGuards(JwtGuard)\n  getUser(@GetUser() user: User) {\n    return user;\n  }\n\n  // @Put()\n  // @UseGuards(JwtGuard)\n  // updateUser() {\n  //   return this.userService.updateUser();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                enrollment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class UserDto {\n  @IsString()\n  @IsNotEmpty()\n  enrollment: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { UserController } from './controllers/user.controller';\nimport { UserRepository } from './repositories/user.repository';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    forwardRef(() => AuthModule),\n    forwardRef(() => AuxiliaryModule),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/repositories/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { User } from '../entities/user.entity';\n\n@EntityRepository(User)\nexport class UserRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserResult.html":{"url":"interfaces/UserResult.html","title":"interface - UserResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/interfaces/user-specialized-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         UserType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserType } from '../enum/user-type.enum';\n\nexport interface UserResult {\n  readonly type: UserType;\n  readonly id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Private\n                                    Async\n                                createUserByType\n                            \n                            \n                                    Async\n                                findSpecializedUser\n                            \n                            \n                                findUser\n                            \n                            \n                                    Async\n                                mustFindSpecializedUser\n                            \n                            \n                                    Async\n                                mustFindUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, authService: AuthService, studentService: StudentService, professorService: ProfessorService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        studentService\n                                                  \n                                                        \n                                                                        StudentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        professorService\n                                                  \n                                                        \n                                                                        ProfessorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/user/user.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createUserByType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserByType(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findUser\n                        \n                        \n                    \n                \n            \n            \n                \nfindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthService } from 'src/auth/auth.service';\nimport { ProfessorService } from 'src/auxiliary/services/professor.service';\nimport { StudentService } from 'src/auxiliary/services/student.service';\nimport {\n  runOnTransactionComplete,\n  Transactional,\n} from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { UserDto } from './dtos/user.dto';\nimport { User } from './entities/user.entity';\nimport { UserType } from './enum/user-type.enum';\nimport { UserResult } from './interfaces/user-specialized-result.interface';\nimport { UserRepository } from './repositories/user.repository';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private readonly userRepository: UserRepository,\n    private readonly authService: AuthService,\n    private readonly studentService: StudentService,\n    private readonly professorService: ProfessorService,\n  ) {}\n\n  @Transactional()\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const user = await this.createUserByType(createUserDto);\n    await this.authService.createAuth({\n      login: createUserDto.enrollment,\n      password: createUserDto.password,\n    });\n    runOnTransactionComplete((e) => {\n      e && console.error(e);\n      console.log('create auth transaction completed');\n    });\n    return user;\n  }\n\n  private async createUserByType(createUserDto: CreateUserDto): Promise {\n    switch (createUserDto.type) {\n      case UserType.PROFESSOR:\n        return this.professorService.createStudent(createUserDto);\n      case UserType.STUDENT:\n        return this.studentService.createStudent(createUserDto);\n      default:\n        throw new UnprocessableEntityException();\n    }\n  }\n\n  findUser(userDto: UserDto): Promise {\n    return this.userRepository.findOne({ ...userDto });\n  }\n\n  async mustFindUser(userDto: UserDto): Promise {\n    const user = await this.findUser(userDto);\n    if (!user) {\n      throw new UnauthorizedException(userDto);\n    }\n    return user;\n  }\n\n  async findSpecializedUser(userDto: UserDto): Promise {\n    const partialUser:\n      | UserResult\n      | undefined = await this.userRepository.findOne({\n      select: ['type', 'id'],\n      where: { ...userDto },\n    });\n\n    if (!partialUser) {\n      throw new UnauthorizedException(userDto);\n    }\n\n    let user: User | undefined;\n\n    switch (partialUser.type) {\n      case UserType.PROFESSOR:\n        user = await this.professorService.findOne(userDto);\n        break;\n      case UserType.STUDENT:\n        user = await this.studentService.findOne(userDto);\n        break;\n      default:\n        user = await this.userRepository.findOne({ ...userDto });\n    }\n\n    return user!;\n  }\n\n  async mustFindSpecializedUser(userDto: UserDto): Promise {\n    const user = await this.findSpecializedUser(userDto);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/answer/answer.controller.ts\n            \n            controller\n            AnswerController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/answer/answer.service.ts\n            \n            injectable\n            AnswerService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/answer/dto/create-answer.dto.ts\n            \n            class\n            CreateAnswerDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/answer/dto/update-answer.dto.ts\n            \n            class\n            UpdateAnswerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/entities/answer-grade.entity.ts\n            \n            class\n            AnswerGrade\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/answer/entities/answer.entity.ts\n            \n            class\n            Answer\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/answer/interfaces/batch-user.interface.ts\n            \n            interface\n            BatchUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer-grade.repository.ts\n            \n            class\n            AnswerGradeRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer.repository.ts\n            \n            class\n            AnswerRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MAX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/casl/factories/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/repositories/auth.repository.ts\n            \n            class\n            AuthRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/course.entity.ts\n            \n            class\n            Course\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/grade.entity.ts\n            \n            class\n            Grade\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/period.entity.ts\n            \n            class\n            Period\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/professor.entity.ts\n            \n            class\n            Professor\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/student.entity.ts\n            \n            class\n            Student\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/subject.entity.ts\n            \n            class\n            Subject\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/grade.repository.ts\n            \n            class\n            GradeRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/period.repository.ts\n            \n            class\n            PeriodRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/professor.repository.ts\n            \n            class\n            ProfessorRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/student.repository.ts\n            \n            class\n            StudentRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/services/grade.service.ts\n            \n            injectable\n            GradeService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auxiliary/services/period.service.ts\n            \n            injectable\n            PeriodService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auxiliary/services/professor.service.ts\n            \n            injectable\n            ProfessorService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auxiliary/services/student.service.ts\n            \n            injectable\n            StudentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            function\n            origin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            allowedOrigins\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            isProd\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/firebase.config.ts\n            \n            variable\n            firebaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            configs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/interfaces/swagger.interface.ts\n            \n            interface\n            SwaggerOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/sentry.config.ts\n            \n            variable\n            sentryConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controllers/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/core.constants.ts\n            \n            variable\n            enrollmentLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/decorators/is-enrollment.decorator.ts\n            \n            function\n            IsEnrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/entities/ff.entity.ts\n            \n            class\n            FFEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/entities/timestamp.entity.ts\n            \n            class\n            TimestampEntity\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            interface\n            IClassValidatorException\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            interface\n            IException\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/interceptors/payload.interceptor.ts\n            \n            injectable\n            PayloadInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/soft-delete-result.interface.ts\n            \n            interface\n            SoftDeleteResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/utils/last.util.ts\n            \n            function\n            last\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1619445806509-Auth.ts\n            \n            class\n            Auth1619445806509\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620179231630-QuestionGroup.ts\n            \n            class\n            QuestionGroup1620179231630\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            class\n            AdminUser1620299822480\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            cpf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            enrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477175799-Auxiliary.ts\n            \n            class\n            Auxiliary1620477175799\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477869366-QuestionImage.ts\n            \n            class\n            QuestionImage1620477869366\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620478273991-Exam.ts\n            \n            class\n            Exam1620478273991\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620488935141-QuestionPosition.ts\n            \n            class\n            QuestionPosition1620488935141\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620563708532-QuestionPositionIdx.ts\n            \n            class\n            QuestionPositionIdx1620563708532\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1621036457247-ExamTitle.ts\n            \n            class\n            ExamTitle1621036457247\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1621992475274-QuestionGroupTarget.ts\n            \n            class\n            QuestionGroupTarget1621992475274\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622326106015-ExamTarget.ts\n            \n            class\n            ExamTarget1622326106015\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622326106015-ExamTarget.ts\n            \n            variable\n            targets\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1622332886234-ExamAgreement.ts\n            \n            class\n            ExamAgreement1622332886234\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts\n            \n            class\n            ExamAgreementAnonymousDefault1622334780336\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622378888497-ExamTargetAdd.ts\n            \n            class\n            ExamTargetAdd1622378888497\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622378888497-ExamTargetAdd.ts\n            \n            variable\n            addTargets\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1622417032753-ExamAgreementObservation.ts\n            \n            class\n            ExamAgreementObservation1622417032753\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622421768424-Answer.ts\n            \n            class\n            Answer1622421768424\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663574-Auxiliary.ts\n            \n            class\n            Auxiliary1624416663574\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            class\n            SeedAuxiliary1624412129413\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            interface\n            IEntity\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            variable\n            defaultName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            variable\n            student\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1624547816204-PeriodIndex.ts\n            \n            class\n            PeriodIndex1624547816204\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624560625346-GradeIndex.ts\n            \n            class\n            GradeIndex1624560625346\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624750140569-AnswerScoreCheck.ts\n            \n            class\n            AnswerScoreCheck1624750140568\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624883202214-QuestionGroupGradeRemove.ts\n            \n            class\n            QuestionGroupGradeRemove1624883202213\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam-agreement.controller.ts\n            \n            controller\n            ExamAgreementController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam-target.controller.ts\n            \n            controller\n            ExamTargetController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam.controller.ts\n            \n            controller\n            ExamController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam-agreement.dto.ts\n            \n            class\n            CreateExamAgreementDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam.dto.ts\n            \n            class\n            CreateExamDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/dtos/exam-agreement.dto.ts\n            \n            class\n            ExamAgreementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/exam-target-manager.dto.ts\n            \n            interface\n            ExamTargetManagerDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/find-exam-by-user.dto.ts\n            \n            interface\n            FindExamByUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam-agreement.dto.ts\n            \n            class\n            UpdateExamAgreementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam.dto.ts\n            \n            class\n            UpdateExamDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/entities/exam-agreement.entity.ts\n            \n            class\n            ExamAgreement\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/exam/entities/exam-target.entity.ts\n            \n            class\n            ExamTarget\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/exam/entities/exam.entity.ts\n            \n            class\n            Exam\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/exam/exam.constants.ts\n            \n            variable\n            EXAM_NOT_FOUND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/factories/exam-target-node.factory.ts\n            \n            injectable\n            ExamTargetNodeFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/factories/exam-target-node.factory.ts\n            \n            interface\n            ExamTargetNodeSchema\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/interfaces/exam-agreement-user.interface.ts\n            \n            interface\n            ExamAgreementUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/interfaces/exam-user.interface.ts\n            \n            interface\n            ExamUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/models/exam-personal-result.model.ts\n            \n            class\n            ExamPersonalResult\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/models/exam-target-node.model.ts\n            \n            class\n            ExamTargetNode\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/providers/exam-target-tree.provider.ts\n            \n            injectable\n            ExamTargetTree\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam-agreement.repository.ts\n            \n            class\n            ExamAgreementRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam-target.repository.ts\n            \n            class\n            ExamTargetRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam.repository.ts\n            \n            class\n            ExamRepository\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/exam/services/exam-agreement.service.ts\n            \n            injectable\n            ExamAgreementService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/exam/services/exam-target.service.ts\n            \n            injectable\n            ExamTargetService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/services/exam.service.ts\n            \n            injectable\n            ExamService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/exportation/exportation.controller.ts\n            \n            controller\n            ExportationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exportation/exportation.repository.ts\n            \n            injectable\n            ExportationRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exportation/exportation.service.ts\n            \n            injectable\n            ExportationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/exportation/interfaces/csv-line-row.interface.ts\n            \n            interface\n            CsvLineRow\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/exportation/interfaces/csv-line.interface.ts\n            \n            interface\n            CsvLine\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/exportation/maps/user-type.map.ts\n            \n            variable\n            userTypeMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/dtos/firebase-storage-upload.dto.ts\n            \n            interface\n            FirebaseStorageUploadDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/firebase-admin.constants.ts\n            \n            variable\n            FIREBASE_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n            \n            injectable\n            FirebaseAdmin\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/firebase/firebase.constants.ts\n            \n            variable\n            FIREBASE_ADMIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseAsyncModuleOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseModuleOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n            \n            interface\n            FirebaseAuthDecodedToken\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-auth.service.ts\n            \n            injectable\n            FirebaseAuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-cloud-messaging.service.ts\n            \n            injectable\n            FirebaseCloudMessagingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-firestore.service.ts\n            \n            injectable\n            FirebaseFirestoreService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-storage.service.ts\n            \n            injectable\n            FirebaseStorageService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/controllers/upload.controller.ts\n            \n            controller\n            UploadController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/dtos/file-send.dto.ts\n            \n            interface\n            FileSendDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infra/infra.constants.ts\n            \n            variable\n            UPLOAD_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/services/firebase-uploader.service.ts\n            \n            injectable\n            FirebaseUploader\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/services/uploader.service.ts\n            \n            class\n            UploaderService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyGlobals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyPerfLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applySecurityLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            buildSwaggerDoc\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            sentryInit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            DEFAULT_PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question-group.controller.ts\n            \n            controller\n            QuestionGroupController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/question-group/dtos/copy-question-group.dto.ts\n            \n            class\n            CopyQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-question-group.dto.ts\n            \n            class\n            CreateQuestionGroupDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-question.dto.ts\n            \n            class\n            CreateQuestionDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-questions.dto.ts\n            \n            class\n            CreateQuestion\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-questions.dto.ts\n            \n            class\n            CreateQuestionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/find-personal.dto.ts\n            \n            class\n            FindPersonalDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/question-find.dto.ts\n            \n            class\n            QuestionFindDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/question-group-grade.dto.ts\n            \n            class\n            QuestionGroupGrade\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/question-group/dtos/reorder-question-group.dto.ts\n            \n            class\n            ReorderQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/reorder-question.dto.ts\n            \n            class\n            ReorderQuestionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/update-question-group.dto.ts\n            \n            class\n            UpdateQuestionGroupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/dtos/update-question.dto.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/entities/question-group.entity.ts\n            \n            class\n            QuestionGroup\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/question-group/entities/question.entity.ts\n            \n            class\n            Question\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/question-group/interfaces/question-group-user.interface.ts\n            \n            interface\n            QuestionGroupUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/providers/personal-group.provider.ts\n            \n            injectable\n            PersonalQuestionGroup\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/question-group.constants.ts\n            \n            variable\n            questionGroupNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/question.constants.ts\n            \n            variable\n            questionGroupRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/question.constants.ts\n            \n            variable\n            questionNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/repositories/question-group.repository.ts\n            \n            class\n            QuestionGroupRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/repositories/question.repository.ts\n            \n            class\n            QuestionRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/services/question-group.service.ts\n            \n            injectable\n            QuestionGroupService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/question-group/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/decoratos/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/user/helpers/create-user.helper.ts\n            \n            function\n            createUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/interfaces/user-specialized-result.interface.ts\n            \n            interface\n            UserResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/repositories/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.2.2\n        \n            @nestjs/common : ^7.6.13\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.13\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.13\n        \n            @nestjs/swagger : ^4.7.15\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @sentry/node : ^6.5.1\n        \n            @sentry/tracing : ^6.5.1\n        \n            bcryptjs : ^2.4.3\n        \n            brazilian-class-validator : ^0.1.6\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            date-fns : ^2.22.1\n        \n            express-basic-auth : ^1.2.0\n        \n            express-rate-limit : ^5.2.6\n        \n            faker : ^5.5.3\n        \n            firebase-admin : ^9.7.0\n        \n            helmet : ^4.4.1\n        \n            lodash : ^4.17.21\n        \n            morgan : ^1.10.0\n        \n            mysql2 : ^2.2.5\n        \n            objects-to-csv : ^1.3.6\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.31\n        \n            typeorm-naming-strategies : ^2.0.0\n        \n            typeorm-transactional-cls-hooked : ^0.1.20\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnswerType   (src/.../answer-type.enum.ts)\n                        \n                        \n                            CaslAction   (src/.../casl-action.enum.ts)\n                        \n                        \n                            ExamAgreementStatus   (src/.../exam-agreement-status.enum.ts)\n                        \n                        \n                            ExamStatus   (src/.../exam-status.enum.ts)\n                        \n                        \n                            ExamTargetType   (src/.../exam-target-type.enum.ts)\n                        \n                        \n                            ExportationType   (src/.../exportation-type.enum.ts)\n                        \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserType   (src/.../user-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/answer/enums/answer-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AnswerType\n                    \n                \n                        \n                            \n                                 ANSWER\n                            \n                        \n                        \n                            \n                                Value : Answer\n                            \n                        \n                        \n                            \n                                 ANSWER_GRADE\n                            \n                        \n                        \n                            \n                                Value : AnswerGrade\n                            \n                        \n            \n        \n\n    src/auth/casl/enums/casl-action.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CaslAction\n                    \n                \n                        \n                            \n                                 MANAGE\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 CREATE\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 READ\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 UPDATE\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-agreement-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamAgreementStatus\n                    \n                \n                        \n                            \n                                 STARTED\n                            \n                        \n                        \n                            \n                                Value : started\n                            \n                        \n                        \n                            \n                                 FINISHED\n                            \n                        \n                        \n                            \n                                Value : finished\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-target-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamTargetType\n                    \n                \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : Student\n                            \n                        \n                        \n                            \n                                 PROFESSOR\n                            \n                        \n                        \n                            \n                                Value : Professor\n                            \n                        \n                        \n                            \n                                 COURSE\n                            \n                        \n                        \n                            \n                                Value : Course\n                            \n                        \n                        \n                            \n                                 GRADE\n                            \n                        \n                        \n                            \n                                Value : Grade\n                            \n                        \n            \n        \n\n    src/exportation/enums/exportation-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExportationType\n                    \n                \n                        \n                            \n                                 AVALIACAO\n                            \n                        \n                        \n                            \n                                Value : Avaliacao\n                            \n                        \n                        \n                            \n                                 GRUPO\n                            \n                        \n                        \n                            \n                                Value : Grupo\n                            \n                        \n                        \n                            \n                                 PESSOAL\n                            \n                        \n                        \n                            \n                                Value : GrupoPessoal\n                            \n                        \n            \n        \n\n    src/user/enum/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 MANAGER\n                            \n                        \n                        \n                            \n                                Value : manager\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 REGULAR\n                            \n                        \n                        \n                            \n                                Value : regular\n                            \n                        \n            \n        \n\n    src/user/enum/user-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserType\n                    \n                \n                        \n                            \n                                 PROFESSOR\n                            \n                        \n                        \n                            \n                                Value : Professor\n                            \n                        \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : Student\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            applyGlobals   (src/.../main.ts)\n                        \n                        \n                            applyPerfLayer   (src/.../main.ts)\n                        \n                        \n                            applySecurityLayer   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            buildSwaggerDoc   (src/.../main.ts)\n                        \n                        \n                            createUser   (src/.../create-user.helper.ts)\n                        \n                        \n                            IsEnrollment   (src/.../is-enrollment.decorator.ts)\n                        \n                        \n                            last   (src/.../last.util.ts)\n                        \n                        \n                            origin   (src/.../cors.config.ts)\n                        \n                        \n                            sentryInit   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            applyGlobals\n                        \n                        \n                    \n                \n            \n            \n                \napplyGlobals(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyPerfLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplyPerfLayer(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applySecurityLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplySecurityLayer(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildSwaggerDoc\n                        \n                        \n                    \n                \n            \n            \n                \nbuildSwaggerDoc(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sentryInit\n                        \n                        \n                    \n                \n            \n            \n                \nsentryInit(config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/user/helpers/create-user.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/decorators/is-enrollment.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            IsEnrollment\n                        \n                        \n                    \n                \n            \n            \n                \nIsEnrollment()\n                \n            \n\n\n\n\n        \n    \n    src/core/utils/last.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            last\n                        \n                        \n                    \n                \n            \n            \n                \nlast(arr)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/config/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            origin\n                        \n                        \n                    \n                \n            \n            \n                \norigin(origin, callback)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    origin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nFast Form API\nAPI para suprir a lógica de negócio do sistema Fast Form (FF)\nInstalação\nPara rodar a API localmente (em development mode) é necessário esses programas no seu computador:\n\ndocker\ndocker-compose\n\n# fullfil all needed environment variables copying .env.example to .env\n$ cp .env.example .env\n# initialize api service and its dependencies using following command\n$ sudo docker-compose up --build\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnswerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuxiliaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExportationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseAdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InfraModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionGroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_imports\n\n\n\ncluster_AnswerModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_ExportationModule\n\n\n\ncluster_ExportationModule_exports\n\n\n\ncluster_ExportationModule_providers\n\n\n\ncluster_FirebaseAdminModule\n\n\n\ncluster_FirebaseAdminModule_exports\n\n\n\ncluster_FirebaseAdminModule_providers\n\n\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_exports\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_exports\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_exports\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nExamModule->AnswerModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nExamAgreementService \n\nExamAgreementService \n\nExamAgreementService  -->\n\nExamModule->ExamAgreementService \n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\nAnswerModule -->\n\nQuestionGroupModule->AnswerModule\n\n\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionGroupModule->QuestionService \n\n\n\nAppModule -->\n\nAnswerModule->AppModule\n\n\n\n\n\nAnswerService\n\nAnswerService\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nExamModule -->\n\nAuxiliaryModule->ExamModule\n\n\n\nQuestionGroupModule -->\n\nAuxiliaryModule->QuestionGroupModule\n\n\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nGradeService \n\nGradeService \n\nGradeService  -->\n\nAuxiliaryModule->GradeService \n\n\n\n\n\nPeriodService \n\nPeriodService \n\nPeriodService  -->\n\nAuxiliaryModule->PeriodService \n\n\n\n\n\nProfessorService \n\nProfessorService \n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\n\n\nStudentService \n\nStudentService \n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nHttpExceptionFilter \n\nHttpExceptionFilter \n\nHttpExceptionFilter  -->\n\nCoreModule->HttpExceptionFilter \n\n\n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nExportationModule\n\nExportationModule\n\nAppModule -->\n\nExportationModule->AppModule\n\n\n\n\n\nExportationService \n\nExportationService \n\nExportationService  -->\n\nExportationModule->ExportationService \n\n\n\n\n\nInfraModule\n\nInfraModule\n\nExportationModule -->\n\nInfraModule->ExportationModule\n\n\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nGradeService\n\nGradeService\n\nAuxiliaryModule -->\n\nGradeService->AuxiliaryModule\n\n\n\n\n\nPeriodService\n\nPeriodService\n\nAuxiliaryModule -->\n\nPeriodService->AuxiliaryModule\n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\nExamAgreementService\n\nExamAgreementService\n\nExamModule -->\n\nExamAgreementService->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nExamTargetNodeFactory\n\nExamTargetNodeFactory\n\nExamModule -->\n\nExamTargetNodeFactory->ExamModule\n\n\n\n\n\nExamTargetService\n\nExamTargetService\n\nExamModule -->\n\nExamTargetService->ExamModule\n\n\n\n\n\nExamTargetTree\n\nExamTargetTree\n\nExamModule -->\n\nExamTargetTree->ExamModule\n\n\n\n\n\nExportationRepository\n\nExportationRepository\n\nExportationModule -->\n\nExportationRepository->ExportationModule\n\n\n\n\n\nExportationService\n\nExportationService\n\nExportationModule -->\n\nExportationService->ExportationModule\n\n\n\n\n\nFirebaseAdmin \n\nFirebaseAdmin \n\n\n\nFirebaseAdminModule\n\nFirebaseAdminModule\n\nFirebaseAdmin  -->\n\nFirebaseAdminModule->FirebaseAdmin \n\n\n\n\n\nFirebaseAdmin\n\nFirebaseAdmin\n\nFirebaseAdminModule -->\n\nFirebaseAdmin->FirebaseAdminModule\n\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nPersonalQuestionGroup\n\nPersonalQuestionGroup\n\nQuestionGroupModule -->\n\nPersonalQuestionGroup->QuestionGroupModule\n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionGroupModule -->\n\nQuestionService->QuestionGroupModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        14 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    28 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    80 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    21 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            Callback   (src/.../cors.config.ts)\n                        \n                        \n                            CaslSubjects   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            FirebaseFirestoreCollection   (src/.../firebase-firestore-collection.type.ts)\n                        \n                        \n                            Path   (src/.../exam-target-node.model.ts)\n                        \n                        \n                            UserToFind   (src/.../user-to-find.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/casl/factories/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CaslSubjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    src/config/cors.config.ts\n    \n    \n        \n            \n                \n                    \n                    Callback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/firebase/types/firebase-firestore-collection.type.ts\n    \n    \n        \n            \n                \n                    \n                    FirebaseFirestoreCollection\n                \n            \n            \n                \n                        firebase.firestore.CollectionReference\n\n                \n            \n        \n    \n    src/exam/models/exam-target-node.model.ts\n    \n    \n        \n            \n                \n                    \n                    Path\n                \n            \n            \n                \n                        ExamTargetNode[] | undefined\n\n                \n            \n        \n    \n    src/auxiliary/types/user-to-find.type.ts\n    \n    \n        \n            \n                \n                    \n                    UserToFind\n                \n            \n            \n                \n                        Student | Professor\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addTargets   (src/.../1622378888497-ExamTargetAdd.ts)\n                        \n                        \n                            allowedOrigins   (src/.../cors.config.ts)\n                        \n                        \n                            configs   (src/.../index.ts)\n                        \n                        \n                            corsConfig   (src/.../cors.config.ts)\n                        \n                        \n                            corsConfigKey   (src/.../cors.config.ts)\n                        \n                        \n                            cpf   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            databaseConfigKey   (src/.../database.config.ts)\n                        \n                        \n                            DEFAULT_PORT   (src/.../main.ts)\n                        \n                        \n                            defaultName   (src/.../1624416663575-SeedAuxiliary1.ts)\n                        \n                        \n                            enrollment   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            enrollmentLength   (src/.../core.constants.ts)\n                        \n                        \n                            EXAM_NOT_FOUND   (src/.../exam.constants.ts)\n                        \n                        \n                            FIREBASE_ADMIN   (src/.../firebase.constants.ts)\n                        \n                        \n                            FIREBASE_OPTIONS   (src/.../firebase-admin.constants.ts)\n                        \n                        \n                            firebaseConfig   (src/.../firebase.config.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            isProd   (src/.../cors.config.ts)\n                        \n                        \n                            jwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            jwtConfigKey   (src/.../jwt.config.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            PASSWORD_MAX   (src/.../auth.constants.ts)\n                        \n                        \n                            PASSWORD_MIN   (src/.../auth.constants.ts)\n                        \n                        \n                            questionGroupNotFound   (src/.../question-group.constants.ts)\n                        \n                        \n                            questionGroupRelations   (src/.../question.constants.ts)\n                        \n                        \n                            questionNotFound   (src/.../question.constants.ts)\n                        \n                        \n                            rateLimitConfig   (src/.../rate-limit.config.ts)\n                        \n                        \n                            rateLimitConfigKey   (src/.../rate-limit.config.ts)\n                        \n                        \n                            sentryConfig   (src/.../sentry.config.ts)\n                        \n                        \n                            student   (src/.../1624416663575-SeedAuxiliary1.ts)\n                        \n                        \n                            swaggerConfig   (src/.../swagger.config.ts)\n                        \n                        \n                            swaggerConfigKey   (src/.../swagger.config.ts)\n                        \n                        \n                            targets   (src/.../1622326106015-ExamTarget.ts)\n                        \n                        \n                            UPLOAD_PATH   (src/.../infra.constants.ts)\n                        \n                        \n                            userTypeMap   (src/.../user-type.map.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/migrations/1622378888497-ExamTargetAdd.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            addTargets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['Course', 'Grade']\n                        \n                    \n\n\n            \n        \n\n    src/config/cors.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            allowedOrigins\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp[]\n\n                        \n                    \n                    \n                        \n                            Default value : isProd\n  ? [/^https:\\/\\/(.*\\.|)herokuapp.com/]\n  : [/^http:\\/\\/localhost:(3000|5000)$/, /^https:\\/\\/(.*\\.|)herokuapp.com/]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  corsConfigKey,\n  (): CorsOptions => ({\n    origin,\n    optionsSuccessStatus: 200,\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cors'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isProd\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.NODE_ENV === 'production'\n                        \n                    \n\n\n            \n        \n\n    src/config/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  swaggerConfig,\n  databaseConfig,\n  rateLimitConfig,\n  corsConfig,\n  jwtConfig,\n  firebaseConfig,\n  sentryConfig,\n]\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1620299822480-AdminUser.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '29997856155'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '999999'\n                        \n                    \n\n\n            \n        \n\n    src/config/database.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  databaseConfigKey,\n  (): TypeOrmModuleOptions => ({\n    type: 'mysql',\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_DATABASE,\n    port: parseInt(process.env.DB_PORT!),\n    maxQueryExecutionTime: parseInt(process.env.DB_QUERY_TIMEOUT ?? '5000'),\n    entities: [__dirname + '/../**/*.entity.{js,ts}'],\n    migrations: [__dirname + '/../database/migrations/*.{js,ts}'],\n    subscribers: [__dirname + '/../**/*.subscriber.{js,ts}'],\n    synchronize: false,\n    logging:\n      process.env.DB_LOGGING === 'true' ||\n      process.env.NODE_ENV === 'development',\n    cli: {\n      migrationsDir: 'src/database/migrations',\n    },\n    namingStrategy: new SnakeNamingStrategy(),\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'database'\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_PORT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3000\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('bootstrap')\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1624416663575-SeedAuxiliary1.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Gerado'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            student\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  cpf: '50172241065',\n  enrollment: '989898',\n}\n                        \n                    \n\n\n            \n        \n\n    src/core/core.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            enrollmentLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : [1, 9]\n                        \n                    \n\n\n            \n        \n\n    src/exam/exam.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EXAM_NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam not found'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_ADMIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_ADMIN'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase-admin/firebase-admin.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_OPTIONS'\n                        \n                    \n\n\n            \n        \n\n    src/config/firebase.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            firebaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  'firebase',\n  (): FirebaseModuleOptions => {\n    if (!process.env.FIREBASE_ADMIN) {\n      throw new Error(\n        'Needs FIREBASE_ADMIN env (JSON Service Account as string)',\n      );\n    }\n\n    if (!process.env.FIREBASE_BUCKET) {\n      throw new Error('Needs FIREBASE_BUCKET env var');\n    }\n\n    return {\n      cert: JSON.parse(process.env.FIREBASE_ADMIN),\n      storageBucket: process.env.FIREBASE_BUCKET,\n    };\n    //return JSON.parse(process.env.FIREBASE_ADMIN);\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/user/decoratos/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (_: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/config/jwt.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  jwtConfigKey,\n  (): JwtModuleOptions => ({\n    secret: process.env.JWT_SECRET,\n    signOptions: { issuer: 'ff.uneb.br', expiresIn: '10h' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'jwt'\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MAX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 100\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 6\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question-group.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionGroupNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup not found'\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionGroupRelations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['questions']\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Question not found'\n                        \n                    \n\n\n            \n        \n\n    src/config/rate-limit.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(rateLimitConfigKey, () => ({\n  timeWindow: parseInt(process.env.RATE_LIMIT_WINDOW_MS ?? '60000'),\n  max: parseInt(process.env.RATE_LIMIT_MAX ?? '20'),\n}))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'rateLimit'\n                        \n                    \n\n\n            \n        \n\n    src/config/sentry.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sentryConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs('sentry', () => ({\n  dsn: process.env.SENTRY_DSN,\n}))\n                        \n                    \n\n\n            \n        \n\n    src/config/swagger.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  swaggerConfigKey,\n  (): SwaggerOptions => ({\n    title: 'Fast Form',\n    description: 'Fast Form API',\n    version: 'v0.0.1',\n    users: { ff: 'senhaforte' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'swagger'\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1622326106015-ExamTarget.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\"Student\", \"Professor\"]\n                        \n                    \n\n\n            \n        \n\n    src/infra/infra.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UPLOAD_PATH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/questions'\n                        \n                    \n\n\n            \n        \n\n    src/exportation/maps/user-type.map.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            userTypeMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ReadonlyMap\n\n                        \n                    \n                    \n                        \n                            Default value : new Map([\n  ['User', 'Usuário'],\n  ['Professor', 'Professor'],\n  ['Student', 'Estudante'],\n])\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
