var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUser1620299822480.html",[0,0.239,1,3.61]],["body/classes/AdminUser1620299822480.html",[0,0.21,1,4.517,2,0.6,3,0.07,4,0.07,5,0.062,6,5.264,7,3.168,8,2.558,9,3.277,10,0.296,11,1.196,12,3.8,13,2.323,14,2.812,15,2.722,16,2.812,17,4.204,18,0.604,19,3.919,20,1.305,21,0.009,22,1.222,23,0.508,24,0.981,25,1.17,26,1.89,27,2.812,28,3.919,29,0.167,30,0.803,31,3.467,32,3.467,33,3.436,34,4.88,35,3.467,36,4.507,37,3.467,38,0.07,39,0.005,40,1.59,41,1.044,42,1.646,43,2.621,44,7.099,45,3.467,46,3.067,47,3.919,48,3.919,49,2.382,50,2.04,51,3.919,52,3.168,53,3.467,54,3.919,55,5.336,56,3.467,57,3.794,58,3.919,59,5.588,60,2.722,61,3.129,62,4.942,63,2.62,64,2.114,65,3.919,66,1.693,67,0.005,68,0.004]],["title/classes/Answer.html",[0,0.239,69,2.501]],["body/classes/Answer.html",[0,0.228,2,0.653,3,0.076,4,0.076,5,0.068,10,0.322,18,0.889,21,0.008,22,0.933,23,0.696,29,0.221,30,0.874,38,0.076,39,0.004,40,1.687,41,1.815,67,0.005,68,0.004,69,3.32,70,3.77,71,1.446,72,3.183,73,0.973,74,4.138,75,6.029,76,2.561,77,2.635,78,2.635,79,1.685,80,2.591,81,4.263,82,2.887,83,2.887,84,4.187,85,2.299,86,4.263,87,6.481,88,4.325,89,4.263,90,1.952,91,3.183,92,2.012,93,2.863,94,1.895,95,2.863,96,1.952,97,1.895,98,1.952,99,1.895,100,1.952,101,3.011,102,2.712,103,3.373,104,2.219,105,3.603,106,2.591,107,5.244,108,2.712,109,4.263,110,2.076,111,4.263]],["title/controllers/AnswerController.html",[112,1.777,113,3.357]],["body/controllers/AnswerController.html",[0,0.22,3,0.074,4,0.074,5,0.066,10,0.311,11,1.238,18,0.826,20,1.694,21,0.009,22,1.587,23,0.566,24,1.274,25,1.601,29,0.217,38,0.074,39,0.004,40,2.256,66,1.777,67,0.005,68,0.004,69,2.304,79,1.566,112,1.637,113,4.347,114,1.777,115,3.639,116,2.397,117,2.571,118,4.849,119,3.239,120,3.515,121,2.648,122,3.639,123,5.299,124,4.065,125,4.114,126,4.114,127,2.501,128,1.77,129,4.347,130,4.114,131,2.501,132,4.347,133,4.114,134,2.501,135,5.87,136,5.783,137,4.114,138,3.679,139,3.326,140,3.092,141,0.9,142,4.47,143,3.639,144,3.639,145,4.675,146,3.639,147,4.114,148,2.304,149,1.375,150,3.639,151,2.276,152,4.114,153,4.114,154,3.092,155,4.114,156,4.114,157,4.114,158,3.092,159,4.114]],["title/classes/AnswerGrade.html",[0,0.239,160,2.985]],["body/classes/AnswerGrade.html",[0,0.24,2,0.686,3,0.08,4,0.08,5,0.071,10,0.339,18,0.917,21,0.008,23,0.68,29,0.209,30,0.919,38,0.08,39,0.004,40,1.747,41,1.634,67,0.006,68,0.004,69,4.56,71,1.497,72,1.936,73,1.007,74,3.522,75,5.429,76,2.651,77,2.728,78,2.728,79,1.739,80,3.73,82,2.989,83,2.183,84,3.166,85,1.738,87,4.962,88,3.311,90,2.052,91,3.601,92,2.116,93,2.94,94,1.993,95,2.94,96,2.052,97,1.993,98,2.052,99,1.993,100,2.052,105,3.73,160,4.103,161,4.962,162,3.965,163,5.067,164,4.482,165,4.482,166,4.482,167,4.482,168,4.482,169,4.962,170,4.482]],["title/classes/AnswerGradeRepository.html",[0,0.239,171,3.357]],["body/classes/AnswerGradeRepository.html",[0,0.338,2,0.967,3,0.113,4,0.113,5,0.101,21,0.008,29,0.247,30,1.569,38,0.113,39,0.006,67,0.007,68,0.006,71,1.868,160,4.22,171,5.756,172,5.584,173,5.584,174,4.447,175,3.406,176,2.581,177,2.581,178,2.581,179,6.313,180,4.745,181,6.313]],["title/modules/AnswerModule.html",[182,1.424,183,3.154]],["body/modules/AnswerModule.html",[0,0.291,3,0.097,4,0.097,5,0.087,21,0.008,29,0.257,38,0.097,39,0.005,67,0.006,68,0.005,113,5.791,114,3.015,141,1.19,142,5.749,143,4.812,171,5.246,182,2.457,183,6.074,184,2.491,185,2.419,186,2.65,187,2.65,188,2.491,189,3.753,190,2.65,191,4.812,192,4.812,193,3.399,194,2.65,195,2.65,196,5.441,197,5.441,198,3.461,199,2.419,200,4.089,201,5.441,202,5.441,203,5.441,204,3.047,205,5.441]],["title/classes/AnswerRepository.html",[0,0.239,200,3.357]],["body/classes/AnswerRepository.html",[0,0.34,2,0.974,3,0.114,4,0.114,5,0.101,21,0.008,29,0.248,30,1.577,38,0.114,39,0.006,67,0.007,68,0.006,69,3.563,71,1.877,174,4.462,175,3.432,176,2.6,177,2.6,178,2.6,200,5.782,206,5.627,207,6.362,208,6.362]],["title/injectables/AnswerService.html",[142,2.985,209,1.066]],["body/injectables/AnswerService.html",[0,0.233,3,0.078,4,0.078,5,0.069,10,0.329,11,1.287,18,0.843,20,1.736,21,0.008,22,1.626,23,0.58,24,1.305,25,1.732,29,0.206,38,0.078,39,0.004,40,2.296,41,2.278,50,2.266,67,0.005,68,0.004,69,4.37,117,2.674,118,4.969,119,3.368,120,3.656,121,2.754,122,5.32,123,5.216,127,3.656,128,1.634,131,3.656,134,3.656,135,5.841,141,0.952,142,4.021,144,3.85,145,4.862,146,3.85,151,2.323,209,1.435,210,1.688,211,3.85,212,4.353,213,4.353,214,4.353,215,4.353,216,4.353,217,4.742,218,4.353,219,4.353,220,4.353]],["title/controllers/AppController.html",[112,1.777,221,3.357]],["body/controllers/AppController.html",[0,0.334,3,0.112,4,0.112,5,0.099,10,0.471,11,1.628,18,0.675,21,0.008,25,1.307,29,0.187,38,0.112,39,0.006,67,0.007,68,0.006,79,1.279,112,3.027,114,2.696,128,1.593,141,1.366,151,1.858,221,5.716,222,5.521,223,8.537,224,7.605,225,6.242,226,6.242]],["title/modules/AppModule.html",[182,1.424,227,3.357]],["body/modules/AppModule.html",[0,0.213,3,0.071,4,0.071,5,0.063,21,0.009,29,0.264,38,0.071,39,0.004,67,0.005,68,0.004,114,2.443,141,0.872,182,2.096,183,2.815,184,1.825,185,1.772,186,1.941,187,1.941,188,1.825,189,1.941,190,1.941,193,2.754,194,1.941,195,1.941,198,2.535,199,1.772,204,3.681,221,4.94,227,6.822,228,3.525,229,3.525,230,5.244,231,5.244,232,5.541,233,5.244,234,5.541,235,5.541,236,5.541,237,5.244,238,3.985,239,4.571,240,5.376,241,2.815,242,4.571,243,3.222,244,2.995,245,3.985,246,3.525,247,3.525,248,3.525,249,1.629,250,2.995,251,3.985,252,3.985,253,3.985,254,3.985,255,3.985,256,3.985,257,3.985,258,3.985,259,3.985,260,2.664,261,3.985,262,2.322]],["title/classes/Auth.html",[0,0.239,60,2.175]],["body/classes/Auth.html",[0,0.246,2,0.704,3,0.082,4,0.082,5,0.073,10,0.347,18,0.907,21,0.008,23,0.683,29,0.187,30,0.941,38,0.082,39,0.004,40,1.776,41,1.223,55,5.328,57,4.13,60,3.04,61,3.97,67,0.006,68,0.004,71,1.522,72,3.285,73,1.024,76,2.696,77,2.775,78,2.775,79,1.719,82,3.453,85,2.42,90,2.103,91,3.285,92,2.168,93,2.978,94,2.042,95,2.978,96,2.103,97,2.042,98,2.103,99,2.042,100,2.103,103,3.482,104,2.392,128,1.718,263,4.064,264,4.779,265,3.367,266,4.594,267,4.594,268,4.594,269,3.245,270,4.594]],["title/classes/Auth1619445806509.html",[0,0.239,271,3.61]],["body/classes/Auth1619445806509.html",[0,0.192,2,0.551,3,0.064,4,0.064,5,0.057,8,2.404,9,3.121,10,0.618,11,1.124,12,3.69,13,2.255,14,2.642,15,2.557,16,2.642,17,4.116,18,0.67,20,1.226,21,0.008,22,1.587,23,0.566,24,0.922,25,1.1,26,1.816,27,2.642,29,0.108,30,0.737,34,3.191,36,2.833,38,0.064,39,0.003,40,1.941,43,2.618,46,3.134,55,2.702,57,2.095,60,3.021,61,2.941,63,2.403,64,1.94,67,0.005,68,0.003,73,0.862,83,2.557,88,1.94,117,2.334,121,2.404,128,0.753,265,3.346,271,5.514,272,6.033,273,3.18,274,2.723,275,1.598,276,3.595,277,3.595,278,3.595,279,5.064,280,3.432,281,3.946,282,5.694,283,4.396,284,5.694,285,3.946,286,3.946,287,3.946,288,5.064,289,5.251,290,3.946,291,3.34,292,3.946,293,3.18,294,4.644,295,5.251,296,5.251,297,4.644,298,3.974,299,4.245]],["title/controllers/AuthController.html",[112,1.777,300,3.357]],["body/controllers/AuthController.html",[0,0.295,3,0.099,4,0.099,5,0.088,10,0.416,11,1.507,18,0.596,20,1.287,21,0.008,22,1.206,23,0.43,24,0.968,25,1.155,26,1.874,29,0.245,38,0.099,39,0.005,60,2.685,61,3.942,67,0.006,68,0.005,79,1.13,112,2.194,114,2.382,116,3.212,124,4.713,138,3.507,141,1.206,148,3.088,149,1.843,151,1.641,300,5.29,301,4.877,302,4.877,303,5.769,304,5.513,305,3.351,306,2.602,307,4.713,308,4.144,309,4.877,310,5.513,311,5.513,312,5.513,313,5.513]],["title/classes/AuthDto.html",[0,0.239,314,2.985]],["body/classes/AuthDto.html",[0,0.41,2,0.967,3,0.113,4,0.113,5,0.101,10,0.477,18,0.682,21,0.008,23,0.493,29,0.189,38,0.113,39,0.006,61,4.616,67,0.007,68,0.006,73,1.256,79,1.294,128,1.604,314,5.119,315,5.584,316,4.016,317,6.313,318,4.871,319,4.655,320,2.98]],["title/modules/AuthModule.html",[182,1.424,230,2.985]],["body/modules/AuthModule.html",[0,0.218,3,0.073,4,0.073,5,0.065,21,0.009,29,0.261,38,0.073,39,0.004,67,0.005,68,0.004,114,2.481,141,0.891,182,2.121,184,1.865,185,1.811,186,1.984,187,1.984,188,1.865,189,3.24,190,3.24,193,2.797,194,1.984,195,1.984,198,2.591,199,1.811,204,3.725,230,6.013,237,5.282,239,5.377,240,5.429,241,2.877,244,3.062,247,3.603,260,2.723,262,2.374,300,4.999,307,5.301,308,3.062,321,3.603,322,3.603,323,3.603,324,3.603,325,6.159,326,4.705,327,5.58,328,4.074,329,4.074,330,3.062,331,3.062,332,4.074,333,2.877,334,3.603,335,4.074,336,4.074,337,4.074,338,4.074,339,4.074,340,4.074]],["title/classes/AuthRepository.html",[0,0.239,333,3.154]],["body/classes/AuthRepository.html",[0,0.34,2,0.974,3,0.114,4,0.114,5,0.101,21,0.008,29,0.248,30,1.577,38,0.114,39,0.006,60,3.099,67,0.007,68,0.006,71,1.877,174,4.462,175,3.432,176,2.6,177,2.6,178,2.6,333,5.433,341,5.627,342,5.627,343,6.362]],["title/injectables/AuthService.html",[209,1.066,307,2.714]],["body/injectables/AuthService.html",[0,0.172,3,0.057,4,0.057,5,0.051,10,0.243,11,1.034,13,2.364,18,0.748,20,1.616,21,0.009,22,1.514,23,0.568,24,1.215,25,1.352,26,2.067,29,0.246,30,0.658,31,2.841,33,3.453,36,1.732,38,0.057,39,0.003,43,2.534,46,1.387,49,2.935,50,2.514,55,4.362,56,2.841,57,2.814,60,3.371,61,3.615,67,0.004,68,0.003,79,0.658,141,0.703,149,1.94,151,1.728,176,2.638,177,1.313,178,1.313,199,1.428,209,1.153,210,1.245,262,1.871,302,4.271,303,4.626,307,2.935,309,2.841,314,5.407,330,2.414,333,5.135,334,2.841,342,2.841,344,2.841,345,4.829,346,4.829,347,4.829,348,2.211,349,3.211,350,7.543,351,4.717,352,3.211,353,4.829,354,4.888,355,3.211,356,4.829,357,3.211,358,3.211,359,4.829,360,3.211,361,2.596,362,2.414,363,2.596,364,3.211,365,1.871,366,2.841,367,1.672,368,2.596,369,3.211,370,3.211,371,2.58,372,2.841,373,3.211,374,3.211,375,3.211,376,3.211,377,3.211,378,4.829,379,3.211,380,3.211,381,3.211,382,3.211,383,3.211,384,4.829,385,3.211,386,2.414,387,3.211,388,3.211,389,3.211,390,3.211,391,3.211]],["title/classes/Auxiliary1620477175799.html",[0,0.239,392,3.61]],["body/classes/Auxiliary1620477175799.html",[0,0.271,2,0.267,3,0.031,4,0.031,5,0.028,8,1.352,9,1.935,10,0.444,11,0.632,12,2.685,13,1.641,14,1.486,15,1.438,16,1.486,17,3.243,18,0.416,20,0.69,21,0.008,22,1.206,23,0.3,24,0.519,25,0.619,26,1.207,27,1.486,29,0.052,30,0.357,38,0.031,39,0.002,40,2.003,43,2.87,66,2.539,67,0.003,68,0.002,73,0.485,83,3.629,88,0.939,103,2.95,117,2.451,121,3.293,128,0.365,163,3.351,217,4.454,249,2.254,265,2.075,274,2.718,275,0.774,279,5.666,280,4.392,281,4.144,282,5.828,283,4.492,284,5.828,285,4.144,286,4.144,287,4.144,288,3.685,290,4.144,291,5.034,292,4.144,298,4.566,299,4.102,392,3.663,393,4.008,394,1.54,395,1.741,396,1.741,397,1.741,398,2.802,399,3.029,400,2.086,401,2.953,402,3.663,403,3.846,404,2.612,405,3.813,406,2.241,407,2.612,408,1.54,409,1.54,410,5.073,411,1.879,412,1.741,413,2.716,414,3.663,415,1.538,416,2.953,417,3.391,418,1.741,419,2.953,420,2.953,421,2.953,422,3.109,423,2.22,424,1.407,425,1.54,426,2.953,427,5.686,428,4.133,429,3.917,430,2.388,431,3.109,432,4.899,433,3.406,434,2.882,435,4.144,436,3.929,437,3.929,438,2.22,439,2.953,440,1.407,441,2.953,442,2.953,443,2.953,444,1.741,445,2.953,446,1.741,447,2.953,448,5.198]],["title/modules/AuxiliaryModule.html",[182,1.424,231,2.985]],["body/modules/AuxiliaryModule.html",[0,0.273,3,0.091,4,0.091,5,0.081,21,0.008,29,0.253,38,0.091,39,0.005,67,0.006,68,0.005,141,1.117,182,2.383,184,2.337,185,2.269,186,2.486,187,2.486,188,2.337,189,3.64,190,3.64,193,3.262,194,2.486,195,2.486,198,3.247,199,2.269,204,2.859,231,5.964,449,4.515,450,4.515,451,4.515,452,6.048,453,6.048,454,5.105,455,4.729,456,4.515,457,3.605,458,4.515,459,5.105,460,5.105,461,5.105]],["title/injectables/CaslAbilityFactory.html",[209,1.066,462,3.154]],["body/injectables/CaslAbilityFactory.html",[0,0.215,3,0.072,4,0.072,5,0.064,10,0.304,11,1.219,18,0.435,20,0.94,21,0.009,22,0.88,23,0.516,24,0.707,25,0.843,29,0.252,33,2.607,38,0.072,39,0.004,40,1.145,42,2.392,46,3.57,50,2.095,67,0.005,68,0.004,69,4.245,74,3.96,102,2.56,141,0.88,151,1.198,163,2.446,209,1.359,210,1.56,217,2.446,274,1.446,398,1.69,423,4.279,462,4.021,463,4.603,464,3.253,465,5.694,466,5.694,467,4.024,468,5.844,469,5.694,470,5.694,471,5.694,472,5.036,473,3.253,474,4.024,475,4.024,476,4.024,477,3.253,478,3.559,479,4.024,480,4.024,481,3.072,482,1.521,483,2.842,484,2.56,485,2.69,486,3.253,487,3.253,488,3.559,489,3.559,490,5.036,491,3.559,492,4.024,493,5.036,494,4.024,495,7.581,496,5.036,497,4.024,498,6.607,499,4.279,500,5.844,501,4.024,502,4.024,503,6.607,504,4.024,505,4.024,506,4.024]],["title/modules/CaslModule.html",[182,1.424,325,3.154]],["body/modules/CaslModule.html",[0,0.309,3,0.103,4,0.103,5,0.092,21,0.008,29,0.217,38,0.103,39,0.005,67,0.007,68,0.005,141,1.265,182,2.528,184,2.648,185,2.571,186,2.817,187,2.817,188,2.648,189,3.861,190,3.861,193,3.533,194,2.817,195,2.817,325,6.261,462,6.502,507,5.115,508,5.115,509,5.115,510,5.783,511,5.783,512,5.783]],["title/classes/CopyQuestionGroupDto.html",[0,0.239,513,3.154]],["body/classes/CopyQuestionGroupDto.html",[0,0.391,2,0.898,3,0.105,4,0.105,5,0.093,10,0.443,18,0.791,21,0.008,23,0.571,29,0.176,38,0.105,39,0.005,41,2.224,67,0.007,68,0.005,73,1.201,79,1.5,249,3.261,320,2.768,482,3.015,513,5.169,514,7.057,515,4.142,516,5.075,517,4.648,518,5.009,519,5.865,520,5.188]],["title/modules/CoreModule.html",[182,1.424,232,3.154]],["body/modules/CoreModule.html",[0,0.308,3,0.103,4,0.103,5,0.092,21,0.008,29,0.217,38,0.103,39,0.005,67,0.007,68,0.005,141,1.261,182,2.524,184,2.639,185,2.562,186,2.807,187,2.807,188,2.639,189,3.855,190,3.855,193,3.526,194,2.807,195,2.807,232,6.257,521,5.098,522,5.098,523,5.098,524,6.499,525,5.763,526,6.403,527,5.763]],["title/classes/Course.html",[0,0.239,413,3.154]],["body/classes/Course.html",[0,0.24,2,0.688,3,0.08,4,0.08,5,0.072,10,0.339,18,0.902,21,0.008,23,0.673,29,0.21,30,0.921,38,0.08,39,0.004,40,1.75,41,1.197,42,1.888,67,0.006,68,0.004,71,1.5,72,3.255,73,1.009,76,2.656,77,2.733,78,2.733,79,1.709,82,2.995,85,2.384,90,2.058,91,3.255,92,2.121,93,2.944,94,1.998,95,2.944,96,2.058,97,1.998,98,2.058,99,1.998,100,2.058,103,3.209,104,2.34,106,3.737,108,2.859,128,1.578,264,4.391,265,3.317,413,4.342,414,5.666,415,3.649,417,5.275,528,3.975,529,7.009,530,4.494,531,2.619,532,4.494,533,4.494,534,3.975,535,4.494,536,4.494]],["title/classes/CreateAnswerDto.html",[0,0.239,123,2.985]],["body/classes/CreateAnswerDto.html",[0,0.372,2,1.064,3,0.124,4,0.124,5,0.111,21,0.008,38,0.124,39,0.006,67,0.007,68,0.006,123,5.42,537,6.147,538,5.619]],["title/classes/CreateAuthDto.html",[0,0.239,354,3.154]],["body/classes/CreateAuthDto.html",[0,0.322,2,0.921,3,0.107,4,0.107,5,0.096,10,0.454,18,0.804,21,0.008,23,0.58,29,0.18,38,0.107,39,0.005,57,4.332,61,4.163,67,0.007,68,0.005,71,1.813,73,1.22,79,1.523,91,3.211,128,1.557,303,5.634,314,4.021,316,3.826,354,5.25,539,5.32,540,5.32,541,5.32,542,4.521,543,6.015,544,5.32,545,6.015]],["title/classes/CreateExamAgreementDto.html",[0,0.239,546,3.154]],["body/classes/CreateExamAgreementDto.html",[0,0.406,2,0.809,3,0.094,4,0.094,5,0.084,10,0.399,18,0.821,21,0.008,23,0.65,24,1.203,29,0.227,38,0.094,39,0.005,41,2.141,67,0.006,68,0.005,73,1.124,79,1.557,306,2.494,320,2.494,398,3.377,499,5.712,516,4.834,518,4.428,546,4.837,547,6.499,548,4.674,549,7.599,550,4.428,551,5.284,552,5.284,553,5.284,554,7.599,555,5.284,556,3.732,557,4.578,558,4.357]],["title/classes/CreateExamDto.html",[0,0.239,559,2.985]],["body/classes/CreateExamDto.html",[0,0.374,2,0.685,3,0.08,4,0.08,5,0.071,10,0.338,18,0.879,21,0.008,23,0.672,24,1.32,29,0.209,38,0.08,39,0.004,67,0.006,68,0.004,73,1.005,79,1.667,85,2.375,93,3.417,110,2.177,128,1.575,316,3.897,318,4.446,319,4.248,320,2.11,400,4.936,415,3.639,547,6.734,550,3.569,556,3.157,557,4.095,558,4.446,559,4.095,560,3.614,561,6.182,562,5.65,563,6.182,564,4.248,565,3.954,566,4.47,567,4.47,568,6.126,569,4.47,570,4.47,571,4.072,572,4.47,573,4.604,574,4.47,575,4.47,576,4.326,577,6.989,578,3.954,579,2.988,580,2.249,581,4.47]],["title/classes/CreateQuestion.html",[0,0.239,582,2.985]],["body/classes/CreateQuestion.html",[0,0.428,2,0.799,3,0.093,4,0.093,5,0.083,10,0.394,18,0.564,21,0.008,23,0.59,24,1.193,29,0.239,38,0.093,39,0.005,40,2.15,41,1.809,67,0.006,68,0.005,71,1.273,73,1.115,79,1.069,85,2.634,117,2.319,306,2.463,318,3.319,319,3.171,320,2.463,482,2.567,517,3.04,518,3.958,556,3.685,557,3.488,558,4.321,573,5.106,576,4.797,582,5.348,583,4.797,584,4.218,585,4.615,586,5.218,587,4.218,588,4.615,589,4.218,590,4.615,591,6.008,592,4.218,593,6.008,594,3.171,595,3.685,596,4.615,597,3.488,598,4.615,599,3.488]],["title/classes/CreateQuestionDto.html",[0,0.239,594,2.714]],["body/classes/CreateQuestionDto.html",[0,0.321,2,0.663,3,0.077,4,0.077,5,0.069,10,0.327,18,0.842,21,0.008,23,0.629,24,1.414,29,0.179,38,0.077,39,0.004,41,1.596,67,0.005,68,0.004,73,0.983,79,1.596,128,1.687,306,2.044,316,2.754,318,4.372,319,4.177,320,2.044,415,3.12,482,3.044,517,4.004,518,4.004,550,4.322,557,4.006,558,4.718,583,5.689,587,4.845,592,4.845,594,3.642,600,3.254,601,6.079,602,6.079,603,5.556,604,5.556,605,4.33,606,4.33,607,4.33,608,4.33,609,4.33,610,4.33,611,5.993,612,5.993,613,7.417,614,5.993,615,5.993,616,5.993,617,5.993,618,5.993,619,5.993,620,5.993,621,5.993,622,5.993,623,4.33,624,4.33,625,4.33,626,4.33]],["title/classes/CreateQuestionGroupDto.html",[0,0.239,627,2.985]],["body/classes/CreateQuestionGroupDto.html",[0,0.439,2,0.772,3,0.09,4,0.09,5,0.08,10,0.381,18,0.853,21,0.008,23,0.616,24,1.479,29,0.151,38,0.09,39,0.005,41,1.769,67,0.006,68,0.005,73,1.09,79,1.618,128,1.391,249,3.354,316,3.208,318,4.226,319,4.038,320,2.38,415,3.867,430,6.005,482,3.1,515,3.561,516,4.725,518,3.87,550,4.6,557,4.966,558,5.022,565,5.876,583,5.795,585,4.46,627,4.44,628,5.043,629,5.043,630,5.043,631,5.043]],["title/classes/CreateQuestionsDto.html",[0,0.239,597,2.985]],["body/classes/CreateQuestionsDto.html",[0,0.428,2,0.799,3,0.093,4,0.093,5,0.083,10,0.394,18,0.564,21,0.008,23,0.59,29,0.239,38,0.093,39,0.005,40,1.485,41,1.389,67,0.006,68,0.005,71,1.273,73,1.115,79,1.069,85,2.634,117,2.319,306,2.463,318,3.319,319,3.171,320,2.463,482,2.567,517,3.04,518,3.958,556,3.685,557,3.488,558,4.321,573,5.106,576,4.797,582,5.348,583,4.797,584,4.218,587,4.218,588,4.615,589,4.218,590,4.615,591,6.008,592,4.218,593,6.008,594,3.171,595,3.685,596,4.615,597,4.541,598,4.615,599,5.049,632,5.218,633,5.218,634,5.218,635,5.218]],["title/classes/CreateUserDto.html",[0,0.239,636,2.602]],["body/classes/CreateUserDto.html",[0,0.389,2,0.738,3,0.086,4,0.086,5,0.077,10,0.364,18,0.838,21,0.008,23,0.663,29,0.254,34,4.416,36,3.919,38,0.086,39,0.004,57,2.81,63,4.857,67,0.006,68,0.004,71,1.176,73,1.058,79,1.589,110,2.349,128,1.625,306,2.276,320,3.044,354,3.406,368,3.898,485,4.857,487,3.898,578,4.265,589,3.898,636,3.757,637,7.151,638,4.265,639,7.265,640,4.822,641,5.873,642,4.822,643,6.449,644,4.822,645,4.416,646,6.449,647,4.822,648,4.265,649,4.822,650,4.822,651,4.847,652,4.822,653,4.822]],["title/injectables/CustomLogger.html",[209,1.066,654,3.154]],["body/injectables/CustomLogger.html",[0,0.351,3,0.117,4,0.117,5,0.105,21,0.008,29,0.196,38,0.117,39,0.006,67,0.007,68,0.006,71,1.912,141,1.436,209,1.871,210,2.545,654,5.536,655,5.806,656,6.777,657,7.839,658,6.564]],["title/classes/Exam.html",[0,0.239,398,1.876]],["body/classes/Exam.html",[0,0.152,2,0.434,3,0.051,4,0.051,5,0.045,10,0.214,11,0.94,18,0.927,21,0.009,23,0.687,24,0.771,25,0.594,29,0.216,30,0.581,38,0.051,39,0.003,40,1.25,41,0.755,42,1.845,67,0.004,68,0.003,71,1.072,72,3.12,73,0.721,74,3.046,76,2.615,77,2.691,78,2.691,79,1.757,80,1.724,82,3.373,88,3.265,90,1.299,91,3.12,92,1.339,93,3.288,94,1.953,95,2.258,96,1.299,97,1.953,98,1.299,99,1.953,100,1.299,102,1.805,103,3.307,104,1.477,105,2.67,106,3.267,108,1.805,128,1.268,274,1.579,398,2.543,399,4.046,400,3.797,402,4.893,407,4.755,411,4.595,415,2.799,481,3.265,482,1.072,483,2.003,484,1.805,531,2.56,550,2.56,561,4.755,562,4.346,563,4.755,564,3.267,579,1.896,659,2.509,660,4.755,661,4.346,662,5.354,663,2.837,664,3.551,665,2.937,666,2.837,667,2.837,668,2.837,669,2.837,670,2.837,671,2.837,672,5.792,673,2.837,674,4.046,675,2.837,676,2.837,677,2.837,678,1.896,679,1.896,680,1.896,681,4.755,682,2.837,683,2.293,684,2.837,685,3.886,686,4.393,687,2.837,688,2.293,689,2.837,690,2.003,691,2.837,692,2.132,693,2.837,694,2.837,695,2.837,696,2.293,697,2.293,698,2.293]],["title/classes/Exam1620478273991.html",[0,0.239,699,3.61]],["body/classes/Exam1620478273991.html",[0,0.258,2,0.738,3,0.086,4,0.086,5,0.077,8,2.952,9,3.656,10,0.364,11,1.38,12,4.052,13,2.477,14,3.245,15,3.141,16,3.245,17,4.399,18,0.785,20,1.506,21,0.008,22,1.769,23,0.567,24,1.132,25,1.351,26,2.065,27,3.245,29,0.144,30,0.988,38,0.086,39,0.004,43,2.105,67,0.006,68,0.004,73,1.058,128,1.01,274,2.318,275,2.144,280,3.245,283,3.245,398,2.709,404,6.861,405,4.847,406,2.81,434,4.102,699,6.271,700,6.861,701,4.265,702,4.822,703,4.822,704,4.822,705,4.311]],["title/classes/ExamAgreement.html",[0,0.239,74,2.247]],["body/classes/ExamAgreement.html",[0,0.184,2,0.525,3,0.061,4,0.061,5,0.055,10,0.259,11,1.086,18,0.93,21,0.008,23,0.681,25,0.719,29,0.2,30,0.703,38,0.061,39,0.003,40,1.444,41,1.895,46,3.33,67,0.005,68,0.003,71,1.238,72,3.33,73,0.832,74,2.553,76,2.881,77,2.965,78,2.965,79,1.747,80,3.084,82,2.94,83,3.248,85,1.967,90,1.571,91,3.33,92,1.62,93,3.13,94,2.255,95,2.536,96,1.571,97,2.255,98,1.571,99,2.255,100,1.571,101,5.589,103,3.259,104,1.786,105,3.669,108,2.183,128,1.063,151,1.022,265,1.851,274,1.823,398,3.238,423,4.537,424,4.88,499,4.537,516,3.84,550,4.341,665,3.391,678,2.294,679,2.294,680,2.294,685,3.035,706,3.035,707,6.669,708,3.431,709,3.431,710,3.431,711,3.431,712,3.431,713,3.431,714,3.431,715,3.431,716,3.431,717,3.431,718,3.431,719,3.431,720,3.431,721,3.431,722,3.431]],["title/classes/ExamAgreement1622332886234.html",[0,0.239,723,3.61]],["body/classes/ExamAgreement1622332886234.html",[0,0.21,2,0.6,3,0.07,4,0.07,5,0.062,8,2.558,9,3.277,10,0.296,11,1.196,12,3.8,13,2.323,14,2.812,15,2.722,16,2.812,17,4.204,18,0.704,20,1.305,21,0.008,22,1.642,23,0.508,24,0.981,25,1.17,26,1.89,27,2.812,29,0.117,30,0.803,38,0.07,39,0.004,43,2.68,66,2.414,67,0.005,68,0.004,73,0.917,83,1.909,103,1.794,121,2.558,128,0.821,217,4.315,274,1.409,275,1.742,279,5.487,280,4.131,283,3.277,288,2.62,291,4.516,298,3.794,422,6.636,423,5.336,425,3.467,427,5.797,429,3.958,431,5.264,432,4.745,434,3.554,436,3.735,437,3.735,440,3.168,723,5.739,724,6.279,725,3.467,726,3.919,727,3.919,728,3.919,729,3.919,730,5.588,731,3.919,732,5.588]],["title/classes/ExamAgreementAnonymousDefault1622334780336.html",[0,0.239,733,3.61]],["body/classes/ExamAgreementAnonymousDefault1622334780336.html",[0,0.253,2,0.726,3,0.085,4,0.085,5,0.075,8,2.918,9,3.624,10,0.358,11,1.364,12,4.032,13,2.464,14,3.207,15,3.104,16,3.207,17,4.383,18,0.778,20,1.488,21,0.008,22,1.758,23,0.562,24,1.119,25,1.335,26,2.051,27,3.207,29,0.142,30,0.971,38,0.085,39,0.004,43,2.081,67,0.006,68,0.004,73,1.046,128,0.993,274,2.291,275,2.107,279,4.261,280,3.207,283,3.207,405,4.791,406,2.761,422,5.153,424,6.227,427,4.501,434,4.055,733,6.227,734,6.813,735,4.192,736,4.739,737,4.739,738,4.739]],["title/controllers/ExamAgreementController.html",[112,1.777,739,3.357]],["body/controllers/ExamAgreementController.html",[0,0.253,3,0.084,4,0.084,5,0.075,10,0.357,11,1.362,13,2.141,18,0.511,20,1.104,21,0.008,22,1.034,23,0.561,24,0.83,25,0.99,26,1.694,29,0.253,38,0.084,39,0.004,40,1.345,41,1.258,43,1.543,46,3.107,67,0.006,68,0.004,74,2.378,79,0.968,102,3.006,112,1.881,114,2.041,116,2.753,124,4.371,138,4.047,141,1.034,148,2.647,149,1.58,151,1.407,305,2.872,306,2.23,326,2.549,367,2.46,398,2.672,499,3.552,500,4.18,546,5.433,692,4.781,739,4.781,740,5.143,741,4.18,742,6.361,743,4.18,744,5.627,745,4.726,746,6.361,747,3.159,748,4.781,749,3.82,750,4.493,751,3.82,752,4.18,753,4.18,754,3.337,755,4.807,756,3.552,757,4.18,758,3.82,759,3.159,760,4.726,761,4.726]],["title/classes/ExamAgreementRepository.html",[0,0.239,762,3.154]],["body/classes/ExamAgreementRepository.html",[0,0.338,2,0.967,3,0.113,4,0.113,5,0.101,21,0.008,29,0.247,30,1.569,38,0.113,39,0.006,67,0.007,68,0.006,71,1.868,74,3.177,102,4.016,174,4.447,175,3.406,176,2.581,177,2.581,178,2.581,754,4.459,762,5.408,763,5.104,764,5.584,765,6.313]],["title/injectables/ExamAgreementService.html",[209,1.066,755,2.985]],["body/injectables/ExamAgreementService.html",[0,0.235,3,0.079,4,0.079,5,0.07,10,0.332,11,1.297,18,0.749,20,1.618,21,0.009,22,1.516,23,0.541,24,1.217,25,1.269,26,1.988,29,0.248,30,1.242,33,2.014,38,0.079,39,0.004,67,0.005,68,0.004,74,2.214,76,1.9,79,0.901,93,3.4,102,2.798,141,0.962,149,1.47,151,1.804,176,3.052,177,1.798,178,1.798,199,1.955,209,1.446,210,1.705,348,2.774,365,2.563,367,2.29,371,1.955,398,1.848,546,5.274,692,3.306,742,6.13,743,3.891,746,5.359,753,3.891,754,3.107,755,4.05,762,5.274,766,6.037,767,3.891,768,6.059,769,2.798,770,4.399,771,3.854,772,6.059,773,7.468,774,4.399,775,4.399,776,4.399,777,4.399,778,3.556,779,3.891,780,4.399,781,4.399,782,4.399,783,3.107,784,4.399]],["title/controllers/ExamController.html",[112,1.777,785,3.357]],["body/controllers/ExamController.html",[0,0.188,3,0.063,4,0.063,5,0.056,10,0.266,11,1.106,13,2.592,18,0.777,20,1.577,21,0.008,22,1.477,23,0.587,24,1.185,25,1.506,26,2.202,29,0.233,38,0.063,39,0.003,40,2.14,41,2.166,42,1.478,43,2.348,66,1.52,67,0.005,68,0.003,79,1.474,112,1.401,114,1.52,116,2.05,117,2.298,118,4.513,119,2.895,120,3.142,121,2.805,124,3.142,127,2.139,129,3.885,131,2.139,132,3.885,134,2.139,138,3.288,140,2.645,141,0.77,148,1.971,149,1.176,150,3.113,151,2.141,154,2.645,158,2.645,305,2.139,306,1.661,326,1.898,367,1.832,398,3.021,559,5.026,747,2.352,748,3.885,749,2.845,758,2.845,759,2.352,785,3.885,786,3.113,787,3.113,788,2.845,789,3.519,790,2.645,791,3.519,792,3.519,793,3.519,794,5.63,795,4.178,796,3.519,797,5.458,798,2.645,799,3.897,800,3.113,801,4.178,802,2.352,803,4.604,804,2.845,805,3.519,806,3.519,807,3.519,808,3.519,809,2.845,810,3.519,811,3.519]],["title/modules/ExamModule.html",[182,1.424,233,2.985]],["body/modules/ExamModule.html",[0,0.235,3,0.079,4,0.079,5,0.07,21,0.009,29,0.262,38,0.079,39,0.004,67,0.005,68,0.004,114,2.617,141,0.962,182,2.21,184,2.014,185,1.955,186,2.142,187,2.142,188,2.014,189,3.375,190,3.375,193,2.951,194,2.142,195,2.142,198,2.798,199,1.955,204,2.463,233,5.908,739,5.209,755,5.908,756,4.554,757,3.891,762,4.279,778,4.898,779,3.891,785,5.209,799,5.622,800,3.891,812,3.891,813,3.891,814,3.891,815,5.149,816,4.399,817,5.209,818,4.399,819,4.279,820,3.891,821,4.279,822,3.891,823,3.556,824,6.059,825,4.399,826,4.399,827,4.399]],["title/classes/ExamRepository.html",[0,0.239,819,3.154]],["body/classes/ExamRepository.html",[0,0.34,2,0.974,3,0.114,4,0.114,5,0.101,21,0.008,29,0.248,30,1.577,38,0.114,39,0.006,67,0.007,68,0.006,71,1.877,174,4.462,175,3.432,176,2.6,177,2.6,178,2.6,398,2.672,804,5.143,819,5.433,828,5.627,829,6.362]],["title/injectables/ExamService.html",[209,1.066,799,2.841]],["body/injectables/ExamService.html",[0,0.147,3,0.049,4,0.049,5,0.044,10,0.208,11,0.917,13,2.477,18,0.798,20,1.596,21,0.009,22,1.495,23,0.557,24,1.2,25,1.432,26,1.584,29,0.237,30,0.563,33,3.129,38,0.049,39,0.004,40,1.836,41,2.02,43,2.231,49,2.604,50,2.231,66,1.187,67,0.004,68,0.002,73,0.703,79,1.079,117,1.905,118,3.977,119,2.4,120,2.604,121,1.962,127,2.604,131,2.604,134,2.604,141,0.601,149,2.156,151,1.921,176,3.018,177,1.123,178,1.123,199,1.221,209,1.023,210,1.065,274,0.987,275,1.221,348,1.962,362,3.959,365,1.601,367,1.43,371,3.283,398,3.187,411,2.726,559,4.936,564,2.604,580,1.382,660,3.79,661,3.464,756,2.065,769,1.748,771,2.726,783,1.94,787,3.79,794,5.479,799,2.726,801,3.464,802,1.836,804,2.221,815,3.785,819,4.202,820,2.43,823,2.221,830,2.43,831,4.258,832,5.706,833,4.285,834,4.659,835,4.285,836,2.747,837,2.747,838,2.747,839,4.285,840,2.747,841,3.79,842,2.747,843,2.747,844,2.864,845,1.94,846,2.065,847,2.065,848,2.747,849,2.747,850,4.258,851,2.747,852,2.747,853,2.747,854,2.747,855,2.43,856,2.747,857,2.747,858,2.43,859,2.747,860,2.747,861,4.285,862,4.285,863,2.747,864,2.221,865,2.747,866,2.747,867,2.43,868,2.221]],["title/classes/ExamTarget.html",[0,0.239,674,2.985]],["body/classes/ExamTarget.html",[0,0.235,2,0.674,3,0.079,4,0.079,5,0.07,10,0.332,18,0.913,21,0.008,23,0.69,29,0.207,30,0.901,38,0.079,39,0.004,40,1.724,41,1.171,67,0.005,68,0.004,71,1.478,72,3.583,73,0.994,76,3.226,77,3.32,78,3.32,79,1.732,82,2.142,85,2.349,88,4.028,90,2.014,91,3.583,92,2.076,93,3.4,94,2.693,95,2.911,96,2.014,97,2.693,98,2.014,99,2.693,100,2.014,101,4.279,103,2.774,104,2.29,110,2.142,265,3.739,269,3.107,571,4.563,579,2.94,580,2.214,674,4.05,678,2.94,679,2.94,680,2.94,869,3.891,870,4.399,871,4.399]],["title/classes/ExamTarget1622326106015.html",[0,0.239,872,3.61]],["body/classes/ExamTarget1622326106015.html",[0,0.17,2,0.486,3,0.057,4,0.057,5,0.051,8,2.192,9,2.9,10,0.598,11,1.025,12,3.526,13,2.155,14,2.409,15,2.332,16,2.409,17,3.983,18,0.623,20,1.118,21,0.008,22,1.506,23,0.565,24,0.84,25,1.003,26,1.709,27,2.409,29,0.095,30,0.651,33,1.453,38,0.057,39,0.003,40,1.362,43,2.813,62,2.808,66,2.068,67,0.004,68,0.003,73,0.785,83,2.807,88,2.582,103,1.453,117,2.562,121,2.639,128,0.665,217,2.91,265,1.713,274,2.071,275,1.411,279,5.613,280,4.058,281,2.386,282,4.332,283,3.892,284,4.332,285,2.386,286,2.386,287,2.386,290,3.598,291,4.605,292,3.598,298,4.378,299,3.87,427,5.112,428,4.29,429,3.503,431,5.188,432,4.29,436,3.2,437,3.2,440,2.566,564,1.929,580,3.229,872,5.188,873,5.188,874,2.566,875,3.174,876,3.174,877,3.174,878,3.358,879,3.358,880,4.234,881,6.417,882,4.787,883,3.174,884,3.174,885,7.734,886,6.417,887,4.787,888,4.787,889,4.787,890,4.787,891,4.787,892,3.174]],["title/controllers/ExamTargetController.html",[112,1.777,817,3.357]],["body/controllers/ExamTargetController.html",[0,0.284,3,0.095,4,0.095,5,0.085,10,0.402,11,1.472,13,2.269,18,0.575,21,0.008,23,0.415,25,1.114,26,1.831,29,0.241,38,0.095,39,0.005,42,2.889,43,1.736,67,0.006,68,0.005,79,1.09,110,2.59,112,2.117,114,2.297,116,3.099,128,1.114,141,1.164,148,2.978,149,1.778,151,1.583,305,3.233,306,2.51,398,2.234,571,3.099,579,3.555,580,3.836,740,5.56,756,3.997,758,4.3,790,3.997,803,5.169,815,4.375,817,5.169,823,4.3,834,4.704,893,4.704,894,6.515,895,6.878,896,5.318,897,5.318,898,5.318,899,4.704,900,5.318]],["title/interfaces/ExamTargetManagerDto.html",[847,3.357,901,1.876]],["body/interfaces/ExamTargetManagerDto.html",[3,0.113,4,0.113,5,0.101,10,0.479,21,0.008,23,0.495,24,1.348,29,0.19,38,0.113,39,0.006,67,0.007,68,0.006,73,1.259,110,3.087,564,5.216,571,5,579,4.236,580,3.862,847,5.769,901,2.662,902,3.299,903,5.606,904,5.606]],["title/classes/ExamTargetRepository.html",[0,0.239,821,3.154]],["body/classes/ExamTargetRepository.html",[0,0.338,2,0.967,3,0.113,4,0.113,5,0.101,21,0.008,29,0.247,30,1.569,38,0.113,39,0.006,67,0.007,68,0.006,71,1.868,174,4.447,175,3.406,176,2.581,177,2.581,178,2.581,674,4.22,688,5.104,754,4.459,763,5.104,821,5.408,905,5.584,906,6.313]],["title/injectables/ExamTargetService.html",[209,1.066,815,2.841]],["body/injectables/ExamTargetService.html",[0,0.219,3,0.073,4,0.073,5,0.065,10,0.309,11,1.234,13,2.356,18,0.825,20,0.956,21,0.009,22,0.896,23,0.45,24,1.171,25,1.207,26,2.031,29,0.237,33,2.639,38,0.073,39,0.004,43,1.881,50,3,67,0.005,68,0.004,73,0.946,110,1.994,141,0.896,149,1.368,151,1.986,199,1.82,209,1.375,210,1.587,348,2.639,365,2.385,371,3.615,564,2.488,571,2.385,579,2.737,580,2.9,674,2.737,688,3.31,754,2.891,766,6.398,769,2.604,771,3.666,778,3.31,783,2.891,815,3.666,821,5.112,822,3.621,855,5.899,858,3.621,894,5.852,907,3.621,908,6.67,909,7.239,910,5.097,911,5.763,912,4.094,913,4.094,914,4.659,915,4.094,916,4.094,917,4.094,918,4.094,919,4.094,920,5.763,921,5.763,922,4.332,923,5.763,924,4.094,925,4.094,926,5.763,927,4.094,928,4.094,929,4.094,930,4.094]],["title/classes/ExamTitle1621036457247.html",[0,0.239,931,3.61]],["body/classes/ExamTitle1621036457247.html",[0,0.259,2,0.743,3,0.087,4,0.087,5,0.077,8,2.964,9,3.667,10,0.366,11,1.386,12,4.059,13,2.481,14,3.258,15,3.153,16,3.258,17,4.404,18,0.788,20,1.512,21,0.008,22,1.772,23,0.569,24,1.137,25,1.356,26,2.07,27,3.258,29,0.145,30,0.994,38,0.087,39,0.004,43,2.113,67,0.006,68,0.004,73,1.062,128,1.016,274,1.743,275,2.156,280,3.258,283,3.258,398,2.719,399,5.197,415,3.37,434,4.118,705,4.327,931,6.285,932,6.877,933,4.29,934,4.85,935,4.85,936,4.85]],["title/classes/FFEntity.html",[0,0.239,72,1.929]],["body/classes/FFEntity.html",[0,0.291,2,0.833,3,0.097,4,0.097,5,0.087,10,0.411,18,0.879,21,0.008,23,0.635,29,0.209,30,1.115,38,0.097,39,0.005,40,2.193,41,1.858,67,0.006,68,0.005,71,1.702,72,3.015,73,1.145,76,3.015,77,3.102,78,3.102,79,1.666,90,3.528,91,3.329,93,3.237,94,2.419,95,3.613,96,2.491,97,2.419,98,2.491,99,2.419,100,2.491,937,4.812,938,5.441,939,5.441]],["title/interfaces/FileSendDto.html",[901,1.876,940,3.154]],["body/interfaces/FileSendDto.html",[3,0.103,4,0.103,5,0.092,10,0.435,21,0.008,23,0.668,38,0.103,39,0.005,41,2.107,67,0.007,68,0.005,73,1.188,128,1.893,901,2.421,902,3,940,5.112,941,5.098,942,5.098,943,7.836,944,8.302,945,8.302,946,8.302,947,8.302]],["title/injectables/FirebaseAdmin.html",[209,1.066,948,2.602]],["body/injectables/FirebaseAdmin.html",[0,0.167,3,0.056,4,0.056,5,0.05,8,1.431,10,0.236,11,1.013,18,0.922,20,1.105,21,0.008,22,1.496,23,0.446,24,0.831,25,1.71,26,1.26,29,0.191,38,0.056,39,0.003,60,3.101,64,1.687,66,2.751,67,0.004,68,0.003,73,0.776,128,1.334,141,0.684,149,1.909,151,2.492,209,1.129,210,1.212,262,1.822,348,1.431,371,2.538,902,1.628,910,4.186,948,2.757,949,6.46,950,7.603,951,2.765,952,5.05,953,4.186,954,5.148,955,6.368,956,6.368,957,6.368,958,6.368,959,6.368,960,6.368,961,5.632,962,5.141,963,3.126,964,3.87,965,4.732,966,3.126,967,4.186,968,4.732,969,3.126,970,3.126,971,2.35,972,4.732,973,3.126,974,3.126,975,4.186,976,3.126,977,4.732,978,3.126,979,4.732,980,3.126,981,4.186,982,3.126,983,4.732,984,3.126,985,4.732,986,3.126,987,4.732,988,3.126,989,4.186,990,5.71,991,3.126,992,3.126,993,3.126,994,3.126,995,3.08,996,2.35,997,2.765,998,3.126,999,3.126,1000,3.126,1001,2.528,1002,3.126,1003,2.35,1004,3.126,1005,3.126,1006,3.126,1007,3.126,1008,3.126,1009,3.126,1010,3.126,1011,3.126,1012,3.126,1013,3.126,1014,3.126,1015,3.126,1016,3.126,1017,3.126,1018,3.126,1019,3.126,1020,3.126]],["title/modules/FirebaseAdminModule.html",[182,1.424,1021,3.154]],["body/modules/FirebaseAdminModule.html",[0,0.218,3,0.073,4,0.073,5,0.065,11,0.874,18,0.622,20,1.343,21,0.009,22,1.259,23,0.449,24,1.01,25,1.205,29,0.216,38,0.073,39,0.004,67,0.005,68,0.004,141,0.893,149,1.923,151,1.713,182,2.431,184,1.87,185,1.815,186,1.989,187,1.989,188,1.87,189,3.852,190,3.713,193,2.802,194,1.989,195,1.989,204,2.287,260,2.73,262,2.379,371,2.557,831,6.393,902,2.126,948,5.16,949,5.006,962,5.006,964,4.395,995,2.203,996,5.006,997,3.612,1021,5.957,1022,3.612,1023,3.612,1024,3.612,1025,5.006,1026,4.084,1027,3.612,1028,5.089,1029,4.084,1030,6.742,1031,3.612,1032,5.089,1033,4.834,1034,4.084,1035,5.089,1036,4.084,1037,4.084,1038,5.089,1039,4.084,1040,5.089,1041,4.084,1042,4.084,1043,4.084,1044,3.612]],["title/interfaces/FirebaseAsyncModuleOptions.html",[901,1.876,1033,2.985]],["body/interfaces/FirebaseAsyncModuleOptions.html",[3,0.102,4,0.102,5,0.091,10,0.429,13,1.692,21,0.008,23,0.56,24,1.26,26,1.513,29,0.215,38,0.128,39,0.005,64,3.066,67,0.007,68,0.005,71,1.75,73,1.177,128,1.503,141,1.243,182,1.813,260,5.522,262,4.813,901,3.014,902,2.959,964,4.362,995,3.871,1001,4.595,1003,4.272,1033,4.797,1045,4.272,1046,4.595,1047,6.347,1048,5.801,1049,5.028,1050,4.595,1051,5.028,1052,5.028]],["title/interfaces/FirebaseAuthDecodedToken.html",[901,1.876,1053,3.357]],["body/interfaces/FirebaseAuthDecodedToken.html",[3,0.107,4,0.107,5,0.096,10,0.454,21,0.008,23,0.63,24,1.48,38,0.107,39,0.005,60,2.93,67,0.007,68,0.005,73,1.22,128,1.848,386,6.335,550,4.701,901,2.527,902,3.131,1045,4.521,1053,5.588,1054,4.862,1055,5.32,1056,7.455,1057,7.455]],["title/injectables/FirebaseAuthService.html",[209,1.066,1058,3.154]],["body/injectables/FirebaseAuthService.html",[0,0.193,3,0.064,4,0.064,5,0.057,10,0.272,11,1.126,13,1.849,18,0.846,20,1.77,21,0.008,22,1.659,23,0.611,24,1.331,25,1.521,26,2.214,29,0.204,33,1.65,38,0.064,39,0.003,43,1.176,60,1.755,64,2.837,67,0.005,68,0.003,73,0.863,128,1.785,141,0.788,149,2.076,151,2.257,209,1.255,210,1.397,283,1.813,348,1.65,371,2.761,386,5.457,750,3.714,948,4.231,967,4.652,995,3.35,1053,2.708,1054,4.252,1056,3.187,1057,3.187,1058,3.714,1059,5.667,1060,3.187,1061,6.21,1062,4.386,1063,5.259,1064,5.493,1065,5.259,1066,3.953,1067,5.259,1068,3.603,1069,6.21,1070,3.603,1071,4.252,1072,5.259,1073,3.603,1074,5.259,1075,3.603,1076,3.603,1077,6.039,1078,6.21,1079,3.603,1080,5.259,1081,3.603,1082,3.187,1083,3.187,1084,3.603,1085,3.603,1086,3.603,1087,3.603,1088,3.603,1089,3.603,1090,3.603,1091,3.603,1092,3.603,1093,3.603,1094,3.603,1095,3.603,1096,3.603,1097,3.603]],["title/injectables/FirebaseCloudMessagingService.html",[209,1.066,1098,3.154]],["body/injectables/FirebaseCloudMessagingService.html",[0,0.259,3,0.087,4,0.087,5,0.077,10,0.366,11,1.386,18,0.788,20,1.512,21,0.008,22,1.416,23,0.569,24,1.137,25,1.016,26,1.724,29,0.218,38,0.087,39,0.004,64,3.492,67,0.006,68,0.004,73,1.062,128,1.526,141,1.061,149,2.436,151,1.444,209,1.545,210,1.881,348,2.221,371,3.239,948,4.72,962,5.844,971,3.646,981,5.726,995,3.931,1059,5.491,1066,4.866,1082,5.726,1098,4.572,1099,6.285,1100,4.29,1101,7.287,1102,7.287,1103,6.474,1104,4.85,1105,7.775,1106,7.287,1107,7.287,1108,4.85,1109,4.85,1110,4.85,1111,4.85]],["title/injectables/FirebaseFirestoreService.html",[209,1.066,1112,3.357]],["body/injectables/FirebaseFirestoreService.html",[0,0.271,3,0.09,4,0.09,5,0.081,10,0.382,11,1.425,18,0.804,20,1.554,21,0.008,22,1.456,23,0.581,24,1.169,25,1.059,29,0.237,38,0.09,39,0.005,64,3.591,67,0.006,68,0.005,73,1.092,128,1.558,141,1.107,149,2.487,151,1.506,209,1.589,210,1.961,348,2.316,371,3.307,948,4.785,954,6.39,975,5.887,995,4.013,1059,5.583,1066,5.003,1112,5.003,1113,4.474,1114,6.656,1115,6.656,1116,6.656,1117,5.058,1118,5.058,1119,6.58,1120,5.058,1121,5.058,1122,5.058,1123,5.058,1124,5.058]],["title/modules/FirebaseModule.html",[182,1.424,1125,3.154]],["body/modules/FirebaseModule.html",[0,0.206,3,0.069,4,0.069,5,0.061,11,0.825,13,1.148,18,0.597,20,1.29,21,0.008,22,1.208,23,0.431,24,0.97,25,1.157,29,0.232,38,0.069,39,0.003,67,0.005,68,0.003,85,2.141,141,0.843,149,1.846,151,1.644,182,2.475,184,1.765,185,1.714,186,1.878,187,1.878,188,1.765,189,3.779,190,3.779,193,2.69,194,1.878,195,1.878,204,3.093,308,2.898,371,2.455,526,4.885,831,6.273,962,4.151,964,4.283,995,2.08,1021,2.723,1025,2.898,1027,3.41,1028,4.885,1030,6.596,1031,3.41,1032,4.885,1033,4.71,1035,5.707,1040,4.885,1044,4.885,1058,6.197,1083,3.41,1098,6.197,1099,3.117,1112,4.85,1125,6.098,1126,3.41,1127,3.41,1128,3.41,1129,3.855,1130,3.855,1131,3.855,1132,4.885,1133,3.855,1134,3.855,1135,3.855,1136,4.557,1137,3.855,1138,3.855,1139,3.855]],["title/interfaces/FirebaseModuleOptions.html",[901,1.876,964,2.714]],["body/interfaces/FirebaseModuleOptions.html",[3,0.099,4,0.099,5,0.088,10,0.416,13,1.641,21,0.008,23,0.605,24,1.434,26,1.468,29,0.211,38,0.126,39,0.005,64,2.974,67,0.006,68,0.005,71,1.345,73,1.155,128,1.808,141,1.206,182,1.758,260,3.686,262,3.212,901,2.957,902,2.87,964,4.713,995,3.797,1001,6.604,1003,6.139,1033,3.686,1045,4.144,1046,4.457,1047,4.877,1049,4.877,1050,6.604,1051,6.858,1052,4.877]],["title/injectables/FirebaseStorageService.html",[209,1.066,1136,3.154]],["body/injectables/FirebaseStorageService.html",[0,0.238,3,0.079,4,0.079,5,0.097,10,0.336,11,1.306,12,2.973,13,2.075,18,0.753,20,1.425,21,0.008,22,1.335,23,0.544,24,1.072,25,0.931,26,1.625,29,0.209,33,2.036,38,0.079,39,0.004,43,1.452,64,3.293,67,0.006,68,0.004,73,1.001,85,1.724,128,1.8,141,0.973,149,2.33,151,1.324,209,1.457,210,1.724,274,1.598,275,1.976,348,2.036,371,3.098,665,4.08,943,6.164,948,4.581,961,6.164,971,3.342,989,5.398,995,3.76,1059,5.298,1066,4.587,1136,4.31,1140,3.933,1141,5.238,1142,6.103,1143,4.446,1144,5.634,1145,7.501,1146,7.501,1147,6.969,1148,4.446,1149,4.934,1150,4.446,1151,4.446,1152,4.446,1153,4.446,1154,4.446,1155,3.933,1156,4.446,1157,3.933,1158,4.446,1159,4.446]],["title/injectables/FirebaseUploader.html",[209,1.066,1160,3.357]],["body/injectables/FirebaseUploader.html",[0,0.266,3,0.089,4,0.089,5,0.079,8,2.281,10,0.376,11,1.411,13,2.198,18,0.712,20,1.539,21,0.008,22,1.442,23,0.514,24,1.157,25,1.043,26,1.755,29,0.245,38,0.089,39,0.005,43,1.626,67,0.006,68,0.005,85,1.932,128,1.38,141,1.09,148,2.79,149,1.665,151,1.483,209,1.573,210,1.932,274,1.791,275,2.215,348,2.281,940,5.55,1136,5.55,1141,4.953,1149,5.97,1160,4.953,1161,6.531,1162,4.407,1163,4.982,1164,4.982,1165,6.59,1166,5.829,1167,4.982,1168,4.407,1169,4.982,1170,4.982,1171,4.407,1172,4.407,1173,4.407,1174,4.192,1175,4.407,1176,4.982,1177,4.982,1178,4.982,1179,4.982]],["title/classes/Grade.html",[0,0.239,163,2.714]],["body/classes/Grade.html",[0,0.238,2,0.683,3,0.08,4,0.08,5,0.071,10,0.337,18,0.9,21,0.009,23,0.65,29,0.236,30,0.914,38,0.08,39,0.004,40,1.74,41,1.187,42,1.873,67,0.006,68,0.004,69,2.497,71,1.491,72,3.244,73,1.003,76,2.641,77,2.718,78,2.718,79,1.706,80,3.717,90,2.041,91,3.244,92,2.104,93,2.932,94,1.982,95,2.932,96,2.041,97,1.982,98,2.041,99,1.982,100,2.041,104,2.321,105,4.242,106,3.717,108,2.836,160,5.02,161,3.604,163,3.717,180,3.351,411,5.295,417,5.564,531,2.598,534,3.943,1180,3.943,1181,6.979,1182,4.458,1183,4.458,1184,4.458,1185,4.458,1186,4.458,1187,4.458]],["title/modules/InfraModule.html",[182,1.424,234,3.154]],["body/modules/InfraModule.html",[0,0.268,3,0.09,4,0.09,5,0.08,21,0.008,29,0.252,38,0.09,39,0.005,67,0.006,68,0.005,114,2.858,141,1.096,182,2.362,184,2.295,185,2.228,186,2.441,187,2.441,188,2.295,189,3.222,190,3.607,193,3.222,194,2.441,195,2.441,204,4.148,234,6.057,239,5.349,240,5.92,241,3.54,260,3.35,262,2.92,1038,4.433,1125,5.783,1132,4.433,1160,4.973,1171,4.433,1174,5.538,1175,4.433,1188,4.433,1189,4.433,1190,5.012,1191,5.012,1192,5.567,1193,5.012,1194,4.433,1195,5.012,1196,5.012,1197,5.012]],["title/injectables/JwtGuard.html",[209,1.066,326,2.409]],["body/injectables/JwtGuard.html",[0,0.354,3,0.118,4,0.118,5,0.105,21,0.008,29,0.236,38,0.118,39,0.006,67,0.007,68,0.006,71,1.614,141,1.447,209,1.88,210,2.565,326,4.249,1198,5.852,1199,6.616,1200,5.349,1201,6.616]],["title/interfaces/JwtPayload.html",[901,1.876,1202,3.357]],["body/interfaces/JwtPayload.html",[3,0.114,4,0.114,5,0.101,10,0.481,21,0.008,23,0.698,38,0.114,39,0.006,67,0.007,68,0.006,73,1.262,128,1.873,386,6.458,901,2.672,902,3.312,1202,5.782,1203,5.627,1204,5.627]],["title/injectables/JwtStrategy.html",[209,1.066,327,3.154]],["body/injectables/JwtStrategy.html",[0,0.223,3,0.075,4,0.075,5,0.067,10,0.315,11,1.251,13,2.007,18,0.632,20,1.365,21,0.009,22,1.279,23,0.456,24,1.026,25,0.875,26,1.556,29,0.257,33,2.676,36,2.253,38,0.075,39,0.004,43,1.908,46,2.912,49,3.552,50,3.043,60,2.847,61,2.339,67,0.005,68,0.004,71,1.019,110,2.034,141,0.914,149,1.954,151,1.243,209,1.395,210,1.619,240,6.146,241,2.95,244,3.139,307,4.841,308,3.139,327,4.128,330,3.139,331,3.139,348,2.676,351,4.97,363,5.45,366,3.694,371,2.598,486,3.377,645,2.539,665,2.792,1200,3.377,1202,5.489,1205,3.694,1206,5.845,1207,4.177,1208,4.177,1209,5.845,1210,4.177,1211,4.177,1212,4.177,1213,3.694,1214,4.177,1215,4.177,1216,4.177,1217,3.694,1218,3.377,1219,4.177,1220,4.177,1221,4.177,1222,4.177,1223,4.177,1224,4.177,1225,4.177,1226,4.177,1227,4.177,1228,4.177,1229,5.845,1230,4.177]],["title/modules/LoggerModule.html",[182,1.424,235,3.154]],["body/modules/LoggerModule.html",[0,0.31,3,0.104,4,0.104,5,0.092,21,0.008,29,0.218,38,0.104,39,0.005,67,0.007,68,0.005,141,1.27,182,2.532,184,2.657,185,2.58,186,2.827,187,2.827,188,2.657,189,3.867,190,3.867,193,3.541,194,2.827,195,2.827,235,6.266,654,6.505,1231,5.133,1232,5.133,1233,5.133,1234,5.804,1235,5.804]],["title/classes/LoginDto.html",[0,0.239,303,2.985]],["body/classes/LoginDto.html",[0,0.383,2,0.867,3,0.101,4,0.101,5,0.09,10,0.428,18,0.774,21,0.008,23,0.559,29,0.235,38,0.101,39,0.005,57,4.575,61,4.01,67,0.006,68,0.005,71,1.747,73,1.175,79,1.467,91,2.447,128,1.644,303,4.787,314,5.515,316,3.603,319,4.352,320,2.674,368,4.579,541,5.01,542,5.901,544,5.01,1236,5.01,1237,5.665,1238,5.665,1239,5.665,1240,4.579,1241,5.665,1242,5.665]],["title/injectables/PayloadInterceptor.html",[209,1.066,524,3.154]],["body/injectables/PayloadInterceptor.html",[0,0.3,3,0.1,4,0.1,5,0.089,8,2.567,10,0.424,11,1.523,18,0.606,20,1.309,21,0.008,22,1.227,23,0.438,24,0.984,25,1.174,29,0.234,38,0.1,39,0.005,67,0.006,68,0.005,141,1.227,151,1.669,209,1.698,210,2.174,524,5.024,922,4.214,1144,4.533,1243,4.959,1244,7.114,1245,7.114,1246,7.27,1247,7.815,1248,8.219,1249,5.607,1250,5.607,1251,7.815,1252,7.114,1253,4.959,1254,5.607,1255,5.607]],["title/classes/Period.html",[0,0.239,411,2.841]],["body/classes/Period.html",[0,0.215,2,0.616,3,0.072,4,0.072,5,0.064,10,0.304,18,0.909,21,0.008,22,1.445,23,0.679,24,1,29,0.215,30,0.825,38,0.072,39,0.004,40,1.62,41,1.072,42,2.392,67,0.005,68,0.004,71,1.389,72,3.103,73,0.934,76,2.459,77,2.531,78,2.531,79,1.723,82,3.218,84,4.021,85,2.208,90,1.842,91,3.103,92,1.899,93,3.399,94,1.789,95,2.776,96,1.842,97,1.789,98,1.842,99,1.789,100,1.842,103,3.289,104,2.095,106,4.016,128,1.193,163,4.608,180,3.025,264,3.317,269,2.842,398,3.184,402,5.808,411,3.622,531,3.317,562,5.342,1256,3.559,1257,6.607,1258,5.844,1259,6.607,1260,4.024,1261,4.024,1262,4.024,1263,4.024,1264,4.024,1265,3.559,1266,4.024,1267,4.024,1268,4.024]],["title/classes/Professor.html",[0,0.239,879,2.602]],["body/classes/Professor.html",[0,0.234,2,0.67,3,0.078,4,0.078,5,0.07,10,0.331,18,0.926,21,0.008,23,0.684,29,0.181,30,0.897,34,3.669,36,3.257,38,0.078,39,0.004,40,1.718,41,1.165,42,2.536,46,3.646,63,4.035,67,0.005,68,0.004,71,1.472,72,1.89,73,0.99,74,2.202,76,2.608,77,2.683,78,2.683,79,1.755,82,3.629,85,2.34,88,4.019,90,2.003,91,3.7,92,2.065,93,2.903,94,1.945,95,2.903,96,2.003,97,1.945,98,2.003,99,1.945,100,2.003,128,1.264,169,4.88,264,3.517,265,3.257,274,1.573,477,3.537,485,4.035,531,2.549,645,3.669,879,3.517,1269,3.87,1270,4.88,1271,3.87,1272,3.87,1273,3.87,1274,3.87,1275,3.87]],["title/classes/ProfessorRepository.html",[0,0.239,455,3.154]],["body/classes/ProfessorRepository.html",[0,0.34,2,0.974,3,0.114,4,0.114,5,0.101,21,0.008,29,0.248,30,1.577,38,0.114,39,0.006,67,0.007,68,0.006,71,1.877,174,4.462,175,3.432,176,2.6,177,2.6,178,2.6,455,5.433,879,3.707,1276,5.627,1277,5.627,1278,6.362]],["title/injectables/ProfessorService.html",[209,1.066,452,2.985]],["body/injectables/ProfessorService.html",[0,0.248,3,0.083,4,0.083,5,0.074,10,0.35,11,1.344,18,0.769,20,1.663,21,0.009,22,1.557,23,0.556,24,1.25,25,1.315,26,2.032,29,0.252,30,0.949,33,2.121,38,0.083,39,0.004,67,0.006,68,0.004,79,0.949,119,3.515,141,1.014,149,1.549,151,1.869,176,3.119,177,1.894,178,1.894,199,2.06,209,1.498,210,1.796,348,2.874,365,2.699,371,2.06,452,4.196,455,5.389,456,4.098,636,4.446,769,2.947,771,3.993,879,3.657,1071,3.745,1277,4.098,1279,4.098,1280,5.552,1281,4.633,1282,5.552,1283,4.633,1284,5.552,1285,5.496,1286,4.633,1287,4.098,1288,4.098,1289,3.272,1290,4.633,1291,4.098,1292,4.633,1293,3.482]],["title/classes/Question.html",[0,0.239,249,1.826]],["body/classes/Question.html",[0,0.178,2,0.511,3,0.06,4,0.06,5,0.053,10,0.375,18,0.925,21,0.008,23,0.693,24,1.155,29,0.178,30,0.683,38,0.06,39,0.003,40,1.414,41,1.873,67,0.005,68,0.003,71,1.212,72,3.299,73,0.815,76,2.841,77,2.924,78,2.924,79,1.754,80,2.027,82,3.425,83,3.203,84,4.645,85,2.859,90,1.527,91,3.299,92,1.574,93,3.097,94,2.208,95,2.493,96,1.527,97,2.208,98,1.527,99,2.208,100,1.527,103,3.497,104,2.586,105,3.019,128,1.544,249,2.03,264,2.894,269,2.355,274,2.364,399,4.396,406,2.894,481,3.548,482,3.031,483,2.355,484,2.121,517,3.458,550,2.894,601,5.25,602,5.25,603,4.798,604,4.798,664,4.015,678,2.229,679,2.229,680,2.229,690,4.192,1294,2.949,1295,3.968,1296,3.334,1297,3.334,1298,3.334,1299,3.334,1300,3.334,1301,3.334,1302,3.334,1303,3.334,1304,3.334]],["title/controllers/QuestionController.html",[112,1.777,1305,3.357]],["body/controllers/QuestionController.html",[0,0.143,3,0.048,4,0.048,5,0.043,10,0.202,11,0.9,13,2.574,18,0.764,20,1.652,21,0.009,22,1.547,23,0.632,24,1.242,25,1.481,26,2.125,29,0.235,38,0.048,39,0.002,40,1.925,41,2.125,42,2.178,43,2.309,66,1.158,67,0.004,68,0.002,79,1.449,112,1.067,114,1.158,116,1.562,119,2.354,120,2.555,121,2.374,124,2.555,127,1.629,129,2.015,131,1.629,132,2.015,134,1.629,138,4.056,139,3.398,140,2.015,141,0.586,148,1.501,149,0.896,151,2.106,154,2.015,158,2.015,249,3.078,305,1.629,306,1.265,326,1.446,367,2.188,482,2.767,517,3.021,582,3.466,594,4.112,595,3.662,597,4.895,747,1.792,759,1.792,788,2.167,790,2.015,795,2.167,797,5.155,798,2.015,802,1.792,803,5.504,809,2.167,1305,3.159,1306,2.371,1307,4.586,1308,3.718,1309,3.897,1310,2.371,1311,2.68,1312,2.371,1313,2.68,1314,2.68,1315,2.371,1316,4.146,1317,2.68,1318,3.718,1319,2.371,1320,4.203,1321,2.68,1322,2.371,1323,2.68,1324,2.68,1325,4.146,1326,2.371,1327,2.68,1328,4.203,1329,5.172,1330,2.371,1331,2.68,1332,2.68,1333,5.192,1334,2.167,1335,2.371,1336,2.371,1337,2.015,1338,2.167,1339,3.298,1340,2.371,1341,1.629,1342,2.167,1343,2.015,1344,2.371,1345,2.371,1346,2.68,1347,2.68,1348,2.68,1349,2.68,1350,2.68,1351,2.68,1352,2.68,1353,2.68,1354,2.68,1355,2.68,1356,2.68]],["title/classes/QuestionFindDto.html",[0,0.239,1316,3.154]],["body/classes/QuestionFindDto.html",[0,0.404,2,0.945,3,0.11,4,0.11,5,0.098,10,0.466,18,0.667,21,0.008,23,0.482,24,1.326,29,0.185,38,0.11,39,0.006,41,2.011,67,0.007,68,0.006,73,1.239,79,1.265,320,2.913,482,2.854,517,4.756,518,4.401,558,4.805,1316,5.334,1357,6.681,1358,5.459,1359,6.172,1360,6.172]],["title/classes/QuestionGroup.html",[0,0.239,481,2.409]],["body/classes/QuestionGroup.html",[0,0.336,2,0.467,3,0.055,4,0.055,5,0.049,10,0.351,11,0.995,18,0.918,21,0.008,23,0.681,25,0.639,29,0.203,30,0.625,38,0.055,39,0.003,40,1.322,41,1.802,42,1.282,67,0.004,68,0.003,71,1.133,72,3.202,73,0.762,76,2.717,77,2.796,78,2.796,79,1.74,80,1.855,82,3.063,83,3.063,84,3.281,85,1.801,90,1.397,91,3.202,92,1.44,93,2.995,94,2.065,95,2.363,96,1.397,97,2.065,98,1.397,99,2.065,100,1.397,103,3.264,104,2.419,105,2.824,106,2.824,110,1.486,128,0.973,249,2.766,264,2.707,269,2.155,274,2.562,398,3.114,406,2.707,415,2.929,430,4.548,481,2.506,482,2.958,483,5.528,516,3.579,531,1.778,550,3.664,571,1.778,580,1.536,599,3.761,662,5.563,664,5.084,665,4.204,678,2.04,679,2.04,680,2.04,681,4.976,683,2.467,696,2.467,697,2.467,698,2.467,1265,2.699,1295,3.761,1361,2.699,1362,3.051,1363,3.051,1364,3.051,1365,3.051,1366,3.051,1367,3.051,1368,3.051,1369,3.051,1370,3.051,1371,2.467,1372,3.051,1373,3.051,1374,3.051,1375,3.051,1376,3.051]],["title/classes/QuestionGroup1620179231630.html",[0,0.239,1377,3.61]],["body/classes/QuestionGroup1620179231630.html",[0,0.293,2,0.584,3,0.068,4,0.068,5,0.061,8,2.507,9,3.226,10,0.288,11,1.172,12,3.765,13,2.301,14,2.756,15,2.667,16,2.756,17,4.176,18,0.693,20,1.279,21,0.008,22,1.624,23,0.501,24,0.962,25,1.147,26,1.866,27,2.756,29,0.114,30,0.781,38,0.068,39,0.003,40,1.995,43,2.523,66,1.646,67,0.005,68,0.003,73,0.899,83,3.122,121,2.935,128,0.798,217,3.329,249,2.865,274,2.862,275,1.694,280,3.889,281,4.116,282,5.809,283,4.437,284,5.809,285,4.116,286,4.116,287,4.116,288,3.661,290,4.116,291,4.458,292,4.116,298,2.22,399,3.661,405,4.116,415,1.984,428,3.661,429,2.316,432,3.661,433,4.116,435,4.116,436,2.547,437,2.547,438,2.864,603,3.081,604,3.081,705,3.661,1377,5.666,1378,6.199,1379,3.371,1380,3.811,1381,3.811,1382,3.811,1383,4.844,1384,3.371,1385,3.371,1386,2.864,1387,4.844]],["title/controllers/QuestionGroupController.html",[112,1.777,1388,3.357]],["body/controllers/QuestionGroupController.html",[0,0.139,3,0.046,4,0.046,5,0.041,10,0.196,11,0.877,13,2.562,18,0.783,20,1.558,21,0.009,22,1.46,23,0.627,24,1.172,25,1.517,26,2.166,29,0.228,38,0.046,39,0.002,40,1.899,41,1.985,42,2.133,43,2.281,66,1.122,67,0.004,68,0.002,79,1.484,110,1.265,112,1.033,114,1.122,116,1.513,117,2.258,118,3.856,119,2.296,120,2.491,121,2.325,124,2.491,127,1.578,129,1.951,131,1.578,132,1.951,134,1.578,138,3.994,139,3.314,140,1.951,141,0.568,148,1.454,149,0.868,151,2.156,154,1.951,158,1.951,249,2.567,305,1.578,306,1.225,326,1.401,367,1.352,481,3.907,482,2.817,484,1.652,513,4.713,571,3.361,580,1.306,627,4.461,690,2.895,747,1.736,748,3.081,759,1.736,788,2.099,790,1.951,795,2.099,797,4.663,798,3.081,802,1.736,803,5.603,809,2.099,1309,3.817,1319,2.296,1322,2.296,1326,2.296,1330,2.296,1333,5.554,1334,2.099,1337,1.951,1341,3.087,1342,2.099,1343,1.951,1345,2.296,1371,2.099,1388,3.081,1389,6.593,1390,2.296,1391,4.492,1392,5.768,1393,2.296,1394,2.596,1395,5.079,1396,2.596,1397,2.296,1398,2.596,1399,2.596,1400,2.596,1401,2.596,1402,2.596,1403,2.596,1404,2.596,1405,4.713,1406,2.596,1407,5.115,1408,2.596,1409,4.663,1410,1.951,1411,2.296,1412,2.596,1413,2.596,1414,2.596,1415,2.596,1416,2.596,1417,2.596,1418,2.596,1419,2.596,1420,2.596,1421,2.596]],["title/modules/QuestionGroupModule.html",[182,1.424,236,3.154]],["body/modules/QuestionGroupModule.html",[0,0.258,3,0.086,4,0.086,5,0.077,21,0.008,29,0.262,38,0.086,39,0.004,67,0.006,68,0.004,114,2.786,141,1.055,182,2.317,184,2.208,185,2.144,186,2.349,187,2.349,188,2.208,189,3.539,190,2.349,193,3.141,194,2.349,195,2.349,198,3.067,199,2.144,204,3.611,233,5.561,236,6.237,248,4.265,250,3.624,482,1.822,1305,5.461,1339,5.292,1340,4.265,1341,5.056,1342,3.898,1343,3.624,1388,5.461,1422,4.265,1423,4.822,1424,4.265,1425,4.822,1426,4.822,1427,4.822,1428,3.406,1429,4.265,1430,4.265,1431,4.822,1432,4.554,1433,4.265,1434,4.822]],["title/classes/QuestionGroupRepository.html",[0,0.239,1428,3.154]],["body/classes/QuestionGroupRepository.html",[0,0.336,2,0.963,3,0.112,4,0.112,5,0.1,21,0.008,29,0.246,30,1.566,38,0.112,39,0.006,67,0.007,68,0.006,71,1.864,174,4.439,175,3.393,176,2.571,177,2.571,178,2.571,481,3.393,482,2.377,484,4.001,1410,4.727,1428,5.396,1435,5.563,1436,5.563,1437,6.289]],["title/injectables/QuestionGroupService.html",[209,1.066,1341,2.714]],["body/injectables/QuestionGroupService.html",[0,0.108,3,0.036,4,0.036,5,0.032,10,0.153,11,0.717,13,2.452,18,0.762,20,1.54,21,0.009,22,1.442,23,0.515,24,1.158,25,1.432,26,2.037,29,0.238,30,0.687,33,3.019,38,0.036,39,0.003,40,2.006,41,1.967,42,0.85,43,2.457,49,2.037,50,2.233,66,0.874,67,0.003,68,0.002,79,1.132,110,0.986,117,1.906,118,3.333,119,1.877,120,2.037,121,1.963,127,2.037,131,2.037,134,1.23,141,0.443,149,1.433,151,1.963,176,3.019,177,0.827,178,0.827,199,0.9,209,0.8,210,0.785,249,2.258,348,1.534,362,3.223,365,1.179,367,1.054,371,2.646,398,1.408,406,1.179,473,1.636,481,4.187,482,2.732,484,1.288,513,4.204,516,3.514,571,2.499,580,1.019,599,2.867,627,3.979,661,1.636,690,3.901,696,1.636,697,1.636,698,1.636,769,1.288,771,2.132,783,2.367,799,4.009,802,1.353,832,2.964,844,2.24,845,1.43,846,1.521,864,1.636,867,1.79,868,1.636,894,4.03,899,1.79,914,1.636,922,1.521,1293,1.521,1295,2.867,1309,3.223,1337,1.521,1339,4.009,1341,2.037,1371,1.636,1386,2.519,1391,3.793,1393,1.79,1397,1.79,1405,3.521,1407,4.656,1409,4.03,1410,1.521,1411,1.79,1428,3.521,1429,1.79,1430,1.79,1438,6.394,1439,1.79,1440,4.288,1441,2.024,1442,2.024,1443,2.024,1444,2.024,1445,2.024,1446,2.024,1447,2.024,1448,1.79,1449,2.024,1450,2.024,1451,2.024,1452,2.024,1453,2.024,1454,3.467,1455,2.024,1456,2.024,1457,1.521,1458,1.79,1459,2.024,1460,2.024,1461,2.024,1462,2.024,1463,2.024,1464,2.024,1465,2.024,1466,3.351,1467,3.351,1468,3.351,1469,4.288,1470,2.024,1471,2.024,1472,3.351,1473,2.024,1474,2.024,1475,1.79,1476,1.79,1477,2.024,1478,2.024,1479,2.024,1480,1.79,1481,2.024,1482,2.024,1483,2.024,1484,2.024,1485,2.024,1486,3.351,1487,2.024,1488,2.024,1489,2.024]],["title/classes/QuestionGroupTarget1621992475274.html",[0,0.239,1490,3.61]],["body/classes/QuestionGroupTarget1621992475274.html",[0,0.207,2,0.592,3,0.069,4,0.069,5,0.062,8,2.533,9,3.251,10,0.604,11,1.184,12,3.782,13,2.312,14,2.784,15,2.694,16,2.784,17,4.19,18,0.698,20,1.292,21,0.008,22,1.633,23,0.65,24,0.971,25,1.159,26,1.878,27,2.784,29,0.116,30,0.792,38,0.069,39,0.004,43,2.82,46,3.597,67,0.005,68,0.004,73,0.908,88,2.984,103,2.958,117,2.872,128,0.809,274,1.389,275,1.718,279,5.647,280,3.908,283,3.251,288,2.583,297,6.239,298,4.525,427,4.981,428,4.715,429,3.927,448,4.893,580,3.251,878,3.223,879,3.223,880,4.893,1490,5.702,1491,6.239,1492,3.418,1493,3.864,1494,3.864,1495,3.864]],["title/classes/QuestionImage1620477869366.html",[0,0.239,1496,3.61]],["body/classes/QuestionImage1620477869366.html",[0,0.207,2,0.593,3,0.069,4,0.069,5,0.062,8,2.537,9,3.256,10,0.293,11,1.186,12,3.785,13,2.314,14,2.788,15,2.699,16,2.788,17,4.192,18,0.699,20,1.294,21,0.008,22,1.634,23,0.505,24,0.973,25,1.161,26,1.88,27,2.788,29,0.116,30,0.794,38,0.069,39,0.004,43,2.759,66,2.394,67,0.005,68,0.004,73,0.909,83,2.699,121,2.537,128,0.811,217,4.292,249,3.455,274,1.992,275,1.722,280,4.253,283,3.911,288,3.704,291,4.492,298,3.229,399,3.704,429,3.368,432,4.72,433,5.307,434,4.944,435,5.841,436,3.704,437,3.704,438,4.165,705,5.65,1384,6.246,1385,6.246,1496,5.708,1497,6.246,1498,3.426,1499,3.873,1500,3.873,1501,3.873]],["title/classes/QuestionPosition1620488935141.html",[0,0.239,1502,3.61]],["body/classes/QuestionPosition1620488935141.html",[0,0.248,2,0.709,3,0.083,4,0.083,5,0.074,8,2.874,9,3.583,10,0.35,11,1.344,12,4.005,13,2.448,14,3.159,15,3.057,16,3.159,17,4.363,18,0.769,20,1.466,21,0.008,22,1.745,23,0.556,24,1.102,25,1.315,26,2.032,27,3.159,29,0.139,30,0.949,38,0.083,39,0.004,43,2.491,67,0.006,68,0.004,73,1.03,83,3.057,103,2.874,128,0.97,249,2.566,274,2.559,275,2.06,280,3.84,283,3.159,298,3.657,406,3.657,428,4.196,429,3.815,705,5.101,1295,5.101,1502,6.169,1503,6.75,1504,4.098,1505,4.633,1506,4.633,1507,4.633]],["title/classes/QuestionPositionIdx1620563708532.html",[0,0.239,1508,3.61]],["body/classes/QuestionPositionIdx1620563708532.html",[0,0.215,2,0.616,3,0.072,4,0.072,5,0.064,8,2.607,9,3.325,10,0.573,11,1.219,12,3.833,13,2.343,14,2.865,15,2.773,16,2.865,17,4.23,18,0.714,20,1.33,21,0.008,22,1.658,23,0.516,24,1,25,1.193,26,1.913,27,2.865,29,0.12,30,0.825,38,0.072,39,0.004,43,2.782,66,2.459,67,0.005,68,0.004,73,0.934,83,2.773,121,2.607,128,0.843,217,4.366,249,3.379,274,1.446,275,1.789,280,3.96,283,2.865,291,4.57,298,3.317,428,3.806,429,3.461,432,4.802,433,5.399,434,3.622,435,5.915,436,3.806,437,3.806,438,4.279,705,5.261,1295,3.806,1383,5.036,1387,5.036,1508,5.808,1509,6.354,1510,3.559,1511,4.024,1512,4.024,1513,4.024,1514,5.694,1515,5.694]],["title/classes/QuestionRepository.html",[0,0.239,1432,3.154]],["body/classes/QuestionRepository.html",[0,0.339,2,0.97,3,0.113,4,0.113,5,0.101,21,0.008,29,0.247,30,1.573,38,0.113,39,0.006,67,0.007,68,0.006,71,1.872,174,4.454,175,3.419,176,2.591,177,2.591,178,2.591,249,2.591,482,2.395,1338,5.123,1432,5.421,1516,5.606,1517,6.337]],["title/injectables/QuestionService.html",[209,1.066,1339,2.841]],["body/injectables/QuestionService.html",[0,0.11,3,0.037,4,0.037,5,0.033,10,0.155,11,0.725,13,2.506,18,0.765,20,1.653,21,0.009,22,1.548,23,0.553,24,1.243,25,1.439,26,2.144,29,0.236,30,0.694,33,2.901,38,0.037,39,0.003,40,2.014,41,2.073,42,0.861,43,2.243,49,2.058,50,2.252,66,0.885,67,0.003,68,0.002,79,1.227,119,1.896,120,2.058,121,1.55,127,2.058,131,2.058,134,2.058,141,0.448,149,1.132,151,2.107,176,3.137,177,0.838,178,0.838,199,0.911,209,0.808,210,0.795,249,3.087,262,1.194,348,1.55,361,1.657,362,3.251,365,1.194,367,1.763,371,2.472,372,1.813,406,1.194,481,2.71,482,2.742,484,1.304,517,3.692,582,2.892,594,3.852,595,3.055,597,4.236,599,4.003,690,3.055,769,1.304,771,2.154,783,2.391,802,1.37,841,1.813,844,2.263,845,1.447,846,1.54,864,1.657,868,1.657,914,1.657,922,1.54,1077,4.443,1293,1.54,1295,3.718,1307,3.826,1308,2.995,1309,3.251,1310,1.813,1312,1.813,1315,2.995,1316,3.548,1318,2.995,1325,3.548,1329,3.548,1335,1.813,1336,1.813,1337,1.54,1338,1.657,1339,2.154,1341,3.38,1343,1.54,1344,1.813,1386,2.545,1410,1.54,1432,3.548,1433,1.813,1448,1.813,1457,1.54,1458,1.813,1475,2.995,1476,4.443,1518,1.813,1519,4.326,1520,3.386,1521,4.326,1522,2.049,1523,2.049,1524,2.049,1525,2.049,1526,2.049,1527,2.049,1528,2.049,1529,3.386,1530,2.049,1531,2.049,1532,2.049,1533,2.049,1534,3.497,1535,2.049,1536,2.049,1537,2.049,1538,2.049,1539,2.049,1540,3.386,1541,2.049,1542,2.049,1543,3.386,1544,2.049,1545,2.049,1546,3.386,1547,2.049,1548,3.386,1549,2.049,1550,2.049,1551,3.386,1552,1.813,1553,2.049,1554,2.049,1555,2.049,1556,2.049,1557,2.049]],["title/classes/ReorderQuestionDto.html",[0,0.239,1325,3.154]],["body/classes/ReorderQuestionDto.html",[0,0.391,2,0.895,3,0.104,4,0.104,5,0.093,10,0.441,18,0.789,21,0.008,23,0.57,29,0.175,38,0.104,39,0.005,41,2.222,67,0.007,68,0.005,73,1.198,79,1.497,85,2.831,320,2.759,482,3.01,517,4.641,518,4.641,576,5.157,600,4.393,1325,5.157,1552,7.045,1558,6.439,1559,5.845,1560,5.17,1561,5.845,1562,5.845]],["title/classes/ReorderQuestionGroupDto.html",[0,0.239,1405,3.154]],["body/classes/ReorderQuestionGroupDto.html",[0,0.386,2,0.879,3,0.103,4,0.103,5,0.091,10,0.434,18,0.781,21,0.008,23,0.564,29,0.172,38,0.103,39,0.005,41,2.208,67,0.007,68,0.005,73,1.185,79,1.48,85,2.8,249,3.23,320,2.711,482,2.986,515,4.056,516,5.026,518,4.831,520,5.08,573,4.317,576,5.101,1405,5.101,1480,6.989,1558,6.388,1560,5.08,1563,5.743]],["title/interfaces/SoftDeleteResult.html",[844,2.985,901,1.876]],["body/interfaces/SoftDeleteResult.html",[3,0.115,4,0.115,5,0.102,10,0.486,21,0.008,23,0.649,38,0.115,39,0.006,41,1.714,66,2.78,67,0.007,68,0.006,73,1.271,744,6.853,844,5.179,845,4.545,901,2.704,902,3.351,1564,5.203,1565,8.626,1566,6.436]],["title/classes/Student.html",[0,0.239,878,2.602]],["body/classes/Student.html",[0,0.234,2,0.67,3,0.078,4,0.078,5,0.07,10,0.331,18,0.926,21,0.008,23,0.684,29,0.181,30,0.897,34,3.669,36,3.257,38,0.078,39,0.004,40,1.718,41,1.165,42,2.536,46,3.646,63,4.035,67,0.005,68,0.004,71,1.472,72,1.89,73,0.99,74,2.202,76,2.608,77,2.683,78,2.683,79,1.755,82,3.629,85,2.34,88,4.019,90,2.003,91,3.7,92,2.065,93,2.903,94,1.945,95,2.903,96,2.003,97,1.945,98,2.003,99,1.945,100,2.003,128,1.264,169,4.88,264,3.517,265,3.257,274,1.573,477,3.537,485,4.035,531,2.549,645,3.669,878,3.517,1270,4.88,1271,3.87,1272,3.87,1273,3.87,1274,3.87,1275,3.87,1567,3.87]],["title/classes/StudentRepository.html",[0,0.239,457,3.154]],["body/classes/StudentRepository.html",[0,0.34,2,0.974,3,0.114,4,0.114,5,0.101,21,0.008,29,0.248,30,1.577,38,0.114,39,0.006,67,0.007,68,0.006,71,1.877,174,4.462,175,3.432,176,2.6,177,2.6,178,2.6,457,5.433,878,3.707,1568,5.627,1569,5.627,1570,6.362]],["title/injectables/StudentService.html",[209,1.066,453,2.985]],["body/injectables/StudentService.html",[0,0.248,3,0.083,4,0.083,5,0.074,10,0.35,11,1.344,18,0.769,20,1.663,21,0.009,22,1.557,23,0.556,24,1.25,25,1.315,26,2.032,29,0.252,30,0.949,33,2.121,38,0.083,39,0.004,67,0.006,68,0.004,79,0.949,119,3.515,141,1.014,149,1.549,151,1.869,176,3.119,177,1.894,178,1.894,199,2.06,209,1.498,210,1.796,348,2.874,365,2.699,371,2.06,453,4.196,457,5.389,458,4.098,636,4.446,769,2.947,771,3.993,878,3.657,1071,3.745,1280,5.552,1282,5.552,1284,5.552,1285,5.496,1287,4.098,1288,4.098,1289,3.272,1291,4.098,1293,3.482,1569,4.098,1571,4.098,1572,4.633,1573,4.633,1574,4.633,1575,4.633,1576,4.633]],["title/classes/Subject.html",[0,0.239,417,2.985]],["body/classes/Subject.html",[0,0.218,2,0.624,3,0.073,4,0.073,5,0.065,10,0.308,18,0.911,21,0.008,23,0.681,29,0.216,30,0.835,38,0.073,39,0.004,40,1.635,41,1.771,42,1.711,67,0.005,68,0.004,71,1.401,72,3.12,73,0.942,76,2.481,77,2.553,78,2.553,79,1.727,80,2.476,82,3.24,83,2.797,85,2.227,90,1.865,91,3.12,92,1.923,93,2.794,94,1.811,95,2.794,96,1.865,97,1.811,98,1.865,99,1.811,100,1.865,103,3.307,104,2.121,105,3.491,106,3.491,108,2.591,128,1.513,163,4.629,180,3.062,264,4.209,265,3.098,413,5.734,414,5.377,415,3.463,417,3.839,531,2.374,1258,5.883,1577,3.603,1578,6.652,1579,4.074,1580,4.074,1581,4.074,1582,4.074,1583,4.074,1584,4.074,1585,4.074,1586,4.074]],["title/interfaces/SwaggerOptions.html",[901,1.876,1587,3.357]],["body/interfaces/SwaggerOptions.html",[3,0.107,4,0.107,5,0.095,10,0.451,21,0.008,23,0.656,38,0.107,39,0.005,67,0.007,68,0.005,73,1.214,128,1.905,400,5.937,415,4.377,901,2.508,902,3.109,1587,5.563,1588,5.282,1589,7.436,1590,7.436,1591,8.043]],["title/classes/TimestampEntity.html",[0,0.239,95,1.876]],["body/classes/TimestampEntity.html",[0,0.303,2,0.867,3,0.101,4,0.101,5,0.09,10,0.428,18,0.849,21,0.008,23,0.613,29,0.17,30,1.161,38,0.101,39,0.005,67,0.006,68,0.005,71,1.747,73,1.175,76,3.392,77,3.49,78,3.49,79,1.609,93,3.651,94,3.49,95,3.008,97,3.49,99,3.49,1592,5.01,1593,7.852,1594,5.665,1595,5.665,1596,5.665]],["title/classes/UpdateAnswerDto.html",[0,0.239,135,3.154]],["body/classes/UpdateAnswerDto.html",[0,0.351,2,1.005,3,0.117,4,0.117,5,0.105,21,0.008,29,0.235,38,0.117,39,0.006,67,0.007,68,0.006,71,1.601,117,2.918,123,4.388,135,5.536,145,5.306,538,5.306,1597,5.806,1598,4.933,1599,5.306,1600,5.306,1601,6.564]],["title/classes/UpdateExamDto.html",[0,0.239,794,3.154]],["body/classes/UpdateExamDto.html",[0,0.351,2,1.005,3,0.117,4,0.117,5,0.105,21,0.008,29,0.235,38,0.117,39,0.006,67,0.007,68,0.006,71,1.601,117,2.918,559,4.388,560,5.306,794,5.536,801,5.306,1598,4.933,1599,5.306,1600,5.306,1602,5.806,1603,6.564]],["title/classes/UpdateQuestionDto.html",[0,0.239,1329,3.154]],["body/classes/UpdateQuestionDto.html",[0,0.351,2,1.005,3,0.117,4,0.117,5,0.105,21,0.008,29,0.235,38,0.117,39,0.006,67,0.007,68,0.006,71,1.601,117,2.918,306,3.098,482,2.48,594,3.99,595,4.636,600,4.933,1329,5.536,1598,4.933,1604,5.306,1605,6.564]],["title/classes/UpdateQuestionGroupDto.html",[0,0.239,1407,3.154]],["body/classes/UpdateQuestionGroupDto.html",[0,0.347,2,0.993,3,0.116,4,0.116,5,0.103,21,0.008,29,0.233,38,0.116,39,0.006,67,0.007,68,0.006,71,1.582,117,2.884,249,3.182,482,2.451,515,4.581,627,4.336,1407,5.497,1409,5.244,1598,4.875,1599,5.244,1600,5.244,1604,5.244,1606,6.487]],["title/controllers/UploadController.html",[112,1.777,1192,3.357]],["body/controllers/UploadController.html",[0,0.276,3,0.092,4,0.092,5,0.12,10,0.389,11,1.442,13,2.235,18,0.557,20,1.203,21,0.008,22,1.127,23,0.402,24,0.905,25,1.079,29,0.254,38,0.092,39,0.005,43,1.682,67,0.006,68,0.005,79,1.056,112,2.051,114,2.226,116,3.002,124,4.095,141,1.127,148,2.886,149,1.722,151,1.534,305,3.132,306,2.432,326,2.78,747,3.444,748,5.064,749,4.166,759,3.444,1141,5.642,1174,4.286,1192,5.064,1194,4.558,1607,4.558,1608,5.153,1609,7.507,1610,5.153,1611,5.153,1612,5.153,1613,5.153,1614,5.153,1615,4.558,1616,4.558,1617,5.447,1618,5.153,1619,5.153,1620,5.153,1621,4.166,1622,5.153,1623,5.153,1624,5.153]],["title/classes/UploaderService.html",[0,0.239,1174,2.841]],["body/classes/UploaderService.html",[0,0.319,2,0.914,3,0.107,4,0.107,5,0.095,10,0.451,11,1.584,18,0.645,20,1.394,21,0.008,22,1.306,23,0.466,24,1.048,25,1.251,26,1.971,29,0.179,38,0.107,39,0.005,67,0.007,68,0.005,128,1.684,940,5.937,971,4.488,1141,5.563,1149,6.502,1166,6.546,1168,5.282,1172,5.282,1173,5.282,1174,4.708,1625,5.282,1626,8.407,1627,5.971]],["title/classes/User.html",[0,0.239,46,1.929]],["body/classes/User.html",[0,0.185,2,0.529,3,0.062,4,0.062,5,0.055,10,0.261,18,0.913,21,0.008,22,0.755,23,0.699,29,0.214,30,0.708,34,3.682,36,3.268,38,0.062,39,0.003,40,1.451,41,0.919,42,2.141,46,2.202,63,4.05,67,0.005,68,0.003,71,1.243,72,3.337,73,0.836,74,3.366,76,2.89,77,2.974,78,2.974,79,1.732,82,3.258,85,2.594,88,4.442,90,1.581,91,3.337,92,1.63,93,3.137,94,2.266,95,2.545,96,1.581,97,2.266,98,1.581,99,2.266,100,1.581,101,2.439,102,2.196,103,3.419,104,1.798,106,3.098,107,4.508,108,2.196,110,1.682,128,1.401,264,3.898,265,3.609,274,1.832,485,4.77,487,2.791,531,2.012,645,4.539,651,3.831,678,2.308,679,2.308,680,2.308,692,2.595,1270,4.898,1628,3.054,1629,3.453,1630,3.453,1631,3.453,1632,3.453,1633,3.453,1634,3.453,1635,3.453,1636,3.453]],["title/controllers/UserController.html",[112,1.777,1637,3.357]],["body/controllers/UserController.html",[0,0.25,3,0.084,4,0.084,5,0.074,10,0.353,11,1.351,18,0.682,20,1.474,21,0.009,22,1.381,23,0.493,24,1.108,25,1.322,29,0.252,38,0.084,39,0.004,46,3.702,67,0.006,68,0.004,79,1.294,112,1.86,114,2.018,116,2.722,124,4.346,138,2.972,141,1.022,148,2.617,149,1.562,151,2.129,305,2.84,306,2.205,326,2.521,351,4.346,367,2.432,636,4.803,747,3.123,750,5.05,752,4.133,759,4.22,798,3.512,1062,4.459,1064,4.133,1289,3.3,1334,3.777,1637,4.745,1638,4.133,1639,3.777,1640,4.672,1641,4.672,1642,4.672,1643,4.672,1644,4.672,1645,3.777,1646,4.133,1647,4.672,1648,4.672,1649,4.672,1650,4.672,1651,4.672,1652,4.672]],["title/classes/UserDto.html",[0,0.239,1285,2.985]],["body/classes/UserDto.html",[0,0.41,2,0.967,3,0.113,4,0.113,5,0.101,10,0.477,18,0.682,21,0.008,23,0.493,29,0.189,36,4.447,38,0.113,39,0.006,67,0.007,68,0.006,73,1.256,79,1.294,128,1.604,316,4.016,318,4.871,319,4.655,320,2.98,1285,5.119,1653,5.584,1654,6.313]],["title/modules/UserModule.html",[182,1.424,237,2.985]],["body/modules/UserModule.html",[0,0.272,3,0.091,4,0.091,5,0.081,21,0.008,29,0.258,38,0.091,39,0.005,67,0.006,68,0.005,114,2.887,141,1.113,182,2.38,184,2.33,185,2.262,186,2.479,187,2.479,188,2.33,189,3.634,190,3.634,193,3.255,194,2.479,195,2.479,198,3.237,199,2.262,204,2.85,230,4.467,231,4.467,237,5.755,246,4.501,351,5.496,361,6.032,1637,5.608,1646,4.501,1655,4.501,1656,4.501,1657,4.501,1658,5.089,1659,5.089,1660,5.089,1661,3.594,1662,4.501,1663,5.089]],["title/classes/UserRepository.html",[0,0.239,1661,3.154]],["body/classes/UserRepository.html",[0,0.333,2,0.952,3,0.111,4,0.111,5,0.099,21,0.008,29,0.255,30,1.555,38,0.111,39,0.006,46,2.686,67,0.007,68,0.006,71,1.851,174,4.417,175,3.355,176,2.542,177,2.542,178,2.542,367,3.237,636,3.623,1289,4.392,1645,5.027,1661,5.359,1664,5.5,1665,6.218]],["title/interfaces/UserResult.html",[901,1.876,1666,3.357]],["body/interfaces/UserResult.html",[3,0.11,4,0.11,5,0.098,10,0.464,21,0.008,23,0.692,29,0.184,38,0.11,39,0.006,40,2.417,41,2.17,67,0.007,68,0.006,73,1.236,110,2.995,149,2.519,645,5.162,651,4.622,901,2.583,902,3.201,1564,4.971,1666,5.664,1667,5.439,1668,4.971]],["title/injectables/UserService.html",[209,1.066,351,2.714]],["body/injectables/UserService.html",[0,0.139,3,0.047,4,0.047,5,0.041,10,0.197,11,0.88,13,2.45,18,0.756,20,1.634,21,0.009,22,1.53,23,0.566,24,1.228,25,1.4,26,2.11,29,0.241,30,0.534,33,2.645,38,0.047,39,0.002,40,0.741,42,1.726,43,2.367,45,2.304,46,3.555,49,3.512,50,3.008,57,1.518,60,1.269,61,1.459,67,0.004,68,0.002,79,0.534,110,1.269,141,0.57,149,1.931,151,2.083,176,2.362,177,1.065,178,1.065,199,1.158,209,0.981,210,1.01,274,1.477,307,4.252,348,1.881,351,2.498,363,3.322,365,1.518,367,1.356,371,3.11,452,4.677,453,4.677,491,3.635,493,5.111,496,3.635,636,4.348,645,1.583,651,1.958,846,1.958,1062,3.594,1285,5.722,1289,1.839,1639,3.322,1645,2.106,1661,4.72,1662,2.304,1666,3.088,1668,2.106,1669,2.304,1670,4.109,1671,4.109,1672,4.109,1673,4.109,1674,4.109,1675,2.605,1676,2.605,1677,2.605,1678,4.109,1679,2.605,1680,4.109,1681,2.605,1682,4.109,1683,2.605,1684,4.109,1685,2.605,1686,4.109,1687,2.605,1688,4.109,1689,2.605,1690,2.605,1691,2.605,1692,2.605,1693,2.605,1694,2.605,1695,2.605,1696,2.605,1697,2.605,1698,2.605,1699,2.605,1700,2.605,1701,2.605,1702,2.605,1703,2.605,1704,2.605,1705,2.605,1706,2.605,1707,2.605,1708,2.605,1709,4.109,1710,2.605,1711,4.109,1712,2.605,1713,5.089,1714,2.605,1715,4.109,1716,4.109,1717,2.605,1718,2.605,1719,2.605,1720,2.605,1721,2.605]],["title/coverage.html",[1722,5.415]],["body/coverage.html",[0,0.475,1,1.131,5,0.022,6,2.635,7,2.635,13,0.728,21,0.008,23,0.109,34,0.85,36,0.755,39,0.001,46,0.604,50,0.728,60,1.192,66,0.604,67,0.002,68,0.001,69,0.784,70,1.238,72,0.604,74,0.704,95,0.588,101,1.728,112,2.427,113,1.052,115,1.238,123,0.935,135,0.988,142,0.935,160,0.935,161,1.131,162,1.238,163,0.85,171,1.052,172,1.238,173,1.238,182,0.78,188,0.641,200,1.052,206,1.238,209,1.809,211,1.238,221,1.052,222,1.238,242,1.131,243,1.131,249,1.815,250,1.052,263,1.238,271,1.131,272,1.238,273,1.238,280,0.704,300,1.052,301,1.238,303,0.935,307,0.85,314,0.935,315,1.238,326,0.755,327,0.988,331,1.052,333,0.988,341,1.238,344,1.238,351,0.85,354,0.988,392,1.131,393,1.238,394,1.238,398,1.028,406,5.438,411,0.89,413,0.988,417,0.935,452,0.935,453,0.935,455,0.988,457,0.988,462,0.988,463,1.131,464,1.131,481,0.755,482,2.833,483,0.988,513,0.988,514,1.238,515,2.761,524,0.988,528,1.238,537,1.238,538,1.978,539,1.238,540,1.238,542,1.052,546,0.988,547,1.978,548,1.238,559,0.935,560,1.978,564,0.85,580,0.704,582,0.935,583,2.761,584,1.978,594,0.85,597,0.935,600,2.45,627,0.935,636,0.815,637,1.238,638,1.238,641,1.131,654,0.988,655,1.238,656,1.131,659,1.238,674,0.935,699,1.131,700,1.238,701,1.238,706,1.238,723,1.131,724,1.238,725,1.238,733,1.131,734,1.238,735,1.238,739,1.052,740,1.978,741,1.238,750,0.988,751,1.131,755,0.935,762,0.988,763,1.978,764,1.238,766,1.978,767,1.238,785,1.052,786,1.238,794,0.988,799,0.89,815,0.89,817,1.052,819,0.988,821,0.988,828,1.238,830,1.238,844,0.935,845,0.988,847,1.052,850,1.131,869,1.238,872,1.131,873,1.978,874,1.978,878,0.815,879,0.815,893,1.238,901,2.46,903,1.238,904,1.238,905,1.238,907,1.238,931,1.131,932,1.238,933,1.238,937,1.238,940,0.988,941,1.238,942,1.238,948,0.815,949,1.839,950,1.238,951,1.238,964,0.85,996,1.052,1025,1.052,1033,0.935,1045,2.45,1046,1.978,1048,4.734,1053,1.052,1054,1.131,1055,1.238,1058,0.988,1059,2.761,1060,1.238,1062,0.988,1098,0.988,1099,1.131,1100,1.238,1112,1.052,1113,1.238,1136,0.988,1140,1.238,1160,1.052,1161,1.238,1162,1.238,1174,0.89,1180,1.238,1192,1.052,1198,1.238,1202,1.052,1203,1.238,1204,1.238,1205,1.238,1236,1.238,1240,1.131,1243,1.238,1256,1.238,1269,1.238,1276,1.238,1279,1.238,1285,0.935,1294,1.238,1305,1.052,1306,1.238,1316,0.988,1325,0.988,1329,0.988,1339,0.89,1341,0.85,1357,1.238,1358,1.238,1361,1.238,1377,1.131,1378,1.238,1379,1.238,1388,1.052,1389,1.238,1390,1.238,1405,0.988,1407,0.988,1428,0.988,1432,0.988,1435,1.238,1436,1.238,1438,1.238,1439,1.238,1454,1.131,1457,1.052,1490,1.131,1491,1.238,1492,1.238,1496,1.131,1497,1.238,1498,1.238,1502,1.131,1503,1.238,1504,1.238,1508,1.131,1509,1.238,1510,1.238,1516,1.238,1518,1.238,1534,1.131,1558,1.978,1564,1.978,1567,1.238,1568,1.238,1571,1.238,1577,1.238,1587,1.052,1588,1.238,1592,1.238,1597,1.238,1602,1.238,1604,1.978,1607,1.238,1617,1.131,1625,1.238,1628,1.238,1637,1.052,1638,1.238,1653,1.238,1661,0.988,1664,1.238,1666,1.052,1667,1.238,1668,1.131,1669,1.238,1722,1.238,1723,1.399,1724,1.399,1725,1.399,1726,4.884,1727,8.795,1728,3.91,1729,5.258,1730,2.164,1731,8.073,1732,6.965,1733,6.503,1734,3.91,1735,7.658,1736,3.338,1737,1.131,1738,1.238,1739,1.238,1740,1.238,1741,1.238,1742,2.164,1743,1.238,1744,1.238,1745,1.238,1746,1.238,1747,4.441,1748,2.164,1749,1.238,1750,2.164,1751,2.164,1752,1.238,1753,1.238,1754,2.164,1755,1.238,1756,1.238,1757,1.238,1758,1.238,1759,1.238,1760,1.238,1761,1.238,1762,1.399,1763,2.447,1764,1.399,1765,1.238,1766,1.238,1767,1.399,1768,1.238,1769,1.238,1770,1.238,1771,4.251,1772,1.238,1773,1.238,1774,1.238,1775,1.238,1776,1.238,1777,1.399,1778,1.238,1779,1.238,1780,2.447,1781,1.238,1782,1.399,1783,1.238,1784,1.238,1785,1.399]],["title/dependencies.html",[185,2.391,1786,3.717]],["body/dependencies.html",[0,0.392,21,0.009,30,1.502,32,4.341,39,0.004,60,2.39,64,2.648,67,0.006,68,0.004,141,1.074,176,2.006,177,2.006,178,2.006,185,2.182,199,2.182,241,3.466,306,2.316,320,3.08,330,3.689,473,3.968,556,3.466,648,4.341,995,2.648,1155,4.341,1200,3.968,1217,5.771,1218,3.968,1253,4.341,1615,4.341,1616,6.909,1787,4.908,1788,7.33,1789,4.908,1790,4.908,1791,4.908,1792,6.525,1793,4.908,1794,4.908,1795,4.908,1796,4.908,1797,4.908,1798,4.908,1799,4.908,1800,4.908,1801,4.908,1802,4.908,1803,4.908,1804,4.908,1805,4.908,1806,4.908,1807,4.908,1808,4.908,1809,4.908,1810,4.908,1811,4.908,1812,4.908,1813,4.908,1814,4.908,1815,4.908,1816,4.908,1817,4.908,1818,4.908,1819,4.908,1820,4.908,1821,4.341,1822,4.908,1823,4.908,1824,4.908,1825,4.908,1826,4.908,1827,4.908,1828,4.908]],["title/miscellaneous/enumerations.html",[1829,2.259,1830,4.757]],["body/miscellaneous/enumerations.html",[10,0.372,21,0.008,39,0.004,46,2.824,64,3.527,66,2.824,67,0.006,68,0.004,69,3.661,87,5.285,117,2.906,121,2.993,160,3.291,275,4.09,293,5.783,294,5.783,408,5.783,409,5.783,478,5.783,485,4.37,486,5.285,571,3.809,580,3.29,645,3.974,672,5.783,878,4.557,879,4.557,1829,2.992,1830,4.354,1831,4.923,1832,8.368,1833,4.354,1834,6.538,1835,6.538,1836,6.538,1837,6.538,1838,6.538,1839,4.923,1840,4.923,1841,4.923,1842,6.538,1843,6.538,1844,6.538]],["title/miscellaneous/functions.html",[1829,2.259,1845,4.757]],["body/miscellaneous/functions.html",[10,0.365,20,1.985,21,0.008,22,1.86,24,1.493,25,1.809,26,1.72,39,0.004,42,2.032,46,2.089,67,0.006,68,0.004,188,3.331,244,5.837,636,2.818,641,5.882,683,6.278,952,6.869,1062,4.563,1457,4.856,1639,3.91,1736,3.635,1737,5.882,1759,4.278,1760,5.715,1761,4.278,1771,3.91,1772,5.715,1773,5.715,1774,5.715,1775,5.715,1783,4.278,1784,5.715,1829,2.94,1845,4.278,1846,7.158,1847,4.836,1848,4.836,1849,4.836,1850,3.91,1851,4.836,1852,4.836,1853,4.836,1854,4.836,1855,4.836,1856,4.836,1857,4.836,1858,4.836,1859,5.715]],["title/index.html",[10,0.281,1860,3.717,1861,3.717]],["body/index.html",[15,2.847,21,0.008,39,0.005,52,5.904,67,0.007,68,0.005,185,2.598,490,5.17,1621,4.725,1862,6.459,1863,6.459,1864,7.38,1865,7.303,1866,5.845,1867,5.845,1868,5.845,1869,5.845,1870,5.845,1871,5.17,1872,5.845,1873,5.845,1874,5.845,1875,5.845,1876,5.17,1877,5.845,1878,5.845,1879,5.845,1880,5.845,1881,5.845,1882,5.845,1883,7.965,1884,7.303,1885,5.845,1886,5.845,1887,5.845,1888,4.725,1889,5.845,1890,7.303,1891,5.845,1892,5.845,1893,5.845,1894,5.845,1895,5.845,1896,5.845]],["title/modules.html",[184,2.803]],["body/modules.html",[21,0.006,39,0.005,67,0.006,68,0.005,183,3.987,184,2.585,227,4.243,230,3.774,231,3.774,232,3.987,233,3.774,234,3.987,235,3.987,236,3.987,237,3.774,325,3.987,1021,3.987,1125,3.987,1897,9.217,1898,9.217,1899,9.217,1900,9.217]],["title/overview.html",[1901,5.415]],["body/overview.html",[2,0.455,21,0.008,39,0.003,67,0.004,68,0.003,114,1.283,142,3.698,182,0.947,183,4.379,184,1.359,185,1.32,186,1.446,187,1.446,188,1.359,189,1.446,190,1.446,191,2.626,192,2.626,193,2.216,194,1.446,195,1.446,210,1.151,227,6.492,228,2.626,229,2.626,230,5.694,231,5.191,232,4.981,233,5.467,234,4.981,235,4.981,236,5.484,237,4.908,307,4.463,321,2.626,322,2.626,323,2.626,324,2.626,325,5.597,326,3.961,327,3.907,351,4.463,449,2.626,450,2.626,451,2.626,452,4.908,453,4.908,462,5.185,507,2.626,508,2.626,509,2.626,521,2.626,522,2.626,523,2.626,524,5.185,654,5.185,755,4.908,799,4.67,812,2.626,813,2.626,814,2.626,815,3.519,902,1.546,948,4.278,1021,4.722,1022,2.626,1023,2.626,1024,2.626,1058,5.185,1098,5.185,1125,5.484,1126,2.626,1127,2.626,1128,2.626,1174,3.944,1188,2.626,1189,2.626,1231,2.626,1232,2.626,1233,2.626,1339,3.519,1341,3.362,1422,2.626,1424,2.626,1655,2.626,1656,2.626,1657,2.626,1901,2.626,1902,2.969,1903,2.969,1904,2.969,1905,2.969,1906,2.626]],["title/miscellaneous/typealiases.html",[1829,2.259,1907,5.379]],["body/miscellaneous/typealiases.html",[10,0.484,21,0.008,23,0.501,39,0.006,67,0.007,68,0.006,463,5.183,464,6.709,468,5.671,472,5.671,488,6.837,489,6.837,954,6.249,1048,5.183,1119,6.837,1736,4.819,1829,3.897,1833,6.837,1850,5.183,1859,6.837,1908,6.411,1909,5.671,1910,7.729,1911,6.411,1912,6.411]],["title/miscellaneous/variables.html",[1829,2.259,1888,4.348]],["body/miscellaneous/variables.html",[6,1.862,7,3.791,10,0.174,21,0.009,23,0.654,33,1.055,34,2.264,35,2.037,36,2.01,37,2.037,39,0.002,41,1.249,49,2.264,50,3.611,52,3.011,53,2.037,57,1.342,67,0.003,68,0.002,85,0.893,128,1.656,151,1.396,242,3.011,243,3.791,249,0.942,250,1.731,274,3.147,275,3.893,331,3.525,398,0.968,400,1.627,415,1.199,481,1.243,482,1.408,542,2.8,564,2.264,599,1.54,656,3.011,665,1.54,750,2.631,751,1.862,850,3.011,873,1.862,874,3.011,878,1.342,879,1.342,949,1.731,953,3.295,964,1.4,995,1.243,996,3.525,1003,1.731,1025,1.731,1050,1.862,1144,1.862,1157,2.037,1213,2.037,1218,1.862,1240,3.011,1246,2.037,1386,1.731,1454,3.011,1534,3.011,1587,1.731,1589,2.037,1590,2.037,1617,3.011,1621,1.862,1730,2.037,1736,1.731,1737,1.862,1738,3.295,1739,4.148,1740,4.148,1741,4.148,1742,2.037,1743,4.148,1744,2.037,1745,4.148,1746,2.037,1748,2.037,1749,4.148,1750,2.037,1751,4.148,1752,4.148,1753,3.295,1754,2.037,1755,4.148,1756,4.148,1757,2.037,1758,3.295,1765,2.037,1766,3.295,1768,2.037,1769,4.765,1770,2.037,1771,1.862,1776,3.295,1778,3.295,1779,2.037,1781,3.295,1821,2.037,1829,1.4,1846,3.295,1850,4.355,1862,3.295,1863,3.295,1864,2.037,1871,2.037,1876,2.037,1888,1.862,1906,2.037,1909,2.037,1913,2.303,1914,3.725,1915,3.725,1916,2.303,1917,2.303,1918,2.303,1919,2.303,1920,2.303,1921,3.725,1922,3.725,1923,2.303,1924,2.303,1925,3.725,1926,3.725,1927,2.303,1928,2.303,1929,2.303,1930,3.725,1931,2.303,1932,2.303,1933,5.916,1934,2.303,1935,2.303,1936,2.303,1937,2.303,1938,3.725,1939,2.303,1940,2.303,1941,2.303,1942,2.303,1943,2.303,1944,2.303,1945,2.303,1946,2.303,1947,2.303,1948,2.303,1949,2.303,1950,2.303,1951,2.303,1952,2.303,1953,2.303,1954,4.69,1955,2.303,1956,2.303,1957,2.303,1958,2.303,1959,2.303,1960,2.303,1961,2.303,1962,2.303,1963,2.303,1964,2.303,1965,2.303,1966,2.303,1967,2.303,1968,2.303,1969,2.303,1970,4.69,1971,2.303,1972,2.303,1973,2.303,1974,2.303,1975,2.303,1976,3.725,1977,2.303,1978,2.303,1979,3.725,1980,2.303,1981,2.303,1982,2.303,1983,2.303,1984,2.303,1985,2.303,1986,2.303,1987,2.303,1988,2.303,1989,2.303,1990,2.303,1991,2.303,1992,2.303,1993,2.303,1994,2.303,1995,2.303,1996,2.303,1997,2.303,1998,2.303,1999,2.303,2000,2.303,2001,2.303,2002,2.303,2003,2.303]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":406,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1817,"title":{},"body":{"dependencies.html":{}}}],["0.1.20",{"_index":1828,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":1795,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1797,"title":{},"body":{"dependencies.html":{}}}],["0.2.31",{"_index":1824,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1796,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1814,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":1789,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1727,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1734,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1780,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1782,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1767,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1763,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1777,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1764,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1732,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1733,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1735,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1747,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1726,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1762,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1729,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1728,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1386,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["1.10.0",{"_index":1811,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":1801,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1799,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1903,"title":{},"body":{"overview.html":{}}}],["100",{"_index":1993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10h",{"_index":1992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13",{"_index":1902,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":1827,"title":{},"body":{"dependencies.html":{}}}],["2.2.5",{"_index":1813,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1794,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["200",{"_index":1936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["21",{"_index":1904,"title":{},"body":{"overview.html":{}}}],["29997856155",{"_index":35,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":1819,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":1968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1815,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1823,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":1809,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":1807,"title":{},"body":{"dependencies.html":{}}}],["4.7.15",{"_index":1793,"title":{},"body":{"dependencies.html":{}}}],["5.2.2",{"_index":1787,"title":{},"body":{"dependencies.html":{}}}],["5.2.6",{"_index":1804,"title":{},"body":{"dependencies.html":{}}}],["5000",{"_index":1952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":1994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.6.6",{"_index":1820,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":1998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["62",{"_index":1905,"title":{},"body":{"overview.html":{}}}],["7.1.5",{"_index":1792,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1791,"title":{},"body":{"dependencies.html":{}}}],["7.6.13",{"_index":1788,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1906,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["9.7.0",{"_index":1805,"title":{},"body":{"dependencies.html":{}}}],["999999",{"_index":37,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["_",{"_index":917,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["__dirname",{"_index":1954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_targetmap",{"_index":908,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["a.position",{"_index":697,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["ability",{"_index":468,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory",{"_index":512,"title":{},"body":{"modules/CaslModule.html":{}}}],["ability.factory.ts",{"_index":464,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:32",{"_index":467,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":469,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":470,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abstract",{"_index":1626,"title":{},"body":{"classes/UploaderService.html":{}}}],["accessors",{"_index":910,"title":{},"body":{"injectables/ExamTargetService.html":{},"injectables/FirebaseAdmin.html":{}}}],["accesstoken",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":1975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["action",{"_index":217,"title":{},"body":{"injectables/AnswerService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["action.enum",{"_index":480,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["action.enum.ts",{"_index":1834,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["active",{"_index":408,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":429,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["adds",{"_index":218,"title":{},"body":{"injectables/AnswerService.html":{}}}],["admin",{"_index":64,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["admin.constants",{"_index":997,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{}}}],["admin.constants.ts",{"_index":1766,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.module",{"_index":1135,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["admin.module.ts",{"_index":1026,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:14",{"_index":1029,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:27",{"_index":1034,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider",{"_index":1037,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider.ts",{"_index":951,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["admin.provider.ts:18",{"_index":992,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:22",{"_index":994,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:26",{"_index":966,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:30",{"_index":969,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:34",{"_index":974,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:38",{"_index":976,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:42",{"_index":978,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:46",{"_index":980,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:50",{"_index":982,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:54",{"_index":984,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:58",{"_index":986,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:62",{"_index":988,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:66",{"_index":973,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:8",{"_index":965,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin/firebase",{"_index":1025,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin/providers/firebase",{"_index":950,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["adminuser.ts",{"_index":7,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminuser.ts:37",{"_index":19,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser.ts:8",{"_index":28,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser1620299822480",{"_index":1,"title":{"classes/AdminUser1620299822480.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{}}}],["affectedrows",{"_index":1566,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["afterload",{"_index":681,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{}}}],["age=31536000",{"_index":1158,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["agreement",{"_index":692,"title":{},"body":{"classes/Exam.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"classes/User.html":{}}}],["agreement.controller",{"_index":826,"title":{},"body":{"modules/ExamModule.html":{}}}],["agreement.controller.ts",{"_index":741,"title":{},"body":{"controllers/ExamAgreementController.html":{},"coverage.html":{}}}],["agreement.controller.ts:17",{"_index":745,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["agreement.dto",{"_index":753,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["agreement.dto.ts",{"_index":548,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"coverage.html":{}}}],["agreement.dto.ts:10",{"_index":553,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["agreement.dto.ts:15",{"_index":552,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["agreement.dto.ts:7",{"_index":555,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["agreement.entity",{"_index":102,"title":{},"body":{"classes/Answer.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/User.html":{}}}],["agreement.entity.ts",{"_index":706,"title":{},"body":{"classes/ExamAgreement.html":{},"coverage.html":{}}}],["agreement.entity.ts:17",{"_index":714,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:20",{"_index":708,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:23",{"_index":712,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:26",{"_index":710,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:29",{"_index":711,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:32",{"_index":709,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:34",{"_index":715,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.exam",{"_index":693,"title":{},"body":{"classes/Exam.html":{}}}],["agreement.repository",{"_index":779,"title":{},"body":{"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{}}}],["agreement.repository.ts",{"_index":764,"title":{},"body":{"classes/ExamAgreementRepository.html":{},"coverage.html":{}}}],["agreement.service",{"_index":757,"title":{},"body":{"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{}}}],["agreement.service.ts",{"_index":767,"title":{},"body":{"injectables/ExamAgreementService.html":{},"coverage.html":{}}}],["agreement.service.ts:10",{"_index":770,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:17",{"_index":776,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:25",{"_index":774,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.user",{"_index":1636,"title":{},"body":{"classes/User.html":{}}}],["agreements",{"_index":660,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamService.html":{}}}],["agreementsbydateinterval",{"_index":768,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreementsbydateinterval(start",{"_index":772,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["aliases",{"_index":1908,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow_anonymous",{"_index":404,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{}}}],["allowanonymous",{"_index":561,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{}}}],["allowedorigins",{"_index":1738,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["alter",{"_index":427,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["anonymouns",{"_index":549,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["anonymous",{"_index":424,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["answer",{"_index":69,"title":{"classes/Answer.html":{}},"body":{"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Grade.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answer.controller",{"_index":197,"title":{},"body":{"modules/AnswerModule.html":{}}}],["answer.dto",{"_index":145,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{}}}],["answer.dto.ts",{"_index":538,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["answer.entity",{"_index":170,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer.grade",{"_index":1187,"title":{},"body":{"classes/Grade.html":{}}}],["answer.service",{"_index":143,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{}}}],["answer/answer.module",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["answer/entities/answer.entity",{"_index":474,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["answer:16",{"_index":166,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:19",{"_index":167,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:22",{"_index":165,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer_grade",{"_index":1840,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["answercontroller",{"_index":113,"title":{"controllers/AnswerController.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"coverage.html":{}}}],["answergrade",{"_index":160,"title":{"classes/AnswerGrade.html":{}},"body":{"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answergraderepository",{"_index":171,"title":{"classes/AnswerGradeRepository.html":{}},"body":{"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"coverage.html":{}}}],["answermodule",{"_index":183,"title":{"modules/AnswerModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["answerrepository",{"_index":200,"title":{"classes/AnswerRepository.html":{}},"body":{"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"coverage.html":{}}}],["answers",{"_index":1181,"title":{},"body":{"classes/Grade.html":{}}}],["answerservice",{"_index":142,"title":{"injectables/AnswerService.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"coverage.html":{},"overview.html":{}}}],["answertype",{"_index":87,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"miscellaneous/enumerations.html":{}}}],["api",{"_index":1864,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":748,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{}}}],["apihideproperty",{"_index":554,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["apinotfoundresponse",{"_index":1333,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiokresponse",{"_index":803,"title":{},"body":{"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiproperty",{"_index":587,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{}}}],["apiproperty({type",{"_index":610,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["apitags",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('exam",{"_index":805,"title":{},"body":{"controllers/ExamController.html":{}}}],["apitags('examagreement",{"_index":760,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["apitags('examtarget",{"_index":897,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["apitags('question",{"_index":1346,"title":{},"body":{"controllers/QuestionController.html":{}}}],["apitags('questiongroup",{"_index":1412,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["apitags('upload",{"_index":1620,"title":{},"body":{"controllers/UploadController.html":{}}}],["apitags('user",{"_index":1648,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":952,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/functions.html":{}}}],["appability",{"_index":489,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":221,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applyglobals",{"_index":1772,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyglobals(app",{"_index":1851,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applyperflayer",{"_index":1773,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyperflayer(app",{"_index":1852,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applysecuritylayer",{"_index":1774,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applysecuritylayer(app",{"_index":1853,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appmodule",{"_index":227,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":1052,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["arr",{"_index":1856,"title":{},"body":{"miscellaneous/functions.html":{}}}],["array.from(map.values()).map((target",{"_index":930,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["arrayminsize",{"_index":590,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["arrayminsize(1",{"_index":598,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["async",{"_index":13,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"controllers/UploadController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["auth",{"_index":60,"title":{"classes/Auth.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["auth.constants",{"_index":1241,"title":{},"body":{"classes/LoginDto.html":{}}}],["auth.dto",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["auth.dto.ts",{"_index":540,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["auth.password",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FirebaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth.service.ts",{"_index":1060,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:14",{"_index":1081,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:27",{"_index":1075,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:31",{"_index":1070,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:37",{"_index":1079,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:44",{"_index":1073,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:9",{"_index":1067,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.ts",{"_index":273,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["auth.ts:15",{"_index":277,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:4",{"_index":276,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:6",{"_index":278,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth/auth.module",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["auth/dtos/create",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["auth/guards/jwt.guard",{"_index":1334,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["auth1619445806509",{"_index":271,"title":{"classes/Auth1619445806509.html":{}},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["authcontroller",{"_index":300,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":314,"title":{"classes/AuthDto.html":{}},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["authdto.login",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto:6",{"_index":544,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["authguard",{"_index":1199,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('jwt",{"_index":1201,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authmodule",{"_index":230,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["authrepository",{"_index":333,"title":{"classes/AuthRepository.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authservice",{"_index":307,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["auto_increment",{"_index":287,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["auxiliary.ts",{"_index":394,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["auxiliary.ts:4",{"_index":395,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["auxiliary.ts:6",{"_index":397,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["auxiliary.ts:60",{"_index":396,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["auxiliary/auxiliary.module",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["auxiliary1620477175799",{"_index":392,"title":{"classes/Auxiliary1620477175799.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["auxiliarymodule",{"_index":231,"title":{"modules/AuxiliaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuxiliaryModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["await",{"_index":43,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"controllers/UploadController.html":{},"injectables/UserService.html":{}}}],["b",{"_index":696,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["b.position",{"_index":698,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["baseentity",{"_index":1593,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["baserepository",{"_index":174,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["basic",{"_index":1800,"title":{},"body":{"dependencies.html":{}}}],["bcrypt",{"_index":31,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":56,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{}}}],["bcrypt.hash(createauthdto.password",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(process.env.admin_password",{"_index":58,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["bcryptjs",{"_index":32,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"dependencies.html":{}}}],["between",{"_index":777,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["between(start",{"_index":784,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["body",{"_index":138,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["bool",{"_index":664,"title":{},"body":{"classes/Exam.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["boolean",{"_index":550,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["bootstrap",{"_index":188,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brazilian",{"_index":648,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["break",{"_index":496,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["browse",{"_index":1900,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1897,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1147,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["buffer",{"_index":943,"title":{},"body":{"interfaces/FileSendDto.html":{},"injectables/FirebaseStorageService.html":{}}}],["build",{"_index":490,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"index.html":{}}}],["buildswaggerdoc",{"_index":1775,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["buildswaggerdoc(app",{"_index":1854,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cachecontrol",{"_index":1156,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["callback",{"_index":1859,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["callhandler",{"_index":1248,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["can(action.manage",{"_index":495,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.read",{"_index":498,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.update",{"_index":501,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["cannot(action.delete",{"_index":502,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["cascade",{"_index":890,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["case",{"_index":493,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["casl/ability",{"_index":473,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/QuestionGroupService.html":{},"dependencies.html":{}}}],["casl/casl.module",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{}}}],["caslabilityfactory",{"_index":462,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslaction",{"_index":478,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["caslmodule",{"_index":325,"title":{"modules/CaslModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["caslsubjects",{"_index":488,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["catch",{"_index":1092,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["catch((e",{"_index":927,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["cert",{"_index":1050,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":434,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTitle1621036457247.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["childentity",{"_index":169,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cli",{"_index":1963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloud",{"_index":1099,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["cls",{"_index":177,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["cluster_answermodule",{"_index":191,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_answermodule_providers",{"_index":192,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule",{"_index":449,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_exports",{"_index":451,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_providers",{"_index":450,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":507,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":509,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":508,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":521,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_exports",{"_index":523,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_providers",{"_index":522,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_exammodule",{"_index":812,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_exports",{"_index":813,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_providers",{"_index":814,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule",{"_index":1022,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule_exports",{"_index":1024,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule_providers",{"_index":1023,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebasemodule",{"_index":1126,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_exports",{"_index":1127,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_providers",{"_index":1128,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_inframodule",{"_index":1188,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_exports",{"_index":1189,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_imports",{"_index":1190,"title":{},"body":{"modules/InfraModule.html":{}}}],["cluster_loggermodule",{"_index":1231,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1232,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1233,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule",{"_index":1422,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule_imports",{"_index":1423,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["cluster_questiongroupmodule_providers",{"_index":1424,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1655,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1656,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1657,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":414,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/Subject.html":{}}}],["code_id",{"_index":418,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["codeid",{"_index":1578,"title":{},"body":{"classes/Subject.html":{}}}],["collection",{"_index":1118,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type",{"_index":1121,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type.ts",{"_index":1910,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["column",{"_index":103,"title":{},"body":{"classes/Answer.html":{},"classes/Auth.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["column({type",{"_index":82,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["command",{"_index":1895,"title":{},"body":{"index.html":{}}}],["completed",{"_index":1707,"title":{},"body":{"injectables/UserService.html":{}}}],["compose",{"_index":1884,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1798,"title":{},"body":{"dependencies.html":{}}}],["computador",{"_index":1882,"title":{},"body":{"index.html":{}}}],["config",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{}}}],["configmodule",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/InfraModule.html":{}}}],["configmodule.forroot",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('firebase",{"_index":1196,"title":{},"body":{"modules/InfraModule.html":{}}}],["configservice.get(databaseconfigkey",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(jwtconfigkey",{"_index":340,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(jwtconfigkey)!.secret",{"_index":1227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.error(e",{"_index":1704,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('create",{"_index":1705,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(partialuser",{"_index":1717,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":33,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"injectables/ExamTargetService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":436,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["constructor",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(firebase_options",{"_index":998,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(authrepository",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":1207,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(firebaseadmin",{"_index":1066,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{}}}],["constructor(options",{"_index":963,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(private",{"_index":148,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"injectables/FirebaseUploader.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["constructor(repository",{"_index":769,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["constructor(storageservice",{"_index":1163,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["constructor(userrepository",{"_index":1675,"title":{},"body":{"injectables/UserService.html":{}}}],["contenttype",{"_index":1145,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["context",{"_index":1250,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["controller",{"_index":112,"title":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('answer",{"_index":147,"title":{},"body":{"controllers/AnswerController.html":{}}}],["controller('auth",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('exam",{"_index":758,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{}}}],["controller('question",{"_index":1345,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["controller('upload",{"_index":1619,"title":{},"body":{"controllers/UploadController.html":{}}}],["controller('user",{"_index":1647,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":114,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{},"modules/InfraModule.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers/app.controller",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["controllers/auth.controller",{"_index":336,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/exam",{"_index":824,"title":{},"body":{"modules/ExamModule.html":{}}}],["controllers/question",{"_index":1426,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/question.controller",{"_index":1431,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/upload.controller",{"_index":1193,"title":{},"body":{"modules/InfraModule.html":{}}}],["controllers/user.controller",{"_index":1660,"title":{},"body":{"modules/UserModule.html":{}}}],["copy",{"_index":1391,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copy(copyquestiongroupdto",{"_index":1393,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copying",{"_index":1889,"title":{},"body":{"index.html":{}}}],["copyquestiongroupdto",{"_index":513,"title":{"classes/CopyQuestionGroupDto.html":{}},"body":{"classes/CopyQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["copytogroup",{"_index":1519,"title":{},"body":{"injectables/QuestionService.html":{}}}],["copytogroup(group",{"_index":1523,"title":{},"body":{"injectables/QuestionService.html":{}}}],["core/core.module",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["core/decorators/is",{"_index":649,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["core/entities/ff.entity",{"_index":108,"title":{},"body":{"classes/Answer.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["coremodule",{"_index":232,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["cors",{"_index":1937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corsconfig",{"_index":1739,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsconfigkey",{"_index":1740,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":1934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["course",{"_index":413,"title":{"classes/Course.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/Subject.html":{},"coverage.html":{}}}],["course.entity",{"_index":1584,"title":{},"body":{"classes/Subject.html":{}}}],["course_id",{"_index":419,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["course`(`id",{"_index":444,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["coverage",{"_index":1722,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":1891,"title":{},"body":{"index.html":{}}}],["cpf",{"_index":34,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["create",{"_index":117,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"miscellaneous/enumerations.html":{}}}],["create(@body",{"_index":150,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{}}}],["create(createanswerdto",{"_index":122,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["create(createexamdto",{"_index":787,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["create(createquestiongroupdto",{"_index":1397,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["createagreement",{"_index":742,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createagreement(createagreementdto",{"_index":743,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createagreementdto",{"_index":746,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createaliasresolver",{"_index":1459,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["createanswerdto",{"_index":123,"title":{"classes/CreateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["createauth",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauth(createauthdto",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauthdto",{"_index":354,"title":{"classes/CreateAuthDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["createauthdto.login",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["created_at",{"_index":281,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["createdat",{"_index":76,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdatecolumn",{"_index":94,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdto",{"_index":1071,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createexamagreementdto",{"_index":546,"title":{"classes/CreateExamAgreementDto.html":{}},"body":{"classes/CreateExamAgreementDto.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"coverage.html":{}}}],["createexamdto",{"_index":559,"title":{"classes/CreateExamDto.html":{}},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["createforuser",{"_index":465,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":466,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createparamdecorator",{"_index":1980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquestion",{"_index":582,"title":{"classes/CreateQuestion.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["createquestion(createquestiondto",{"_index":1310,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestiondto",{"_index":594,"title":{"classes/CreateQuestionDto.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["createquestiongroupdto",{"_index":627,"title":{"classes/CreateQuestionGroupDto.html":{}},"body":{"classes/CreateQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["createquestiongroupdto.examid",{"_index":1466,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["createquestions",{"_index":1307,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestions(groupid",{"_index":1312,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestionsdto",{"_index":597,"title":{"classes/CreateQuestionsDto.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["createquestionsdto.questions.map((dto",{"_index":1541,"title":{},"body":{"injectables/QuestionService.html":{}}}],["createstudent",{"_index":1280,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createstudent(createdto",{"_index":1282,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createuser",{"_index":1062,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuser(@body",{"_index":1649,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createdto",{"_index":1068,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["createuser(createuserdto",{"_index":1639,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["createuserbytype",{"_index":1670,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserbytype(createuserdto",{"_index":1678,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":636,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuserdto.enrollment",{"_index":1700,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":1701,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.type",{"_index":1708,"title":{},"body":{"injectables/UserService.html":{}}}],["credential",{"_index":1005,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["crypto",{"_index":1170,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["ctx",{"_index":1982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp(6",{"_index":284,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["customlogger",{"_index":654,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":1144,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":953,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/variables.html":{}}}],["database(url",{"_index":968,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["database/migrations/*.{js,ts",{"_index":1957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":1743,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseconfigkey",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseurl",{"_index":1001,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["date",{"_index":93,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["datetime",{"_index":402,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{},"classes/Period.html":{}}}],["datetime(6",{"_index":282,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["de",{"_index":1868,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":187,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":1054,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["decoded.email",{"_index":1090,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.email_verified",{"_index":1091,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.uid",{"_index":1089,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decorators",{"_index":79,"title":{},"body":{"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"controllers/UploadController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["decoratos/get",{"_index":1644,"title":{},"body":{"controllers/UserController.html":{}}}],["default",{"_index":274,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Student.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["default_port",{"_index":1776,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":66,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"injectables/FirebaseAdmin.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":132,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["delete(':id')@apiokresponse()@apinotfoundresponse",{"_index":1322,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["deleted_at",{"_index":286,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["deletedat",{"_index":77,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deletedatecolumn",{"_index":97,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deleteuser",{"_index":1063,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["deleteuser(uid",{"_index":1072,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["dependencies",{"_index":185,"title":{"dependencies.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":400,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["detectsubjecttype",{"_index":504,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["development",{"_index":1876,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["docker",{"_index":1883,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1723,"title":{},"body":{"coverage.html":{}}}],["down",{"_index":14,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["down(queryrunner",{"_index":16,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["drop",{"_index":298,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["dto",{"_index":841,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionService.html":{}}}],["dto/create",{"_index":144,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["dto/update",{"_index":146,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["dtos/auth.dto",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["dtos/copy",{"_index":1411,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["dtos/create",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["dtos/exam",{"_index":848,"title":{},"body":{"injectables/ExamService.html":{}}}],["dtos/file",{"_index":1172,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["dtos/login.dto",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/question",{"_index":1335,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["dtos/reorder",{"_index":1337,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["dtos/update",{"_index":802,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["dtos/user.dto",{"_index":1693,"title":{},"body":{"injectables/UserService.html":{}}}],["dynamicmodule",{"_index":1030,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["e",{"_index":1703,"title":{},"body":{"injectables/UserService.html":{}}}],["each",{"_index":573,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["ela",{"_index":620,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["em",{"_index":1875,"title":{},"body":{"index.html":{}}}],["email",{"_index":1056,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{}}}],["emailverified",{"_index":1057,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{}}}],["encoding",{"_index":944,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["end",{"_index":773,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["ended_at",{"_index":403,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["endedat",{"_index":562,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/Period.html":{}}}],["engine=innodb",{"_index":292,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["enrollment",{"_index":36,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"classes/UserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["enrollment.decorator",{"_index":650,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enrollment.decorator.ts",{"_index":1760,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["enrollmentlength",{"_index":1758,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":1953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/answer",{"_index":179,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entities/answer.entity",{"_index":207,"title":{},"body":{"classes/AnswerRepository.html":{}}}],["entities/auth.entity",{"_index":342,"title":{},"body":{"classes/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["entities/exam",{"_index":754,"title":{},"body":{"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{}}}],["entities/exam.entity",{"_index":804,"title":{},"body":{"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["entities/professor.entity",{"_index":1277,"title":{},"body":{"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{}}}],["entities/question",{"_index":1410,"title":{},"body":{"controllers/QuestionGroupController.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["entities/question.entity",{"_index":1338,"title":{},"body":{"controllers/QuestionController.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{}}}],["entities/student.entity",{"_index":1569,"title":{},"body":{"classes/StudentRepository.html":{},"injectables/StudentService.html":{}}}],["entities/user.entity",{"_index":1645,"title":{},"body":{"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":104,"title":{},"body":{"classes/Answer.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["entity('answer",{"_index":111,"title":{},"body":{"classes/Answer.html":{}}}],["entity('auth",{"_index":270,"title":{},"body":{"classes/Auth.html":{}}}],["entity('course",{"_index":535,"title":{},"body":{"classes/Course.html":{}}}],["entity('exam",{"_index":689,"title":{},"body":{"classes/Exam.html":{}}}],["entity('exam_agreement",{"_index":720,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["entity('exam_target",{"_index":871,"title":{},"body":{"classes/ExamTarget.html":{}}}],["entity('grade",{"_index":1186,"title":{},"body":{"classes/Grade.html":{}}}],["entity('period",{"_index":1266,"title":{},"body":{"classes/Period.html":{}}}],["entity('subject",{"_index":1585,"title":{},"body":{"classes/Subject.html":{}}}],["entity('user",{"_index":1634,"title":{},"body":{"classes/User.html":{}}}],["entity.{js,ts",{"_index":1955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entitylike",{"_index":853,"title":{},"body":{"injectables/ExamService.html":{}}}],["entityrepository",{"_index":175,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(answer",{"_index":208,"title":{},"body":{"classes/AnswerRepository.html":{}}}],["entityrepository(answergrade",{"_index":181,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entityrepository(auth",{"_index":343,"title":{},"body":{"classes/AuthRepository.html":{}}}],["entityrepository(exam",{"_index":829,"title":{},"body":{"classes/ExamRepository.html":{}}}],["entityrepository(examagreement",{"_index":765,"title":{},"body":{"classes/ExamAgreementRepository.html":{}}}],["entityrepository(examtarget",{"_index":906,"title":{},"body":{"classes/ExamTargetRepository.html":{}}}],["entityrepository(professor",{"_index":1278,"title":{},"body":{"classes/ProfessorRepository.html":{}}}],["entityrepository(question",{"_index":1517,"title":{},"body":{"classes/QuestionRepository.html":{}}}],["entityrepository(questiongroup",{"_index":1437,"title":{},"body":{"classes/QuestionGroupRepository.html":{}}}],["entityrepository(student",{"_index":1570,"title":{},"body":{"classes/StudentRepository.html":{}}}],["entityrepository(user",{"_index":1665,"title":{},"body":{"classes/UserRepository.html":{}}}],["enum",{"_index":88,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Professor.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["enum/user",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["enumerations",{"_index":1830,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/answer",{"_index":109,"title":{},"body":{"classes/Answer.html":{}}}],["enums/casl",{"_index":479,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["enums/exam",{"_index":579,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{}}}],["env",{"_index":52,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["env.example",{"_index":1890,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1887,"title":{},"body":{"index.html":{}}}],["err",{"_index":1093,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["error",{"_index":1972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error('admin_password",{"_index":51,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["error('needs",{"_index":1977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["essa",{"_index":617,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["esses",{"_index":1879,"title":{},"body":{"index.html":{}}}],["exam",{"_index":398,"title":{"classes/Exam.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateExamAgreementDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTitle1621036457247.html":{},"classes/Period.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam.constants",{"_index":851,"title":{},"body":{"injectables/ExamService.html":{}}}],["exam.controller",{"_index":818,"title":{},"body":{"modules/ExamModule.html":{}}}],["exam.dto",{"_index":801,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{}}}],["exam.dto.ts",{"_index":560,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["exam.dto.ts:16",{"_index":575,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:20",{"_index":567,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:24",{"_index":570,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:28",{"_index":569,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:32",{"_index":566,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:37",{"_index":574,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.entity",{"_index":719,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["exam.period",{"_index":1268,"title":{},"body":{"classes/Period.html":{}}}],["exam.service",{"_index":800,"title":{},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{}}}],["exam.targets",{"_index":857,"title":{},"body":{"injectables/ExamService.html":{}}}],["exam.ts",{"_index":701,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam.ts:10",{"_index":703,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:4",{"_index":702,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:6",{"_index":704,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam/entities/exam",{"_index":476,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/entities/exam.entity",{"_index":475,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/enums/exam",{"_index":1371,"title":{},"body":{"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["exam/exam.module",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{}}}],["exam1620478273991",{"_index":699,"title":{"classes/Exam1620478273991.html":{}},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam_agreement",{"_index":422,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["exam_id",{"_index":431,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{}}}],["exam_not_found",{"_index":850,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam_target",{"_index":881,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam_target_id",{"_index":886,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam_target`(`id",{"_index":892,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam_targets_exam_target",{"_index":885,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam`(`id",{"_index":440,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{}}}],["examagreement",{"_index":74,"title":{"classes/ExamAgreement.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"coverage.html":{}}}],["examagreement.ts",{"_index":725,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["examagreement.ts:21",{"_index":727,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement.ts:4",{"_index":726,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement.ts:6",{"_index":728,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement1622332886234",{"_index":723,"title":{"classes/ExamAgreement1622332886234.html":{}},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["examagreementanonymousdefault.ts",{"_index":735,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["examagreementanonymousdefault.ts:13",{"_index":737,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault.ts:5",{"_index":736,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault.ts:7",{"_index":738,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault1622334780336",{"_index":733,"title":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["examagreementcontroller",{"_index":739,"title":{"controllers/ExamAgreementController.html":{}},"body":{"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examagreementnotfinished",{"_index":503,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["examagreementrepository",{"_index":762,"title":{"classes/ExamAgreementRepository.html":{}},"body":{"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examagreements",{"_index":1270,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["examagreementservice",{"_index":755,"title":{"injectables/ExamAgreementService.html":{}},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"coverage.html":{},"overview.html":{}}}],["examcontroller",{"_index":785,"title":{"controllers/ExamController.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examid",{"_index":516,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ExamAgreement.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["exammodule",{"_index":233,"title":{"modules/ExamModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["examples",{"_index":898,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["examrepository",{"_index":819,"title":{"classes/ExamRepository.html":{}},"body":{"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["exams",{"_index":1257,"title":{},"body":{"classes/Period.html":{}}}],["examservice",{"_index":799,"title":{"injectables/ExamService.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"overview.html":{}}}],["examservice.relations",{"_index":862,"title":{},"body":{"injectables/ExamService.html":{}}}],["examstatus",{"_index":672,"title":{},"body":{"classes/Exam.html":{},"miscellaneous/enumerations.html":{}}}],["examtarget",{"_index":674,"title":{"classes/ExamTarget.html":{}},"body":{"classes/Exam.html":{},"classes/ExamTarget.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["examtarget.ts",{"_index":874,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examtarget.ts:30",{"_index":876,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget.ts:6",{"_index":875,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget.ts:8",{"_index":877,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget1622326106015",{"_index":872,"title":{"classes/ExamTarget1622326106015.html":{}},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{}}}],["examtargetcontroller",{"_index":817,"title":{"controllers/ExamTargetController.html":{}},"body":{"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["examtargetmanagerdto",{"_index":847,"title":{"interfaces/ExamTargetManagerDto.html":{}},"body":{"injectables/ExamService.html":{},"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["examtargetrepository",{"_index":821,"title":{"classes/ExamTargetRepository.html":{}},"body":{"modules/ExamModule.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["examtargetservice",{"_index":815,"title":{"injectables/ExamTargetService.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{},"overview.html":{}}}],["examtargettype",{"_index":571,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"miscellaneous/enumerations.html":{}}}],["examtitle.ts",{"_index":933,"title":{},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["examtitle.ts:10",{"_index":935,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle.ts:4",{"_index":934,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle.ts:6",{"_index":936,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle1621036457247",{"_index":931,"title":{"classes/ExamTitle1621036457247.html":{}},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["executioncontext",{"_index":1246,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":1991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":38,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":190,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":1616,"title":{},"body":{"controllers/UploadController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1609,"title":{},"body":{"controllers/UploadController.html":{}}}],["extends",{"_index":71,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/AuthRepository.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTargetRepository.html":{},"classes/FFEntity.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"classes/Grade.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":1215,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":471,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["factories/casl",{"_index":511,"title":{},"body":{"modules/CaslModule.html":{}}}],["false",{"_index":665,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/FirebaseStorageService.html":{},"injectables/JwtStrategy.html":{},"classes/QuestionGroup.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":1862,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fcm",{"_index":1101,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["ff",{"_index":1871,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ff.uneb.br",{"_index":1990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ffentity",{"_index":72,"title":{"classes/FFEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"coverage.html":{}}}],["ffentity:10",{"_index":678,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/User.html":{}}}],["ffentity:13",{"_index":680,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/User.html":{}}}],["ffentity:16",{"_index":679,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/User.html":{}}}],["ffentity:6",{"_index":92,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.publicurl",{"_index":1159,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file.save(data",{"_index":1153,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["filedto",{"_index":1168,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["filedto.buffer",{"_index":1178,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["filedto.mimetype",{"_index":1179,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["fileinterceptor",{"_index":1614,"title":{},"body":{"controllers/UploadController.html":{}}}],["filesenddto",{"_index":940,"title":{"interfaces/FileSendDto.html":{}},"body":{"interfaces/FileSendDto.html":{},"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{},"coverage.html":{}}}],["find",{"_index":1308,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find(@query",{"_index":1351,"title":{},"body":{"controllers/QuestionController.html":{}}}],["find(finddto",{"_index":1315,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto",{"_index":1336,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto.ts",{"_index":1358,"title":{},"body":{"classes/QuestionFindDto.html":{},"coverage.html":{}}}],["find.dto.ts:6",{"_index":1360,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["findall",{"_index":118,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["findauth",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["findauth(authdto",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["finddto",{"_index":1318,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["finddto.groupid",{"_index":1544,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findone",{"_index":119,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["findone(@param('id",{"_index":154,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["findone(id",{"_index":127,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["findone(userdto",{"_index":1284,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["findspecializeduser",{"_index":1671,"title":{},"body":{"injectables/UserService.html":{}}}],["findspecializeduser(userdto",{"_index":1680,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser",{"_index":1672,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(userdto",{"_index":1682,"title":{},"body":{"injectables/UserService.html":{}}}],["firebase",{"_index":995,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["firebase.app.app",{"_index":990,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.appoptions",{"_index":1008,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.auth.auth",{"_index":967,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.createrequest",{"_index":1069,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.updaterequest",{"_index":1078,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.credential.cert(options.cert",{"_index":1006,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.database.database",{"_index":972,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.firestore.collectionreference",{"_index":1912,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["firebase.firestore.firestore",{"_index":975,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{}}}],["firebase.initializeapp",{"_index":1000,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.instanceid.instanceid",{"_index":977,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.machinelearning.machinelearning",{"_index":979,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.messaging.messaging",{"_index":981,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingoptions",{"_index":1107,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingpayload",{"_index":1106,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.projectmanagement.projectmanagement",{"_index":983,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.remoteconfig.remoteconfig",{"_index":985,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.securityrules.securityrules",{"_index":987,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.serviceaccount",{"_index":1051,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["firebase.storage.storage",{"_index":989,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{}}}],["firebase_admin",{"_index":1769,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebase_bucket",{"_index":1978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebase_options",{"_index":996,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebaseadmin",{"_index":948,"title":{"injectables/FirebaseAdmin.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{},"overview.html":{}}}],["firebaseadmin.auth",{"_index":1086,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseadmin.firestore",{"_index":1123,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firebaseadmin.messaging",{"_index":1110,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebaseadmin.storage",{"_index":1151,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["firebaseadminmodule",{"_index":1021,"title":{"modules/FirebaseAdminModule.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules.html":{},"overview.html":{}}}],["firebaseadminmodule.forroot(options",{"_index":1138,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseadminmodule.forrootasync(options",{"_index":1139,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseasyncmoduleoptions",{"_index":1033,"title":{"interfaces/FirebaseAsyncModuleOptions.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["firebaseauth",{"_index":1061,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseauthdecodedtoken",{"_index":1053,"title":{"interfaces/FirebaseAuthDecodedToken.html":{}},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["firebaseauthservice",{"_index":1058,"title":{"injectables/FirebaseAuthService.html":{}},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebasecloudmessagingservice",{"_index":1098,"title":{"injectables/FirebaseCloudMessagingService.html":{}},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebaseconfig",{"_index":1745,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasefirestorecollection",{"_index":1119,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firebasefirestoreservice",{"_index":1112,"title":{"injectables/FirebaseFirestoreService.html":{}},"body":{"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["firebasemodule",{"_index":1125,"title":{"modules/FirebaseModule.html":{}},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["firebasemodule.forrootasync",{"_index":1195,"title":{},"body":{"modules/InfraModule.html":{}}}],["firebasemoduleoptions",{"_index":964,"title":{"interfaces/FirebaseModuleOptions.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasestorageservice",{"_index":1136,"title":{"injectables/FirebaseStorageService.html":{}},"body":{"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["firebaseuploader",{"_index":1160,"title":{"injectables/FirebaseUploader.html":{}},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"coverage.html":{}}}],["firestore",{"_index":954,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firestore.service.ts",{"_index":1113,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"coverage.html":{}}}],["firestore.service.ts:14",{"_index":1117,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firestore.service.ts:8",{"_index":1115,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["fk_1d110bd5138b275a2ea2944e290",{"_index":439,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_20bfb4e7c97aa20956be86c6beb",{"_index":730,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["fk_3b2789ae1c494ff1bf8dd4d4607",{"_index":433,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["fk_4a22969058fa5105ad6bee583f1",{"_index":889,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["fk_7bdc7fbb138980e5471e2a19366",{"_index":732,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["fk_af1604ea5493f65a6c8d70d98ed",{"_index":891,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["fk_b472107b61171823120f069fd50",{"_index":445,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_b9db72ddc93f196bf9d79132171",{"_index":443,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_ba483ad17eb41fb181aa3a77d4f",{"_index":441,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_d35fb46683694975ba85bcd804e",{"_index":447,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["following",{"_index":1894,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":1212,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["foreign",{"_index":432,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["form",{"_index":1863,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fornecida",{"_index":619,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["forroot",{"_index":1027,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forroot(options",{"_index":1028,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync",{"_index":1031,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync(options",{"_index":1032,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forwardref",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QuestionService.html":{},"modules/UserModule.html":{}}}],["found",{"_index":1970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fullfil",{"_index":1885,"title":{},"body":{"index.html":{}}}],["function",{"_index":1048,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1845,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":716,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["generated('uuid",{"_index":721,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["generated('uuid')@column({unique",{"_index":713,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["get(':id",{"_index":129,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get(':id')@apiokresponse({type",{"_index":1319,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get('ping",{"_index":224,"title":{},"body":{"controllers/AppController.html":{}}}],["get('target",{"_index":1415,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["get('target')@apiokresponse({type",{"_index":1401,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["get()@apiokresponse({type",{"_index":790,"title":{},"body":{"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get()@useguards(jwtguard",{"_index":1642,"title":{},"body":{"controllers/UserController.html":{}}}],["getcollection",{"_index":1114,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getcollection(collection",{"_index":1116,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getname",{"_index":991,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["getnextposition",{"_index":1520,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getnextposition(groupid",{"_index":1529,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getoptions",{"_index":993,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["gettarget",{"_index":1392,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["gettargetmap",{"_index":915,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["gettargets",{"_index":894,"title":{},"body":{"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"injectables/QuestionGroupService.html":{}}}],["getting",{"_index":1860,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":750,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuser(@getuser",{"_index":1651,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(uid",{"_index":1074,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["getuser(user",{"_index":1641,"title":{},"body":{"controllers/UserController.html":{}}}],["global",{"_index":526,"title":{},"body":{"modules/CoreModule.html":{},"modules/FirebaseModule.html":{}}}],["grade",{"_index":163,"title":{"classes/Grade.html":{}},"body":{"classes/AnswerGrade.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Subject.html":{},"coverage.html":{}}}],["grade.entity",{"_index":180,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Subject.html":{}}}],["grade.entity.ts",{"_index":162,"title":{},"body":{"classes/AnswerGrade.html":{},"coverage.html":{}}}],["grade.entity.ts:8",{"_index":164,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["grade.period",{"_index":1267,"title":{},"body":{"classes/Period.html":{}}}],["grade.repository",{"_index":203,"title":{},"body":{"modules/AnswerModule.html":{}}}],["grade.repository.ts",{"_index":173,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["grade.subject",{"_index":1586,"title":{},"body":{"classes/Subject.html":{}}}],["grades",{"_index":1258,"title":{},"body":{"classes/Period.html":{},"classes/Subject.html":{}}}],["group",{"_index":690,"title":{},"body":{"classes/Exam.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["group.constants",{"_index":1455,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.constants.ts",{"_index":1778,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group.controller",{"_index":1427,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.controller.ts",{"_index":1390,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group.controller.ts:38",{"_index":1398,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:46",{"_index":1399,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:52",{"_index":1402,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:59",{"_index":1400,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:66",{"_index":1408,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:76",{"_index":1396,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:84",{"_index":1406,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:93",{"_index":1403,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.dto",{"_index":1409,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["group.dto.ts",{"_index":515,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:12",{"_index":631,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:16",{"_index":628,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:20",{"_index":630,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:24",{"_index":629,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:5",{"_index":520,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["group.dto.ts:8",{"_index":519,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{}}}],["group.dto.ts:9",{"_index":1563,"title":{},"body":{"classes/ReorderQuestionGroupDto.html":{}}}],["group.entity",{"_index":484,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["group.entity.ts",{"_index":1361,"title":{},"body":{"classes/QuestionGroup.html":{},"coverage.html":{}}}],["group.entity.ts:17",{"_index":1369,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:20",{"_index":1362,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:23",{"_index":1365,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:27",{"_index":1367,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:30",{"_index":1364,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:33",{"_index":1368,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:36",{"_index":1363,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:39",{"_index":1370,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.exam",{"_index":691,"title":{},"body":{"classes/Exam.html":{}}}],["group.module",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["group.module.ts",{"_index":1425,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.position",{"_index":1486,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.questions",{"_index":1477,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.repository",{"_index":1430,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["group.repository.ts",{"_index":1436,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group.service",{"_index":1343,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionService.html":{}}}],["group.service.ts",{"_index":1439,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group.service.ts:119",{"_index":1449,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:142",{"_index":1446,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:147",{"_index":1447,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:20",{"_index":1441,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:28",{"_index":1451,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:39",{"_index":1443,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:52",{"_index":1444,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:56",{"_index":1445,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:70",{"_index":1452,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:95",{"_index":1442,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group/controllers/question",{"_index":1389,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts",{"_index":1306,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts:34",{"_index":1311,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:42",{"_index":1314,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:54",{"_index":1317,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:61",{"_index":1321,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:68",{"_index":1331,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:77",{"_index":1327,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:86",{"_index":1323,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/dtos/copy",{"_index":514,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dtos/create",{"_index":583,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"coverage.html":{}}}],["group/dtos/question",{"_index":1357,"title":{},"body":{"classes/QuestionFindDto.html":{},"coverage.html":{}}}],["group/dtos/reorder",{"_index":1558,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dtos/update",{"_index":1604,"title":{},"body":{"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group/entities/question",{"_index":483,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"coverage.html":{}}}],["group/entities/question.entity.ts",{"_index":1294,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["group/entities/question.entity.ts:11",{"_index":1299,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:14",{"_index":1298,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:17",{"_index":1302,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:20",{"_index":1297,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:24",{"_index":1301,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:27",{"_index":1296,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:8",{"_index":1303,"title":{},"body":{"classes/Question.html":{}}}],["group/question",{"_index":250,"title":{},"body":{"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/question.constants.ts",{"_index":1779,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/repositories/question",{"_index":1435,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group/repositories/question.repository.ts",{"_index":1516,"title":{},"body":{"classes/QuestionRepository.html":{},"coverage.html":{}}}],["group/services/question",{"_index":1438,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group/services/question.service.ts",{"_index":1518,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["group/services/question.service.ts:110",{"_index":1532,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:131",{"_index":1531,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:24",{"_index":1522,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:32",{"_index":1530,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:39",{"_index":1525,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:51",{"_index":1526,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:64",{"_index":1527,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:75",{"_index":1528,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:85",{"_index":1533,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:98",{"_index":1524,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group_id",{"_index":435,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["groupid",{"_index":517,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["groupidpositionmap",{"_index":1482,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupidpositionmap.get(group.id",{"_index":1487,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupids",{"_index":1480,"title":{},"body":{"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["groupids.map((id",{"_index":1483,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groups",{"_index":661,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["groups.map(async",{"_index":1485,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupservice",{"_index":1521,"title":{},"body":{"injectables/QuestionService.html":{}}}],["guards/jwt.guard",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{}}}],["gzip",{"_index":1154,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["hasfinishedexam",{"_index":707,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["helmet",{"_index":1806,"title":{},"body":{"dependencies.html":{}}}],["helpers/create",{"_index":1694,"title":{},"body":{"injectables/UserService.html":{}}}],["hooked",{"_index":178,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["host",{"_index":1942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":40,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":1724,"title":{},"body":{"coverage.html":{}}}],["idx_2b38bb607ef3e86920e9bd0163",{"_index":426,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_31ef2b4d30675d0c15056b7f6e",{"_index":297,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["idx_4a22969058fa5105ad6bee583f",{"_index":887,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_5cf4963ae12285cda6432d5a3a",{"_index":416,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_914f18c8fbe52b10a6b276bc0c",{"_index":295,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_92374adc6b583e8cf659977e48",{"_index":420,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_952e252e7470ff78b18a9ec786",{"_index":289,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_988f784cc581e38b7ed4943006",{"_index":882,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_a6235b5ef0939d8deaad755fc8",{"_index":296,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_af1604ea5493f65a6c8d70d98e",{"_index":888,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["ignoreexpiration",{"_index":1225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image_alt",{"_index":1385,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["image_url",{"_index":1384,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["imagealt",{"_index":601,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["imageurl",{"_index":602,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseUploader.html":{},"injectables/PayloadInterceptor.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["import",{"_index":29,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":204,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["in(groupids",{"_index":1481,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["in(questionids",{"_index":1553,"title":{},"body":{"injectables/QuestionService.html":{}}}],["inactive",{"_index":409,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index('ix_question_group_position",{"_index":1373,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["index('ix_question_group_position')@column({type",{"_index":1366,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["index('ix_question_position",{"_index":1304,"title":{},"body":{"classes/Question.html":{}}}],["index('ix_question_position')@column({type",{"_index":1300,"title":{},"body":{"classes/Question.html":{}}}],["infersubjects",{"_index":472,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["infra.constants",{"_index":1618,"title":{},"body":{"controllers/UploadController.html":{}}}],["infra/infra.module",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["inframodule",{"_index":234,"title":{"modules/InfraModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["inherited",{"_index":91,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["initialize",{"_index":1892,"title":{},"body":{"index.html":{}}}],["inject",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{},"injectables/QuestionService.html":{}}}],["inject(forwardref",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QuestionService.html":{}}}],["injectable",{"_index":209,"title":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":210,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["injectrepository(authrepository",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(examagreementrepository",{"_index":780,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["injectrepository(examrepository",{"_index":852,"title":{},"body":{"injectables/ExamService.html":{}}}],["injectrepository(examtargetrepository",{"_index":919,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["injectrepository(professorrepository",{"_index":1290,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["injectrepository(questiongrouprepository",{"_index":1460,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["injectrepository(questionrepository",{"_index":1536,"title":{},"body":{"injectables/QuestionService.html":{}}}],["injectrepository(studentrepository",{"_index":1575,"title":{},"body":{"injectables/StudentService.html":{}}}],["injectrepository(userrepository",{"_index":1697,"title":{},"body":{"injectables/UserService.html":{}}}],["insert",{"_index":59,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["instalação",{"_index":1872,"title":{},"body":{"index.html":{}}}],["instanceid",{"_index":955,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["int",{"_index":83,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Subject.html":{}}}],["intercept",{"_index":1244,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["intercept(context",{"_index":1245,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["interceptors/payload.interceptor",{"_index":527,"title":{},"body":{"modules/CoreModule.html":{}}}],["interface",{"_index":901,"title":{"interfaces/ExamTargetManagerDto.html":{},"interfaces/FileSendDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{}},"body":{"interfaces/ExamTargetManagerDto.html":{},"interfaces/FileSendDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["interfaces",{"_index":902,"title":{},"body":{"interfaces/ExamTargetManagerDto.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"overview.html":{}}}],["interfaces/firebase",{"_index":1083,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{}}}],["interfaces/jwt",{"_index":1219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["interfaces/user",{"_index":1696,"title":{},"body":{"injectables/UserService.html":{}}}],["isarray",{"_index":576,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isarray()@ispositive({each",{"_index":1560,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isarray()@validatenested({each",{"_index":632,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["isboolean",{"_index":557,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{}}}],["iscpf",{"_index":639,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdate",{"_index":577,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdate()@type(undefined",{"_index":568,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdefined",{"_index":591,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["isemail",{"_index":1238,"title":{},"body":{"classes/LoginDto.html":{}}}],["isenrollment",{"_index":641,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isenum",{"_index":578,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateUserDto.html":{}}}],["isenum(examtargettype",{"_index":581,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isenum(userrole",{"_index":643,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(usertype",{"_index":646,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty",{"_index":318,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/UserDto.html":{}}}],["isoptional",{"_index":558,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/QuestionFindDto.html":{}}}],["isoptional()@isarray()@isenum(examtargettype",{"_index":572,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isoptional()@isboolean",{"_index":565,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@isboolean()@type(undefined",{"_index":551,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["isoptional()@ispositive",{"_index":585,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@isstring()@isnotempty",{"_index":606,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["isoptional()@isurl",{"_index":608,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["ispositive",{"_index":518,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["ispositive()@isoptional",{"_index":1359,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["ispositive({each",{"_index":1562,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["isprod",{"_index":1741,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":319,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["isstring()@isnotempty",{"_index":316,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["isstring()@length(password_min",{"_index":541,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["issuer",{"_index":1989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isurl",{"_index":592,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{}}}],["item",{"_index":505,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":506,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["ix_question_group_position",{"_index":1515,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["ix_question_group_target",{"_index":880,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["ix_question_position",{"_index":1514,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["jointable",{"_index":685,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{}}}],["json",{"_index":1974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.parse(process.env.firebase_admin",{"_index":1979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt",{"_index":1218,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":1749,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfigkey",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":1223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":326,"title":{"injectables/JwtGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"injectables/JwtGuard.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtmodule",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":339,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmoduleoptions",{"_index":1213,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwtpayload",{"_index":1202,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":327,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":291,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["last",{"_index":1457,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["last(arr",{"_index":1855,"title":{},"body":{"miscellaneous/functions.html":{}}}],["last(questiongroup.exam.groups)?.position",{"_index":1464,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["last(questions)?.position",{"_index":1538,"title":{},"body":{"injectables/QuestionService.html":{}}}],["legend",{"_index":186,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1239,"title":{},"body":{"classes/LoginDto.html":{}}}],["length(password_min",{"_index":1242,"title":{},"body":{"classes/LoginDto.html":{}}}],["limit",{"_index":1803,"title":{},"body":{"dependencies.html":{}}}],["limit.config.ts",{"_index":1751,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["literal",{"_index":744,"title":{},"body":{"controllers/ExamAgreementController.html":{},"interfaces/SoftDeleteResult.html":{}}}],["load",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["loadtargetmap",{"_index":909,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["localmente",{"_index":1874,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":1808,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":656,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('bootstrap",{"_index":1969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger.service",{"_index":1235,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger/logger.module",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":235,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["logging",{"_index":1961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":61,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/UserService.html":{}}}],["login(@body",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto",{"_index":545,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["logindto",{"_index":303,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.login",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto:8",{"_index":543,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["lógica",{"_index":1867,"title":{},"body":{"index.html":{}}}],["machinelearning",{"_index":956,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["manage",{"_index":1842,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manager",{"_index":293,"title":{},"body":{"classes/Auth1619445806509.html":{},"miscellaneous/enumerations.html":{}}}],["manager.dto",{"_index":849,"title":{},"body":{"injectables/ExamService.html":{}}}],["manager.dto.ts",{"_index":904,"title":{},"body":{"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["manytomany",{"_index":686,"title":{},"body":{"classes/Exam.html":{}}}],["manytomany(undefined)@jointable",{"_index":675,"title":{},"body":{"classes/Exam.html":{}}}],["manytoone",{"_index":105,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{}}}],["manytoone(undefined",{"_index":80,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{}}}],["map",{"_index":922,"title":{},"body":{"injectables/ExamTargetService.html":{},"injectables/PayloadInterceptor.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["match",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1157,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"miscellaneous/variables.html":{}}}],["maxqueryexecutiontime",{"_index":1950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":1105,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["messaging",{"_index":957,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["messaging.service",{"_index":1133,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["messaging.service.ts",{"_index":1100,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"coverage.html":{}}}],["messaging.service.ts:12",{"_index":1108,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["messaging.service.ts:7",{"_index":1103,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["metadata",{"_index":1155,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["migrations",{"_index":1956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":1964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mimetype",{"_index":945,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["miscellaneous",{"_index":1829,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1877,"title":{},"body":{"index.html":{}}}],["module",{"_index":182,"title":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["modulemetadata",{"_index":1049,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["modules",{"_index":184,"title":{"modules.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["morgan",{"_index":1810,"title":{},"body":{"dependencies.html":{}}}],["mustfindauth",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindauth(authdto",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindspecializeduser",{"_index":1673,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfindspecializeduser(userdto",{"_index":1684,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser",{"_index":1674,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser(userdto",{"_index":1686,"title":{},"body":{"injectables/UserService.html":{}}}],["mysql",{"_index":1941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1812,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":22,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["naming",{"_index":1825,"title":{},"body":{"dependencies.html":{}}}],["namingstrategy",{"_index":1966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessário",{"_index":1878,"title":{},"body":{"index.html":{}}}],["needed",{"_index":1886,"title":{},"body":{"index.html":{}}}],["needs",{"_index":1973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["negócio",{"_index":1869,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1252,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["nestjs/common",{"_index":141,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"injectables/CustomLogger.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1790,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1599,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["nestjs/passport",{"_index":1200,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1615,"title":{},"body":{"controllers/UploadController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"classes/UpdateQuestionDto.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":199,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ProfessorService.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":50,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newexam",{"_index":833,"title":{},"body":{"injectables/ExamService.html":{}}}],["newexam(dto",{"_index":839,"title":{},"body":{"injectables/ExamService.html":{}}}],["next",{"_index":1247,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1255,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["notfoundexception",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["notfoundexception(authdto",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["null",{"_index":283,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAuthService.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["nullable",{"_index":84,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["number",{"_index":41,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"miscellaneous/variables.html":{}}}],["não",{"_index":613,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["object.values(examtargettype",{"_index":899,"title":{},"body":{"controllers/ExamTargetController.html":{},"injectables/QuestionGroupService.html":{}}}],["obrigatória",{"_index":615,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["observable",{"_index":1251,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["omittype",{"_index":588,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["omittype(createquestiondto",{"_index":596,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["onetomany",{"_index":106,"title":{},"body":{"classes/Answer.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":531,"title":{},"body":{"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["onetoone",{"_index":717,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["optional",{"_index":24,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":962,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{}}}],["options.databaseurl",{"_index":1002,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.imports",{"_index":1041,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.inject",{"_index":1043,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.interface",{"_index":1134,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["options.interface.ts",{"_index":1046,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["options.storagebucket",{"_index":1004,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.usefactory",{"_index":1042,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["optionssuccessstatus",{"_index":1935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["origin",{"_index":1737,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["origin(origin",{"_index":1858,"title":{},"body":{"miscellaneous/functions.html":{}}}],["originalname",{"_index":946,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["out",{"_index":195,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1901,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1786,"title":{"dependencies.html":{}},"body":{}}],["padrão",{"_index":626,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["padrão'})@isboolean()@isoptional",{"_index":623,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["para",{"_index":1865,"title":{},"body":{"index.html":{}}}],["param",{"_index":140,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["param('groupid",{"_index":1349,"title":{},"body":{"controllers/QuestionController.html":{}}}],["param('id",{"_index":809,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.db_port",{"_index":1949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.db_query_timeout",{"_index":1951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_max",{"_index":1999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_window_ms",{"_index":1997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseintpipe",{"_index":797,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["partialtype",{"_index":1598,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["partialtype(createanswerdto",{"_index":1601,"title":{},"body":{"classes/UpdateAnswerDto.html":{}}}],["partialtype(createexamdto",{"_index":1603,"title":{},"body":{"classes/UpdateExamDto.html":{}}}],["partialtype(createquestiondto",{"_index":1605,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["partialtype(createquestiongroupdto",{"_index":1606,"title":{},"body":{"classes/UpdateQuestionGroupDto.html":{}}}],["partialuser",{"_index":1716,"title":{},"body":{"injectables/UserService.html":{}}}],["partialuser.type",{"_index":1718,"title":{},"body":{"injectables/UserService.html":{}}}],["passport",{"_index":1217,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":1214,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":57,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["password_max",{"_index":542,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_min",{"_index":1240,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":139,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["patch(':id",{"_index":136,"title":{},"body":{"controllers/AnswerController.html":{}}}],["patch()@apiokresponse({type",{"_index":1326,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["path",{"_index":1149,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["path}/${randombytes(32).tostring('hex",{"_index":1177,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["payload",{"_index":1211,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":1220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":1204,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payload.uid",{"_index":1229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payloadinterceptor",{"_index":524,"title":{"injectables/PayloadInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"injectables/PayloadInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["period",{"_index":411,"title":{"classes/Period.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{},"injectables/ExamService.html":{},"classes/Grade.html":{},"classes/Period.html":{},"coverage.html":{}}}],["period.entity",{"_index":1185,"title":{},"body":{"classes/Grade.html":{}}}],["period_id",{"_index":410,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["period`(`id",{"_index":442,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["personal",{"_index":430,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/QuestionGroup.html":{}}}],["pick",{"_index":1047,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["picktype",{"_index":589,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{}}}],["picktype(createauthdto",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ping",{"_index":223,"title":{},"body":{"controllers/AppController.html":{}}}],["pode",{"_index":612,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["pong",{"_index":226,"title":{},"body":{"controllers/AppController.html":{}}}],["por",{"_index":622,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["port",{"_index":1948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["position",{"_index":1295,"title":{},"body":{"classes/Question.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{}}}],["post",{"_index":124,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["post(':groupid",{"_index":1348,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post(':groupid')@apiokresponse({type",{"_index":1313,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post()@apiokresponse({type",{"_index":788,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["post()@useinterceptors(undefined",{"_index":1610,"title":{},"body":{"controllers/UploadController.html":{}}}],["prefix",{"_index":116,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":290,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["primarygeneratedcolumn",{"_index":90,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["private",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["process.env.admin_password",{"_index":48,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["process.env.db_database",{"_index":1947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":1943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_logging",{"_index":1962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":1945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.firebase_admin",{"_index":1971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.firebase_bucket",{"_index":1976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":1987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["professor",{"_index":879,"title":{"classes/Professor.html":{}},"body":{"classes/ExamTarget1622326106015.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["professorrepository",{"_index":455,"title":{"classes/ProfessorRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"coverage.html":{}}}],["professorservice",{"_index":452,"title":{"injectables/ProfessorService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["programas",{"_index":1880,"title":{},"body":{"index.html":{}}}],["projectmanagement",{"_index":958,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["promise",{"_index":26,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"classes/UploaderService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":924,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["promise.all",{"_index":1484,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["promise.all(targets.map(target",{"_index":883,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["properties",{"_index":73,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"classes/Grade.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{}}}],["propriedade",{"_index":618,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["provide",{"_index":1038,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/InfraModule.html":{}}}],["provider",{"_index":1035,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["providers",{"_index":189,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/firebase",{"_index":1036,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["public",{"_index":12,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseStorageService.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["publicfile",{"_index":1146,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["put",{"_index":798,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":795,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put(':id')@apiokresponse({type",{"_index":1330,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put()@apiokresponse({type",{"_index":1394,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["qb",{"_index":1543,"title":{},"body":{"injectables/QuestionService.html":{}}}],["qb.where(`${qb.alias}.groupid",{"_index":1545,"title":{},"body":{"injectables/QuestionService.html":{}}}],["query",{"_index":1332,"title":{},"body":{"controllers/QuestionController.html":{}}}],["queryrunner",{"_index":17,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.manager.query",{"_index":44,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.manager.query('delete",{"_index":65,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.query",{"_index":279,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["queryrunner.query(\"alter",{"_index":705,"title":{},"body":{"classes/Exam1620478273991.html":{},"classes/ExamTitle1621036457247.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query(\"create",{"_index":1383,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query(\"drop",{"_index":1387,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query('alter",{"_index":448,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["queryrunner.query('drop",{"_index":299,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{}}}],["queryrunner.query('insert",{"_index":884,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["question",{"_index":249,"title":{"classes/Question.html":{}},"body":{"modules/AppModule.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["question.constants",{"_index":1535,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.dto",{"_index":595,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{}}}],["question.dto.ts",{"_index":600,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:14",{"_index":625,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:18",{"_index":609,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:23",{"_index":607,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:32",{"_index":624,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:35",{"_index":605,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:5",{"_index":1559,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.dto.ts:9",{"_index":1561,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.entity",{"_index":1372,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["question.group",{"_index":1374,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["question.groupid",{"_index":1547,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.position",{"_index":1548,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.service",{"_index":1456,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["question_group",{"_index":428,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["question_group`(`id",{"_index":438,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["questioncontroller",{"_index":1305,"title":{"controllers/QuestionController.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questionfinddto",{"_index":1316,"title":{"classes/QuestionFindDto.html":{}},"body":{"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questiongroup",{"_index":481,"title":{"classes/QuestionGroup.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongroup.exam",{"_index":1461,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.examid",{"_index":1470,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.position",{"_index":1463,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.ts",{"_index":1379,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroup.ts:12",{"_index":1381,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:4",{"_index":1380,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:6",{"_index":1382,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup1620179231630",{"_index":1377,"title":{"classes/QuestionGroup1620179231630.html":{}},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroupcontroller",{"_index":1388,"title":{"controllers/QuestionGroupController.html":{}},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questiongroupmodule",{"_index":236,"title":{"modules/QuestionGroupModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["questiongroupnotfound",{"_index":1454,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongrouprepository",{"_index":1428,"title":{"classes/QuestionGroupRepository.html":{}},"body":{"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["questiongroupservice",{"_index":1341,"title":{"injectables/QuestionGroupService.html":{}},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["questiongrouptarget.ts",{"_index":1492,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["questiongrouptarget.ts:25",{"_index":1494,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget.ts:4",{"_index":1493,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget.ts:6",{"_index":1495,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget1621992475274",{"_index":1490,"title":{"classes/QuestionGroupTarget1621992475274.html":{}},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["questiongroup})@apinotfoundresponse",{"_index":1395,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["questionids",{"_index":1552,"title":{},"body":{"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["questionids.map((id",{"_index":1555,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionimage.ts",{"_index":1498,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionimage.ts:14",{"_index":1500,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:4",{"_index":1499,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:6",{"_index":1501,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage1620477869366",{"_index":1496,"title":{"classes/QuestionImage1620477869366.html":{}},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionnotfound",{"_index":1534,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionposition.ts",{"_index":1504,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionposition.ts:11",{"_index":1506,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:4",{"_index":1505,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:6",{"_index":1507,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition1620488935141",{"_index":1502,"title":{"classes/QuestionPosition1620488935141.html":{}},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionpositionidx.ts",{"_index":1510,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["questionpositionidx.ts:14",{"_index":1512,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx.ts:4",{"_index":1511,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx.ts:6",{"_index":1513,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx1620563708532",{"_index":1508,"title":{"classes/QuestionPositionIdx1620563708532.html":{}},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["questionpositionmap",{"_index":1554,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionpositionmap.get(question.id",{"_index":1556,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionrepository",{"_index":1432,"title":{"classes/QuestionRepository.html":{}},"body":{"modules/QuestionGroupModule.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questions",{"_index":599,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["questions.dto",{"_index":1344,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["questions.dto.ts",{"_index":584,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"coverage.html":{}}}],["questions.dto.ts:20",{"_index":586,"title":{},"body":{"classes/CreateQuestion.html":{}}}],["questions.dto.ts:29",{"_index":635,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["questions.map((question",{"_index":1551,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionservice",{"_index":1339,"title":{"injectables/QuestionService.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["question})@apinotfoundresponse",{"_index":1320,"title":{},"body":{"controllers/QuestionController.html":{}}}],["questão",{"_index":611,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["randombytes",{"_index":1169,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["rate",{"_index":1802,"title":{},"body":{"dependencies.html":{}}}],["ratelimit",{"_index":2001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ratelimitconfig",{"_index":1752,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ratelimitconfigkey",{"_index":1753,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["raw",{"_index":1565,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["read",{"_index":1843,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":149,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["readonlymap",{"_index":914,"title":{},"body":{"injectables/ExamTargetService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["record",{"_index":1591,"title":{},"body":{"interfaces/SwaggerOptions.html":{}}}],["references",{"_index":437,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["reflect",{"_index":1816,"title":{},"body":{"dependencies.html":{}}}],["regexp",{"_index":1929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp('^http://localhost:3000",{"_index":1931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp('^http://localhost:5000",{"_index":1932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp('^https://(.*\\\\.|)herokuapp.com",{"_index":1930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras",{"_index":1933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(ratelimitconfigkey",{"_index":1995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regular",{"_index":294,"title":{},"body":{"classes/Auth1619445806509.html":{},"miscellaneous/enumerations.html":{}}}],["reject",{"_index":925,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["reject(e",{"_index":928,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["relations",{"_index":832,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["remoteconfig",{"_index":959,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["remove",{"_index":120,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["remove(@param('id",{"_index":158,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["remove(id",{"_index":131,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["removes",{"_index":220,"title":{},"body":{"injectables/AnswerService.html":{}}}],["reorder",{"_index":1309,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorder(reorderquesitondto",{"_index":1324,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorder(reorderquestiongroupdto",{"_index":1404,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["reorder(undefined",{"_index":1448,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorderquesitondto",{"_index":1328,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorderquestiondto",{"_index":1325,"title":{"classes/ReorderQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"coverage.html":{}}}],["reorderquestiongroupdto",{"_index":1405,"title":{"classes/ReorderQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["repositories/answer",{"_index":202,"title":{},"body":{"modules/AnswerModule.html":{}}}],["repositories/answer.repository",{"_index":201,"title":{},"body":{"modules/AnswerModule.html":{}}}],["repositories/auth.repository",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["repositories/exam",{"_index":778,"title":{},"body":{"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["repositories/exam.repository",{"_index":820,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{}}}],["repositories/professor.repository",{"_index":456,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{}}}],["repositories/question",{"_index":1429,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["repositories/question.repository",{"_index":1433,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionService.html":{}}}],["repositories/student.repository",{"_index":458,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{}}}],["repositories/user.repository",{"_index":1662,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":771,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["request",{"_index":1983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":1985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('bcryptjs",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["require('lodash",{"_index":918,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["required",{"_index":603,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["reset",{"_index":194,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve(_.clonedeep(this._targetmap",{"_index":926,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["result",{"_index":39,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.interface",{"_index":846,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{}}}],["result.interface.ts",{"_index":1564,"title":{},"body":{"interfaces/SoftDeleteResult.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["result.raw.affectedrows",{"_index":868,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["result?.length",{"_index":47,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["results",{"_index":68,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":151,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1818,"title":{},"body":{"dependencies.html":{}}}],["rodar",{"_index":1873,"title":{},"body":{"index.html":{}}}],["role",{"_index":63,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["role.enum",{"_index":487,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["role.enum.ts",{"_index":1838,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["runontransactioncomplete",{"_index":1692,"title":{},"body":{"injectables/UserService.html":{}}}],["runontransactioncomplete((e",{"_index":1702,"title":{},"body":{"injectables/UserService.html":{}}}],["rxjs",{"_index":1253,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1254,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["salt",{"_index":55,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{}}}],["schema",{"_index":895,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["scope",{"_index":657,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["scope.transient",{"_index":658,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["score",{"_index":75,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{}}}],["se",{"_index":616,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["secret",{"_index":1986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["securityrules",{"_index":960,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["select",{"_index":45,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/UserService.html":{}}}],["send.dto",{"_index":1173,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["send.dto.ts",{"_index":942,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["sendtodevice",{"_index":1102,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["sendtodevice(token",{"_index":1104,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["senhaforte",{"_index":2003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ser",{"_index":614,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["service",{"_index":1621,"title":{},"body":{"controllers/UploadController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["services",{"_index":1137,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["services/exam",{"_index":756,"title":{},"body":{"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["services/firebase",{"_index":1132,"title":{},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{}}}],["services/professor.service",{"_index":459,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/question",{"_index":1342,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{}}}],["services/question.service",{"_index":1340,"title":{},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{}}}],["services/student.service",{"_index":460,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/uploader.service",{"_index":1194,"title":{},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{}}}],["set",{"_index":54,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["setexamandposition",{"_index":1440,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["setexamandposition(questiongroup",{"_index":1450,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["seu",{"_index":1881,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":1988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sistema",{"_index":1870,"title":{},"body":{"index.html":{}}}],["size",{"_index":947,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["snakenamingstrategy",{"_index":1967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["softdeleteresult",{"_index":844,"title":{"interfaces/SoftDeleteResult.html":{}},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["sort((a",{"_index":1489,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["sortitems",{"_index":662,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["specialized",{"_index":1668,"title":{},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/.../1620299822480",{"_index":1914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1622326106015",{"_index":1927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../answer",{"_index":1831,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../casl",{"_index":1833,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../core.constants.ts",{"_index":1916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":1850,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1847,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../database.config.ts",{"_index":1915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exam",{"_index":1835,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../exam.constants.ts",{"_index":1917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase",{"_index":1909,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../firebase.config.ts",{"_index":1919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase.constants.ts",{"_index":1918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":1920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":1913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../infra.constants.ts",{"_index":1928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1848,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.config.ts",{"_index":1921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../last.util.ts",{"_index":1849,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1846,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../question",{"_index":1923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../question.constants.ts",{"_index":1924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rate",{"_index":1925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":1926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1837,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/answer/answer.controller.ts",{"_index":115,"title":{},"body":{"controllers/AnswerController.html":{},"coverage.html":{}}}],["src/answer/answer.controller.ts:11",{"_index":125,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:16",{"_index":126,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:21",{"_index":130,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:26",{"_index":137,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:31",{"_index":133,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.module.ts",{"_index":196,"title":{},"body":{"modules/AnswerModule.html":{}}}],["src/answer/answer.service.ts",{"_index":211,"title":{},"body":{"injectables/AnswerService.html":{},"coverage.html":{}}}],["src/answer/answer.service.ts:11",{"_index":213,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:15",{"_index":214,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:19",{"_index":216,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:23",{"_index":215,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:7",{"_index":212,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/dto/create",{"_index":537,"title":{},"body":{"classes/CreateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/dto/update",{"_index":1597,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/entities/answer",{"_index":161,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Grade.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity.ts",{"_index":70,"title":{},"body":{"classes/Answer.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity.ts:16",{"_index":86,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:19",{"_index":89,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:22",{"_index":81,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/enums/answer",{"_index":1839,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/answer/repositories/answer",{"_index":172,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["src/answer/repositories/answer.repository.ts",{"_index":206,"title":{},"body":{"classes/AnswerRepository.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.constants.ts",{"_index":1730,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.module.ts",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":1689,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:23",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/casl/casl.module.ts",{"_index":510,"title":{},"body":{"modules/CaslModule.html":{}}}],["src/auth/casl/enums/casl",{"_index":1841,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/casl/factories/casl",{"_index":463,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/controllers/auth.controller.ts",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/controllers/auth.controller.ts:12",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/dtos/auth.dto.ts",{"_index":315,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/auth.dto.ts:6",{"_index":317,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dtos/create",{"_index":539,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts",{"_index":1236,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts:8",{"_index":1237,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":263,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts:10",{"_index":267,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:13",{"_index":268,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:7",{"_index":266,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/guards/jwt.guard",{"_index":749,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/UploadController.html":{}}}],["src/auth/guards/jwt.guard.ts",{"_index":1198,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/interfaces/jwt",{"_index":1203,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/repositories/auth.repository.ts",{"_index":341,"title":{},"body":{"classes/AuthRepository.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1205,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:19",{"_index":1208,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:32",{"_index":1210,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auxiliary/auxiliary.module",{"_index":1659,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auxiliary/auxiliary.module.ts",{"_index":454,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["src/auxiliary/entities/course.entity.ts",{"_index":528,"title":{},"body":{"classes/Course.html":{},"coverage.html":{}}}],["src/auxiliary/entities/course.entity.ts:11",{"_index":533,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:14",{"_index":532,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:8",{"_index":530,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/grade.entity",{"_index":168,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["src/auxiliary/entities/grade.entity.ts",{"_index":1180,"title":{},"body":{"classes/Grade.html":{},"coverage.html":{}}}],["src/auxiliary/entities/grade.entity.ts:11",{"_index":1184,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:14",{"_index":1183,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:17",{"_index":1182,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/period.entity",{"_index":684,"title":{},"body":{"classes/Exam.html":{}}}],["src/auxiliary/entities/period.entity.ts",{"_index":1256,"title":{},"body":{"classes/Period.html":{},"coverage.html":{}}}],["src/auxiliary/entities/period.entity.ts:12",{"_index":1264,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:15",{"_index":1260,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:18",{"_index":1262,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:21",{"_index":1261,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:9",{"_index":1263,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/professor.entity.ts",{"_index":1269,"title":{},"body":{"classes/Professor.html":{},"coverage.html":{}}}],["src/auxiliary/entities/student.entity.ts",{"_index":1567,"title":{},"body":{"classes/Student.html":{},"coverage.html":{}}}],["src/auxiliary/entities/subject.entity.ts",{"_index":1577,"title":{},"body":{"classes/Subject.html":{},"coverage.html":{}}}],["src/auxiliary/entities/subject.entity.ts:10",{"_index":1579,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:13",{"_index":1583,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:16",{"_index":1580,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:19",{"_index":1581,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:22",{"_index":1582,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/repositories/professor.repository.ts",{"_index":1276,"title":{},"body":{"classes/ProfessorRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/student.repository.ts",{"_index":1568,"title":{},"body":{"classes/StudentRepository.html":{},"coverage.html":{}}}],["src/auxiliary/services/professor.service",{"_index":1690,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/professor.service.ts",{"_index":1279,"title":{},"body":{"injectables/ProfessorService.html":{},"coverage.html":{}}}],["src/auxiliary/services/professor.service.ts:11",{"_index":1281,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:18",{"_index":1283,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:24",{"_index":1286,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/student.service",{"_index":1691,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/student.service.ts",{"_index":1571,"title":{},"body":{"injectables/StudentService.html":{},"coverage.html":{}}}],["src/auxiliary/services/student.service.ts:11",{"_index":1572,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:18",{"_index":1573,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:24",{"_index":1574,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/config/cors.config.ts",{"_index":1736,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/config/database.config.ts",{"_index":1742,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/firebase.config.ts",{"_index":1744,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/index.ts",{"_index":1746,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/interfaces/swagger.interface.ts",{"_index":1588,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{}}}],["src/config/jwt.config.ts",{"_index":1748,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/rate",{"_index":1750,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.config.ts",{"_index":1754,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controllers/app.controller.ts",{"_index":222,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/controllers/app.controller.ts:6",{"_index":225,"title":{},"body":{"controllers/AppController.html":{}}}],["src/core/core.constants.ts",{"_index":1757,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":525,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/decorators/is",{"_index":1759,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/entities/ff.entity",{"_index":269,"title":{},"body":{"classes/Auth.html":{},"classes/ExamTarget.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["src/core/entities/ff.entity.ts",{"_index":937,"title":{},"body":{"classes/FFEntity.html":{},"coverage.html":{}}}],["src/core/entities/ff.entity.ts:6",{"_index":938,"title":{},"body":{"classes/FFEntity.html":{}}}],["src/core/entities/timestamp.entity.ts",{"_index":1592,"title":{},"body":{"classes/TimestampEntity.html":{},"coverage.html":{}}}],["src/core/entities/timestamp.entity.ts:10",{"_index":1594,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:13",{"_index":1596,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:16",{"_index":1595,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/interceptors/payload.interceptor.ts",{"_index":1243,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/payload.interceptor.ts:12",{"_index":1249,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["src/core/interfaces/soft",{"_index":845,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["src/core/utils/last.util",{"_index":1458,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["src/core/utils/last.util.ts",{"_index":1761,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/migrations",{"_index":1965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/migrations/1619445806509",{"_index":272,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["src/database/migrations/1620179231630",{"_index":1378,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["src/database/migrations/1620299822480",{"_index":6,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1620477175799",{"_index":393,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["src/database/migrations/1620477869366",{"_index":1497,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["src/database/migrations/1620478273991",{"_index":700,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["src/database/migrations/1620488935141",{"_index":1503,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["src/database/migrations/1620563708532",{"_index":1509,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["src/database/migrations/1621036457247",{"_index":932,"title":{},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["src/database/migrations/1621992475274",{"_index":1491,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["src/database/migrations/1622326106015",{"_index":873,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1622332886234",{"_index":724,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["src/database/migrations/1622334780336",{"_index":734,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["src/exam/controllers/exam",{"_index":740,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["src/exam/dtos/create",{"_index":547,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"coverage.html":{}}}],["src/exam/dtos/exam",{"_index":903,"title":{},"body":{"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["src/exam/dtos/update",{"_index":1602,"title":{},"body":{"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["src/exam/entities/exam",{"_index":101,"title":{},"body":{"classes/Answer.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/User.html":{},"coverage.html":{}}}],["src/exam/entities/exam.entity",{"_index":1265,"title":{},"body":{"classes/Period.html":{},"classes/QuestionGroup.html":{}}}],["src/exam/entities/exam.entity.ts",{"_index":659,"title":{},"body":{"classes/Exam.html":{},"coverage.html":{}}}],["src/exam/entities/exam.entity.ts:20",{"_index":677,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:23",{"_index":667,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:26",{"_index":671,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:29",{"_index":668,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:32",{"_index":666,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:35",{"_index":673,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:39",{"_index":676,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:42",{"_index":670,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:45",{"_index":669,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:48",{"_index":663,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:51",{"_index":682,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/enums/exam",{"_index":1844,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/exam/exam.constants.ts",{"_index":1765,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/exam/exam.controller.ts",{"_index":786,"title":{},"body":{"controllers/ExamController.html":{},"coverage.html":{}}}],["src/exam/exam.controller.ts:28",{"_index":789,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:34",{"_index":791,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:39",{"_index":792,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:44",{"_index":796,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:52",{"_index":793,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.module.ts",{"_index":816,"title":{},"body":{"modules/ExamModule.html":{}}}],["src/exam/exam.service",{"_index":1453,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["src/exam/exam.service.ts",{"_index":830,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{}}}],["src/exam/exam.service.ts:15",{"_index":835,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/exam.service.ts:23",{"_index":840,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/exam.service.ts:36",{"_index":836,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/exam.service.ts:42",{"_index":837,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/exam.service.ts:46",{"_index":838,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/exam.service.ts:58",{"_index":843,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/exam.service.ts:67",{"_index":842,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/repositories/exam",{"_index":763,"title":{},"body":{"classes/ExamAgreementRepository.html":{},"classes/ExamTargetRepository.html":{},"coverage.html":{}}}],["src/exam/repositories/exam.repository.ts",{"_index":828,"title":{},"body":{"classes/ExamRepository.html":{},"coverage.html":{}}}],["src/exam/services/exam",{"_index":766,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["src/firebase",{"_index":1171,"title":{},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["src/firebase/firebase",{"_index":949,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.constants.ts",{"_index":1768,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.module.ts",{"_index":1129,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:31",{"_index":1130,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:41",{"_index":1131,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/interfaces/firebase",{"_index":1045,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["src/firebase/services/firebase",{"_index":1059,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["src/firebase/types/firebase",{"_index":1911,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/infra/controllers/upload.controller.ts",{"_index":1607,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{}}}],["src/infra/controllers/upload.controller.ts:23",{"_index":1611,"title":{},"body":{"controllers/UploadController.html":{}}}],["src/infra/dtos/file",{"_index":941,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["src/infra/infra.constants.ts",{"_index":1770,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infra/infra.module.ts",{"_index":1191,"title":{},"body":{"modules/InfraModule.html":{}}}],["src/infra/services/firebase",{"_index":1161,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["src/infra/services/uploader.service.ts",{"_index":1625,"title":{},"body":{"classes/UploaderService.html":{},"coverage.html":{}}}],["src/infra/services/uploader.service.ts:4",{"_index":1627,"title":{},"body":{"classes/UploaderService.html":{}}}],["src/logger/logger.module.ts",{"_index":1234,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logger.service.ts",{"_index":655,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1771,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/question",{"_index":482,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/controllers/user.controller.ts",{"_index":1638,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/controllers/user.controller.ts:15",{"_index":1640,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controllers/user.controller.ts:21",{"_index":1643,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/decoratos/get",{"_index":751,"title":{},"body":{"controllers/ExamAgreementController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dtos/create",{"_index":637,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto",{"_index":1287,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["src/user/dtos/user.dto.ts",{"_index":1653,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto.ts:6",{"_index":1654,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/entities/user.entity",{"_index":718,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["src/user/entities/user.entity.ts",{"_index":1628,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:11",{"_index":1630,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:14",{"_index":1629,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":1633,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:20",{"_index":1632,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:23",{"_index":1631,"title":{},"body":{"classes/User.html":{}}}],["src/user/enum/user",{"_index":486,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/helpers/create",{"_index":1783,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/user/interfaces/user",{"_index":1667,"title":{},"body":{"interfaces/UserResult.html":{},"coverage.html":{}}}],["src/user/repositories/user.repository.ts",{"_index":1664,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/user/user.module.ts",{"_index":1658,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1669,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:100",{"_index":1685,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":1676,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":1677,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:47",{"_index":1679,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:58",{"_index":1683,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":1687,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:70",{"_index":1681,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":775,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["started",{"_index":1861,"title":{"index.html":{}},"body":{}}],["started_at",{"_index":401,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["startedat",{"_index":563,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{}}}],["stated_at",{"_index":412,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["statedat",{"_index":1259,"title":{},"body":{"classes/Period.html":{}}}],["statement",{"_index":604,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["statements",{"_index":1725,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":831,"title":{},"body":{"injectables/ExamService.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["status",{"_index":407,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{}}}],["status.enum",{"_index":687,"title":{},"body":{"classes/Exam.html":{}}}],["status.enum.ts",{"_index":1836,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["storage",{"_index":961,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts",{"_index":1140,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["storage.service.ts:14",{"_index":1148,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:8",{"_index":1142,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storagebucket",{"_index":1003,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["storageservice",{"_index":1165,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["strategies",{"_index":1826,"title":{},"body":{"dependencies.html":{}}}],["strategies/jwt.strategy",{"_index":337,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1216,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":128,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["student",{"_index":878,"title":{"classes/Student.html":{}},"body":{"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["studentrepository",{"_index":457,"title":{"classes/StudentRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{}}}],["studentservice",{"_index":453,"title":{"injectables/StudentService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["subject",{"_index":417,"title":{"classes/Subject.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/Grade.html":{},"classes/Subject.html":{},"coverage.html":{}}}],["subject.course",{"_index":536,"title":{},"body":{"classes/Course.html":{}}}],["subject.entity",{"_index":534,"title":{},"body":{"classes/Course.html":{},"classes/Grade.html":{}}}],["subject_id",{"_index":421,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["subject`(`id",{"_index":446,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["subjects",{"_index":529,"title":{},"body":{"classes/Course.html":{}}}],["subscriber.{js,ts",{"_index":1959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscribers",{"_index":1958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sudo",{"_index":1896,"title":{},"body":{"index.html":{}}}],["super",{"_index":1222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":1898,"title":{},"body":{"modules.html":{}}}],["suprir",{"_index":1866,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1899,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1821,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":1755,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfigkey",{"_index":1756,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":1587,"title":{"interfaces/SwaggerOptions.html":{}},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":491,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["synchronize",{"_index":1960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":1857,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":280,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["tableinheritance",{"_index":107,"title":{},"body":{"classes/Answer.html":{},"classes/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1785,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":580,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["target.controller",{"_index":825,"title":{},"body":{"modules/ExamModule.html":{}}}],["target.controller.ts",{"_index":893,"title":{},"body":{"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["target.controller.ts:16",{"_index":896,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["target.entity",{"_index":688,"title":{},"body":{"classes/Exam.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{}}}],["target.entity.ts",{"_index":869,"title":{},"body":{"classes/ExamTarget.html":{},"coverage.html":{}}}],["target.entity.ts:8",{"_index":870,"title":{},"body":{"classes/ExamTarget.html":{}}}],["target.repository",{"_index":822,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["target.repository.ts",{"_index":905,"title":{},"body":{"classes/ExamTargetRepository.html":{},"coverage.html":{}}}],["target.service",{"_index":823,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["target.service.ts",{"_index":907,"title":{},"body":{"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["target.service.ts:11",{"_index":911,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:20",{"_index":913,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:28",{"_index":916,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:40",{"_index":912,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.type",{"_index":923,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["targetmap",{"_index":855,"title":{},"body":{"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{}}}],["targetmap.get(target",{"_index":859,"title":{},"body":{"injectables/ExamService.html":{}}}],["targets",{"_index":564,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targets.map((target",{"_index":858,"title":{},"body":{"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{}}}],["targetservice",{"_index":834,"title":{},"body":{"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["text",{"_index":399,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{},"classes/ExamTitle1621036457247.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["this._targetmap",{"_index":921,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.answerservice.create(createanswerdto",{"_index":152,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.findall",{"_index":153,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.findone(+id",{"_index":155,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.remove(+id",{"_index":159,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.update(+id",{"_index":157,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.app",{"_index":999,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.auth",{"_index":1010,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.database(url",{"_index":1011,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.delete",{"_index":1020,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.firestore",{"_index":1012,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.instanceid",{"_index":1013,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.machinelearning",{"_index":1014,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.messaging",{"_index":1015,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.name",{"_index":1007,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.options",{"_index":1009,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.projectmanagement",{"_index":1016,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.remoteconfig",{"_index":1017,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.securityrules",{"_index":1018,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.storage",{"_index":1019,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.authrepository.findone",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authrepository.save",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.createauth",{"_index":1699,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.findauth",{"_index":1228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.login(logindto",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.createuserbytype(createuserdto",{"_index":1698,"title":{},"body":{"injectables/UserService.html":{}}}],["this.examagreementservice.createagreement",{"_index":761,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["this.examservice.create(createexamdto",{"_index":806,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findall",{"_index":807,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findone(copyquestiongroupdto.examid",{"_index":1474,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(examid",{"_index":1462,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(id",{"_index":808,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.remove(id",{"_index":811,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.update(id",{"_index":810,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.exports",{"_index":1044,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.fcm",{"_index":1109,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.fcm.sendtodevice(token",{"_index":1111,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.findauth",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findone(copyquestiongroupdto.groupid",{"_index":1473,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.findone(id",{"_index":864,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.findspecializeduser(userdto",{"_index":1721,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduser(userdto",{"_index":1714,"title":{},"body":{"injectables/UserService.html":{}}}],["this.firebaseauth",{"_index":1085,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.createuser(createdto",{"_index":1095,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.deleteuser(uid",{"_index":1097,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.getuser(uid",{"_index":1094,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.updateuser(uid",{"_index":1096,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.verifyidtoken(token",{"_index":1088,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firestore",{"_index":1122,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.firestore.collection(collection",{"_index":1124,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.getnextposition(createquestiondto.groupid",{"_index":1539,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.getnextposition(updatedto.groupid",{"_index":1549,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.groups",{"_index":694,"title":{},"body":{"classes/Exam.html":{}}}],["this.groups?.sort((a",{"_index":695,"title":{},"body":{"classes/Exam.html":{}}}],["this.groupservice.findone(groupid",{"_index":1537,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.jwtservice.signasync",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loadtargetmap",{"_index":920,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.mustfindauth(logindto",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.newexam(createexamdto",{"_index":860,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.newexam(updateexamdto",{"_index":866,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.professorservice.createstudent(createuserdto",{"_index":1710,"title":{},"body":{"injectables/UserService.html":{}}}],["this.professorservice.findone(userdto",{"_index":1719,"title":{},"body":{"injectables/UserService.html":{}}}],["this.providers",{"_index":1040,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.questiongroupservice.copy(copyquestiongroupdto",{"_index":1419,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.create(createquestiongroupdto",{"_index":1413,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findall",{"_index":1414,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findone(id",{"_index":1417,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.gettargets",{"_index":1416,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.remove(id",{"_index":1421,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.reorder(reorderquestiongroupdto",{"_index":1420,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.update(id",{"_index":1418,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questions",{"_index":1375,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questions?.sort((a",{"_index":1376,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questionservice.copytogroup",{"_index":1478,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.questionservice.createquestion(createquestiondto",{"_index":1347,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.createquestions",{"_index":1350,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.find(finddto",{"_index":1352,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findone(id",{"_index":1353,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.remove(id",{"_index":1356,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.reorder(reorderquesitondto",{"_index":1355,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.update(id",{"_index":1354,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.repository.create",{"_index":1476,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.create(createagreementdto",{"_index":781,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.repository.create(createdto",{"_index":1291,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["this.repository.create(createquestiongroupdto",{"_index":1465,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.create(entitylike",{"_index":854,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.find",{"_index":783,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.findone",{"_index":1293,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["this.repository.findone(id",{"_index":863,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.merge",{"_index":1471,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.merge(exam",{"_index":865,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.merge(question",{"_index":1550,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save",{"_index":1475,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.save(agreement",{"_index":782,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.repository.save(exam",{"_index":861,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.save(professor",{"_index":1292,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["this.repository.save(question",{"_index":1540,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save(questiongroup",{"_index":1468,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.save(questions",{"_index":1542,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save(student",{"_index":1576,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.repository.softdelete",{"_index":1557,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.softdelete(id",{"_index":867,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["this.repository.update(group.id",{"_index":1488,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.service.upload(file",{"_index":1624,"title":{},"body":{"controllers/UploadController.html":{}}}],["this.setexamandposition",{"_index":1467,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.storage",{"_index":1150,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storage.bucket(bucket).file(path",{"_index":1152,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storageservice.upload",{"_index":1176,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["this.studentservice.createstudent(createuserdto",{"_index":1712,"title":{},"body":{"injectables/UserService.html":{}}}],["this.studentservice.findone(userdto",{"_index":1720,"title":{},"body":{"injectables/UserService.html":{}}}],["this.targetmap",{"_index":929,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.targetservice.gettargets",{"_index":900,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["this.targetservice.targetmap",{"_index":856,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.userrepository.findone",{"_index":1713,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":1650,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findspecializeduser",{"_index":1230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.mustfinduser",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateuser",{"_index":1652,"title":{},"body":{"controllers/UserController.html":{}}}],["this.uuid",{"_index":722,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["throw",{"_index":49,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"injectables/ExamService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["timestamp.entity",{"_index":939,"title":{},"body":{"classes/FFEntity.html":{}}}],["timestampentity",{"_index":95,"title":{"classes/TimestampEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"coverage.html":{}}}],["timestampentity:10",{"_index":96,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:13",{"_index":100,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:16",{"_index":98,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timewindow",{"_index":1996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tinyint",{"_index":405,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["title",{"_index":415,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/ExamTitle1621036457247.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["tocopy",{"_index":1472,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["tocopy.questions",{"_index":1479,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["token",{"_index":1082,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["token.interface",{"_index":1084,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["token.interface.ts",{"_index":1055,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"coverage.html":{}}}],["transaction",{"_index":1706,"title":{},"body":{"injectables/UserService.html":{}}}],["transactional",{"_index":176,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["transformer",{"_index":556,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"dependencies.html":{}}}],["true",{"_index":85,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["true})@arrayminsize(1",{"_index":634,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["true})@type(undefined)@isdefined({each",{"_index":633,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["try",{"_index":1087,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":110,"title":{},"body":{"classes/Answer.html":{},"classes/CreateExamDto.html":{},"classes/CreateUserDto.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"injectables/JwtStrategy.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["type.enum.ts",{"_index":1832,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":1907,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":30,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":198,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":827,"title":{},"body":{"modules/ExamModule.html":{}}}],["typeormmodule.forfeature([answerrepository",{"_index":205,"title":{},"body":{"modules/AnswerModule.html":{}}}],["typeormmodule.forfeature([authrepository",{"_index":338,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([questiongrouprepository",{"_index":1434,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["typeormmodule.forfeature([studentrepository",{"_index":461,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":1663,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":1600,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["types/firebase",{"_index":1120,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["ui",{"_index":1822,"title":{},"body":{"dependencies.html":{}}}],["uid",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/JwtPayload.html":{}}}],["unauthorizedexception",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception(logindto",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(userdto",{"_index":1715,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":42,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["unique",{"_index":265,"title":{},"body":{"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["unknown",{"_index":1981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unprocessableentityexception",{"_index":1688,"title":{},"body":{"injectables/UserService.html":{}}}],["up",{"_index":15,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"index.html":{}}}],["up(queryrunner",{"_index":27,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["update",{"_index":121,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"miscellaneous/enumerations.html":{}}}],["update(@param('id",{"_index":156,"title":{},"body":{"controllers/AnswerController.html":{}}}],["update(id",{"_index":134,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["updateanswerdto",{"_index":135,"title":{"classes/UpdateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["updated_at",{"_index":285,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["updatedat",{"_index":78,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedatecolumn",{"_index":99,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedto",{"_index":1077,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/QuestionService.html":{}}}],["updatedto.groupid",{"_index":1546,"title":{},"body":{"injectables/QuestionService.html":{}}}],["updateexamdto",{"_index":794,"title":{"classes/UpdateExamDto.html":{}},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["updatequestiondto",{"_index":1329,"title":{"classes/UpdateQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["updatequestiongroupdto",{"_index":1407,"title":{"classes/UpdateQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["updatequestiongroupdto.examid",{"_index":1469,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["updates",{"_index":219,"title":{},"body":{"injectables/AnswerService.html":{}}}],["updateuser",{"_index":1064,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{}}}],["updateuser(uid",{"_index":1076,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["upload",{"_index":1141,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{}}}],["upload(@uploadedfile",{"_index":1623,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(file",{"_index":1608,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(filedto",{"_index":1166,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["upload(path",{"_index":1143,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["upload_path",{"_index":1617,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadcontroller",{"_index":1192,"title":{"controllers/UploadController.html":{}},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":1612,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploader.service",{"_index":1175,"title":{},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["uploader.service.ts",{"_index":1162,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["uploader.service.ts:11",{"_index":1167,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploader.service.ts:8",{"_index":1164,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploaderservice",{"_index":1174,"title":{"classes/UploaderService.html":{}},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":970,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["useclass",{"_index":1197,"title":{},"body":{"modules/InfraModule.html":{}}}],["usefactory",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{}}}],["useguards",{"_index":747,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtguard",{"_index":759,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useinterceptors",{"_index":1613,"title":{},"body":{"controllers/UploadController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1622,"title":{},"body":{"controllers/UploadController.html":{}}}],["user",{"_index":46,"title":{"classes/User.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/JwtStrategy.html":{},"classes/Professor.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/Student.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["user.decorator",{"_index":752,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/UserController.html":{}}}],["user.decorator.ts",{"_index":1781,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1289,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":638,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":640,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":642,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":647,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":644,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.enrollment",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.helper",{"_index":1695,"title":{},"body":{"injectables/UserService.html":{}}}],["user.helper.ts",{"_index":1784,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["user.id",{"_index":500,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"controllers/ExamAgreementController.html":{}}}],["user.role",{"_index":492,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.service",{"_index":1646,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.type",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/dtos/create",{"_index":1288,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["user/entities/user.entity",{"_index":477,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["user/user.module",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user:11",{"_index":1272,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:14",{"_index":1271,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:17",{"_index":1275,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:20",{"_index":1274,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:23",{"_index":1273,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user_id",{"_index":425,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{}}}],["user`(`id",{"_index":731,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["usercontroller",{"_index":1637,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":1285,"title":{"classes/UserDto.html":{}},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":499,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{}}}],["usermodule",{"_index":237,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":1944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":1661,"title":{"classes/UserRepository.html":{}},"body":{"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userresult",{"_index":1666,"title":{"interfaces/UserResult.html":{}},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userrole",{"_index":485,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":494,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.manager",{"_index":497,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.regular",{"_index":1635,"title":{},"body":{"classes/User.html":{}}}],["users",{"_index":1589,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":351,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertype",{"_index":645,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["usertype.professor",{"_index":1709,"title":{},"body":{"injectables/UserService.html":{}}}],["usertype.student",{"_index":1711,"title":{},"body":{"injectables/UserService.html":{}}}],["usevalue",{"_index":1039,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["using",{"_index":1893,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":423,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{}}}],["v0.0.1",{"_index":2002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":1206,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":1209,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":593,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["validator",{"_index":320,"title":{},"body":{"classes/AuthDto.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["value",{"_index":275,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":62,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/ExamTarget1622326106015.html":{}}}],["var",{"_index":53,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":264,"title":{},"body":{"classes/Auth.html":{},"classes/Course.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["varchar(255",{"_index":288,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{}}}],["varchar(36",{"_index":729,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["variable",{"_index":1731,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1888,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verdadeira",{"_index":621,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["verifytoken",{"_index":1065,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["verifytoken(token",{"_index":1080,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["version",{"_index":1590,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":683,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"miscellaneous/functions.html":{}}}],["yes",{"_index":971,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseStorageService.html":{},"classes/UploaderService.html":{}}}],["zoom",{"_index":193,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUser1620299822480.html":{"url":"classes/AdminUser1620299822480.html","title":"class - AdminUser1620299822480","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUser1620299822480\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620299822480-AdminUser.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\n\nconst cpf = '29997856155';\nconst enrollment = '999999';\n\nexport class AdminUser1620299822480 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    const result:\n      | {\n          id: number;\n        }[]\n      | undefined = await queryRunner.manager.query(\n      'SELECT id FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n\n    if (!result?.length) {\n      if (!process.env.ADMIN_PASSWORD) {\n        throw new Error('ADMIN_PASSWORD env var not set');\n      }\n\n      const salt = await bcrypt.genSalt();\n      const password = await bcrypt.hash(process.env.ADMIN_PASSWORD, salt);\n\n      await queryRunner.manager.query(\n        'INSERT INTO auth (login, password, salt) VALUES (?, ?, ?)',\n        [enrollment, password, salt],\n      );\n      await queryRunner.manager.query(\n        'INSERT INTO user (enrollment, cpf, type, role) VALUES (?, ?, ?, ?)',\n        [enrollment, cpf, 'User', 'admin'],\n      );\n    }\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.manager.query('DELETE FROM auth WHERE login = ?', [\n      enrollment,\n    ]);\n    await queryRunner.manager.query(\n      'DELETE FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Answer.html":{"url":"classes/Answer.html","title":"class - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examAgreement\n                            \n                            \n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/exam-agreement.entity';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  TableInheritance,\n} from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { AnswerType } from '../enums/answer-type.enum';\n\n@Entity('answer')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: AnswerType } })\nexport class Answer extends FFEntity {\n  @Column({ type: 'int', nullable: true })\n  score: number;\n\n  @Column({ type: 'enum', enum: AnswerType })\n  type: AnswerType;\n\n  @ManyToOne(() => ExamAgreement)\n  examAgreement: ExamAgreement;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnswerController.html":{"url":"controllers/AnswerController.html","title":"controller - AnswerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnswerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                answer\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createAnswerDto: CreateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAnswerDto\n                                    \n                                                CreateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { AnswerService } from './answer.service';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\n\n@Controller('answer')\nexport class AnswerController {\n  constructor(private readonly answerService: AnswerService) {}\n\n  @Post()\n  create(@Body() createAnswerDto: CreateAnswerDto) {\n    return this.answerService.create(createAnswerDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.answerService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.answerService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateAnswerDto: UpdateAnswerDto) {\n    return this.answerService.update(+id, updateAnswerDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.answerService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGrade.html":{"url":"classes/AnswerGrade.html","title":"class - AnswerGrade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGrade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer-grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Answer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                grade\n                            \n                            \n                                examAgreement\n                            \n                            \n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grade\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer-grade.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:19\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Grade } from 'src/auxiliary/entities/grade.entity';\nimport { ChildEntity, ManyToOne } from 'typeorm';\nimport { Answer } from './answer.entity';\n\n@ChildEntity()\nexport class AnswerGrade extends Answer {\n  @ManyToOne(() => Grade)\n  grade: Grade;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGradeRepository.html":{"url":"classes/AnswerGradeRepository.html","title":"class - AnswerGradeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGradeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer-grade.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { AnswerGrade } from '../entities/answer-grade.entity';\n\n@EntityRepository(AnswerGrade)\nexport class AnswerGradeRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnswerModule.html":{"url":"modules/AnswerModule.html","title":"module - AnswerModule","body":"\n                   \n\n\n\n\n    Modules\n    AnswerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_providers\n\n\n\n\nAnswerService\n\nAnswerService\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/answer/answer.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnswerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnswerController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AnswerService } from './answer.service';\nimport { AnswerController } from './answer.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnswerRepository } from './repositories/answer.repository';\nimport { AnswerGradeRepository } from './repositories/answer-grade.repository';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AnswerRepository, AnswerGradeRepository]),\n  ],\n  controllers: [AnswerController],\n  providers: [AnswerService],\n})\nexport class AnswerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerRepository.html":{"url":"classes/AnswerRepository.html","title":"class - AnswerRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Answer } from '../entities/answer.entity';\n\n@EntityRepository(Answer)\nexport class AnswerRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnswerService.html":{"url":"injectables/AnswerService.html","title":"injectable - AnswerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AnswerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createAnswerDto: CreateAnswerDto)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAnswerDto\n                                    \n                                                CreateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\n\n@Injectable()\nexport class AnswerService {\n  create(createAnswerDto: CreateAnswerDto) {\n    return 'This action adds a new answer';\n  }\n\n  findAll() {\n    return `This action returns all answer`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} answer`;\n  }\n\n  update(id: number, updateAnswerDto: UpdateAnswerDto) {\n    return `This action updates a #${id} answer`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} answer`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ping\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ping\n                        \n                        \n                    \n                \n            \n            \n                \nping()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('ping')\n                \n            \n\n            \n                \n                    Defined in src/controllers/app.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get('ping')\n  ping(): string {\n    return 'Pong';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nInfraModule\n\nInfraModule\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            AuxiliaryModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            ExamModule\n                        \n                        \n                            InfraModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            QuestionGroupModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { configs, databaseConfigKey } from './config';\nimport { LoggerModule } from './logger/logger.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './user/user.module';\nimport { ExamModule } from './exam/exam.module';\nimport { QuestionGroupModule } from './question-group/question-group.module';\nimport { AnswerModule } from './answer/answer.module';\nimport { CoreModule } from './core/core.module';\nimport { AuxiliaryModule } from './auxiliary/auxiliary.module';\nimport { InfraModule } from './infra/infra.module';\nimport { AppController } from './controllers/app.controller';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ load: configs }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(databaseConfigKey)!,\n      inject: [ConfigService],\n    }),\n    CoreModule,\n    LoggerModule,\n    AuthModule,\n    UserModule,\n    ExamModule,\n    QuestionGroupModule,\n    AuxiliaryModule,\n    InfraModule,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity } from 'typeorm';\n\n@Entity('auth')\nexport class Auth extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  login: string;\n\n  @Column({ type: 'varchar' })\n  password: string;\n\n  @Column({ type: 'varchar' })\n  salt: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth1619445806509.html":{"url":"classes/Auth1619445806509.html","title":"class - Auth1619445806509","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth1619445806509\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1619445806509-Auth.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auth1619445806509'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1619445806509-Auth.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Auth1619445806509 implements MigrationInterface {\n  name = 'Auth1619445806509';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'CREATE TABLE `auth` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `login` varchar(255) NOT NULL, `password` varchar(255) NOT NULL, `salt` varchar(255) NOT NULL, UNIQUE INDEX `IDX_952e252e7470ff78b18a9ec786` (`login`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      \"CREATE TABLE `user` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `enrollment` varchar(255) NOT NULL, `cpf` varchar(255) NOT NULL, `type` varchar(255) NOT NULL, `role` enum ('manager', 'admin', 'regular') NOT NULL DEFAULT 'regular', UNIQUE INDEX `IDX_914f18c8fbe52b10a6b276bc0c` (`enrollment`), UNIQUE INDEX `IDX_a6235b5ef0939d8deaad755fc8` (`cpf`), INDEX `IDX_31ef2b4d30675d0c15056b7f6e` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_a6235b5ef0939d8deaad755fc8` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_914f18c8fbe52b10a6b276bc0c` ON `user`',\n    );\n    await queryRunner.query('DROP TABLE `user`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_952e252e7470ff78b18a9ec786` ON `auth`',\n    );\n    await queryRunner.query('DROP TABLE `auth`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/auth/controllers/auth.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthService } from '../auth.service';\nimport { LoginDto } from '../dtos/login.dto';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  login(@Body() loginDto: LoginDto): Promise {\n    return this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/auth.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  login: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtGuard\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            CaslModule\n                        \n                        \n                            JwtGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserModule } from '../user/user.module';\nimport { jwtConfigKey } from '../config';\n\nimport { CaslModule } from './casl/casl.module';\n\nimport { AuthService } from './auth.service';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { JwtGuard } from './guards/jwt.guard';\nimport { AuthController } from './controllers/auth.controller';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AuthRepository]),\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(jwtConfigKey)!,\n      inject: [ConfigService],\n    }),\n    UserModule,\n    CaslModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtGuard, JwtStrategy],\n  exports: [AuthService, JwtGuard, CaslModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthRepository.html":{"url":"classes/AuthRepository.html","title":"class - AuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/repositories/auth.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Auth } from '../entities/auth.entity';\n\n@EntityRepository(Auth)\nexport class AuthRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuth\n                            \n                            \n                                findAuth\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                mustFindAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authRepository: AuthRepository, jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        AuthRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAuth(createAuthDto: CreateAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAuthDto\n                                    \n                                                CreateAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAuth\n                        \n                        \n                    \n                \n            \n            \n                \nfindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport bcrypt = require('bcryptjs');\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { UserService } from '../user/user.service';\n\nimport { LoginDto } from './dtos/login.dto';\nimport { Auth } from './entities/auth.entity';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { CreateAuthDto } from './dtos/create-auth.dto';\nimport { AuthDto } from './dtos/auth.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(AuthRepository)\n    private readonly authRepository: AuthRepository,\n    private readonly jwtService: JwtService,\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  findAuth(authDto: AuthDto): Promise {\n    return this.authRepository.findOne({ ...authDto });\n  }\n\n  async mustFindAuth(authDto: AuthDto): Promise {\n    const auth = await this.findAuth({ login: authDto.login });\n    if (!auth) {\n      throw new NotFoundException(authDto);\n    }\n\n    return auth;\n  }\n\n  async login(loginDto: LoginDto): Promise {\n    const auth = await this.mustFindAuth(loginDto);\n\n    const match = await bcrypt.compare(loginDto.password, auth.password);\n    if (!match) {\n      throw new UnauthorizedException(loginDto);\n    }\n\n    const user = await this.userService.mustFindUser({\n      enrollment: loginDto.login,\n    });\n    const accessToken = await this.jwtService.signAsync({\n      uid: user.enrollment,\n      type: user.type,\n    });\n\n    return accessToken;\n  }\n\n  @Transactional()\n  async createAuth(createAuthDto: CreateAuthDto): Promise {\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(createAuthDto.password, salt);\n\n    await this.authRepository.save({\n      login: createAuthDto.login,\n      salt,\n      password,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auxiliary1620477175799.html":{"url":"classes/Auxiliary1620477175799.html","title":"class - Auxiliary1620477175799","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auxiliary1620477175799\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477175799-Auxiliary.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auxiliary1620477175799'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Auxiliary1620477175799 implements MigrationInterface {\n  name = 'Auxiliary1620477175799';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"CREATE TABLE `exam` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `text` text NOT NULL, `description` text NOT NULL, `started_at` datetime NOT NULL, `ended_at` datetime NOT NULL, `allow_anonymous` tinyint NOT NULL DEFAULT 0, `status` enum ('active', 'inactive') NOT NULL, `period_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n    await queryRunner.query(\n      'CREATE TABLE `period` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) NULL, `stated_at` datetime NOT NULL, `ended_at` datetime NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `course` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, UNIQUE INDEX `IDX_5cf4963ae12285cda6432d5a3a` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `subject` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, `code_id` int NOT NULL, `course_id` int NULL, UNIQUE INDEX `IDX_92374adc6b583e8cf659977e48` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `subject_id` int NULL, `period_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `exam_agreement` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `uuid` varchar(255) NOT NULL, `anonymous` tinyint NOT NULL, `user_id` int NOT NULL, UNIQUE INDEX `IDX_2b38bb607ef3e86920e9bd0163` (`uuid`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD `personal` tinyint NOT NULL DEFAULT 0',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD `exam_id` int NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL DEFAULT 0',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD CONSTRAINT `FK_1d110bd5138b275a2ea2944e290` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP FOREIGN KEY `FK_1d110bd5138b275a2ea2944e290`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `period_id`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `status`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `allow_anonymous`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `ended_at`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `started_at`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `description`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `text`');\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `exam_id`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `personal`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_2b38bb607ef3e86920e9bd0163` ON `exam_agreement`',\n    );\n    await queryRunner.query('DROP TABLE `exam_agreement`');\n    await queryRunner.query('DROP TABLE `grade`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_92374adc6b583e8cf659977e48` ON `subject`',\n    );\n    await queryRunner.query('DROP TABLE `subject`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_5cf4963ae12285cda6432d5a3a` ON `course`',\n    );\n    await queryRunner.query('DROP TABLE `course`');\n    await queryRunner.query('DROP TABLE `period`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuxiliaryModule.html":{"url":"modules/AuxiliaryModule.html","title":"module - AuxiliaryModule","body":"\n                   \n\n\n\n\n    Modules\n    AuxiliaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\n\nProfessorService \n\nProfessorService \n\n\n\nStudentService \n\nStudentService \n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auxiliary/auxiliary.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ProfessorRepository } from './repositories/professor.repository';\nimport { StudentRepository } from './repositories/student.repository';\nimport { ProfessorService } from './services/professor.service';\nimport { StudentService } from './services/student.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([StudentRepository, ProfessorRepository])],\n  providers: [StudentService, ProfessorService],\n  exports: [StudentService, ProfessorService],\n})\nexport class AuxiliaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/casl/factories/casl-ability.factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createForUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/casl/factories/casl-ability.factory.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { Answer } from '../../../answer/entities/answer.entity';\nimport { Exam } from '../../../exam/entities/exam.entity';\nimport { ExamAgreement } from '../../../exam/entities/exam-agreement.entity';\nimport { User } from '../../../user/entities/user.entity';\nimport { CaslAction as Action } from '../enums/casl-action.enum';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { UserRole } from 'src/user/enum/user-role.enum';\n\ntype CaslSubjects =\n  | InferSubjects\n  | 'all';\n\ntype AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder(\n      Ability as AbilityClass,\n    );\n\n    switch (user.role) {\n      case UserRole.ADMIN:\n        can(Action.MANAGE, 'all');\n        break;\n      case UserRole.MANAGER:\n        can(Action.READ, 'all');\n        can(Action.MANAGE, QuestionGroup);\n        break;\n      default:\n        can(Action.READ, User);\n        can(Action.READ, ExamAgreement, { userId: user.id });\n    }\n\n    // User\n    can(Action.UPDATE, User, { id: user.id });\n\n    can(Action.MANAGE, Answer, {});\n\n    // ExamAgreement\n    cannot(Action.DELETE, ExamAgreement, { uuid: undefined });\n\n    const examAgreementNotFinished = {\n      userId: user.id,\n      uuid: undefined,\n    };\n\n    can(Action.MANAGE, ExamAgreement, examAgreementNotFinished);\n\n    // Answer\n    can(Action.MANAGE, Answer, {\n      examAgreement: examAgreementNotFinished,\n    });\n\n    // Answer Grade\n\n    return build({\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/casl/casl.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './factories/casl-ability.factory';\n\n@Module({ providers: [CaslAbilityFactory], exports: [CaslAbilityFactory] })\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CopyQuestionGroupDto.html":{"url":"classes/CopyQuestionGroupDto.html","title":"class - CopyQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CopyQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/copy-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/copy-question-group.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/copy-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPositive } from 'class-validator';\n\nexport class CopyQuestionGroupDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsPositive()\n  examId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_CoreModule_exports\n\n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\n\n\nCoreModule\n\nCoreModule\n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PayloadInterceptor } from './interceptors/payload.interceptor';\n\n@Global()\n@Module({ providers: [PayloadInterceptor], exports: [PayloadInterceptor] })\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Course.html":{"url":"classes/Course.html","title":"class - Course","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Course\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/course.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                subjects\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subjects\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('course')\nexport class Course extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @OneToMany(() => Subject, (subject) => subject.course)\n  subjects: Subject[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnswerDto.html":{"url":"classes/CreateAnswerDto.html","title":"class - CreateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/create-answer.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAnswerDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/create-auth.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        LoginDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         LoginDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         LoginDto:8\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { LoginDto } from './login.dto';\n\nexport class CreateAuthDto extends LoginDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamAgreementDto.html":{"url":"classes/CreateExamAgreementDto.html","title":"class - CreateExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                anonymouns\n                            \n                            \n                                examId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            anonymouns\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam-agreement.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam-agreement.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam-agreement.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsBoolean, IsOptional, IsPositive } from 'class-validator';\n\nexport class CreateExamAgreementDto {\n  @ApiHideProperty()\n  userId: number;\n\n  @IsPositive()\n  examId: number;\n\n  @IsOptional()\n  @IsBoolean()\n  @Type(() => Boolean)\n  anonymouns?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamDto.html":{"url":"classes/CreateExamDto.html","title":"class - CreateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                startedAt\n                            \n                            \n                                    Optional\n                                targets\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsArray()@IsEnum(ExamTargetType, {each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\n\nexport class CreateExamDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsDate()\n  @Type(() => Date)\n  startedAt: Date;\n\n  @IsDate()\n  @Type(() => Date)\n  endedAt: Date;\n\n  @IsOptional()\n  @IsBoolean()\n  allowAnonymous?: boolean;\n\n  @IsOptional()\n  @IsArray()\n  @IsEnum(ExamTargetType, {each: true})\n  targets?: ExamTargetType[];\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestion.html":{"url":"classes/CreateQuestion.html","title":"class - CreateQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-questions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-questions.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsBoolean,\n  IsDefined,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n  ValidateNested,\n} from 'class-validator';\nimport { CreateQuestionDto } from './create-question.dto';\n\nclass CreateQuestion extends OmitType(CreateQuestionDto, ['groupId']) {\n  @IsOptional()\n  @IsPositive()\n  id?: number\n}\n\nexport class CreateQuestionsDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateQuestion)\n  @IsDefined({ each: true })\n  @ArrayMinSize(1)\n  questions: CreateQuestion[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionDto.html":{"url":"classes/CreateQuestionDto.html","title":"class - CreateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    Optional\n                                required\n                            \n                            \n                                statement\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsUrl()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Boolean, title: 'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão'})@IsBoolean()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class CreateQuestionDto {\n  @IsString()\n  @IsNotEmpty()\n  statement: string;\n\n  @IsOptional()\n  @IsUrl()\n  imageUrl?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  imageAlt?: string;\n\n  @ApiProperty({\n    type: Boolean,\n    title:\n      'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão',\n  })\n  @IsBoolean()\n  @IsOptional()\n  required?: boolean;\n\n  @IsPositive()\n  groupId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionGroupDto.html":{"url":"classes/CreateQuestionGroupDto.html","title":"class - CreateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                class\n                            \n                            \n                                    Optional\n                                examId\n                            \n                            \n                                    Optional\n                                personal\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n} from 'class-validator';\n\nexport class CreateQuestionGroupDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsOptional()\n  @IsBoolean()\n  class?: boolean;\n\n  @IsOptional()\n  @IsBoolean()\n  personal?: boolean;\n\n  @IsOptional()\n  @IsPositive()\n  examId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionsDto.html":{"url":"classes/CreateQuestionsDto.html","title":"class - CreateQuestionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-questions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                questions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CreateQuestion[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ValidateNested({each: true})@Type(undefined)@IsDefined({each: true})@ArrayMinSize(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-questions.dto.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsBoolean,\n  IsDefined,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n  ValidateNested,\n} from 'class-validator';\nimport { CreateQuestionDto } from './create-question.dto';\n\nclass CreateQuestion extends OmitType(CreateQuestionDto, ['groupId']) {\n  @IsOptional()\n  @IsPositive()\n  id?: number\n}\n\nexport class CreateQuestionsDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateQuestion)\n  @IsDefined({ each: true })\n  @ArrayMinSize(1)\n  questions: CreateQuestion[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsCPF()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnrollment()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserRole)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserType)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum } from 'class-validator';\nimport { IsCPF } from 'brazilian-class-validator';\nimport { PickType } from '@nestjs/swagger';\n\nimport { IsEnrollment } from '../../core/decorators/is-enrollment.decorator';\nimport { UserType } from '../enum/user-type.enum';\nimport { CreateAuthDto } from '../../auth/dtos/create-auth.dto';\nimport { UserRole } from '../enum/user-role.enum';\n\nexport class CreateUserDto extends PickType(CreateAuthDto, ['password']) {\n  @IsCPF()\n  cpf: string;\n\n  @IsEnrollment()\n  enrollment: string;\n\n  @IsEnum(UserType)\n  type: UserType;\n\n  @IsEnum(UserRole)\n  role: UserRole;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger, Injectable, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class CustomLogger extends Logger {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam.html":{"url":"classes/Exam.html","title":"class - Exam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                agreements\n                            \n                            \n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                groups\n                            \n                            \n                                period\n                            \n                            \n                                startedAt\n                            \n                            \n                                status\n                            \n                            \n                                    Optional\n                                targets\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            agreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groups\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QuestionGroup[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamStatus})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamTarget[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/exam/entities/exam.entity.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Period } from 'src/auxiliary/entities/period.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport {\n  AfterLoad,\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { ExamStatus } from '../enums/exam-status.enum';\nimport { ExamAgreement } from './exam-agreement.entity';\nimport { ExamTarget } from './exam-target.entity';\n\n@Entity('exam')\nexport class Exam extends FFEntity {\n  @Column({ type: 'text' })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'datetime' })\n  startedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @Column({ type: 'bool', default: false })\n  allowAnonymous: boolean;\n\n  @Column({ type: 'enum', enum: ExamStatus })\n  status: ExamStatus;\n\n  @ManyToMany(() => ExamTarget)\n  @JoinTable()\n  targets?: ExamTarget[];\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => QuestionGroup, (group) => group.exam)\n  groups: QuestionGroup[];\n\n  @OneToMany(() => ExamAgreement, (agreement) => agreement.exam)\n  agreements: ExamAgreement[];\n\n  @AfterLoad()\n  sortItems() {\n    this.groups = this.groups?.sort((a, b) => a.position - b.position) ?? [];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam1620478273991.html":{"url":"classes/Exam1620478273991.html","title":"class - Exam1620478273991","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam1620478273991\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620478273991-Exam.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam1620478273991'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620478273991-Exam.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Exam1620478273991 implements MigrationInterface {\n    name = 'Exam1620478273991'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL DEFAULT 0\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreement.html":{"url":"classes/ExamAgreement.html","title":"class - ExamAgreement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam-agreement.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anonymous\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                uuid\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasFinishedExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'boolean', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uuid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Generated('uuid')@Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasFinishedExam\n                        \n                        \n                    \n                \n            \n            \n                \nhasFinishedExam()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/entities/exam-agreement.entity.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from '../../core/entities/ff.entity';\nimport {\n  Column,\n  Entity,\n  Generated,\n  JoinTable,\n  ManyToOne,\n  OneToOne,\n} from 'typeorm';\nimport { User } from 'src/user/entities/user.entity';\nimport { Exam } from './exam.entity';\n\n@Entity('exam_agreement')\nexport class ExamAgreement extends FFEntity {\n  @Generated('uuid')\n  @Column({ unique: true })\n  uuid: string;\n\n  @Column({ type: 'boolean', default: false })\n  anonymous: boolean;\n\n  @Column({ type: 'int' })\n  userId: number;\n\n  @Column({ type: 'int' })\n  examId: number;\n\n  @ManyToOne(() => User)\n  user: User;\n\n  @ManyToOne(() => Exam)\n  exam: Exam;\n\n  hasFinishedExam(): boolean {\n    return !!this.uuid;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreement1622332886234.html":{"url":"classes/ExamAgreement1622332886234.html","title":"class - ExamAgreement1622332886234","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreement1622332886234\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622332886234-ExamAgreement.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreement1622332886234'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreement1622332886234 implements MigrationInterface {\n  name = 'ExamAgreement1622332886234';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD `exam_id` int NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `uuid` `uuid` varchar(36) NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD CONSTRAINT `FK_20bfb4e7c97aa20956be86c6beb` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD CONSTRAINT `FK_7bdc7fbb138980e5471e2a19366` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP FOREIGN KEY `FK_7bdc7fbb138980e5471e2a19366`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP FOREIGN KEY `FK_20bfb4e7c97aa20956be86c6beb`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `uuid` `uuid` varchar(255) NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP COLUMN `exam_id`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementAnonymousDefault1622334780336.html":{"url":"classes/ExamAgreementAnonymousDefault1622334780336.html","title":"class - ExamAgreementAnonymousDefault1622334780336","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementAnonymousDefault1622334780336\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreementAnonymousDefault1622334780336'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreementAnonymousDefault1622334780336\n  implements MigrationInterface {\n  name = 'ExamAgreementAnonymousDefault1622334780336';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `anonymous` `anonymous` tinyint NOT NULL DEFAULT 0',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `anonymous` `anonymous` tinyint NOT NULL',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamAgreementController.html":{"url":"controllers/ExamAgreementController.html","title":"controller - ExamAgreementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamAgreementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam-agreement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam-agreement\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAgreement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAgreement(createAgreementDto: CreateExamAgreementDto, user: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-agreement.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAgreementDto\n                                    \n                                                CreateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { CreateExamAgreementDto } from '../dtos/create-exam-agreement.dto';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\nimport { ExamAgreementService } from '../services/exam-agreement.service';\n\n@Controller('exam-agreement')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\n@ApiTags('ExamAgreement')\nexport class ExamAgreementController {\n  constructor(private readonly examAgreementService: ExamAgreementService) {}\n\n  @Post()\n  async createAgreement(\n    @Body() createAgreementDto: CreateExamAgreementDto,\n    @GetUser() user: { id: number },\n  ): Promise {\n    return await this.examAgreementService.createAgreement({\n      ...createAgreementDto,\n      userId: user.id,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementRepository.html":{"url":"classes/ExamAgreementRepository.html","title":"class - ExamAgreementRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam-agreement.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\n\n@EntityRepository(ExamAgreement)\nexport class ExamAgreementRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamAgreementService.html":{"url":"injectables/ExamAgreementService.html","title":"injectable - ExamAgreementService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamAgreementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam-agreement.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                agreementsByDateInterval\n                            \n                            \n                                createAgreement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamAgreementRepository)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam-agreement.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamAgreementRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            agreementsByDateInterval\n                        \n                        \n                    \n                \n            \n            \n                \nagreementsByDateInterval(start: Date, end: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createAgreement\n                        \n                        \n                    \n                \n            \n            \n                \ncreateAgreement(createAgreementDto: CreateExamAgreementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAgreementDto\n                                    \n                                                CreateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Between } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateExamAgreementDto } from '../dtos/create-exam-agreement.dto';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\nimport { ExamAgreementRepository } from '../repositories/exam-agreement.repository';\n\n@Injectable()\nexport class ExamAgreementService {\n  constructor(\n    @InjectRepository(ExamAgreementRepository)\n    private readonly repository: ExamAgreementRepository,\n  ) {}\n\n  @Transactional()\n  createAgreement(\n    createAgreementDto: CreateExamAgreementDto,\n  ): Promise {\n    const agreement = this.repository.create(createAgreementDto);\n\n    return this.repository.save(agreement);\n  }\n\n  agreementsByDateInterval(start: Date, end: Date): Promise {\n    return this.repository.find({ where: { createdAt: Between(start, end) } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamController.html":{"url":"controllers/ExamController.html","title":"controller - ExamController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/exam.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Exam})\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n} from '@nestjs/common';\nimport { ExamService } from './exam.service';\nimport { CreateExamDto } from './dtos/create-exam.dto';\nimport { UpdateExamDto } from './dtos/update-exam.dto';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { Exam } from './entities/exam.entity';\n\n@Controller('exam')\n@ApiTags('Exam')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class ExamController {\n  constructor(private readonly examService: ExamService) {}\n\n  @Post()\n  @ApiOkResponse({ type: Exam })\n  async create(@Body() createExamDto: CreateExamDto): Promise {\n    return await this.examService.create(createExamDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Exam] })\n  async findAll(): Promise {\n    return await this.examService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.examService.findOne(id);\n  }\n\n  @Put(':id')\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateExamDto: UpdateExamDto,\n  ): Promise {\n    return await this.examService.update(id, updateExamDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.examService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExamModule.html":{"url":"modules/ExamModule.html","title":"module - ExamModule","body":"\n                   \n\n\n\n\n    Modules\n    ExamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\n\nExamAgreementService \n\nExamAgreementService \n\n\n\nExamService \n\nExamService \n\n\n\nExamModule\n\nExamModule\n\nExamAgreementService  -->\n\nExamModule->ExamAgreementService \n\n\n\nExamService  -->\n\nExamModule->ExamService \n\n\n\n\n\nExamAgreementService\n\nExamAgreementService\n\nExamModule -->\n\nExamAgreementService->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nExamTargetService\n\nExamTargetService\n\nExamModule -->\n\nExamTargetService->ExamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exam/exam.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExamAgreementService\n                        \n                        \n                            ExamService\n                        \n                        \n                            ExamTargetService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExamController\n                        \n                        \n                            ExamTargetController\n                        \n                        \n                            ExamAgreementController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExamAgreementService\n                        \n                        \n                            ExamService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { ExamService } from './exam.service';\nimport { ExamController } from './exam.controller';\nimport { ExamRepository } from './repositories/exam.repository';\nimport { ExamTargetRepository } from './repositories/exam-target.repository';\nimport { ExamTargetService } from './services/exam-target.service';\nimport { ExamTargetController } from './controllers/exam-target.controller';\nimport { ExamAgreementService } from './services/exam-agreement.service';\nimport { ExamAgreementRepository } from './repositories/exam-agreement.repository';\nimport { ExamAgreementController } from './controllers/exam-agreement.controller';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      ExamRepository,\n      ExamTargetRepository,\n      ExamAgreementRepository,\n    ]),\n  ],\n  controllers: [ExamController, ExamTargetController, ExamAgreementController],\n  providers: [ExamService, ExamTargetService, ExamAgreementService],\n  exports: [ExamService, ExamAgreementService],\n})\nexport class ExamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamRepository.html":{"url":"classes/ExamRepository.html","title":"class - ExamRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Exam } from '../entities/exam.entity';\n\n@EntityRepository(Exam)\nexport class ExamRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamService.html":{"url":"injectables/ExamService.html","title":"injectable - ExamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/exam.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                relations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                    Async\n                                newExam\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamRepository, targetService: ExamTargetService)\n                    \n                \n                        \n                            \n                                Defined in src/exam/exam.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetService\n                                                  \n                                                        \n                                                                        ExamTargetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/exam.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/exam.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            newExam\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newExam(dto: CreateExamDto | UpdateExamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/exam.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateExamDto | UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                                Readonly\n                            relations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['groups', 'period', 'agreements']\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/exam.service.ts:15\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateExamDto } from './dtos/create-exam.dto';\nimport { ExamTargetManagerDto } from './dtos/exam-target-manager.dto';\nimport { UpdateExamDto } from './dtos/update-exam.dto';\nimport { Exam } from './entities/exam.entity';\nimport { EXAM_NOT_FOUND } from './exam.constants';\nimport { ExamRepository } from './repositories/exam.repository';\nimport { ExamTargetService } from './services/exam-target.service';\n\n@Injectable()\nexport class ExamService {\n  private static readonly relations = ['groups', 'period', 'agreements'];\n\n  constructor(\n    @InjectRepository(ExamRepository)\n    private readonly repository: ExamRepository,\n    private readonly targetService: ExamTargetService,\n  ) {}\n\n  private async newExam(dto: CreateExamDto | UpdateExamDto): Promise {\n    const { targets, ...entityLike } = dto;\n    const exam = this.repository.create(entityLike);\n\n    if (targets) {\n      const targetMap = await this.targetService.targetMap;\n      exam.targets = targets.map((target) => targetMap.get(target)!);\n    }\n\n    return exam;\n  }\n\n  @Transactional()\n  async create(createExamDto: CreateExamDto): Promise {\n    const exam = await this.newExam(createExamDto);\n\n    return this.repository.save(exam);\n  }\n\n  findAll() {\n    return this.repository.find({ relations: ExamService.relations });\n  }\n\n  async findOne(id: number) {\n    const exam = await this.repository.findOne(id, {\n      relations: ExamService.relations,\n    });\n    if (!exam) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n\n    return exam;\n  }\n\n  @Transactional()\n  async update(id: number, updateExamDto: UpdateExamDto) {\n    let exam = await this.findOne(id);\n\n    exam = this.repository.merge(exam, await this.newExam(updateExamDto));\n\n    return this.repository.save(exam);\n  }\n\n  @Transactional()\n  async remove(id: number) {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTarget.html":{"url":"classes/ExamTarget.html","title":"class - ExamTarget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTarget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam-target.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamTargetType, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-target.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity, Unique } from 'typeorm';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\n\n@Entity('exam_target')\nexport class ExamTarget extends FFEntity {\n  @Column({ type: 'enum', enum: ExamTargetType, unique: true })\n  type: ExamTargetType;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTarget1622326106015.html":{"url":"classes/ExamTarget1622326106015.html","title":"class - ExamTarget1622326106015","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTarget1622326106015\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622326106015-ExamTarget.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTarget1622326106015'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nconst targets = [\"Student\", \"Professor\"];\n\nexport class ExamTarget1622326106015 implements MigrationInterface {\n  name = 'ExamTarget1622326106015';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IX_question_group_target` ON `question_group`',\n    );\n    await queryRunner.query(\n      \"CREATE TABLE `exam_target` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `type` enum ('Student', 'Professor') NOT NULL, UNIQUE INDEX `IDX_988f784cc581e38b7ed4943006` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n    await Promise.all(targets.map(target => queryRunner.query('INSERT INTO `exam_target` (`type`) VALUES (?)', [target])));\n    await queryRunner.query(\n      'CREATE TABLE `exam_targets_exam_target` (`exam_id` int NOT NULL, `exam_target_id` int NOT NULL, INDEX `IDX_4a22969058fa5105ad6bee583f` (`exam_id`), INDEX `IDX_af1604ea5493f65a6c8d70d98e` (`exam_target_id`), PRIMARY KEY (`exam_id`, `exam_target_id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `target`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` ADD CONSTRAINT `FK_4a22969058fa5105ad6bee583f1` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` ADD CONSTRAINT `FK_af1604ea5493f65a6c8d70d98ed` FOREIGN KEY (`exam_target_id`) REFERENCES `exam_target`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` DROP FOREIGN KEY `FK_af1604ea5493f65a6c8d70d98ed`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` DROP FOREIGN KEY `FK_4a22969058fa5105ad6bee583f1`',\n    );\n    await queryRunner.query(\n      \"ALTER TABLE `question_group` ADD `target` enum ('Student', 'Professor') NULL\",\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_af1604ea5493f65a6c8d70d98e` ON `exam_targets_exam_target`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_4a22969058fa5105ad6bee583f` ON `exam_targets_exam_target`',\n    );\n    await queryRunner.query('DROP TABLE `exam_targets_exam_target`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_988f784cc581e38b7ed4943006` ON `exam_target`',\n    );\n    await queryRunner.query('DROP TABLE `exam_target`');\n    await queryRunner.query(\n      'CREATE INDEX `IX_question_group_target` ON `question_group` (`target`)',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamTargetController.html":{"url":"controllers/ExamTargetController.html","title":"controller - ExamTargetController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamTargetController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam-target.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam-target\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTargets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTargets()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined, schema: undefined})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-target.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetService } from '../services/exam-target.service';\n\n@Controller('exam-target')\n@ApiTags('ExamTarget')\nexport class ExamTargetController {\n  constructor(private readonly targetService: ExamTargetService) {}\n\n  @Get()\n  @ApiOkResponse({\n    type: [String],\n    schema: { examples: Object.values(ExamTargetType) },\n  })\n  async getTargets(): Promise {\n    return await this.targetService.getTargets();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamTargetManagerDto.html":{"url":"interfaces/ExamTargetManagerDto.html","title":"interface - ExamTargetManagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamTargetManagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/exam-target-manager.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        targets\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        targets\n                                    \n                                \n                                \n                                    \n                                        targets:         ExamTargetType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ExamTargetType } from '../enums/exam-target-type.enum';\n\nexport interface ExamTargetManagerDto {\n  targets?: ExamTargetType[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetRepository.html":{"url":"classes/ExamTargetRepository.html","title":"class - ExamTargetRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam-target.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { ExamTarget } from '../entities/exam-target.entity';\n\n@EntityRepository(ExamTarget)\nexport class ExamTargetRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetService.html":{"url":"injectables/ExamTargetService.html","title":"injectable - ExamTargetService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam-target.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _targetMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTargets\n                            \n                            \n                                    Private\n                                    Async\n                                loadTargetMap\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    targetMap\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamTargetRepository)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam-target.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamTargetRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTargets()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            loadTargetMap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadTargetMap()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Optional\n                            _targetMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReadonlyMap\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/services/exam-target.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        targetMap\n                    \n                \n\n                \n                    \n                        gettargetMap()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/services/exam-target.service.ts:28\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport _ = require('lodash');\n\nimport { ExamTarget } from '../entities/exam-target.entity';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetRepository } from '../repositories/exam-target.repository';\n\n@Injectable()\nexport class ExamTargetService {\n  private _targetMap?: ReadonlyMap;\n\n  constructor(\n    @InjectRepository(ExamTargetRepository)\n    private readonly repository: ExamTargetRepository,\n  ) {\n    this.loadTargetMap();\n  }\n\n  private async loadTargetMap(): Promise {\n    const targets = await this.repository.find();\n\n    this._targetMap = new Map(\n      targets.map((target) => [target.type, target]),\n    );\n  }\n\n  get targetMap(): Promise> {\n    return new Promise((resolve, reject) => {\n      if (!this._targetMap) {\n        return this.loadTargetMap()\n          .then(() => resolve(_.cloneDeep(this._targetMap!)))\n          .catch((e) => reject(e));\n      }\n\n      resolve(_.cloneDeep(this._targetMap));\n    });\n  }\n\n  async getTargets(): Promise {\n    const map = await this.targetMap;\n\n    return Array.from(map.values()).map((target) => target.type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTitle1621036457247.html":{"url":"classes/ExamTitle1621036457247.html","title":"class - ExamTitle1621036457247","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTitle1621036457247\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621036457247-ExamTitle.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTitle1621036457247'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class ExamTitle1621036457247 implements MigrationInterface {\n    name = 'ExamTitle1621036457247'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `text` `title` text NOT NULL\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `title` `text` text NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FFEntity.html":{"url":"classes/FFEntity.html","title":"class - FFEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FFEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/ff.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        TimestampEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/ff.entity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PrimaryGeneratedColumn } from 'typeorm';\nimport { TimestampEntity } from './timestamp.entity';\n\nexport class FFEntity extends TimestampEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileSendDto.html":{"url":"interfaces/FileSendDto.html","title":"interface - FileSendDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileSendDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/dtos/file-send.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        buffer\n                                \n                                \n                                        encoding\n                                \n                                \n                                        mimetype\n                                \n                                \n                                        originalname\n                                \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalname\n                                    \n                                \n                                \n                                    \n                                        originalname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FileSendDto {\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n  buffer: Buffer;\n  size: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAdmin.html":{"url":"injectables/FirebaseAdmin.html","title":"injectable - FirebaseAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                app\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                auth\n                            \n                            \n                                database\n                            \n                            \n                                delete\n                            \n                            \n                                firestore\n                            \n                            \n                                instanceId\n                            \n                            \n                                machineLearning\n                            \n                            \n                                messaging\n                            \n                            \n                                projectManagement\n                            \n                            \n                                remoteConfig\n                            \n                            \n                                securityRules\n                            \n                            \n                                storage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    options\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: FirebaseModuleOptions)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        FirebaseModuleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            auth\n                        \n                        \n                    \n                \n            \n            \n                \nauth()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         firebase.auth.Auth\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            database\n                        \n                        \n                    \n                \n            \n            \n                \ndatabase(url?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     firebase.database.Database\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            firestore\n                        \n                        \n                    \n                \n            \n            \n                \nfirestore()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.firestore.Firestore\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            instanceId\n                        \n                        \n                    \n                \n            \n            \n                \ninstanceId()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.instanceId.InstanceId\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            machineLearning\n                        \n                        \n                    \n                \n            \n            \n                \nmachineLearning()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.machineLearning.MachineLearning\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            messaging\n                        \n                        \n                    \n                \n            \n            \n                \nmessaging()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.messaging.Messaging\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            projectManagement\n                        \n                        \n                    \n                \n            \n            \n                \nprojectManagement()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.projectManagement.ProjectManagement\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remoteConfig\n                        \n                        \n                    \n                \n            \n            \n                \nremoteConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.remoteConfig.RemoteConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            securityRules\n                        \n                        \n                    \n                \n            \n            \n                \nsecurityRules()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.securityRules.SecurityRules\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            storage\n                        \n                        \n                    \n                \n            \n            \n                \nstorage()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.storage.Storage\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.app.App\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:18\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FIREBASE_OPTIONS } from '../firebase-admin.constants';\nimport { FirebaseModuleOptions } from '../../interfaces';\n\n@Injectable()\nexport class FirebaseAdmin implements firebase.app.App {\n  private readonly app: firebase.app.App;\n\n  constructor(@Inject(FIREBASE_OPTIONS) options: FirebaseModuleOptions) {\n    this.app = firebase.initializeApp({\n      databaseURL: options.databaseURL,\n      storageBucket: options.storageBucket,\n      credential: firebase.credential.cert(options.cert),\n    });\n  }\n\n  get name(): string {\n    return this.app.name;\n  }\n\n  get options(): firebase.AppOptions {\n    return this.app.options;\n  }\n\n  auth(): firebase.auth.Auth {\n    return this.app.auth();\n  }\n\n  database(url?: string): firebase.database.Database {\n    return this.app.database(url);\n  }\n\n  firestore(): firebase.firestore.Firestore {\n    return this.app.firestore();\n  }\n\n  instanceId(): firebase.instanceId.InstanceId {\n    return this.app.instanceId();\n  }\n\n  machineLearning(): firebase.machineLearning.MachineLearning {\n    return this.app.machineLearning();\n  }\n\n  messaging(): firebase.messaging.Messaging {\n    return this.app.messaging();\n  }\n\n  projectManagement(): firebase.projectManagement.ProjectManagement {\n    return this.app.projectManagement();\n  }\n\n  remoteConfig(): firebase.remoteConfig.RemoteConfig {\n    return this.app.remoteConfig();\n  }\n\n  securityRules(): firebase.securityRules.SecurityRules {\n    return this.app.securityRules();\n  }\n\n  storage(): firebase.storage.Storage {\n    return this.app.storage();\n  }\n\n  delete(): Promise {\n    return this.app.delete();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseAdminModule.html":{"url":"modules/FirebaseAdminModule.html","title":"module - FirebaseAdminModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseAdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FirebaseAdminModule\n\n\n\ncluster_FirebaseAdminModule_providers\n\n\n\ncluster_FirebaseAdminModule_exports\n\n\n\n\nFirebaseAdmin \n\nFirebaseAdmin \n\n\n\nFirebaseAdminModule\n\nFirebaseAdminModule\n\nFirebaseAdmin  -->\n\nFirebaseAdminModule->FirebaseAdmin \n\n\n\n\n\nFirebaseAdmin\n\nFirebaseAdmin\n\nFirebaseAdminModule -->\n\nFirebaseAdmin->FirebaseAdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase-admin/firebase-admin.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseAdmin\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseAdmin\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from '../interfaces';\nimport { FirebaseAdmin } from './providers/firebase-admin.provider';\nimport { FIREBASE_OPTIONS } from './firebase-admin.constants';\n\n@Module({ providers: [FirebaseAdmin], exports: [FirebaseAdmin] })\nexport class FirebaseAdminModule {\n  private static readonly exports = [FirebaseAdmin];\n  private static readonly providers: Provider[] = [FirebaseAdmin];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useValue: options,\n        },\n        ...this.providers,\n      ],\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      imports: options.imports ?? [],\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useFactory: options.useFactory,\n          inject: options.inject ?? [],\n        },\n        ...this.providers,\n      ],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAsyncModuleOptions.html":{"url":"interfaces/FirebaseAsyncModuleOptions.html","title":"interface - FirebaseAsyncModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAsyncModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        inject\n                                \n                                \n                                        useFactory\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAuthDecodedToken.html":{"url":"interfaces/FirebaseAuthDecodedToken.html","title":"interface - FirebaseAuthDecodedToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAuthDecodedToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        emailVerified\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailVerified\n                                    \n                                \n                                \n                                    \n                                        emailVerified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FirebaseAuthDecodedToken {\n  emailVerified?: boolean;\n  email?: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAuthService.html":{"url":"injectables/FirebaseAuthService.html","title":"injectable - FirebaseAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firebaseAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                deleteUser\n                            \n                            \n                                getUser\n                            \n                            \n                                updateUser\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createDto: firebase.auth.CreateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            firebase.auth.CreateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \nupdateUser(uid: string, updateDto: firebase.auth.UpdateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            firebase.auth.UpdateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firebaseAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         firebase.auth.Auth\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\n\nimport { FirebaseAuthDecodedToken } from '../interfaces/firebase-auth-decoded-token.interface';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseAuthService {\n  private readonly firebaseAuth: firebase.auth.Auth;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firebaseAuth = firebaseAdmin.auth();\n  }\n\n  async verifyToken(token: string): Promise {\n    try {\n      const decoded = await this.firebaseAuth.verifyIdToken(token);\n      return {\n        uid: decoded.uid,\n        email: decoded.email,\n        emailVerified: decoded.email_verified,\n      };\n    } catch (err) {\n      return null;\n    }\n  }\n\n  getUser(uid: string): Promise {\n    return this.firebaseAuth.getUser(uid);\n  }\n\n  createUser(\n    createDto: firebase.auth.CreateRequest,\n  ): Promise {\n    return this.firebaseAuth.createUser(createDto);\n  }\n\n  updateUser(\n    uid: string,\n    updateDto: firebase.auth.UpdateRequest,\n  ): Promise {\n    return this.firebaseAuth.updateUser(uid, updateDto);\n  }\n\n  deleteUser(uid: string): Promise {\n    return this.firebaseAuth.deleteUser(uid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseCloudMessagingService.html":{"url":"injectables/FirebaseCloudMessagingService.html","title":"injectable - FirebaseCloudMessagingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseCloudMessagingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-cloud-messaging.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                fcm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendToDevice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendToDevice\n                        \n                        \n                    \n                \n            \n            \n                \nsendToDevice(token: string, message: firebase.messaging.MessagingPayload, options?: firebase.messaging.MessagingOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            firebase.messaging.MessagingPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            firebase.messaging.MessagingOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            fcm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.messaging.Messaging\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseCloudMessagingService {\n  private readonly fcm: firebase.messaging.Messaging;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.fcm = firebaseAdmin.messaging();\n  }\n\n  sendToDevice(\n    token: string,\n    message: firebase.messaging.MessagingPayload,\n    options?: firebase.messaging.MessagingOptions,\n  ): Promise {\n    return this.fcm.sendToDevice(token, message, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseFirestoreService.html":{"url":"injectables/FirebaseFirestoreService.html","title":"injectable - FirebaseFirestoreService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseFirestoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-firestore.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firestore\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collection: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-firestore.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FirebaseFirestoreCollection\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firestore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.firestore.Firestore\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\nimport { FirebaseFirestoreCollection } from '../types/firebase-firestore-collection.type';\n\n@Injectable()\nexport class FirebaseFirestoreService {\n  private readonly firestore: firebase.firestore.Firestore;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firestore = firebaseAdmin.firestore();\n  }\n\n  getCollection(collection: string): FirebaseFirestoreCollection {\n    return this.firestore.collection(collection);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseModule.html":{"url":"modules/FirebaseModule.html","title":"module - FirebaseModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_exports\n\n\n\ncluster_FirebaseModule_providers\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module, Provider } from '@nestjs/common';\n\nimport { FirebaseAuthService } from './services/firebase-auth.service';\nimport { FirebaseCloudMessagingService } from './services/firebase-cloud-messaging.service';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from './interfaces/firebase-async-module-options.interface';\nimport { FirebaseAdminModule } from './firebase-admin/firebase-admin.module';\nimport { FirebaseStorageService, FirebaseFirestoreService } from './services';\n\n@Module({\n  providers: [FirebaseAuthService, FirebaseCloudMessagingService],\n  exports: [FirebaseAuthService, FirebaseCloudMessagingService],\n})\nexport class FirebaseModule {\n  private static readonly providers: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  private static readonly exports: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRoot(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRootAsync(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseModuleOptions.html":{"url":"interfaces/FirebaseModuleOptions.html","title":"interface - FirebaseModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cert\n                                \n                                \n                                            Optional\n                                        databaseURL\n                                \n                                \n                                            Optional\n                                        storageBucket\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cert\n                                    \n                                \n                                \n                                    \n                                        cert:     firebase.ServiceAccount\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     firebase.ServiceAccount\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        databaseURL\n                                    \n                                \n                                \n                                    \n                                        databaseURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storageBucket\n                                    \n                                \n                                \n                                    \n                                        storageBucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseStorageService.html":{"url":"injectables/FirebaseStorageService.html","title":"injectable - FirebaseStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-storage.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                storage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-storage.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(path: string, data: Buffer, contentType: string, publicFile, bucket?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-storage.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    contentType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    publicFile\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    bucket\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            storage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.storage.Storage\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-storage.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { Injectable } from '@nestjs/common';\n\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseStorageService {\n  private readonly storage: firebase.storage.Storage;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.storage = firebaseAdmin.storage();\n  }\n\n  async upload(\n    path: string,\n    data: Buffer,\n    contentType: string,\n    publicFile = false,\n    bucket?: string,\n  ): Promise {\n    const file = this.storage.bucket(bucket).file(path);\n    await file.save(data, {\n      gzip: true,\n      contentType,\n      public: publicFile,\n      metadata: {\n        cacheControl: 'public, max-age=31536000',\n      },\n    });\n    return file.publicUrl();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseUploader.html":{"url":"injectables/FirebaseUploader.html","title":"injectable - FirebaseUploader","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseUploader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/firebase-uploader.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: FirebaseStorageService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/services/firebase-uploader.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        FirebaseStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/firebase-uploader.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { randomBytes } from 'crypto';\nimport { FirebaseStorageService } from 'src/firebase';\nimport { FileSendDto } from '../dtos/file-send.dto';\nimport { UploaderService } from './uploader.service';\n\n@Injectable()\nexport class FirebaseUploader implements UploaderService {\n  constructor(private readonly storageService: FirebaseStorageService) {}\n\n  async upload(fileDto: FileSendDto, path = ''): Promise {\n    return await this.storageService.upload(\n      `${path}/${randomBytes(32).toString('hex')}`,\n      fileDto.buffer,\n      fileDto.mimetype,\n      true,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grade.html":{"url":"classes/Grade.html","title":"class - Grade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                period\n                            \n                            \n                                subject\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AnswerGrade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnswerGrade } from 'src/answer/entities/answer-grade.entity';\nimport { Entity, ManyToOne, OneToMany } from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Period } from './period.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('grade')\nexport class Grade extends FFEntity {\n  @ManyToOne(() => Subject)\n  subject: Subject;\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => AnswerGrade, (answer) => answer.grade)\n  answers: AnswerGrade[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InfraModule.html":{"url":"modules/InfraModule.html","title":"module - InfraModule","body":"\n                   \n\n\n\n\n    Modules\n    InfraModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_exports\n\n\n\ncluster_InfraModule_imports\n\n\n\n\nFirebaseModule\n\nFirebaseModule\n\n\n\nInfraModule\n\nInfraModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/infra.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UploadController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FirebaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UploaderService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { FirebaseModule } from 'src/firebase';\nimport { UploadController } from './controllers/upload.controller';\nimport { FirebaseUploader } from './services/firebase-uploader.service';\nimport { UploaderService } from './services/uploader.service';\n\n@Module({\n  imports: [\n    FirebaseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get('firebase')!,\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [{ provide: UploaderService, useClass: FirebaseUploader }],\n  controllers: [UploadController],\n  exports: [UploaderService],\n})\nexport class InfraModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        type\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  type: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userService: UserService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModuleOptions } from '@nestjs/jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UserType } from 'src/user/enum/user-type.enum';\n\nimport { jwtConfigKey } from '../../config';\n\nimport { UserService } from '../../user/user.service';\nimport { AuthService } from '../auth.service';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n    configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get(jwtConfigKey)!.secret,\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const auth = await this.authService.findAuth({ login: payload.uid });\n    if (!auth) {\n      throw new UnauthorizedException();\n    }\n\n    const user = await this.userService.findSpecializedUser({\n      enrollment: payload.uid,\n    });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CustomLogger } from './logger.service';\n\n@Module({\n  providers: [CustomLogger],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/login.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        AuthDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/login.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { PASSWORD_MAX, PASSWORD_MIN } from '../auth.constants';\nimport { AuthDto } from './auth.dto';\n\nexport class LoginDto extends AuthDto {\n  @IsString()\n  @Length(PASSWORD_MIN, PASSWORD_MAX)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PayloadInterceptor.html":{"url":"injectables/PayloadInterceptor.html","title":"injectable - PayloadInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PayloadInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/payload.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/payload.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class PayloadInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Period.html":{"url":"classes/Period.html","title":"class - Period","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Period\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/period.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                endedAt\n                            \n                            \n                                exams\n                            \n                            \n                                grades\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                statedAt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exams\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport { Column, Entity, OneToMany } from 'typeorm';\nimport { Grade } from './grade.entity';\n\n@Entity('period')\nexport class Period extends FFEntity {\n  @Column({ type: 'varchar', nullable: true })\n  name?: string;\n\n  @Column({ type: 'datetime' })\n  statedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @OneToMany(() => Grade, (grade) => grade.period)\n  grades: Grade[];\n\n  @OneToMany(() => Exam, (exam) => exam.period)\n  exams: Exam[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Professor.html":{"url":"classes/Professor.html","title":"class - Professor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Professor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/professor.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChildEntity } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\n\n@ChildEntity()\nexport class Professor extends User {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfessorRepository.html":{"url":"classes/ProfessorRepository.html","title":"class - ProfessorRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfessorRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/professor.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Professor } from '../entities/professor.entity';\n\n@EntityRepository(Professor)\nexport class ProfessorRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfessorService.html":{"url":"injectables/ProfessorService.html","title":"injectable - ProfessorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfessorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/professor.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ProfessorRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/professor.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ProfessorRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Professor } from '../entities/professor.entity';\nimport { ProfessorRepository } from '../repositories/professor.repository';\n\n@Injectable()\nexport class ProfessorService {\n  constructor(\n    @InjectRepository(ProfessorRepository)\n    private readonly repository: ProfessorRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const professor = this.repository.create(createDto);\n\n    return this.repository.save(professor);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                group\n                            \n                            \n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                position\n                            \n                            \n                                required\n                            \n                            \n                                statement\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuestionGroup\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { Column, Entity, Index, ManyToOne } from 'typeorm';\n\n@Entity()\nexport class Question extends FFEntity {\n  @Column({ type: 'text' })\n  statement: string;\n\n  @Column({ type: 'text', nullable: true })\n  imageUrl?: string;\n\n  @Column({ type: 'varchar', nullable: true })\n  imageAlt?: string;\n\n  @Column({ type: 'bool', default: true })\n  required: boolean;\n\n  @Column({ type: 'int' })\n  groupId: number;\n\n  @Index('IX_question_position')\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @ManyToOne(() => QuestionGroup)\n  group: QuestionGroup;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createQuestion\n                            \n                            \n                                    Async\n                                createQuestions\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Question})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestions(groupId: number, createQuestionsDto: CreateQuestionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':groupId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createQuestionsDto\n                                    \n                                                CreateQuestionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(findDto: QuestionFindDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuesitonDto: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuesitonDto\n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiNotFoundResponse, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { CreateQuestionDto } from '../dtos/create-question.dto';\nimport { QuestionFindDto } from '../dtos/question-find.dto';\nimport { ReorderQuestionDto } from '../dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from '../dtos/update-question.dto';\nimport { Question } from '../entities/question.entity';\nimport { QuestionService } from '../services/question.service';\nimport { QuestionGroupService } from '../services/question-group.service';\nimport { CreateQuestionsDto } from '../dtos/create-questions.dto';\n\n@Controller('question')\n@ApiTags('Question')\n@UseGuards(JwtGuard)\nexport class QuestionController {\n  constructor(private readonly questionService: QuestionService) {}\n\n  @Post()\n  @ApiOkResponse({ type: Question })\n  async createQuestion(\n    @Body() createQuestionDto: CreateQuestionDto,\n  ): Promise {\n    return await this.questionService.createQuestion(createQuestionDto);\n  }\n\n  @Post(':groupId')\n  @ApiOkResponse({ type: [Question] })\n  async createQuestions(\n    @Param('groupId', ParseIntPipe) groupId: number,\n    @Body() createQuestionsDto: CreateQuestionsDto,\n  ): Promise {\n    return await this.questionService.createQuestions(\n      groupId,\n      createQuestionsDto,\n    );\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Question] })\n  async find(@Query() findDto: QuestionFindDto) {\n    return await this.questionService.find(findDto);\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.questionService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionDto: UpdateQuestionDto,\n  ): Promise {\n    return await this.questionService.update(id, updateQuestionDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({ type: [Question] })\n  async reorder(\n    @Body() reorderQuesitonDto: ReorderQuestionDto,\n  ): Promise {\n    return await this.questionService.reorder(reorderQuesitonDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.questionService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionFindDto.html":{"url":"classes/QuestionFindDto.html","title":"class - QuestionFindDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionFindDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/question-find.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/question-find.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class QuestionFindDto {\n  @IsPositive()\n  @IsOptional()\n  groupId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup.html":{"url":"classes/QuestionGroup.html","title":"class - QuestionGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question-group.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                personal\n                            \n                            \n                                position\n                            \n                            \n                                questions\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_group_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/question-group/entities/question-group.entity.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport {\n  AfterLoad,\n  Column,\n  Entity,\n  Index,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { ExamTargetType } from '../../exam/enums/exam-target-type.enum';\nimport { Question } from './question.entity';\n\n@Entity()\nexport class QuestionGroup extends FFEntity {\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @Column({ type: 'bool', default: false })\n  class: boolean;\n\n  @Column({ type: 'bool', default: false })\n  personal: boolean;\n\n  @Index('IX_question_group_position')\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @Column({ type: 'int', nullable: true })\n  examId: number;\n\n  @OneToMany(() => Question, (question) => question.group)\n  questions: Question[];\n\n  @ManyToOne(() => Exam)\n  exam: Exam;\n\n  @AfterLoad()\n  sortItems() {\n    this.questions =\n      this.questions?.sort((a, b) => a.position - b.position) ?? [];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup1620179231630.html":{"url":"classes/QuestionGroup1620179231630.html","title":"class - QuestionGroup1620179231630","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup1620179231630\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620179231630-QuestionGroup.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup1620179231630'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionGroup1620179231630 implements MigrationInterface {\n    name = 'QuestionGroup1620179231630'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `question` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `statement` text NOT NULL, `image_url` text NOT NULL, `image_alt` varchar(255) NOT NULL DEFAULT '', `required` tinyint NOT NULL DEFAULT 1, `group_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `question_group` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"DROP TABLE `question_group`\");\n        await queryRunner.query(\"DROP TABLE `question`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionGroupController.html":{"url":"controllers/QuestionGroupController.html","title":"controller - QuestionGroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionGroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question-group.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question-group\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                getTarget\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: QuestionGroup})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTarget\n                        \n                        \n                    \n                \n            \n            \n                \ngetTarget()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('target')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ExamTargetType[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuestionGroupDto: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuestionGroupDto\n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n  Patch,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { QuestionGroupService } from '../services/question-group.service';\nimport { CreateQuestionGroupDto } from '../dtos/create-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dtos/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CopyQuestionGroupDto } from '../dtos/copy-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dtos/reorder-question-group.dto';\nimport { ExamTargetType } from '../../exam/enums/exam-target-type.enum';\n\n@Controller('question-group')\n@ApiTags('QuestionGroup')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class QuestionGroupController {\n  constructor(private readonly questionGroupService: QuestionGroupService) {}\n\n  @Post()\n  @ApiOkResponse({ type: QuestionGroup })\n  async create(\n    @Body() createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    return await this.questionGroupService.create(createQuestionGroupDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async findAll(): Promise {\n    return await this.questionGroupService.findAll();\n  }\n\n  @Get('target')\n  @ApiOkResponse({ type: [() => ExamTargetType] })\n  getTarget(): ExamTargetType[] {\n    return this.questionGroupService.getTargets();\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.questionGroupService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    return await this.questionGroupService.update(id, updateQuestionGroupDto);\n  }\n\n  @Put()\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async copy(\n    @Body() copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    return await this.questionGroupService.copy(copyQuestionGroupDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async reorder(\n    @Body() reorderQuestionGroupDto: ReorderQuestionGroupDto,\n  ): Promise {\n    return await this.questionGroupService.reorder(reorderQuestionGroupDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.questionGroupService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionGroupModule.html":{"url":"modules/QuestionGroupModule.html","title":"module - QuestionGroupModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionGroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_imports\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionGroupModule -->\n\nQuestionService->QuestionGroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question-group/question-group.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestionGroupService\n                        \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionGroupController\n                        \n                        \n                            QuestionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ExamModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuestionGroupService } from './services/question-group.service';\nimport { QuestionGroupController } from './controllers/question-group.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QuestionGroupRepository } from './repositories/question-group.repository';\nimport { QuestionController } from './controllers/question.controller';\nimport { ExamModule } from '../exam/exam.module';\nimport { QuestionService } from './services/question.service';\nimport { QuestionRepository } from './repositories/question.repository';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([QuestionGroupRepository, QuestionRepository]),\n    ExamModule,\n  ],\n  controllers: [QuestionGroupController, QuestionController],\n  providers: [QuestionGroupService, QuestionService],\n})\nexport class QuestionGroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupRepository.html":{"url":"classes/QuestionGroupRepository.html","title":"class - QuestionGroupRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/repositories/question-group.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from \"typeorm\";\nimport { BaseRepository } from \"typeorm-transactional-cls-hooked\";\nimport { QuestionGroup } from \"../entities/question-group.entity\";\n\n@EntityRepository(QuestionGroup)\nexport class QuestionGroupRepository extends BaseRepository {}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionGroupService.html":{"url":"injectables/QuestionGroupService.html","title":"injectable - QuestionGroupService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionGroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/services/question-group.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                getTargets\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Private\n                                    Async\n                                setExamAndPosition\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionGroupRepository, examService: ExamService, questionService: QuestionService)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/services/question-group.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionGroupRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examService\n                                                  \n                                                        \n                                                                        ExamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTargets\n                        \n                        \n                    \n                \n            \n            \n                \ngetTargets()\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ExamTargetType[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            setExamAndPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setExamAndPosition(questionGroup: QuestionGroup, examId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questionGroup\n                                    \n                                                QuestionGroup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { ExamService } from 'src/exam/exam.service';\nimport { In } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CopyQuestionGroupDto } from '../dtos/copy-question-group.dto';\nimport { CreateQuestionGroupDto } from '../dtos/create-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dtos/reorder-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dtos/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { questionGroupNotFound } from '../question-group.constants';\nimport { QuestionService } from './question.service';\nimport { QuestionGroupRepository } from '../repositories/question-group.repository';\nimport { last } from 'src/core/utils/last.util';\nimport { createAliasResolver } from '@casl/ability';\nimport { ExamTargetType } from '../../exam/enums/exam-target-type.enum';\n\n@Injectable()\nexport class QuestionGroupService {\n  constructor(\n    @InjectRepository(QuestionGroupRepository)\n    private readonly repository: QuestionGroupRepository,\n    private readonly examService: ExamService,\n    private readonly questionService: QuestionService,\n  ) {}\n\n  private async setExamAndPosition(\n    questionGroup: QuestionGroup,\n    examId: number,\n  ) {\n    questionGroup.exam = await this.examService.findOne(examId);\n\n    questionGroup.position =\n      (last(questionGroup.exam.groups)?.position ?? -1) + 1;\n  }\n\n  @Transactional()\n  async create(\n    createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    const questionGroup = this.repository.create(createQuestionGroupDto);\n    if (createQuestionGroupDto.examId) {\n      await this.setExamAndPosition(\n        questionGroup,\n        createQuestionGroupDto.examId,\n      );\n    }\n    return this.repository.save(questionGroup);\n  }\n\n  findAll(): Promise {\n    return this.repository.find({ relations: ['questions'] });\n  }\n\n  async findOne(id: number): Promise {\n    const questionGroup = await this.repository.findOne({\n      where: { id },\n      relations: ['questions'],\n    });\n\n    if (!questionGroup) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n\n    return questionGroup;\n  }\n\n  @Transactional()\n  async update(\n    id: number,\n    updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    let questionGroup = await this.findOne(id);\n\n    if (\n      updateQuestionGroupDto.examId &&\n      updateQuestionGroupDto.examId !== questionGroup.examId\n    ) {\n      await this.setExamAndPosition(\n        questionGroup,\n        updateQuestionGroupDto.examId,\n      );\n    }\n\n    questionGroup = this.repository.merge(\n      questionGroup,\n      updateQuestionGroupDto,\n    );\n\n    return this.repository.save(questionGroup);\n  }\n\n  @Transactional()\n  async copy(\n    copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    const toCopy = await this.findOne(copyQuestionGroupDto.groupId);\n    const exam = await this.examService.findOne(copyQuestionGroupDto.examId);\n\n    const group = await this.repository.save(\n      this.repository.create({\n        ...toCopy,\n        questions: [],\n        exam,\n        id: undefined,\n      }),\n    );\n\n    group.questions = await this.questionService.copyToGroup(\n      group,\n      toCopy.questions,\n    );\n\n    return group;\n  }\n\n  @Transactional()\n  async reorder({\n    examId,\n    groupIds,\n  }: ReorderQuestionGroupDto): Promise {\n    const groups = await this.repository.find({\n      where: { examId, id: In(groupIds) },\n    });\n\n    const groupIdPositionMap: ReadonlyMap = new Map(\n      groupIds.map((id, position) => [id, position]),\n    );\n\n    return (\n      await Promise.all(\n        groups.map(async (group) => {\n          group.position = groupIdPositionMap.get(group.id) ?? 0;\n          await this.repository.update(group.id, { position: group.position });\n          return group;\n        }),\n      )\n    ).sort((a, b) => a.position - b.position);\n  }\n\n  getTargets(): ExamTargetType[] {\n    return Object.values(ExamTargetType);\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupTarget1621992475274.html":{"url":"classes/QuestionGroupTarget1621992475274.html","title":"class - QuestionGroupTarget1621992475274","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupTarget1621992475274\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621992475274-QuestionGroupTarget.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroupTarget1621992475274'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class QuestionGroupTarget1621992475274 implements MigrationInterface {\n  name = 'QuestionGroupTarget1621992475274';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"ALTER TABLE `question_group` ADD `target` enum ('Student', 'Professor') NULL\",\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query('ALTER TABLE `user` DROP COLUMN `type`');\n    await queryRunner.query(\n      \"ALTER TABLE `user` ADD `type` enum ('Professor', 'Student', 'User') NOT NULL\",\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IX_question_group_target` ON `question_group` (`target`)',\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user` (`type`)',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IX_question_group_target` ON `question_group`',\n    );\n    await queryRunner.query('ALTER TABLE `user` DROP COLUMN `type`');\n    await queryRunner.query(\n      'ALTER TABLE `user` ADD `type` varchar(255) NOT NULL',\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user` (`type`)',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `target`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionImage1620477869366.html":{"url":"classes/QuestionImage1620477869366.html","title":"class - QuestionImage1620477869366","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionImage1620477869366\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477869366-QuestionImage.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionImage1620477869366'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionImage1620477869366 implements MigrationInterface {\n    name = 'QuestionImage1620477869366'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NOT NULL DEFAULT ''\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPosition1620488935141.html":{"url":"classes/QuestionPosition1620488935141.html","title":"class - QuestionPosition1620488935141","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPosition1620488935141\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620488935141-QuestionPosition.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionPosition1620488935141'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionPosition1620488935141 implements MigrationInterface {\n    name = 'QuestionPosition1620488935141'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` ADD `position` int NOT NULL DEFAULT '0'\");\n        await queryRunner.query(\"ALTER TABLE `question_group` ADD `position` int NOT NULL DEFAULT '0'\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question_group` DROP COLUMN `position`\");\n        await queryRunner.query(\"ALTER TABLE `question` DROP COLUMN `position`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPositionIdx1620563708532.html":{"url":"classes/QuestionPositionIdx1620563708532.html","title":"class - QuestionPositionIdx1620563708532","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPositionIdx1620563708532\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620563708532-QuestionPositionIdx.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionPositionIdx1620563708532'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionPositionIdx1620563708532 implements MigrationInterface {\n    name = 'QuestionPositionIdx1620563708532'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"CREATE INDEX `IX_question_position` ON `question` (`position`)\");\n        await queryRunner.query(\"CREATE INDEX `IX_question_group_position` ON `question_group` (`position`)\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_group_position` ON `question_group`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_position` ON `question`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionRepository.html":{"url":"classes/QuestionRepository.html","title":"class - QuestionRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/repositories/question.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Question } from '../entities/question.entity';\n\n@EntityRepository(Question)\nexport class QuestionRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/services/question.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copyToGroup\n                            \n                            \n                                    Async\n                                createQuestion\n                            \n                            \n                                    Async\n                                createQuestions\n                            \n                            \n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                    Async\n                                getNextPosition\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionRepository, groupService: QuestionGroupService)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/services/question.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        groupService\n                                                  \n                                                        \n                                                                        QuestionGroupService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copyToGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copyToGroup(group: QuestionGroup, questions: Question[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                QuestionGroup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questions\n                                    \n                                                Question[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestions(groupId: number, createQuestionsDto: CreateQuestionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createQuestionsDto\n                                    \n                                                CreateQuestionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(findDto: QuestionFindDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getNextPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNextPosition(groupId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { In } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CreateQuestionDto } from '../dtos/create-question.dto';\nimport { QuestionFindDto } from '../dtos/question-find.dto';\nimport { ReorderQuestionDto } from '../dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from '../dtos/update-question.dto';\nimport { Question } from '../entities/question.entity';\nimport { questionNotFound } from '../question.constants';\nimport { QuestionRepository } from '../repositories/question.repository';\nimport { QuestionGroupService } from './question-group.service';\nimport { last } from 'src/core/utils/last.util';\nimport { CreateQuestionsDto } from '../dtos/create-questions.dto';\n\n@Injectable()\nexport class QuestionService {\n  constructor(\n    @InjectRepository(QuestionRepository)\n    private readonly repository: QuestionRepository,\n    @Inject(forwardRef(() => QuestionGroupService))\n    private readonly groupService: QuestionGroupService,\n  ) {}\n\n  private async getNextPosition(groupId: number): Promise {\n    const { questions } = await this.groupService.findOne(groupId);\n\n    return (last(questions)?.position ?? -1) + 1;\n  }\n\n  @Transactional()\n  async createQuestion(\n    createQuestionDto: CreateQuestionDto,\n  ): Promise {\n    const question = this.repository.create({\n      ...createQuestionDto,\n      position: await this.getNextPosition(createQuestionDto.groupId),\n    });\n\n    return this.repository.save(question);\n  }\n\n  @Transactional()\n  async createQuestions(\n    groupId: number,\n    createQuestionsDto: CreateQuestionsDto,\n  ): Promise {\n    const questions = this.repository.create(\n      createQuestionsDto.questions.map((dto, position) =>\n        this.repository.create({ ...dto, position, groupId }),\n      ),\n    );\n\n    return this.repository.save(questions);\n  }\n\n  find(findDto: QuestionFindDto): Promise {\n    return this.repository.find({\n      where: (qb) => {\n        if (findDto.groupId) {\n          qb.where(`${qb.alias}.groupId = :groupId`, findDto);\n        }\n        return qb;\n      },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const question = await this.repository.findOne({ id });\n    if (!question) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n\n    return question;\n  }\n\n  @Transactional()\n  async update(id: number, updateDto: UpdateQuestionDto): Promise {\n    let question = await this.findOne(id);\n\n    if (updateDto.groupId && question.groupId !== updateDto.groupId) {\n      question.position = await this.getNextPosition(updateDto.groupId);\n    }\n\n    question = this.repository.merge(question, updateDto);\n\n    return this.repository.save(question);\n  }\n\n  @Transactional()\n  async copyToGroup(\n    group: QuestionGroup,\n    questions: Question[],\n  ): Promise {\n    return await this.repository.save(\n      questions.map((question) =>\n        this.repository.create({ ...question, group, id: undefined }),\n      ),\n    );\n  }\n\n  @Transactional()\n  async reorder({\n    groupId,\n    questionIds,\n  }: ReorderQuestionDto): Promise {\n    const questions = await this.repository.find({\n      where: { groupId, id: In(questionIds) },\n    });\n\n    const questionPositionMap: ReadonlyMap = new Map(\n      questionIds.map((id, position) => [id, position]),\n    );\n\n    return await this.repository.save(\n      questions.map((question) => {\n        question.position = questionPositionMap.get(question.id) ?? 0;\n        return question;\n      }),\n    );\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete({ id });\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionDto.html":{"url":"classes/ReorderQuestionDto.html","title":"class - ReorderQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/reorder-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupId\n                            \n                            \n                                questionIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from \"class-validator\";\n\nexport class ReorderQuestionDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsArray()\n  @IsPositive({each: true})\n  questionIds: number[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionGroupDto.html":{"url":"classes/ReorderQuestionGroupDto.html","title":"class - ReorderQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/reorder-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question-group.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from 'class-validator';\n\nexport class ReorderQuestionGroupDto {\n  @IsPositive()\n  examId: number;\n\n  @IsArray()\n  @IsPositive({ each: true })\n  groupIds: number[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SoftDeleteResult.html":{"url":"interfaces/SoftDeleteResult.html","title":"interface - SoftDeleteResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SoftDeleteResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/soft-delete-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        raw\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        raw\n                                    \n                                \n                                \n                                    \n                                        raw:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SoftDeleteResult {\n  raw: {\n    affectedRows: number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Student.html":{"url":"classes/Student.html","title":"class - Student","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Student\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/student.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChildEntity } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\n\n@ChildEntity()\nexport class Student extends User {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StudentRepository.html":{"url":"classes/StudentRepository.html","title":"class - StudentRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StudentRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/student.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Student } from '../entities/student.entity';\n\n@EntityRepository(Student)\nexport class StudentRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StudentService.html":{"url":"injectables/StudentService.html","title":"injectable - StudentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StudentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/student.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: StudentRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/student.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        StudentRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Student } from '../entities/student.entity';\nimport { StudentRepository } from '../repositories/student.repository';\n\n@Injectable()\nexport class StudentService {\n  constructor(\n    @InjectRepository(StudentRepository)\n    private readonly repository: StudentRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const student = this.repository.create(createDto);\n\n    return this.repository.save(student);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Subject.html":{"url":"classes/Subject.html","title":"class - Subject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/subject.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                codeId\n                            \n                            \n                                course\n                            \n                            \n                                grades\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            codeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Course\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, OneToMany } from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Course } from './course.entity';\nimport { Grade } from './grade.entity';\n\n@Entity('subject')\nexport class Subject extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @Column({ type: 'int' })\n  codeId: number;\n\n  @ManyToOne(() => Course)\n  course: Course;\n\n  @OneToMany(() => Grade, (grade) => grade.subject)\n  grades: Grade[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerOptions.html":{"url":"interfaces/SwaggerOptions.html","title":"interface - SwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/interfaces/swagger.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        title\n                                \n                                \n                                        users\n                                \n                                \n                                        version\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        users\n                                    \n                                \n                                \n                                    \n                                        users:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerOptions {\n  title: string;\n  description: string;\n  version: string;\n  users: Record;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimestampEntity.html":{"url":"classes/TimestampEntity.html","title":"class - TimestampEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimestampEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/timestamp.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport class TimestampEntity extends BaseEntity {\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnswerDto.html":{"url":"classes/UpdateAnswerDto.html","title":"class - UpdateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/update-answer.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnswerDto } from './create-answer.dto';\n\nexport class UpdateAnswerDto extends PartialType(CreateAnswerDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamDto.html":{"url":"classes/UpdateExamDto.html","title":"class - UpdateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateExamDto } from './create-exam.dto';\n\nexport class UpdateExamDto extends PartialType(CreateExamDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionDto.html":{"url":"classes/UpdateQuestionDto.html","title":"class - UpdateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/update-question.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateQuestionDto } from './create-question.dto';\n\nexport class UpdateQuestionDto extends PartialType(CreateQuestionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionGroupDto.html":{"url":"classes/UpdateQuestionGroupDto.html","title":"class - UpdateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/update-question-group.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateQuestionGroupDto } from './create-question-group.dto';\n\nexport class UpdateQuestionGroupDto extends PartialType(CreateQuestionGroupDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadController.html":{"url":"controllers/UploadController.html","title":"controller - UploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/controllers/upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                upload\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/infra/controllers/upload.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { UPLOAD_PATH } from '../infra.constants';\nimport { UploaderService } from '../services/uploader.service';\n\n@Controller('upload')\n@ApiTags('Upload')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class UploadController {\n  constructor(private readonly service: UploaderService) {}\n\n  @Post()\n  @UseInterceptors(FileInterceptor('file'))\n  async upload(@UploadedFile() file: Express.Multer.File) {\n    return await this.service.upload(file, UPLOAD_PATH);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploaderService.html":{"url":"classes/UploaderService.html","title":"class - UploaderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploaderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/uploader.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/uploader.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileSendDto } from '../dtos/file-send.dto';\n\nexport abstract class UploaderService {\n  abstract upload(fileDto: FileSendDto, path?: string): Promise;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/exam-agreement.entity';\nimport { Column, Entity, OneToMany, TableInheritance } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { UserRole } from '../enum/user-role.enum';\nimport { UserType } from '../enum/user-type.enum';\n\n@Entity('user')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: UserType } })\nexport class User extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  enrollment: string;\n\n  @Column({ type: 'varchar', unique: true })\n  cpf: string;\n\n  @Column({ type: 'enum', enum: UserType })\n  type: UserType;\n\n  @Column({ type: 'enum', default: UserRole.REGULAR, enum: UserRole })\n  role: UserRole;\n\n  @OneToMany(() => ExamAgreement, (agreement) => agreement.user)\n  examAgreements: ExamAgreement[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\nimport { GetUser } from '../decoratos/get-user.decorator';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../entities/user.entity';\nimport { UserService } from '../user.service';\n\n@Controller('user')\n@ApiTags('User')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  createUser(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUser(createUserDto);\n  }\n\n  @Get()\n  @UseGuards(JwtGuard)\n  getUser(@GetUser() user: User) {\n    return user;\n  }\n\n  // @Put()\n  // @UseGuards(JwtGuard)\n  // updateUser() {\n  //   return this.userService.updateUser();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                enrollment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class UserDto {\n  @IsString()\n  @IsNotEmpty()\n  enrollment: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { UserController } from './controllers/user.controller';\nimport { UserRepository } from './repositories/user.repository';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    forwardRef(() => AuthModule),\n    forwardRef(() => AuxiliaryModule),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/repositories/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../entities/user.entity';\n\n@EntityRepository(User)\nexport class UserRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserResult.html":{"url":"interfaces/UserResult.html","title":"interface - UserResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/interfaces/user-specialized-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         UserType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserType } from '../enum/user-type.enum';\n\nexport interface UserResult {\n  readonly type: UserType;\n  readonly id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Private\n                                    Async\n                                createUserByType\n                            \n                            \n                                    Async\n                                findSpecializedUser\n                            \n                            \n                                findUser\n                            \n                            \n                                    Async\n                                mustFindSpecializedUser\n                            \n                            \n                                    Async\n                                mustFindUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, authService: AuthService, studentService: StudentService, professorService: ProfessorService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        studentService\n                                                  \n                                                        \n                                                                        StudentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        professorService\n                                                  \n                                                        \n                                                                        ProfessorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/user/user.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createUserByType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserByType(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findUser\n                        \n                        \n                    \n                \n            \n            \n                \nfindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthService } from 'src/auth/auth.service';\nimport { ProfessorService } from 'src/auxiliary/services/professor.service';\nimport { StudentService } from 'src/auxiliary/services/student.service';\nimport {\n  runOnTransactionComplete,\n  Transactional,\n} from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { UserDto } from './dtos/user.dto';\nimport { User } from './entities/user.entity';\nimport { UserType } from './enum/user-type.enum';\nimport { createUser } from './helpers/create-user.helper';\nimport { UserResult } from './interfaces/user-specialized-result.interface';\nimport { UserRepository } from './repositories/user.repository';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private readonly userRepository: UserRepository,\n    private readonly authService: AuthService,\n    private readonly studentService: StudentService,\n    private readonly professorService: ProfessorService,\n  ) {}\n\n  @Transactional()\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const user = await this.createUserByType(createUserDto);\n    await this.authService.createAuth({\n      login: createUserDto.enrollment,\n      password: createUserDto.password,\n    });\n    runOnTransactionComplete((e) => {\n      e && console.error(e);\n      console.log('create auth transaction completed');\n    });\n    return user;\n  }\n\n  private async createUserByType(createUserDto: CreateUserDto): Promise {\n    switch (createUserDto.type) {\n      case UserType.PROFESSOR:\n        return this.professorService.createStudent(createUserDto);\n      case UserType.STUDENT:\n        return this.studentService.createStudent(createUserDto);\n      default:\n        throw new UnprocessableEntityException();\n    }\n  }\n\n  findUser(userDto: UserDto): Promise {\n    return this.userRepository.findOne({ ...userDto });\n  }\n\n  async mustFindUser(userDto: UserDto): Promise {\n    const user = await this.findUser(userDto);\n    if (!user) {\n      throw new UnauthorizedException(userDto);\n    }\n    return user;\n  }\n\n  async findSpecializedUser(userDto: UserDto): Promise {\n    const partialUser:\n      | UserResult\n      | undefined = await this.userRepository.findOne({\n      select: ['type', 'id'],\n      where: { ...userDto },\n    });\n\n    console.log(partialUser);\n\n    if (!partialUser) {\n      throw new UnauthorizedException(userDto);\n    }\n\n    let user: User | undefined;\n\n    switch (partialUser.type) {\n      case UserType.PROFESSOR:\n        user = await this.professorService.findOne(userDto);\n        break;\n      case UserType.STUDENT:\n        user = await this.studentService.findOne(userDto);\n        break;\n      default:\n        user = await this.userRepository.findOne({ ...userDto });\n    }\n\n    return user;\n  }\n\n  async mustFindSpecializedUser(userDto: UserDto): Promise {\n    const user = await this.findSpecializedUser(userDto);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/answer/answer.controller.ts\n            \n            controller\n            AnswerController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/answer/answer.service.ts\n            \n            injectable\n            AnswerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/answer/dto/create-answer.dto.ts\n            \n            class\n            CreateAnswerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/dto/update-answer.dto.ts\n            \n            class\n            UpdateAnswerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/entities/answer-grade.entity.ts\n            \n            class\n            AnswerGrade\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/answer/entities/answer.entity.ts\n            \n            class\n            Answer\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer-grade.repository.ts\n            \n            class\n            AnswerGradeRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer.repository.ts\n            \n            class\n            AnswerRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MAX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/casl/factories/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/repositories/auth.repository.ts\n            \n            class\n            AuthRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/course.entity.ts\n            \n            class\n            Course\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/grade.entity.ts\n            \n            class\n            Grade\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/period.entity.ts\n            \n            class\n            Period\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/professor.entity.ts\n            \n            class\n            Professor\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/student.entity.ts\n            \n            class\n            Student\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/subject.entity.ts\n            \n            class\n            Subject\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/professor.repository.ts\n            \n            class\n            ProfessorRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/student.repository.ts\n            \n            class\n            StudentRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/services/professor.service.ts\n            \n            injectable\n            ProfessorService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auxiliary/services/student.service.ts\n            \n            injectable\n            StudentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            function\n            origin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            allowedOrigins\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            isProd\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/firebase.config.ts\n            \n            variable\n            firebaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            configs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/interfaces/swagger.interface.ts\n            \n            interface\n            SwaggerOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controllers/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/core.constants.ts\n            \n            variable\n            enrollmentLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/decorators/is-enrollment.decorator.ts\n            \n            function\n            IsEnrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/entities/ff.entity.ts\n            \n            class\n            FFEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/entities/timestamp.entity.ts\n            \n            class\n            TimestampEntity\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/interceptors/payload.interceptor.ts\n            \n            injectable\n            PayloadInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/soft-delete-result.interface.ts\n            \n            interface\n            SoftDeleteResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/utils/last.util.ts\n            \n            function\n            last\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1619445806509-Auth.ts\n            \n            class\n            Auth1619445806509\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620179231630-QuestionGroup.ts\n            \n            class\n            QuestionGroup1620179231630\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            class\n            AdminUser1620299822480\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            cpf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            enrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477175799-Auxiliary.ts\n            \n            class\n            Auxiliary1620477175799\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477869366-QuestionImage.ts\n            \n            class\n            QuestionImage1620477869366\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620478273991-Exam.ts\n            \n            class\n            Exam1620478273991\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620488935141-QuestionPosition.ts\n            \n            class\n            QuestionPosition1620488935141\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620563708532-QuestionPositionIdx.ts\n            \n            class\n            QuestionPositionIdx1620563708532\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1621036457247-ExamTitle.ts\n            \n            class\n            ExamTitle1621036457247\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1621992475274-QuestionGroupTarget.ts\n            \n            class\n            QuestionGroupTarget1621992475274\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622326106015-ExamTarget.ts\n            \n            class\n            ExamTarget1622326106015\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622326106015-ExamTarget.ts\n            \n            variable\n            targets\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1622332886234-ExamAgreement.ts\n            \n            class\n            ExamAgreement1622332886234\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts\n            \n            class\n            ExamAgreementAnonymousDefault1622334780336\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam-agreement.controller.ts\n            \n            controller\n            ExamAgreementController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam-target.controller.ts\n            \n            controller\n            ExamTargetController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam-agreement.dto.ts\n            \n            class\n            CreateExamAgreementDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam.dto.ts\n            \n            class\n            CreateExamDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/dtos/exam-target-manager.dto.ts\n            \n            interface\n            ExamTargetManagerDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam.dto.ts\n            \n            class\n            UpdateExamDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/entities/exam-agreement.entity.ts\n            \n            class\n            ExamAgreement\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/exam/entities/exam-target.entity.ts\n            \n            class\n            ExamTarget\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/exam/entities/exam.entity.ts\n            \n            class\n            Exam\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/exam/exam.constants.ts\n            \n            variable\n            EXAM_NOT_FOUND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/exam.controller.ts\n            \n            controller\n            ExamController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/exam/exam.service.ts\n            \n            injectable\n            ExamService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam-agreement.repository.ts\n            \n            class\n            ExamAgreementRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam-target.repository.ts\n            \n            class\n            ExamTargetRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam.repository.ts\n            \n            class\n            ExamRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/services/exam-agreement.service.ts\n            \n            injectable\n            ExamAgreementService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/services/exam-target.service.ts\n            \n            injectable\n            ExamTargetService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/firebase-admin.constants.ts\n            \n            variable\n            FIREBASE_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n            \n            injectable\n            FirebaseAdmin\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/firebase/firebase.constants.ts\n            \n            variable\n            FIREBASE_ADMIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseAsyncModuleOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseModuleOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n            \n            interface\n            FirebaseAuthDecodedToken\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-auth.service.ts\n            \n            injectable\n            FirebaseAuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-cloud-messaging.service.ts\n            \n            injectable\n            FirebaseCloudMessagingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-firestore.service.ts\n            \n            injectable\n            FirebaseFirestoreService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-storage.service.ts\n            \n            injectable\n            FirebaseStorageService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/controllers/upload.controller.ts\n            \n            controller\n            UploadController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/dtos/file-send.dto.ts\n            \n            interface\n            FileSendDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infra/infra.constants.ts\n            \n            variable\n            UPLOAD_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/services/firebase-uploader.service.ts\n            \n            injectable\n            FirebaseUploader\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/services/uploader.service.ts\n            \n            class\n            UploaderService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyGlobals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyPerfLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applySecurityLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            buildSwaggerDoc\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            DEFAULT_PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question-group.controller.ts\n            \n            controller\n            QuestionGroupController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/question-group/dtos/copy-question-group.dto.ts\n            \n            class\n            CopyQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-question-group.dto.ts\n            \n            class\n            CreateQuestionGroupDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-question.dto.ts\n            \n            class\n            CreateQuestionDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-questions.dto.ts\n            \n            class\n            CreateQuestion\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-questions.dto.ts\n            \n            class\n            CreateQuestionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/question-find.dto.ts\n            \n            class\n            QuestionFindDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/reorder-question-group.dto.ts\n            \n            class\n            ReorderQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/reorder-question.dto.ts\n            \n            class\n            ReorderQuestionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/update-question-group.dto.ts\n            \n            class\n            UpdateQuestionGroupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/dtos/update-question.dto.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/entities/question-group.entity.ts\n            \n            class\n            QuestionGroup\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/question-group/entities/question.entity.ts\n            \n            class\n            Question\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/question-group/question-group.constants.ts\n            \n            variable\n            questionGroupNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/question.constants.ts\n            \n            variable\n            questionNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/repositories/question-group.repository.ts\n            \n            class\n            QuestionGroupRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/repositories/question.repository.ts\n            \n            class\n            QuestionRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/services/question-group.service.ts\n            \n            injectable\n            QuestionGroupService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/question-group/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/user/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/decoratos/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/user/helpers/create-user.helper.ts\n            \n            function\n            createUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/interfaces/user-specialized-result.interface.ts\n            \n            interface\n            UserResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/repositories/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.2.2\n        \n            @nestjs/common : ^7.6.13\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.13\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.13\n        \n            @nestjs/swagger : ^4.7.15\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            bcryptjs : ^2.4.3\n        \n            brazilian-class-validator : ^0.1.6\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            express-basic-auth : ^1.2.0\n        \n            express-rate-limit : ^5.2.6\n        \n            firebase-admin : ^9.7.0\n        \n            helmet : ^4.4.1\n        \n            lodash : ^4.17.21\n        \n            morgan : ^1.10.0\n        \n            mysql2 : ^2.2.5\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.31\n        \n            typeorm-naming-strategies : ^2.0.0\n        \n            typeorm-transactional-cls-hooked : ^0.1.20\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnswerType   (src/.../answer-type.enum.ts)\n                        \n                        \n                            CaslAction   (src/.../casl-action.enum.ts)\n                        \n                        \n                            ExamStatus   (src/.../exam-status.enum.ts)\n                        \n                        \n                            ExamTargetType   (src/.../exam-target-type.enum.ts)\n                        \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserType   (src/.../user-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/answer/enums/answer-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AnswerType\n                    \n                \n                        \n                            \n                                 ANSWER\n                            \n                        \n                        \n                            \n                                Value : Answer\n                            \n                        \n                        \n                            \n                                 ANSWER_GRADE\n                            \n                        \n                        \n                            \n                                Value : AnswerGrade\n                            \n                        \n            \n        \n\n    src/auth/casl/enums/casl-action.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CaslAction\n                    \n                \n                        \n                            \n                                 MANAGE\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 CREATE\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 READ\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 UPDATE\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-target-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamTargetType\n                    \n                \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : Student\n                            \n                        \n                        \n                            \n                                 PROFESSOR\n                            \n                        \n                        \n                            \n                                Value : Professor\n                            \n                        \n            \n        \n\n    src/user/enum/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 MANAGER\n                            \n                        \n                        \n                            \n                                Value : manager\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 REGULAR\n                            \n                        \n                        \n                            \n                                Value : regular\n                            \n                        \n            \n        \n\n    src/user/enum/user-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserType\n                    \n                \n                        \n                            \n                                 PROFESSOR\n                            \n                        \n                        \n                            \n                                Value : Professor\n                            \n                        \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : Student\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            applyGlobals   (src/.../main.ts)\n                        \n                        \n                            applyPerfLayer   (src/.../main.ts)\n                        \n                        \n                            applySecurityLayer   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            buildSwaggerDoc   (src/.../main.ts)\n                        \n                        \n                            createUser   (src/.../create-user.helper.ts)\n                        \n                        \n                            IsEnrollment   (src/.../is-enrollment.decorator.ts)\n                        \n                        \n                            last   (src/.../last.util.ts)\n                        \n                        \n                            origin   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            applyGlobals\n                        \n                        \n                    \n                \n            \n            \n                \napplyGlobals(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyPerfLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplyPerfLayer(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applySecurityLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplySecurityLayer(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildSwaggerDoc\n                        \n                        \n                    \n                \n            \n            \n                \nbuildSwaggerDoc(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/user/helpers/create-user.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/decorators/is-enrollment.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            IsEnrollment\n                        \n                        \n                    \n                \n            \n            \n                \nIsEnrollment()\n                \n            \n\n\n\n\n        \n    \n    src/core/utils/last.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            last\n                        \n                        \n                    \n                \n            \n            \n                \nlast(arr)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/config/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            origin\n                        \n                        \n                    \n                \n            \n            \n                \norigin(origin, callback)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    origin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nFast Form API\nAPI para suprir a lógica de negócio do sistema Fast Form (FF)\nInstalação\nPara rodar a API localmente (em development mode) é necessário esses programas no seu computador:\n\ndocker\ndocker-compose\n\n# fullfil all needed environment variables copying .env.example to .env\n$ cp .env.example .env\n# initialize api service and its dependencies using following command\n$ sudo docker-compose up --build\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnswerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuxiliaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseAdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InfraModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionGroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_FirebaseAdminModule\n\n\n\ncluster_FirebaseAdminModule_exports\n\n\n\ncluster_FirebaseAdminModule_providers\n\n\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_exports\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_exports\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAnswerService\n\nAnswerService\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nProfessorService \n\nProfessorService \n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\n\n\nStudentService \n\nStudentService \n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nExamAgreementService \n\nExamAgreementService \n\nExamAgreementService  -->\n\nExamModule->ExamAgreementService \n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\n\n\nInfraModule\n\nInfraModule\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\nExamAgreementService\n\nExamAgreementService\n\nExamModule -->\n\nExamAgreementService->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nExamTargetService\n\nExamTargetService\n\nExamModule -->\n\nExamTargetService->ExamModule\n\n\n\n\n\nFirebaseAdmin \n\nFirebaseAdmin \n\n\n\nFirebaseAdminModule\n\nFirebaseAdminModule\n\nFirebaseAdmin  -->\n\nFirebaseAdminModule->FirebaseAdmin \n\n\n\n\n\nFirebaseAdmin\n\nFirebaseAdmin\n\nFirebaseAdminModule -->\n\nFirebaseAdmin->FirebaseAdminModule\n\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionGroupModule -->\n\nQuestionService->QuestionGroupModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    21 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    62 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            Callback   (src/.../cors.config.ts)\n                        \n                        \n                            CaslSubjects   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            FirebaseFirestoreCollection   (src/.../firebase-firestore-collection.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/casl/factories/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CaslSubjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    src/config/cors.config.ts\n    \n    \n        \n            \n                \n                    \n                    Callback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/firebase/types/firebase-firestore-collection.type.ts\n    \n    \n        \n            \n                \n                    \n                    FirebaseFirestoreCollection\n                \n            \n            \n                \n                        firebase.firestore.CollectionReference\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            allowedOrigins   (src/.../cors.config.ts)\n                        \n                        \n                            configs   (src/.../index.ts)\n                        \n                        \n                            corsConfig   (src/.../cors.config.ts)\n                        \n                        \n                            corsConfigKey   (src/.../cors.config.ts)\n                        \n                        \n                            cpf   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            databaseConfigKey   (src/.../database.config.ts)\n                        \n                        \n                            DEFAULT_PORT   (src/.../main.ts)\n                        \n                        \n                            enrollment   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            enrollmentLength   (src/.../core.constants.ts)\n                        \n                        \n                            EXAM_NOT_FOUND   (src/.../exam.constants.ts)\n                        \n                        \n                            FIREBASE_ADMIN   (src/.../firebase.constants.ts)\n                        \n                        \n                            FIREBASE_OPTIONS   (src/.../firebase-admin.constants.ts)\n                        \n                        \n                            firebaseConfig   (src/.../firebase.config.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            isProd   (src/.../cors.config.ts)\n                        \n                        \n                            jwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            jwtConfigKey   (src/.../jwt.config.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            PASSWORD_MAX   (src/.../auth.constants.ts)\n                        \n                        \n                            PASSWORD_MIN   (src/.../auth.constants.ts)\n                        \n                        \n                            questionGroupNotFound   (src/.../question-group.constants.ts)\n                        \n                        \n                            questionNotFound   (src/.../question.constants.ts)\n                        \n                        \n                            rateLimitConfig   (src/.../rate-limit.config.ts)\n                        \n                        \n                            rateLimitConfigKey   (src/.../rate-limit.config.ts)\n                        \n                        \n                            swaggerConfig   (src/.../swagger.config.ts)\n                        \n                        \n                            swaggerConfigKey   (src/.../swagger.config.ts)\n                        \n                        \n                            targets   (src/.../1622326106015-ExamTarget.ts)\n                        \n                        \n                            UPLOAD_PATH   (src/.../infra.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/cors.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            allowedOrigins\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp[]\n\n                        \n                    \n                    \n                        \n                            Default value : isProd\n  ? [new RegExp('^https://(.*\\\\.|)herokuapp.com$')]\n  : [\n      new RegExp('^http://localhost:3000$'),\n      new RegExp('^http://localhost:5000$'),\n      new RegExp('^https://(.*\\\\.|)herokuapp.com$'),\n    ]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  corsConfigKey,\n  (): CorsOptions => ({\n    origin,\n    optionsSuccessStatus: 200,\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cors'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isProd\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.NODE_ENV === 'production'\n                        \n                    \n\n\n            \n        \n\n    src/config/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  swaggerConfig,\n  databaseConfig,\n  rateLimitConfig,\n  corsConfig,\n  jwtConfig,\n  firebaseConfig,\n]\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1620299822480-AdminUser.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '29997856155'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '999999'\n                        \n                    \n\n\n            \n        \n\n    src/config/database.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  databaseConfigKey,\n  (): TypeOrmModuleOptions => ({\n    type: 'mysql',\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_DATABASE,\n    port: parseInt(process.env.DB_PORT!),\n    maxQueryExecutionTime: parseInt(process.env.DB_QUERY_TIMEOUT ?? '5000'),\n    entities: [__dirname + '/../**/*.entity.{js,ts}'],\n    migrations: [__dirname + '/../database/migrations/*.{js,ts}'],\n    subscribers: [__dirname + '/../**/*.subscriber.{js,ts}'],\n    synchronize: false,\n    logging:\n      process.env.DB_LOGGING === 'true' ||\n      process.env.NODE_ENV === 'development',\n    cli: {\n      migrationsDir: 'src/database/migrations',\n    },\n    namingStrategy: new SnakeNamingStrategy(),\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'database'\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_PORT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3000\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('bootstrap')\n                        \n                    \n\n\n            \n        \n\n    src/core/core.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            enrollmentLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : [1, 9]\n                        \n                    \n\n\n            \n        \n\n    src/exam/exam.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EXAM_NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam not found'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_ADMIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_ADMIN'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase-admin/firebase-admin.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_OPTIONS'\n                        \n                    \n\n\n            \n        \n\n    src/config/firebase.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            firebaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  'firebase',\n  (): FirebaseModuleOptions => {\n    if (!process.env.FIREBASE_ADMIN) {\n      throw new Error(\n        'Needs FIREBASE_ADMIN env (JSON Service Account as string)',\n      );\n    }\n\n    if (!process.env.FIREBASE_BUCKET) {\n      throw new Error('Needs FIREBASE_BUCKET env var');\n    }\n\n    return {\n      cert: JSON.parse(process.env.FIREBASE_ADMIN),\n      storageBucket: process.env.FIREBASE_BUCKET,\n    };\n    //return JSON.parse(process.env.FIREBASE_ADMIN);\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/user/decoratos/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/config/jwt.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  jwtConfigKey,\n  (): JwtModuleOptions => ({\n    secret: process.env.JWT_SECRET,\n    signOptions: { issuer: 'ff.uneb.br', expiresIn: '10h' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'jwt'\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MAX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 100\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 6\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question-group.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionGroupNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup not found'\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Question not found'\n                        \n                    \n\n\n            \n        \n\n    src/config/rate-limit.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(rateLimitConfigKey, () => ({\n  timeWindow: parseInt(process.env.RATE_LIMIT_WINDOW_MS ?? '60000'),\n  max: parseInt(process.env.RATE_LIMIT_MAX ?? '20'),\n}))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'rateLimit'\n                        \n                    \n\n\n            \n        \n\n    src/config/swagger.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  swaggerConfigKey,\n  (): SwaggerOptions => ({\n    title: 'Fast Form',\n    description: 'Fast Form API',\n    version: 'v0.0.1',\n    users: { ff: 'senhaforte' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'swagger'\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1622326106015-ExamTarget.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\"Student\", \"Professor\"]\n                        \n                    \n\n\n            \n        \n\n    src/infra/infra.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UPLOAD_PATH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/questions'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
