var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUser1620299822480.html",[0,0.219,1,3.468]],["body/classes/AdminUser1620299822480.html",[0,0.188,1,4.273,2,0.644,3,0.08,4,0.08,5,0.071,6,4.995,7,2.981,8,2.904,9,3.885,10,0.335,11,1.318,12,4.456,13,2.6,14,3.324,15,3.168,16,3.324,17,5.015,18,0.682,19,3.717,20,1.386,21,0.01,22,1.285,23,0.561,24,1.105,25,1.285,26,2.12,27,3.324,28,3.717,29,0.193,30,0.853,31,3.273,32,3.273,33,3.502,34,4.589,35,3.273,36,4.211,37,3.273,38,0.08,39,0.006,40,1.576,41,1.018,42,1.582,43,3,44,6.804,45,3.273,46,3.089,47,3.717,48,3.717,49,2.21,50,1.947,51,3.717,52,2.981,53,3.273,54,3.717,55,5.056,56,3.273,57,3.541,58,3.717,59,5.329,60,2.502,61,2.904,62,5.329,63,2.443,64,1.947,65,3.717,66,1.687,67,0.006,68,0.004]],["title/classes/Answer.html",[0,0.219,69,2.265]],["body/classes/Answer.html",[0,0.206,2,0.703,3,0.087,4,0.087,5,0.078,10,0.365,18,1.013,21,0.01,22,0.98,23,0.774,29,0.256,30,0.931,38,0.087,39,0.004,40,1.677,41,1.79,67,0.006,68,0.004,69,2.971,70,3.576,71,1.403,72,3.012,73,1.09,74,5.204,75,5.758,76,2.493,77,2.493,78,2.493,79,1.727,80,2.533,81,4.061,82,2.759,83,2.971,84,3.95,85,2.341,86,4.061,87,6.187,88,4.586,89,4.061,90,1.844,91,3.012,92,1.907,93,2.783,94,1.784,95,2.698,96,1.844,97,1.784,98,1.844,99,1.784,100,1.844,101,4.061,102,3.569,103,2.127,104,3.539,105,2.533,106,4.996,107,2.669,108,4.061,109,2.828,110,4.061]],["title/controllers/AnswerController.html",[111,1.963,112,3.214]],["body/controllers/AnswerController.html",[0,0.198,3,0.084,4,0.084,5,0.075,10,0.352,11,1.366,18,0.939,20,1.81,21,0.01,22,1.678,23,0.626,24,1.443,25,1.771,29,0.252,38,0.084,39,0.004,40,2.253,66,1.773,67,0.006,68,0.004,69,2.046,79,1.601,111,1.773,112,4.103,113,1.834,114,3.44,115,2.436,116,2.784,117,4.573,118,3.009,119,3.282,120,2.684,121,3.44,122,5.007,123,3.993,124,3.907,125,3.907,126,2.322,127,1.819,128,4.103,129,3.907,130,2.322,131,4.103,132,3.907,133,2.322,134,5.57,135,5.521,136,3.907,137,3.628,138,3.133,139,2.903,140,0.831,141,4.207,142,3.44,143,2.567,144,4.427,145,2.567,146,3.907,147,2.436,148,1.355,149,3.44,150,2.287,151,3.907,152,3.907,153,2.903,154,3.907,155,3.907,156,3.907,157,2.903,158,3.907]],["title/classes/AnswerGrade.html",[0,0.219,159,2.842]],["body/classes/AnswerGrade.html",[0,0.216,2,0.738,3,0.092,4,0.092,5,0.082,10,0.384,18,1.046,21,0.01,23,0.756,29,0.243,30,0.978,38,0.092,39,0.005,40,1.735,41,1.606,67,0.006,68,0.005,69,4.103,71,1.452,72,1.815,73,1.127,74,4.41,75,5.168,76,2.578,77,2.578,78,2.578,79,1.783,80,3.66,82,2.854,83,2.233,84,2.969,85,1.759,87,4.706,88,3.488,90,1.936,91,3.415,92,2.002,93,2.856,94,1.873,95,2.768,96,1.936,97,1.873,98,1.936,99,1.873,100,1.936,104,3.66,159,3.857,160,4.706,161,3.755,162,4.77,163,4.264,164,4.264,165,4.264,166,4.264,167,4.264,168,4.706,169,4.264]],["title/classes/AnswerGradeRepository.html",[0,0.219,170,3.214]],["body/classes/AnswerGradeRepository.html",[0,0.308,2,1.05,3,0.131,4,0.131,5,0.116,21,0.01,29,0.288,30,1.692,38,0.131,39,0.007,67,0.008,68,0.007,71,1.824,159,3.986,170,5.481,171,5.341,172,5.341,173,4.518,174,3.448,175,2.581,176,2.581,177,2.581,178,6.066,179,4.508,180,6.066]],["title/modules/AnswerModule.html",[181,1.214,182,3.011]],["body/modules/AnswerModule.html",[0,0.264,3,0.112,4,0.112,5,0.1,21,0.01,29,0.3,38,0.112,39,0.006,67,0.007,68,0.006,112,5.508,113,3.146,140,1.106,141,5.449,142,4.582,170,4.979,181,2.081,182,5.773,183,2.214,184,2.214,185,2.443,186,2.443,187,2.286,188,3.364,189,2.362,190,4.582,191,4.582,192,3.146,193,2.443,194,2.443,195,5.203,196,5.203,197,3.093,198,2.286,199,3.866,200,5.203,201,5.203,202,5.203,203,2.725,204,5.203]],["title/classes/AnswerRepository.html",[0,0.219,199,3.214]],["body/classes/AnswerRepository.html",[0,0.31,2,1.059,3,0.132,4,0.132,5,0.117,21,0.01,29,0.289,30,1.7,38,0.132,39,0.007,67,0.008,68,0.007,69,3.202,71,1.833,173,4.534,174,3.475,175,2.602,176,2.602,177,2.602,199,5.508,205,5.384,206,6.114,207,6.114]],["title/injectables/AnswerService.html",[141,2.842,208,1.017]],["body/injectables/AnswerService.html",[0,0.21,3,0.089,4,0.089,5,0.079,10,0.372,11,1.422,18,0.959,20,1.857,21,0.01,22,1.721,23,0.642,24,1.479,25,1.92,29,0.239,38,0.089,39,0.004,40,2.295,41,2.256,50,2.167,67,0.006,68,0.004,69,3.927,116,2.898,117,4.689,118,3.133,119,3.417,120,2.795,121,5.061,122,4.927,126,3.417,127,1.677,130,3.417,133,3.417,134,5.542,140,0.88,141,3.777,143,2.719,144,4.609,145,2.719,150,2.336,208,1.352,209,1.608,210,3.644,211,4.138,212,4.138,213,4.138,214,4.138,215,4.138,216,5.22,217,4.138,218,4.138,219,4.138]],["title/modules/AppModule.html",[181,1.214,220,3.214]],["body/modules/AppModule.html",[0,0.192,3,0.082,4,0.082,5,0.073,21,0.01,29,0.306,38,0.082,39,0.004,67,0.006,68,0.004,140,0.806,181,1.768,182,5.253,183,1.613,184,1.613,185,1.78,186,1.78,187,1.665,188,1.721,189,1.721,192,2.537,193,1.78,194,1.78,197,2.253,198,1.665,203,3.298,220,6.55,221,3.338,222,3.338,223,4.958,224,4.958,225,5.253,226,4.958,227,5.253,228,5.253,229,5.253,230,4.958,231,3.791,232,4.334,233,5.102,234,2.639,235,4.334,236,3.04,237,2.817,238,3.791,239,3.338,240,3.338,241,3.338,242,1.517,243,2.817,244,3.791,245,3.791,246,3.791,247,3.791,248,3.791,249,3.791,250,3.791,251,3.791,252,2.491,253,3.791,254,2.253]],["title/classes/Auth.html",[0,0.219,60,2.031]],["body/classes/Auth.html",[0,0.222,2,0.757,3,0.094,4,0.094,5,0.084,10,0.394,18,1.033,21,0.01,23,0.759,29,0.216,30,1.003,38,0.094,39,0.005,40,1.765,41,1.197,55,5.053,57,3.865,60,2.804,61,3.706,67,0.006,68,0.005,71,1.477,72,3.109,73,1.147,76,2.623,77,2.623,78,2.623,79,1.762,82,3.306,85,2.464,90,1.985,91,3.109,92,2.053,93,2.893,94,1.921,95,2.805,96,1.985,97,1.921,98,1.985,99,1.921,100,1.985,102,3.684,103,2.291,127,1.765,255,3.851,256,4.487,257,3.394,258,4.374,259,4.374,260,4.374,261,3.045,262,4.374]],["title/classes/Auth1619445806509.html",[0,0.219,263,3.468]],["body/classes/Auth1619445806509.html",[0,0.173,2,0.59,3,0.073,4,0.073,5,0.065,8,2.725,9,3.695,10,0.708,11,1.237,12,4.322,13,2.522,14,3.118,15,2.972,16,3.118,17,4.906,18,0.758,20,1.301,21,0.009,22,1.678,23,0.626,24,1.037,25,1.206,26,2.034,27,3.118,29,0.123,30,0.781,34,2.972,36,2.618,38,0.073,39,0.004,40,1.931,43,2.995,46,3.157,55,2.53,57,1.935,60,2.782,61,2.725,63,2.237,64,1.783,67,0.005,68,0.004,73,0.96,83,2.618,88,2.024,116,2.521,120,2.431,127,0.761,257,3.368,263,5.236,264,5.75,265,2.998,266,3.094,267,1.855,268,3.404,269,3.404,270,3.404,271,7.271,272,4.072,273,4.009,274,5.831,275,5.251,276,5.831,277,4.009,278,4.009,279,4.009,280,5.403,281,5,282,4.009,283,3.715,284,4.009,285,2.998,286,4.403,287,5,288,5,289,5,290,4.546,291,5]],["title/controllers/AuthController.html",[111,1.963,292,3.214]],["body/controllers/AuthController.html",[0,0.273,3,0.116,4,0.116,5,0.103,10,0.485,11,1.694,18,0.689,20,1.401,21,0.01,22,1.299,23,0.485,24,1.117,25,1.299,26,2.134,29,0.273,38,0.116,39,0.006,60,2.529,61,3.733,67,0.007,68,0.006,79,1.174,111,2.445,113,2.529,115,3.359,123,4.698,137,3.539,140,1.145,147,3.359,148,1.868,150,1.678,292,5.09,293,4.742,294,4.742,295,5.498,296,5.385,297,4.478,298,4.002,299,4.742,300,5.385,301,5.385,302,5.385]],["title/classes/AuthDto.html",[0,0.219,303,2.842]],["body/classes/AuthDto.html",[0,0.374,2,1.05,3,0.131,4,0.131,5,0.116,10,0.546,18,0.776,21,0.01,23,0.546,29,0.22,38,0.131,39,0.007,61,4.332,67,0.008,68,0.007,73,1.417,79,1.323,127,1.65,303,4.847,304,5.341,305,3.783,306,6.066,307,5.135,308,4.847,309,3.059]],["title/modules/AuthModule.html",[181,1.214,223,2.842]],["body/modules/AuthModule.html",[0,0.196,3,0.083,4,0.083,5,0.074,21,0.01,29,0.304,38,0.083,39,0.004,67,0.006,68,0.004,113,2.574,140,0.822,181,1.788,183,1.646,184,1.646,185,1.816,186,1.816,187,1.699,188,2.89,189,2.89,192,2.574,193,1.816,194,1.816,197,2.299,198,1.699,203,3.335,223,5.702,230,4.991,232,5.106,233,5.148,234,2.692,237,2.874,240,3.405,252,2.541,254,2.299,292,4.732,297,4.996,298,2.874,310,3.405,311,3.405,312,3.405,313,3.405,314,5.852,315,4.581,316,5.287,317,3.867,318,3.867,319,2.874,320,2.874,321,3.867,322,2.692,323,3.405,324,3.867,325,3.867,326,3.867,327,3.867,328,3.867,329,3.867]],["title/classes/AuthRepository.html",[0,0.219,322,3.011]],["body/classes/AuthRepository.html",[0,0.31,2,1.059,3,0.132,4,0.132,5,0.117,21,0.01,29,0.289,30,1.7,38,0.132,39,0.007,60,2.871,67,0.008,68,0.007,71,1.833,173,4.534,174,3.475,175,2.602,176,2.602,177,2.602,322,5.16,330,5.384,331,5.384,332,6.114]],["title/injectables/AuthService.html",[208,1.017,297,2.571]],["body/injectables/AuthService.html",[0,0.154,3,0.065,4,0.065,5,0.058,10,0.273,11,1.135,13,2.646,18,0.847,20,1.724,21,0.01,22,1.598,23,0.627,24,1.374,25,1.488,26,2.321,29,0.286,30,0.696,31,2.672,33,3.519,36,1.589,38,0.065,39,0.003,43,2.896,46,1.377,49,2.728,50,2.403,55,4.112,56,2.672,57,2.608,60,3.111,61,3.362,67,0.005,68,0.003,79,0.662,140,0.645,148,1.92,150,1.724,175,2.625,176,1.291,177,1.291,198,1.333,208,1.079,209,1.179,254,1.804,294,4.041,295,4.354,297,2.728,299,2.672,303,5.109,319,2.255,322,4.852,323,2.672,331,2.672,333,2.672,334,4.589,335,4.589,336,4.589,337,2.083,338,3.035,339,7.237,340,4.43,341,3.035,342,4.589,343,4.613,344,3.035,345,4.589,346,3.035,347,3.035,348,4.589,349,3.035,350,2.672,351,2.255,352,2.433,353,3.035,354,1.893,355,2.672,356,2.113,357,2.433,358,3.035,359,3.035,360,2.431,361,3.035,362,3.035,363,3.035,364,3.035,365,3.035,366,3.035,367,4.589,368,3.035,369,3.035,370,3.035,371,3.035,372,3.035,373,4.589,374,3.035,375,2.255,376,3.035,377,3.035,378,3.035,379,3.035,380,3.035]],["title/classes/Auxiliary1620477175799.html",[0,0.219,381,3.468]],["body/classes/Auxiliary1620477175799.html",[0,0.246,2,0.286,3,0.036,4,0.036,5,0.032,8,1.53,9,2.285,10,0.506,11,0.694,12,3.135,13,1.83,14,1.751,15,1.669,16,1.751,17,3.854,18,0.469,20,0.73,21,0.008,22,1.272,23,0.33,24,0.582,25,0.677,26,1.347,27,1.751,29,0.06,30,0.378,38,0.036,39,0.002,40,1.892,43,3.358,66,2.805,67,0.003,68,0.002,69,2.265,73,0.539,83,3.688,88,0.981,102,3.116,120,3.424,127,0.369,162,3.135,216,5.193,242,2.111,257,2.083,266,2.94,267,0.899,272,5.363,273,3.888,274,5.744,275,5.334,276,5.744,277,3.888,278,3.888,279,3.888,280,3.919,282,3.888,283,5.805,284,3.888,290,5.193,381,3.468,382,3.808,383,1.453,384,1.65,385,1.65,386,1.65,387,4.269,388,1.845,389,1.65,390,3.468,391,3.664,392,2.551,393,3.468,394,1.596,395,2.807,396,3.186,397,1.65,398,2.807,399,2.807,400,2.807,401,4.848,402,3.664,403,2.251,404,1.453,405,3.888,406,1.65,407,2.807,408,5.861,409,4.751,410,5.543,411,2.251,412,1.669,413,3.664,414,3.536,415,2.842,416,1.954,417,2.807,418,2.472,419,2.472,420,1.453,421,1.453,422,5.982,423,3.468,424,3.468,425,4.229,426,4.955,427,4.955,428,2.251,429,2.807,430,1.65,431,2.807,432,2.807,433,2.807,434,1.65,435,2.807,436,1.65,437,2.807,438,2.807,439,1.65,440,1.65,441,2.807,442,1.65,443,1.65,444,5.218]],["title/modules/AuxiliaryModule.html",[181,1.214,224,2.842]],["body/modules/AuxiliaryModule.html",[0,0.247,3,0.105,4,0.105,5,0.093,21,0.01,29,0.295,38,0.105,39,0.005,67,0.007,68,0.005,140,1.036,181,2.016,183,2.074,184,2.074,185,2.288,186,2.288,187,2.141,188,3.26,189,3.26,192,3.015,193,2.288,194,2.288,197,2.897,198,2.141,203,2.552,224,5.656,445,4.291,446,4.291,447,4.291,448,5.738,449,5.738,450,4.873,451,4.47,452,4.291,453,3.393,454,4.291,455,4.873,456,4.873,457,4.873]],["title/injectables/CaslAbilityFactory.html",[208,1.017,458,3.011]],["body/injectables/CaslAbilityFactory.html",[0,0.194,3,0.082,4,0.082,5,0.073,10,0.345,11,1.346,18,0.49,20,0.996,21,0.01,22,0.923,23,0.57,24,0.794,25,0.923,29,0.293,33,2.646,38,0.082,39,0.004,40,1.132,42,2.316,46,3.613,50,2.005,67,0.006,68,0.004,69,3.815,74,4.974,140,0.814,150,1.193,162,2.276,208,1.28,209,1.488,216,2.665,266,1.629,403,4.364,414,1.862,458,3.789,459,4.364,460,3.07,461,5.443,462,5.443,463,3.829,464,5.576,465,5.443,466,5.443,467,5.443,468,4.792,469,3.371,470,3.829,471,3.829,472,3.829,473,3.07,474,3.371,475,3.829,476,3.829,477,2.85,478,1.404,479,2.665,480,2.388,481,2.516,482,3.371,483,3.07,484,3.371,485,3.371,486,4.792,487,3.371,488,3.829,489,4.792,490,3.829,491,7.285,492,4.792,493,3.829,494,6.332,495,4.792,496,6.332,497,3.829,498,3.829,499,6.332,500,3.829,501,3.829,502,3.829]],["title/modules/CaslModule.html",[181,1.214,314,3.011]],["body/modules/CaslModule.html",[0,0.281,3,0.119,4,0.119,5,0.106,21,0.01,29,0.253,38,0.119,39,0.006,67,0.008,68,0.006,140,1.178,181,2.143,183,2.358,184,2.358,185,2.602,186,2.602,187,2.434,188,3.465,189,3.465,192,3.275,193,2.602,194,2.602,314,5.956,458,6.19,503,4.879,504,4.879,505,4.879,506,5.541,507,5.541,508,5.541]],["title/classes/CopyQuestionGroupDto.html",[0,0.219,509,3.011]],["body/classes/CopyQuestionGroupDto.html",[0,0.357,2,0.973,3,0.121,4,0.121,5,0.108,10,0.506,18,0.9,21,0.01,23,0.633,29,0.204,38,0.121,39,0.006,41,2.204,67,0.008,68,0.006,73,1.352,79,1.535,242,3.075,309,2.835,478,2.818,509,4.9,510,6.766,511,3.914,512,5.349,513,5.049,514,5.449,515,5.622,516,4.95]],["title/modules/CoreModule.html",[181,1.214,225,3.011]],["body/modules/CoreModule.html",[0,0.28,3,0.119,4,0.119,5,0.106,21,0.01,29,0.252,38,0.119,39,0.006,67,0.008,68,0.006,140,1.174,181,2.14,183,2.349,184,2.349,185,2.592,186,2.592,187,2.425,188,3.459,189,3.459,192,3.267,193,2.592,194,2.592,225,5.952,517,4.861,518,4.861,519,4.861,520,6.187,521,5.521,522,6.127,523,5.521]],["title/classes/Course.html",[0,0.219,392,3.011]],["body/classes/Course.html",[0,0.217,2,0.74,3,0.092,4,0.092,5,0.082,10,0.385,18,1.027,21,0.01,23,0.747,29,0.243,30,0.981,38,0.092,39,0.005,40,1.738,41,1.17,42,1.82,67,0.006,68,0.005,71,1.454,72,3.08,73,1.129,76,2.583,77,2.583,78,2.583,79,1.751,82,2.859,85,2.426,90,1.941,91,3.08,92,2.008,93,2.86,94,1.879,95,2.772,96,1.941,97,1.879,98,1.941,99,1.879,100,1.941,102,3.388,103,2.24,105,3.667,107,2.81,127,1.619,256,4.114,257,3.342,392,4.094,393,5.389,394,3.82,396,4.986,524,3.765,525,6.72,526,4.276,527,2.81,528,4.276,529,4.276,530,3.765,531,4.276,532,4.276]],["title/classes/CreateAnswerDto.html",[0,0.219,122,2.842]],["body/classes/CreateAnswerDto.html",[0,0.34,2,1.16,3,0.144,4,0.144,5,0.128,21,0.009,38,0.144,39,0.007,67,0.008,68,0.007,122,5.143,533,5.9,534,5.373]],["title/classes/CreateAuthDto.html",[0,0.219,343,3.011]],["body/classes/CreateAuthDto.html",[0,0.292,2,0.999,3,0.124,4,0.124,5,0.111,10,0.519,18,0.915,21,0.01,23,0.644,29,0.209,38,0.124,39,0.006,57,4.066,61,3.898,67,0.008,68,0.006,71,1.769,73,1.374,79,1.56,91,3.044,127,1.6,295,5.341,303,3.791,305,3.598,343,4.98,535,5.081,536,5.081,537,5.081,538,4.288,539,5.77,540,5.081,541,5.77]],["title/classes/CreateExamDto.html",[0,0.219,542,2.842]],["body/classes/CreateExamDto.html",[0,0.354,2,0.796,3,0.099,4,0.099,5,0.088,10,0.414,18,0.995,21,0.01,23,0.758,24,1.28,29,0.224,38,0.099,39,0.005,67,0.007,68,0.005,73,1.186,79,1.696,93,3.483,127,1.668,305,3.851,307,4.855,308,4.583,309,2.317,415,4.583,416,4.855,542,4.058,543,7.054,544,3.685,545,6.141,546,5.593,547,6.141,548,3.671,549,4.596,550,4.596,551,4.596,552,6.175,553,4.596,554,4.596,555,4.596,556,4.047,557,4.952,558,7.457,559,4.589]],["title/classes/CreateQuestionDto.html",[0,0.219,560,2.842]],["body/classes/CreateQuestionDto.html",[0,0.289,2,0.707,3,0.088,4,0.088,5,0.078,10,0.367,18,0.954,21,0.01,23,0.695,24,1.677,29,0.206,38,0.088,39,0.004,41,1.559,67,0.006,68,0.004,73,1.094,79,1.627,127,1.728,305,2.546,307,4.565,308,4.309,309,2.059,394,3.237,478,2.835,513,4.309,514,3.742,548,4.217,557,4.566,559,5.545,560,3.742,561,6.805,562,3.034,563,5.774,564,5.774,565,5.258,566,5.258,567,3.595,568,4.083,569,4.083,570,4.083,571,4.083,572,4.083,573,4.083,574,5.695,575,5.695,576,7.095,577,5.695,578,5.695,579,5.695,580,5.695,581,5.695,582,5.695,583,5.695,584,5.695,585,5.695,586,4.083,587,4.083,588,4.083,589,5.695,590,2.427,591,5.695,592,4.083]],["title/classes/CreateQuestionGroupDto.html",[0,0.219,593,2.842]],["body/classes/CreateQuestionGroupDto.html",[0,0.4,2,0.833,3,0.104,4,0.104,5,0.092,10,0.433,18,0.971,21,0.01,23,0.683,24,1.683,29,0.174,38,0.104,39,0.005,41,1.743,67,0.007,68,0.005,73,1.223,79,1.656,127,1.424,242,3.162,305,3.001,307,4.433,308,4.184,309,2.426,394,4.056,411,5.722,478,2.897,511,3.35,512,4.968,514,4.184,548,4.514,557,5.722,559,5.644,567,4.237,593,4.184,594,6.956,595,6.367,596,4.812,597,4.812,598,4.812,599,4.812]],["title/classes/CreateUserDto.html",[0,0.219,600,2.458]],["body/classes/CreateUserDto.html",[0,0.354,2,0.796,3,0.099,4,0.099,5,0.088,10,0.414,18,0.954,21,0.01,23,0.736,29,0.296,34,4.146,36,3.653,38,0.099,39,0.005,57,2.612,63,4.583,67,0.007,68,0.005,71,1.137,73,1.186,79,1.626,109,3.2,127,1.668,309,3.114,343,3.2,357,3.685,481,4.583,483,3.685,590,2.732,600,3.51,601,6.85,602,4.047,603,6.974,604,4.596,605,5.593,606,4.596,607,6.175,608,4.596,609,4.35,610,6.175,611,4.596,612,4.596,613,4.047,614,4.596,615,4.596,616,4.596,617,4.589,618,4.596,619,4.596]],["title/injectables/CustomLogger.html",[208,1.017,620,3.011]],["body/injectables/CustomLogger.html",[0,0.32,3,0.136,4,0.136,5,0.121,21,0.009,29,0.229,38,0.136,39,0.007,67,0.008,68,0.007,71,1.869,140,1.343,208,1.777,209,2.454,620,5.262,621,5.561,622,6.486,623,7.558,624,6.315]],["title/classes/Exam.html",[0,0.219,414,2.103]],["body/classes/Exam.html",[0,0.149,2,0.508,3,0.063,4,0.063,5,0.056,10,0.264,11,1.107,18,1.058,21,0.01,23,0.766,25,0.708,29,0.237,30,0.673,38,0.063,39,0.003,40,1.323,41,0.804,42,1.249,67,0.005,68,0.003,71,1.107,72,3.045,73,0.86,76,2.665,77,2.665,78,2.665,79,1.803,80,1.831,82,3.346,88,3.605,90,1.333,91,3.045,92,1.379,93,3.281,94,1.966,95,2.237,96,1.333,97,1.966,98,1.333,99,1.966,100,1.333,102,3.608,103,1.538,104,2.791,105,2.791,107,1.929,127,1.357,266,1.905,388,4.702,390,4.864,414,2.176,415,4.702,416,3.776,419,4.776,477,3.177,478,1.077,479,2.044,480,1.831,527,1.929,545,4.776,546,4.349,547,4.776,548,2.66,625,2.585,626,4.349,627,5.341,628,3.589,629,3.116,630,2.936,631,2.936,632,2.936,633,2.936,634,2.936,635,2.936,636,5.75,637,2.936,638,2.936,639,2.044,640,2.044,641,2.044,642,4.776,643,2.936,644,2.354,645,2.936,646,2.936,647,2.936,648,2.936,649,2.044,650,2.936,651,2.936,652,2.936,653,2.585,654,2.585,655,2.585]],["title/classes/Exam1620478273991.html",[0,0.219,656,3.468]],["body/classes/Exam1620478273991.html",[0,0.233,2,0.796,3,0.099,4,0.099,5,0.088,8,3.366,9,4.35,10,0.414,11,1.527,12,4.762,13,2.779,14,3.851,15,3.671,16,3.851,17,5.256,18,0.892,20,1.607,21,0.01,22,1.876,23,0.628,24,1.28,25,1.489,26,2.323,27,3.851,29,0.166,30,1.054,38,0.099,39,0.005,43,2.399,67,0.007,68,0.005,73,1.186,127,1.028,266,2.628,267,2.505,272,3.851,275,3.851,405,4.952,408,4.299,412,2.732,414,3.003,418,6.566,424,4.952,656,5.979,657,6.566,658,4.047,659,4.596,660,4.596,661,4.596]],["title/classes/ExamAgreement.html",[0,0.219,74,2.842]],["body/classes/ExamAgreement.html",[0,0.193,2,0.66,3,0.082,4,0.082,5,0.073,10,0.343,11,1.341,18,1.061,21,0.01,23,0.761,25,0.919,29,0.196,30,0.874,38,0.082,39,0.004,40,1.603,41,1.729,67,0.006,68,0.004,71,1.341,72,3.309,73,1.042,74,3.564,76,3.023,77,3.023,78,3.023,79,1.789,82,3.071,83,2.84,85,2.237,90,1.729,91,3.309,92,1.789,93,3.216,94,2.383,95,2.605,96,1.729,97,2.383,98,1.729,99,2.383,100,1.729,102,3.469,103,1.995,127,1.213,150,1.187,257,3.083,261,2.652,403,5.831,404,5.561,495,5.561,548,4.492,639,2.652,640,2.652,641,2.652,662,3.355,663,6.881,664,3.81,665,3.81,666,3.81,667,3.81,668,3.81,669,3.81]],["title/controllers/ExamController.html",[111,1.963,670,3.214]],["body/controllers/ExamController.html",[0,0.17,3,0.072,4,0.072,5,0.064,10,0.301,11,1.221,13,2.912,18,0.883,20,1.684,21,0.01,22,1.562,23,0.65,24,1.342,25,1.665,26,2.481,29,0.271,38,0.072,39,0.004,40,2.136,41,2.144,42,1.424,43,2.683,66,1.518,67,0.005,68,0.004,79,1.506,111,1.518,113,1.571,115,2.086,116,2.489,117,4.255,118,2.69,119,2.934,120,2.852,123,3.078,126,1.988,128,3.668,130,1.988,131,3.668,133,1.988,137,3.243,139,2.486,140,0.711,143,2.198,145,2.198,147,2.086,148,1.16,149,2.946,150,2.151,153,2.486,157,2.486,315,1.823,414,3.358,542,4.748,590,1.988,670,3.668,671,2.946,672,2.946,673,2.682,674,3.345,675,2.682,676,3.345,677,3.345,678,3.345,679,5.34,680,3.958,681,3.345,682,2.329,683,5.192,684,2.486,685,3.658,686,2.946,687,3.958,688,2.946,689,3.958,690,4.703,691,2.682,692,3.345,693,2.329,694,3.345,695,3.345,696,3.345,697,2.682,698,3.345,699,3.345]],["title/modules/ExamModule.html",[181,1.214,226,2.842]],["body/modules/ExamModule.html",[0,0.262,3,0.111,4,0.111,5,0.099,21,0.01,29,0.293,38,0.111,39,0.006,67,0.007,68,0.006,113,3.132,140,1.099,181,2.075,183,2.199,184,2.199,185,2.427,186,2.427,187,2.27,188,3.354,189,3.354,192,3.132,193,2.427,194,2.427,197,3.072,198,2.27,203,2.707,226,5.534,670,5.49,685,5.492,686,4.551,700,4.551,701,4.551,702,4.551,703,5.168,704,5.168,705,3.598,706,4.551,707,5.168]],["title/classes/ExamRepository.html",[0,0.219,705,3.011]],["body/classes/ExamRepository.html",[0,0.31,2,1.059,3,0.132,4,0.132,5,0.117,21,0.01,29,0.289,30,1.7,38,0.132,39,0.007,67,0.008,68,0.007,71,1.833,173,4.534,174,3.475,175,2.602,176,2.602,177,2.602,414,2.973,691,4.903,705,5.16,708,5.384,709,6.114]],["title/injectables/ExamService.html",[208,1.017,685,2.697]],["body/injectables/ExamService.html",[0,0.164,3,0.07,4,0.07,5,0.062,10,0.291,11,1.19,13,2.692,18,0.913,20,1.771,21,0.01,22,1.642,23,0.613,24,1.411,25,1.642,26,1.499,29,0.281,30,0.741,33,2.795,38,0.07,39,0.005,40,2.013,41,2.124,43,2.233,49,2.86,50,2.52,66,1.467,67,0.005,68,0.004,79,1.253,116,2.426,117,4.184,118,2.622,119,2.86,120,2.34,126,2.86,130,2.86,133,2.86,140,0.687,143,2.124,145,2.124,148,1.121,150,1.983,175,3.232,176,1.376,177,1.376,198,1.42,208,1.132,209,1.256,337,2.184,351,4.271,354,2.016,360,1.42,414,3.594,542,4.473,626,2.592,672,4.237,679,5.287,685,3.001,687,3.859,691,2.592,705,4.433,706,2.846,710,2.846,711,2.25,712,3.233,713,3.35,714,3.233,715,3.233,716,3.233,717,3.233,718,3.233,719,3.162,720,2.25,721,2.402,722,4.609,723,3.233,724,3.233,725,3.233,726,4.812,727,2.592,728,2.846,729,3.233,730,2.592,731,3.233,732,2.846,733,2.592]],["title/classes/FFEntity.html",[0,0.219,72,1.84]],["body/classes/FFEntity.html",[0,0.264,2,0.901,3,0.112,4,0.112,5,0.1,10,0.468,18,1.001,21,0.01,23,0.704,29,0.243,30,1.193,38,0.112,39,0.006,40,2.191,41,1.834,67,0.007,68,0.006,71,1.657,72,2.851,73,1.287,76,2.944,77,2.944,78,2.944,79,1.707,90,3.364,91,3.154,93,3.154,94,2.286,95,3.421,96,2.362,97,2.286,98,2.362,99,2.286,100,2.362,734,4.582,735,5.203,736,5.203]],["title/interfaces/FileSendDto.html",[737,1.84,738,3.011]],["body/interfaces/FileSendDto.html",[3,0.119,4,0.119,5,0.106,10,0.497,21,0.009,23,0.742,38,0.119,39,0.006,41,2.086,67,0.008,68,0.006,73,1.337,127,1.951,737,2.349,738,4.845,739,2.891,740,4.861,741,4.861,742,7.528,743,8,744,8,745,8,746,8]],["title/injectables/FirebaseAdmin.html",[208,1.017,747,2.571]],["body/injectables/FirebaseAdmin.html",[0,0.15,3,0.064,4,0.064,5,0.057,8,1.609,10,0.266,11,1.112,18,1.05,20,1.169,21,0.01,22,1.579,23,0.49,24,0.932,25,1.893,26,1.4,29,0.22,38,0.064,39,0.003,60,2.856,64,1.547,66,2.762,67,0.005,68,0.003,73,0.863,127,1.361,140,0.628,148,1.888,150,2.509,208,1.057,209,1.147,254,1.755,337,1.34,360,2.391,739,1.547,747,2.672,748,6.151,749,7.289,750,2.6,751,4.792,752,3.958,753,4.878,754,6.084,755,6.084,756,6.084,757,6.084,758,6.084,759,6.084,760,5.357,761,4.495,762,4.865,763,2.953,764,3.616,765,4.495,766,2.953,767,3.958,768,4.495,769,2.953,770,2.953,771,2.194,772,4.495,773,2.953,774,2.953,775,3.958,776,2.953,777,4.495,778,2.953,779,4.495,780,2.953,781,3.958,782,2.953,783,4.495,784,2.953,785,4.495,786,2.953,787,4.495,788,2.953,789,3.958,790,5.443,791,2.953,792,2.953,793,2.953,794,2.953,795,2.85,796,2.194,797,2.6,798,2.953,799,2.953,800,2.953,801,2.368,802,2.953,803,2.194,804,2.953,805,2.953,806,2.953,807,2.953,808,2.953,809,2.953,810,2.953,811,2.953,812,2.953,813,2.953,814,2.953,815,2.953,816,2.953,817,2.953,818,2.953,819,2.953,820,2.953]],["title/modules/FirebaseAdminModule.html",[181,1.214,821,3.214]],["body/modules/FirebaseAdminModule.html",[0,0.217,3,0.092,4,0.092,5,0.082,11,1.058,18,0.752,20,1.53,21,0.01,22,1.418,23,0.529,24,1.219,25,1.418,29,0.262,38,0.092,39,0.005,67,0.006,68,0.005,140,0.909,148,2.04,150,1.832,181,2.032,183,1.82,188,3.05,189,2.669,203,2.24,252,2.81,254,2.542,360,2.583,739,2.24,747,3.994,748,4.994,762,4.994,764,4.302,795,2.24,796,4.994,797,3.765,821,5.378,822,4.994,823,4.276,824,6.904,825,3.765,826,5.178,827,4.276,828,6.681,829,3.765,830,5.178,831,4.756,832,4.276,833,5.178,834,4.276,835,4.276,836,5.178,837,4.276,838,5.178,839,4.276,840,4.276,841,4.276,842,3.765]],["title/interfaces/FirebaseAsyncModuleOptions.html",[737,1.84,831,2.842]],["body/interfaces/FirebaseAsyncModuleOptions.html",[3,0.117,4,0.117,5,0.104,10,0.49,13,1.888,21,0.01,23,0.621,24,1.43,26,1.695,29,0.25,38,0.148,39,0.006,64,2.85,67,0.007,68,0.006,71,1.706,73,1.325,127,1.542,140,1.157,181,1.528,252,5.23,254,4.731,737,2.935,739,2.85,764,4.099,795,3.612,801,4.364,803,4.045,831,4.532,843,4.045,844,4.364,845,6.072,846,5.53,847,4.793,848,4.364,849,4.793,850,4.793]],["title/interfaces/FirebaseAuthDecodedToken.html",[737,1.84,851,3.214]],["body/interfaces/FirebaseAuthDecodedToken.html",[3,0.124,4,0.124,5,0.111,10,0.519,21,0.009,23,0.7,24,1.685,38,0.124,39,0.006,60,2.709,67,0.008,68,0.006,73,1.374,127,1.904,375,6.039,548,4.621,737,2.455,739,3.022,843,4.288,851,5.315,852,4.627,853,5.081,854,7.156,855,7.156]],["title/injectables/FirebaseAuthService.html",[208,1.017,856,3.011]],["body/injectables/FirebaseAuthService.html",[0,0.173,3,0.073,4,0.073,5,0.065,10,0.307,11,1.239,13,2.058,18,0.962,20,1.893,21,0.01,22,1.755,23,0.677,24,1.509,25,1.679,26,2.493,29,0.237,33,1.659,38,0.073,39,0.004,43,1.326,60,1.602,64,2.623,67,0.005,68,0.004,73,0.962,127,1.835,140,0.726,148,2.058,150,2.267,208,1.178,209,1.326,275,2.128,337,1.549,360,2.606,375,5.173,747,4.138,767,4.41,795,3.107,851,2.536,852,4.016,854,3.004,855,3.004,856,3.486,857,5.37,858,3.004,859,5.933,860,4.13,861,5.008,862,3.721,863,5.224,864,5.008,865,3.721,866,5.008,867,3.412,868,5.933,869,3.412,870,4.016,871,5.008,872,3.412,873,5.008,874,3.412,875,3.412,876,5.756,877,5.933,878,3.412,879,5.008,880,3.412,881,3.004,882,3.004,883,3.412,884,3.412,885,3.412,886,3.412,887,3.412,888,3.412,889,3.412,890,3.412,891,3.412,892,3.412,893,3.412,894,3.412,895,3.412,896,3.412]],["title/injectables/FirebaseCloudMessagingService.html",[208,1.017,897,3.011]],["body/injectables/FirebaseCloudMessagingService.html",[0,0.234,3,0.1,4,0.1,5,0.089,10,0.416,11,1.534,18,0.895,20,1.613,21,0.01,22,1.495,23,0.63,24,1.285,25,1.115,26,1.931,29,0.253,38,0.1,39,0.005,64,3.247,67,0.007,68,0.005,73,1.191,127,1.564,140,0.983,148,2.427,150,1.44,208,1.458,209,1.797,337,2.099,360,3.073,747,4.634,762,5.555,771,3.436,781,5.46,795,3.664,857,5.204,865,4.608,881,5.46,897,4.317,898,5.994,899,4.071,900,6.995,901,6.995,902,6.2,903,4.624,904,7.475,905,6.995,906,6.995,907,4.624,908,4.624,909,4.624,910,4.624]],["title/injectables/FirebaseFirestoreService.html",[208,1.017,911,3.214]],["body/injectables/FirebaseFirestoreService.html",[0,0.245,3,0.104,4,0.104,5,0.093,10,0.434,11,1.578,18,0.914,20,1.66,21,0.01,22,1.539,23,0.643,24,1.323,25,1.164,29,0.275,38,0.104,39,0.005,64,3.342,67,0.007,68,0.005,73,1.225,127,1.598,140,1.026,148,2.479,150,1.504,208,1.501,209,1.876,337,2.191,360,3.14,747,4.7,753,6.098,775,5.618,795,3.743,857,5.294,865,4.742,911,4.742,912,4.251,913,6.381,914,6.381,915,6.381,916,4.827,917,4.827,918,6.294,919,4.827,920,4.827,921,4.827,922,4.827,923,4.827]],["title/modules/FirebaseModule.html",[181,1.214,924,3.011]],["body/modules/FirebaseModule.html",[0,0.185,3,0.079,4,0.079,5,0.07,11,0.904,13,1.268,18,0.673,20,1.37,21,0.01,22,1.27,23,0.474,24,1.092,25,1.27,29,0.27,38,0.079,39,0.004,67,0.006,68,0.004,85,2.172,140,0.777,148,1.826,150,1.64,181,2.093,183,1.556,184,1.556,185,1.716,186,1.716,187,1.606,188,3.383,189,3.383,192,2.472,193,1.716,194,1.716,203,2.758,298,2.717,360,2.313,522,4.636,762,3.913,764,4.013,795,1.914,821,2.717,822,2.717,824,6.563,825,3.219,826,4.636,828,6.301,829,3.219,830,4.636,831,4.437,833,5.434,838,4.636,842,4.636,856,5.888,882,3.219,897,5.888,898,2.931,911,4.586,924,5.791,925,3.219,926,3.219,927,3.219,928,3.656,929,3.656,930,3.656,931,4.636,932,3.656,933,3.656,934,3.656,935,4.296,936,3.656,937,3.656,938,3.656]],["title/interfaces/FirebaseModuleOptions.html",[737,1.84,764,2.571]],["body/interfaces/FirebaseModuleOptions.html",[3,0.114,4,0.114,5,0.101,10,0.475,13,1.83,21,0.01,23,0.671,24,1.631,26,1.643,29,0.245,38,0.146,39,0.006,64,2.762,67,0.007,68,0.006,71,1.305,73,1.298,127,1.861,140,1.122,181,1.481,252,3.466,254,3.135,737,2.877,739,2.762,764,4.434,795,3.54,801,6.308,803,5.846,831,3.466,843,3.92,844,4.23,845,4.645,847,4.645,848,6.308,849,6.569,850,4.645]],["title/injectables/FirebaseStorageService.html",[208,1.017,935,3.011]],["body/injectables/FirebaseStorageService.html",[0,0.214,3,0.091,4,0.091,5,0.112,10,0.381,11,1.443,12,3.469,13,2.318,18,0.854,20,1.518,21,0.01,22,1.407,23,0.601,24,1.21,25,1.02,26,1.818,29,0.242,33,2.056,38,0.091,39,0.005,43,1.643,64,3.056,67,0.006,68,0.005,73,1.121,85,1.745,127,1.852,140,0.899,148,2.318,150,1.317,208,1.372,209,1.643,266,1.8,267,2.305,337,1.92,360,2.935,629,4.063,742,5.883,747,4.492,760,5.883,771,3.143,789,5.138,795,3.499,857,5.015,865,4.336,935,4.063,939,3.724,940,4.965,941,5.835,942,4.229,943,5.357,944,7.203,945,7.203,946,6.681,947,4.229,948,4.679,949,4.229,950,4.229,951,4.229,952,4.229,953,4.229,954,3.724,955,4.229,956,3.724,957,4.229,958,4.229]],["title/injectables/FirebaseUploader.html",[208,1.017,959,3.214]],["body/injectables/FirebaseUploader.html",[0,0.241,3,0.102,4,0.102,5,0.091,8,2.59,10,0.428,11,1.562,13,2.46,18,0.808,20,1.643,21,0.01,22,1.523,23,0.568,24,1.309,25,1.146,26,1.967,29,0.285,38,0.102,39,0.005,43,1.847,67,0.007,68,0.005,85,1.961,127,1.412,140,1.011,147,2.964,148,1.648,150,1.48,208,1.485,209,1.847,266,2.022,267,2.59,337,2.157,738,5.261,935,5.261,940,4.693,948,5.687,959,4.693,960,6.245,961,4.185,962,4.752,963,4.752,964,6.315,965,5.561,966,4.752,967,4.185,968,4.752,969,4.752,970,4.185,971,4.185,972,4.185,973,3.939,974,4.185,975,4.752,976,4.752,977,4.752,978,4.752]],["title/classes/Grade.html",[0,0.219,162,2.571]],["body/classes/Grade.html",[0,0.215,2,0.734,3,0.091,4,0.091,5,0.081,10,0.382,18,1.025,21,0.01,23,0.721,29,0.274,30,0.973,38,0.091,39,0.005,40,1.729,41,1.161,42,1.805,67,0.006,68,0.005,69,2.221,71,1.446,72,3.069,73,1.123,76,2.568,77,2.568,78,2.568,79,1.748,80,3.646,90,1.925,91,3.069,92,1.991,93,2.847,94,1.863,95,2.76,96,1.925,97,1.863,98,1.925,99,1.863,100,1.925,103,2.221,104,4.173,105,3.646,107,2.787,159,4.739,160,3.401,162,3.475,179,3.151,388,5.266,396,5.266,527,2.787,530,3.734,979,3.734,980,6.691,981,4.241,982,4.241,983,4.241,984,4.241,985,4.241,986,4.241]],["title/modules/InfraModule.html",[181,1.214,227,3.011]],["body/modules/InfraModule.html",[0,0.242,3,0.103,4,0.103,5,0.092,21,0.01,29,0.294,38,0.103,39,0.005,67,0.007,68,0.005,113,2.977,140,1.017,181,1.998,183,2.035,184,2.035,185,2.245,186,2.245,187,2.101,188,2.878,189,3.229,192,2.977,193,2.245,194,2.245,203,3.726,227,5.755,232,5.085,233,5.63,234,3.329,252,3.142,254,2.842,836,4.211,924,5.488,931,4.211,959,4.712,970,4.211,973,5.235,974,4.211,987,4.211,988,4.211,989,4.782,990,4.782,991,5.287,992,4.782,993,4.211,994,4.782,995,4.782,996,4.782]],["title/injectables/JwtGuard.html",[208,1.017,315,2.357]],["body/injectables/JwtGuard.html",[0,0.323,3,0.137,4,0.137,5,0.122,21,0.01,29,0.275,38,0.137,39,0.007,67,0.008,68,0.007,71,1.575,140,1.354,208,1.786,209,2.474,315,4.139,997,5.607,998,6.368,999,5.106,1000,6.368]],["title/interfaces/JwtPayload.html",[737,1.84,1001,3.214]],["body/interfaces/JwtPayload.html",[3,0.132,4,0.132,5,0.117,10,0.55,21,0.009,23,0.777,38,0.132,39,0.007,67,0.008,68,0.007,73,1.424,127,1.931,375,6.162,737,2.602,739,3.202,1001,5.508,1002,5.384,1003,5.384]],["title/injectables/JwtStrategy.html",[208,1.017,316,3.011]],["body/injectables/JwtStrategy.html",[0,0.205,3,0.087,4,0.087,5,0.077,10,0.364,11,1.398,13,2.262,18,0.723,20,1.471,21,0.01,22,1.363,23,0.509,24,1.172,25,0.974,26,1.761,29,0.297,33,2.749,36,2.116,38,0.087,39,0.004,43,2.196,46,2.96,49,3.36,50,2.961,60,2.654,61,2.202,67,0.006,68,0.004,71,0.999,140,0.859,148,1.961,150,1.259,208,1.329,209,1.57,233,5.876,234,2.813,237,3.002,297,4.579,298,3.002,316,3.935,319,3.002,320,3.002,337,2.566,340,4.7,352,5.229,355,3.558,360,2.483,629,2.813,999,3.24,1001,5.248,1004,3.558,1005,5.653,1006,4.04,1007,4.04,1008,5.653,1009,4.04,1010,4.04,1011,3.558,1012,4.04,1013,4.04,1014,4.04,1015,3.558,1016,3.24,1017,4.04,1018,4.04,1019,4.04,1020,4.04,1021,4.04,1022,4.04,1023,4.04,1024,4.04,1025,4.04,1026,4.04,1027,5.653,1028,4.04]],["title/modules/LoggerModule.html",[181,1.214,228,3.011]],["body/modules/LoggerModule.html",[0,0.282,3,0.12,4,0.12,5,0.107,21,0.01,29,0.253,38,0.12,39,0.006,67,0.008,68,0.006,140,1.182,181,2.147,183,2.366,184,2.366,185,2.611,186,2.611,187,2.443,188,3.47,189,3.47,192,3.282,193,2.611,194,2.611,228,5.961,620,6.193,1029,4.897,1030,4.897,1031,4.897,1032,5.561,1033,5.561]],["title/classes/LoginDto.html",[0,0.219,295,2.842]],["body/classes/LoginDto.html",[0,0.349,2,0.939,3,0.117,4,0.117,5,0.104,10,0.488,18,0.88,21,0.01,23,0.619,29,0.274,38,0.117,39,0.006,57,4.296,61,3.75,67,0.007,68,0.006,71,1.702,73,1.322,79,1.5,91,2.308,127,1.69,295,4.522,303,5.223,305,3.382,308,4.522,309,2.735,357,4.349,537,4.776,538,5.616,540,4.776,1034,4.776,1035,5.423,1036,5.423,1037,5.423,1038,4.349,1039,5.423,1040,5.423]],["title/injectables/PayloadInterceptor.html",[208,1.017,520,3.011]],["body/injectables/PayloadInterceptor.html",[0,0.272,3,0.116,4,0.116,5,0.103,8,2.925,10,0.483,11,1.691,18,0.686,20,1.396,21,0.01,22,1.294,23,0.483,24,1.113,25,1.294,29,0.272,38,0.116,39,0.006,67,0.007,68,0.006,140,1.141,150,1.672,208,1.607,209,2.085,520,4.758,943,4.303,1041,4.726,1042,6.835,1043,6.835,1044,6.972,1045,7.521,1046,7.918,1047,5.367,1048,5.367,1049,7.521,1050,6.835,1051,4.726,1052,4.303,1053,5.367,1054,5.367]],["title/classes/Period.html",[0,0.219,388,2.842]],["body/classes/Period.html",[0,0.194,2,0.661,3,0.082,4,0.082,5,0.073,10,0.344,18,1.035,21,0.01,22,1.525,23,0.755,24,1.126,29,0.25,30,0.876,38,0.082,39,0.004,40,1.606,41,1.045,42,2.312,67,0.006,68,0.004,71,1.344,72,2.931,73,1.043,76,2.387,77,2.387,78,2.387,79,1.765,82,3.075,84,3.782,85,2.241,90,1.734,91,2.931,92,1.793,93,3.311,94,1.678,95,2.609,96,1.734,97,1.678,98,1.734,99,1.678,100,1.734,102,3.473,103,2,105,3.944,127,1.215,162,4.326,179,2.838,256,3.088,261,2.659,388,3.57,390,5.524,414,3.539,527,3.57,546,5.071,1055,3.363,1056,6.324,1057,5.568,1058,6.324,1059,3.819,1060,3.819,1061,3.819,1062,3.819,1063,3.819,1064,3.363,1065,3.819,1066,3.819,1067,3.819]],["title/classes/Professor.html",[0,0.219,1068,2.842]],["body/classes/Professor.html",[0,0.222,2,0.759,3,0.094,4,0.094,5,0.084,10,0.395,18,1.053,21,0.01,23,0.76,29,0.217,30,1.006,34,3.556,36,3.133,38,0.094,39,0.005,40,1.769,41,1.201,42,1.866,46,3.67,63,3.932,67,0.006,68,0.005,71,1.48,72,1.866,73,1.149,76,2.628,77,2.628,78,2.628,79,1.763,82,3.311,85,2.468,88,3.556,90,1.991,91,3.503,92,2.059,93,2.898,94,1.927,95,2.809,96,1.991,97,1.927,98,1.991,99,1.927,100,1.991,127,1.338,168,4.798,256,3.401,257,3.401,266,1.866,473,3.517,481,3.932,609,2.735,1068,3.932,1069,3.862,1070,3.862,1071,3.862,1072,3.862,1073,3.862]],["title/classes/ProfessorRepository.html",[0,0.219,451,3.011]],["body/classes/ProfessorRepository.html",[0,0.31,2,1.059,3,0.132,4,0.132,5,0.117,21,0.01,29,0.289,30,1.7,38,0.132,39,0.007,67,0.008,68,0.007,71,1.833,173,4.534,174,3.475,175,2.602,176,2.602,177,2.602,451,5.16,1068,4.018,1074,5.384,1075,5.384,1076,6.114]],["title/injectables/ProfessorService.html",[208,1.017,448,2.842]],["body/injectables/ProfessorService.html",[0,0.224,3,0.095,4,0.095,5,0.085,10,0.397,11,1.486,18,0.873,20,1.777,21,0.01,22,1.647,23,0.615,24,1.416,25,1.449,26,2.284,29,0.293,30,1.012,33,2.145,38,0.095,39,0.005,67,0.007,68,0.005,79,0.962,118,3.273,140,0.938,148,1.53,150,1.871,175,3.12,176,1.877,177,1.877,198,1.938,208,1.413,209,1.714,337,2.726,354,2.751,360,1.938,448,3.947,451,5.105,452,3.884,600,4.168,711,3.071,713,4.182,870,3.537,1068,3.947,1075,3.884,1077,3.884,1078,5.289,1079,4.411,1080,5.289,1081,4.411,1082,5.289,1083,5.201,1084,4.411,1085,3.884,1086,3.884,1087,3.071,1088,4.411,1089,3.884,1090,4.411,1091,3.278]],["title/classes/Question.html",[0,0.219,242,1.731]],["body/classes/Question.html",[0,0.159,2,0.542,3,0.067,4,0.067,5,0.06,10,0.281,18,1.052,21,0.01,23,0.769,24,1.461,29,0.204,30,0.717,38,0.067,39,0.003,40,1.388,41,1.837,67,0.005,68,0.003,71,1.161,72,3.111,73,0.902,76,2.752,77,2.752,78,2.752,79,1.794,80,1.95,82,3.427,83,3.28,84,4.907,85,3.103,90,1.42,91,3.111,92,1.468,93,3,94,2.062,95,2.325,96,1.42,97,2.062,98,1.42,99,2.062,100,1.42,102,3.686,103,2.458,104,2.928,127,1.576,242,1.879,256,2.668,261,2.177,266,2.665,412,2.79,415,4.116,477,3.28,478,2.821,479,2.177,480,1.95,513,3.703,548,2.79,563,4.962,564,4.962,565,4.519,566,4.519,628,3.764,639,2.177,640,2.177,641,2.177,649,3.923,1092,2.754,1093,3.923,1094,3.127,1095,3.127,1096,3.127,1097,3.127,1098,3.127,1099,3.127,1100,3.127]],["title/controllers/QuestionController.html",[111,1.963,1101,3.214]],["body/controllers/QuestionController.html",[0,0.138,3,0.059,4,0.059,5,0.052,10,0.245,11,1.043,13,2.871,18,0.853,20,1.736,21,0.01,22,1.609,23,0.692,24,1.383,25,1.609,26,2.352,29,0.274,38,0.059,39,0.003,40,1.972,41,2.022,42,1.795,43,2.796,66,1.234,67,0.005,68,0.003,79,1.455,111,1.234,113,1.276,115,1.695,118,2.298,119,2.507,120,2.513,123,2.63,126,1.616,128,2.02,130,1.616,131,2.02,133,1.616,137,3.827,138,3.382,139,2.02,140,0.578,148,1.463,150,2.078,153,2.02,157,2.02,242,2.88,315,1.481,337,1.234,360,1.853,478,2.553,560,4.384,590,1.616,673,2.179,675,2.179,680,2.179,682,1.892,683,4.67,684,2.02,690,5.582,693,1.892,697,2.179,1101,3.134,1102,2.393,1103,4.551,1104,3.714,1105,3.84,1106,2.393,1107,2.718,1108,2.393,1109,4.055,1110,2.718,1111,3.714,1112,2.393,1113,4.217,1114,2.718,1115,2.393,1116,2.718,1117,2.718,1118,4.055,1119,2.393,1120,2.718,1121,4.217,1122,5.009,1123,2.393,1124,2.718,1125,2.718,1126,5.129,1127,2.179,1128,2.718,1129,4.144,1130,2.718,1131,2.393,1132,2.718,1133,2.718,1134,2.179,1135,3.223,1136,2.393,1137,3.223,1138,2.179,1139,2.179,1140,2.393,1141,2.718,1142,2.718,1143,2.718,1144,2.718,1145,2.718,1146,2.718,1147,2.718,1148,2.718,1149,2.718,1150,2.718,1151,2.718]],["title/classes/QuestionFindDto.html",[0,0.219,1109,3.011]],["body/classes/QuestionFindDto.html",[0,0.369,2,1.026,3,0.128,4,0.128,5,0.114,10,0.533,18,0.758,21,0.01,23,0.533,24,1.508,29,0.215,38,0.128,39,0.006,41,1.99,67,0.008,68,0.006,73,1.397,79,1.292,309,2.988,478,2.667,513,5.17,514,4.778,559,5.404,1109,5.062,1152,6.403,1153,5.218,1154,5.925,1155,5.925]],["title/classes/QuestionGroup.html",[0,0.219,477,2.265]],["body/classes/QuestionGroup.html",[0,0.307,2,0.507,3,0.063,4,0.063,5,0.056,10,0.264,11,1.105,18,1.049,21,0.01,23,0.758,25,0.707,29,0.22,30,0.672,38,0.063,39,0.003,40,1.321,41,1.786,42,1.247,67,0.005,68,0.003,71,1.105,72,3.043,73,0.858,76,2.662,77,2.662,78,2.662,79,1.788,80,1.828,82,3.172,83,3.174,84,3.111,85,1.844,90,1.33,91,3.043,92,1.376,93,2.926,94,1.963,95,2.235,96,1.33,97,1.963,98,1.33,99,1.963,100,1.33,102,3.467,103,2.34,104,2.787,105,2.787,127,0.999,242,2.611,256,2.54,261,2.04,266,2.926,394,3.079,411,4.344,412,2.656,414,3.477,477,2.34,478,2.77,479,5.259,512,3.771,527,1.926,548,3.602,627,5.336,628,4.859,629,4.219,639,2.04,640,2.04,641,2.04,642,4.77,644,2.35,653,2.58,654,2.58,655,2.58,1064,2.58,1093,3.771,1134,2.35,1156,2.58,1157,4.025,1158,2.93,1159,2.93,1160,2.93,1161,2.93,1162,2.93,1163,2.93,1164,2.93,1165,2.93,1166,2.93,1167,2.93,1168,2.93]],["title/classes/QuestionGroup1620179231630.html",[0,0.219,1169,3.468]],["body/classes/QuestionGroup1620179231630.html",[0,0.265,2,0.626,3,0.078,4,0.078,5,0.069,8,2.845,9,3.823,10,0.325,11,1.291,12,4.413,13,2.575,14,3.256,15,3.103,16,3.256,17,4.98,18,0.784,20,1.358,21,0.009,22,1.718,23,0.552,24,1.082,25,1.259,26,2.092,27,3.256,29,0.131,30,0.829,38,0.078,39,0.004,40,1.985,43,2.884,66,1.64,67,0.006,68,0.004,73,1.003,83,3.211,120,2.981,127,0.808,216,3.635,242,2.688,266,3.257,267,1.969,272,4.63,273,4.186,274,5.953,275,5.301,276,5.953,277,4.186,278,4.186,279,4.186,280,3.88,282,4.186,283,4.99,284,4.186,290,2.515,387,4.597,394,2.053,405,4.186,408,3.635,409,4.186,410,2.685,415,3.431,422,4.186,423,4.186,425,4.186,426,2.897,427,2.897,428,2.897,444,4.597,565,2.897,566,2.897,1169,5.385,1170,5.913,1171,3.181,1172,3.613,1173,3.613,1174,3.613,1175,3.181,1176,3.181,1177,3.181]],["title/controllers/QuestionGroupController.html",[111,1.963,1178,3.214]],["body/controllers/QuestionGroupController.html",[0,0.132,3,0.056,4,0.056,5,0.05,10,0.235,11,1.01,13,2.903,18,0.877,20,1.706,21,0.01,22,1.582,23,0.684,24,1.36,25,1.653,26,2.471,29,0.264,38,0.056,39,0.003,40,1.939,41,1.997,42,1.737,43,2.663,66,1.183,67,0.004,68,0.003,79,1.495,111,1.183,113,1.224,115,1.626,116,2.538,117,3.742,118,2.225,119,2.427,120,2.447,123,2.546,126,1.55,128,1.937,130,1.55,131,1.937,133,1.55,137,3.742,138,3.274,139,1.937,140,0.554,143,1.713,145,1.713,147,1.626,148,0.904,150,2.135,153,1.937,157,1.937,242,2.475,315,1.421,477,3.716,478,2.602,480,1.626,509,4.565,590,1.55,593,4.309,649,2.843,673,2.091,675,2.091,680,2.091,682,1.815,683,4.566,684,3.034,689,3.274,690,5.496,693,1.815,697,2.091,1105,3.034,1112,2.296,1115,2.296,1119,2.296,1123,2.296,1126,5.444,1127,2.091,1137,3.139,1138,2.091,1139,2.091,1140,2.296,1178,3.034,1179,6.248,1180,2.296,1181,4.431,1182,2.296,1183,2.607,1184,5.032,1185,2.607,1186,2.296,1187,2.607,1188,2.607,1189,2.607,1190,2.607,1191,2.607,1192,4.565,1193,2.607,1194,4.94,1195,2.607,1196,4.566,1197,1.937,1198,2.296,1199,2.296,1200,2.607,1201,2.607,1202,2.607,1203,2.607,1204,2.607,1205,2.607,1206,2.607,1207,2.607,1208,2.607]],["title/modules/QuestionGroupModule.html",[181,1.214,229,3.011]],["body/modules/QuestionGroupModule.html",[0,0.237,3,0.101,4,0.101,5,0.09,21,0.01,29,0.303,38,0.101,39,0.005,67,0.007,68,0.005,113,2.935,140,0.995,181,1.976,183,1.992,184,1.992,185,2.197,186,2.197,187,2.056,188,3.195,189,2.124,192,2.935,193,2.197,194,2.197,197,2.782,198,2.056,203,3.274,226,5.292,229,5.949,241,4.121,243,3.478,478,1.717,1101,5.23,1137,5.022,1138,3.753,1139,3.753,1178,5.23,1209,4.121,1210,4.121,1211,4.121,1212,5.606,1213,4.68,1214,4.68,1215,4.68,1216,3.258,1217,4.121,1218,4.121,1219,4.68,1220,4.68,1221,4.68]],["title/classes/QuestionGroupRepository.html",[0,0.219,1216,3.011]],["body/classes/QuestionGroupRepository.html",[0,0.306,2,1.046,3,0.13,4,0.13,5,0.116,21,0.01,29,0.287,30,1.688,38,0.13,39,0.007,67,0.008,68,0.007,71,1.82,173,4.51,174,3.434,175,2.571,176,2.571,177,2.571,477,3.164,478,2.216,480,3.768,1197,4.49,1216,5.123,1222,5.32,1223,5.32,1224,6.042]],["title/injectables/QuestionGroupService.html",[208,1.017,1137,2.697]],["body/injectables/QuestionGroupService.html",[0,0.108,3,0.046,4,0.046,5,0.041,10,0.191,11,0.858,13,2.742,18,0.843,20,1.644,21,0.01,22,1.524,23,0.569,24,1.31,25,1.524,26,2.355,29,0.281,30,0.796,33,3.204,38,0.046,39,0.004,40,2.072,41,1.866,42,0.905,43,2.788,49,2.062,50,2.301,66,0.966,67,0.004,68,0.002,79,1.218,116,2.216,117,3.332,118,1.891,119,2.062,120,2.137,126,2.062,130,2.062,133,1.264,140,0.452,143,1.398,145,1.398,148,1.524,150,1.968,175,3.115,176,0.905,177,0.905,198,0.934,208,0.816,209,0.826,242,2.398,337,1.575,351,3.266,354,1.327,360,1.93,412,1.264,414,1.687,477,3.451,478,2.5,480,1.327,509,4.171,512,2.416,593,3.937,626,1.706,649,3.888,685,3.941,711,1.481,713,2.416,719,2.28,720,1.481,721,1.581,727,2.782,728,3.055,730,1.706,732,1.873,733,1.706,1052,1.706,1091,1.581,1093,2.416,1105,3.266,1134,1.706,1135,3.941,1136,1.873,1137,2.164,1157,3.266,1181,3.869,1182,1.873,1186,1.873,1192,3.53,1194,4.587,1196,4.065,1197,1.581,1198,1.873,1199,1.873,1216,3.53,1217,1.873,1218,1.873,1225,6.002,1226,1.873,1227,2.127,1228,2.127,1229,2.127,1230,2.127,1231,2.127,1232,2.127,1233,1.873,1234,2.127,1235,2.127,1236,2.127,1237,2.127,1238,3.524,1239,2.127,1240,2.127,1241,2.127,1242,3.47,1243,3.47,1244,3.47,1245,3.47,1246,2.127,1247,3.47,1248,3.47,1249,2.127,1250,2.127,1251,3.055,1252,1.873,1253,2.127,1254,2.127,1255,2.127,1256,1.873,1257,2.127,1258,2.127,1259,1.873,1260,2.127,1261,2.127,1262,2.127,1263,2.127]],["title/classes/QuestionImage1620477869366.html",[0,0.219,1264,3.468]],["body/classes/QuestionImage1620477869366.html",[0,0.186,2,0.636,3,0.079,4,0.079,5,0.07,8,2.879,9,3.859,10,0.331,11,1.307,12,4.438,13,2.59,14,3.295,15,3.141,16,3.295,17,5,18,0.791,20,1.375,21,0.009,22,1.729,23,0.557,24,1.095,25,1.274,26,2.108,27,3.295,29,0.133,30,0.842,38,0.079,39,0.004,43,3.162,66,2.398,67,0.006,68,0.004,73,1.015,83,2.767,120,2.569,127,0.821,216,4.711,242,3.257,266,2.248,267,2.002,272,5.075,275,4.656,280,3.926,283,5.029,290,3.678,408,5.666,410,3.926,415,3.472,422,5.426,423,5.426,424,5.987,425,5.987,426,4.237,427,4.237,428,4.237,1175,5.959,1176,5.959,1264,5.426,1265,5.959,1266,3.234,1267,3.673,1268,3.673,1269,3.673]],["title/modules/QuestionModule.html",[181,1.214,1212,3.011]],["body/modules/QuestionModule.html",[0,0.269,3,0.114,4,0.114,5,0.102,21,0.01,29,0.286,38,0.114,39,0.006,67,0.007,68,0.006,140,1.129,181,2.101,183,2.26,184,2.26,185,2.494,186,2.494,187,2.333,188,3.397,189,3.397,192,3.188,193,2.494,194,2.494,197,3.157,198,2.333,203,2.781,478,1.948,1135,5.513,1212,5.9,1270,4.677,1271,4.677,1272,4.677,1273,5.311,1274,5.311,1275,3.697,1276,4.677,1277,5.311]],["title/classes/QuestionPosition1620488935141.html",[0,0.219,1278,3.468]],["body/classes/QuestionPosition1620488935141.html",[0,0.224,2,0.764,3,0.095,4,0.095,5,0.085,8,3.273,9,4.259,10,0.397,11,1.486,12,4.704,13,2.745,14,3.746,15,3.57,16,3.746,17,5.212,18,0.873,20,1.563,21,0.009,22,1.85,23,0.615,24,1.245,25,1.449,26,2.284,27,3.746,29,0.16,30,1.012,38,0.095,39,0.005,43,2.849,67,0.007,68,0.005,73,1.154,83,3.146,102,3.029,127,0.987,242,2.404,266,2.906,267,2.404,272,4.573,275,3.746,290,4.182,408,5.105,409,4.816,410,4.463,412,3.57,1093,5.105,1278,5.879,1279,6.456,1280,3.884,1281,4.411,1282,4.411,1283,4.411]],["title/classes/QuestionRepository.html",[0,0.219,1275,3.011]],["body/classes/QuestionRepository.html",[0,0.309,2,1.055,3,0.131,4,0.131,5,0.117,21,0.01,29,0.288,30,1.696,38,0.131,39,0.007,67,0.008,68,0.007,71,1.829,173,4.526,174,3.461,175,2.592,176,2.592,177,2.592,242,2.437,478,2.234,1275,5.148,1284,5.362,1285,5.362,1286,6.09]],["title/injectables/QuestionService.html",[208,1.017,1135,2.697]],["body/injectables/QuestionService.html",[0,0.119,3,0.051,4,0.051,5,0.045,10,0.212,11,0.931,13,2.72,18,0.875,20,1.78,21,0.01,22,1.65,23,0.616,24,1.419,25,1.588,26,2.414,29,0.277,30,0.863,33,2.859,38,0.051,39,0.004,40,2.14,41,1.931,42,1.001,43,2.437,49,2.237,50,2.463,66,1.068,67,0.004,68,0.003,79,1.282,118,2.051,119,2.237,120,1.83,126,2.237,130,2.237,133,2.237,140,0.5,148,0.816,150,2.131,175,3.203,176,1.001,177,1.001,198,1.033,208,0.885,209,0.914,242,3.012,337,1.708,351,3.495,354,1.467,356,1.637,360,1.033,412,1.398,477,2.815,478,2.588,480,1.467,513,3.091,560,3.864,649,3.275,711,1.637,713,2.62,719,2.473,720,1.637,721,1.748,727,3.017,730,1.886,733,1.886,876,4.734,1052,1.886,1091,1.748,1093,2.62,1103,3.313,1104,3.313,1105,3.495,1106,3.313,1108,3.313,1109,3.743,1111,3.313,1118,3.743,1122,3.743,1129,3.772,1131,2.071,1135,2.347,1157,3.995,1197,1.748,1233,2.071,1251,3.313,1252,2.071,1259,2.071,1275,3.743,1276,2.071,1285,2.071,1287,2.071,1288,4.704,1289,2.352,1290,2.352,1291,2.352,1292,2.352,1293,2.352,1294,2.352,1295,2.352,1296,2.352,1297,2.352,1298,2.352,1299,2.352,1300,2.352,1301,3.772,1302,2.352,1303,2.352,1304,2.352,1305,3.763,1306,3.763,1307,2.352,1308,2.352,1309,2.352,1310,3.763,1311,2.071,1312,2.352,1313,2.352,1314,2.352,1315,2.352,1316,2.352,1317,2.352]],["title/classes/ReorderQuestionDto.html",[0,0.219,1118,3.011]],["body/classes/ReorderQuestionDto.html",[0,0.356,2,0.97,3,0.121,4,0.121,5,0.107,10,0.504,18,0.898,21,0.01,23,0.632,29,0.203,38,0.121,39,0.006,41,2.201,67,0.008,68,0.006,73,1.349,79,1.531,85,2.897,309,2.824,478,2.814,513,5.041,514,5.041,562,4.163,1118,4.889,1311,6.755,1318,6.755,1319,5.601,1320,4.932,1321,5.601,1322,6.183,1323,5.601]],["title/classes/ReorderQuestionGroupDto.html",[0,0.219,1192,3.011]],["body/classes/ReorderQuestionGroupDto.html",[0,0.352,2,0.953,3,0.118,4,0.118,5,0.105,10,0.495,18,0.888,21,0.01,23,0.625,29,0.199,38,0.118,39,0.006,41,2.187,67,0.008,68,0.006,73,1.333,79,1.514,85,2.864,242,3.045,309,2.774,478,2.79,511,3.83,512,5.296,514,5.25,516,4.844,1192,4.834,1256,6.699,1320,4.844,1322,6.114,1324,6.699,1325,5.501,1326,5.501]],["title/interfaces/SoftDeleteResult.html",[719,2.842,737,1.84]],["body/interfaces/SoftDeleteResult.html",[3,0.133,4,0.133,5,0.119,10,0.557,21,0.01,23,0.721,38,0.133,39,0.007,41,1.694,66,2.809,67,0.008,68,0.007,73,1.434,719,4.906,720,4.308,737,2.633,739,3.241,1327,4.962,1328,8.325,1329,7.466,1330,6.188]],["title/classes/Student.html",[0,0.219,1331,2.842]],["body/classes/Student.html",[0,0.222,2,0.759,3,0.094,4,0.094,5,0.084,10,0.395,18,1.053,21,0.01,23,0.76,29,0.217,30,1.006,34,3.556,36,3.133,38,0.094,39,0.005,40,1.769,41,1.201,42,1.866,46,3.67,63,3.932,67,0.006,68,0.005,71,1.48,72,1.866,73,1.149,76,2.628,77,2.628,78,2.628,79,1.763,82,3.311,85,2.468,88,3.556,90,1.991,91,3.503,92,2.059,93,2.898,94,1.927,95,2.809,96,1.991,97,1.927,98,1.991,99,1.927,100,1.991,127,1.338,168,4.798,256,3.401,257,3.401,266,1.866,473,3.517,481,3.932,609,2.735,1070,3.862,1071,3.862,1072,3.862,1073,3.862,1331,3.932,1332,3.862]],["title/classes/StudentRepository.html",[0,0.219,453,3.011]],["body/classes/StudentRepository.html",[0,0.31,2,1.059,3,0.132,4,0.132,5,0.117,21,0.01,29,0.289,30,1.7,38,0.132,39,0.007,67,0.008,68,0.007,71,1.833,173,4.534,174,3.475,175,2.602,176,2.602,177,2.602,453,5.16,1331,4.018,1333,5.384,1334,5.384,1335,6.114]],["title/injectables/StudentService.html",[208,1.017,449,2.842]],["body/injectables/StudentService.html",[0,0.224,3,0.095,4,0.095,5,0.085,10,0.397,11,1.486,18,0.873,20,1.777,21,0.01,22,1.647,23,0.615,24,1.416,25,1.449,26,2.284,29,0.293,30,1.012,33,2.145,38,0.095,39,0.005,67,0.007,68,0.005,79,0.962,118,3.273,140,0.938,148,1.53,150,1.871,175,3.12,176,1.877,177,1.877,198,1.938,208,1.413,209,1.714,337,2.726,354,2.751,360,1.938,449,3.947,453,5.105,454,3.884,600,4.168,711,3.071,713,4.182,870,3.537,1078,5.289,1080,5.289,1082,5.289,1083,5.201,1085,3.884,1086,3.884,1087,3.071,1089,3.884,1091,3.278,1331,3.947,1334,3.884,1336,3.884,1337,4.411,1338,4.411,1339,4.411,1340,4.411,1341,4.411]],["title/classes/Subject.html",[0,0.219,396,2.842]],["body/classes/Subject.html",[0,0.196,2,0.67,3,0.083,4,0.083,5,0.074,10,0.348,18,1.038,21,0.01,23,0.756,29,0.251,30,0.887,38,0.083,39,0.004,40,1.621,41,1.743,42,1.646,67,0.006,68,0.004,71,1.356,72,2.948,73,1.053,76,2.408,77,2.408,78,2.408,79,1.77,80,2.412,82,3.096,83,2.871,85,2.261,90,1.755,91,2.948,92,1.816,93,2.71,94,1.699,95,2.627,96,1.755,97,1.699,98,1.755,99,1.699,100,1.755,102,3.493,103,2.025,104,3.419,105,3.419,107,2.541,127,1.549,162,4.347,179,2.874,256,3.937,257,3.116,392,5.437,393,5.106,394,3.619,396,3.602,527,2.541,1057,5.607,1342,3.405,1343,6.367,1344,3.867,1345,3.867,1346,3.867,1347,3.867,1348,3.867,1349,3.867,1350,3.867,1351,3.867]],["title/interfaces/SwaggerOptions.html",[737,1.84,1352,3.214]],["body/interfaces/SwaggerOptions.html",[3,0.123,4,0.123,5,0.11,10,0.515,21,0.009,23,0.729,38,0.123,39,0.006,67,0.008,68,0.006,73,1.367,127,1.964,394,4.607,416,5.643,737,2.437,739,2.999,1352,5.291,1353,5.043,1354,7.138,1355,7.138,1356,7.748]],["title/classes/TimestampEntity.html",[0,0.219,95,1.784]],["body/classes/TimestampEntity.html",[0,0.275,2,0.939,3,0.117,4,0.117,5,0.104,10,0.488,18,0.967,21,0.01,23,0.68,29,0.196,30,1.244,38,0.117,39,0.006,67,0.007,68,0.006,71,1.702,73,1.322,76,3.32,77,3.32,78,3.32,79,1.648,93,3.567,94,3.32,95,2.839,97,3.32,99,3.32,1357,4.776,1358,7.558,1359,5.423,1360,5.423,1361,5.423]],["title/classes/UpdateAnswerDto.html",[0,0.219,134,3.011]],["body/classes/UpdateAnswerDto.html",[0,0.32,2,1.094,3,0.136,4,0.136,5,0.121,21,0.01,29,0.274,38,0.136,39,0.007,67,0.008,68,0.007,71,1.562,116,3.184,122,4.15,134,5.262,144,5.064,534,5.064,1362,5.561,1363,4.693,1364,5.064,1365,5.064,1366,6.315]],["title/classes/UpdateExamDto.html",[0,0.219,679,3.011]],["body/classes/UpdateExamDto.html",[0,0.32,2,1.094,3,0.136,4,0.136,5,0.121,21,0.01,29,0.274,38,0.136,39,0.007,67,0.008,68,0.007,71,1.562,116,3.184,542,4.15,544,5.064,679,5.262,687,5.064,1363,4.693,1364,5.064,1365,5.064,1367,5.561,1368,6.315]],["title/classes/UpdateQuestionDto.html",[0,0.219,1122,3.011]],["body/classes/UpdateQuestionDto.html",[0,0.32,2,1.094,3,0.136,4,0.136,5,0.121,21,0.01,29,0.274,38,0.136,39,0.007,67,0.008,68,0.007,71,1.562,116,3.184,478,2.316,560,4.15,562,4.693,590,3.754,1122,5.262,1129,5.064,1363,4.693,1369,5.561,1370,6.315]],["title/classes/UpdateQuestionGroupDto.html",[0,0.219,1194,3.011]],["body/classes/UpdateQuestionGroupDto.html",[0,0.316,2,1.08,3,0.134,4,0.134,5,0.12,21,0.01,29,0.272,38,0.134,39,0.007,67,0.008,68,0.007,71,1.543,116,3.145,242,3.003,478,2.288,511,4.343,593,4.099,1194,5.223,1196,5.002,1363,4.636,1364,5.002,1365,5.002,1371,5.493,1372,6.238]],["title/controllers/UploadController.html",[111,1.963,991,3.214]],["body/controllers/UploadController.html",[0,0.251,3,0.107,4,0.107,5,0.139,10,0.446,11,1.605,13,2.51,18,0.633,20,1.288,21,0.01,22,1.194,23,0.446,24,1.027,25,1.194,29,0.296,38,0.107,39,0.005,43,1.924,67,0.007,68,0.005,79,1.08,111,2.248,113,2.325,115,3.088,123,4.047,140,1.053,147,3.088,148,1.718,150,1.542,315,2.699,590,2.943,682,3.447,688,4.36,689,5.203,693,3.447,940,5.378,973,4.047,991,4.822,993,4.36,1373,4.36,1374,4.952,1375,7.237,1376,4.952,1377,4.952,1378,4.952,1379,4.952,1380,4.952,1381,4.36,1382,4.36,1383,5.203,1384,4.952,1385,4.952,1386,3.971,1387,4.952,1388,4.952,1389,4.952]],["title/classes/UploaderService.html",[0,0.219,973,2.697]],["body/classes/UploaderService.html",[0,0.29,2,0.992,3,0.123,4,0.123,5,0.11,10,0.515,11,1.761,18,0.732,20,1.49,21,0.009,22,1.381,23,0.515,24,1.187,25,1.381,26,2.218,29,0.207,38,0.123,39,0.006,67,0.008,68,0.006,127,1.733,738,5.643,771,4.256,940,5.291,948,6.213,965,6.269,967,5.043,971,5.043,972,5.043,973,4.44,1390,5.043,1391,8.106,1392,5.727]],["title/classes/User.html",[0,0.219,46,1.963]],["body/classes/User.html",[0,0.18,2,0.615,3,0.077,4,0.077,5,0.068,10,0.32,18,1.047,21,0.01,22,0.857,23,0.779,29,0.241,30,0.815,34,3.61,36,3.181,38,0.077,39,0.004,40,1.525,41,0.973,42,1.512,46,2.342,63,3.991,67,0.006,68,0.004,71,1.276,72,3.241,73,0.991,76,2.928,77,2.928,78,2.928,79,1.762,82,2.953,85,2.749,88,4.388,90,1.613,91,3.241,92,1.669,93,3.141,94,2.267,95,2.506,96,1.613,97,2.267,98,1.613,99,2.267,100,1.613,102,3.568,103,1.861,106,4.543,107,2.335,109,2.474,127,1.49,256,3.788,257,3.788,266,2.196,481,4.651,483,2.85,609,4.156,617,3.834,639,2.474,640,2.474,641,2.474,1393,3.13,1394,3.554,1395,3.554,1396,3.554,1397,3.554,1398,3.554,1399,3.554]],["title/controllers/UserController.html",[111,1.963,1400,3.214]],["body/controllers/UserController.html",[0,0.23,3,0.097,4,0.097,5,0.087,10,0.407,11,1.512,18,0.782,20,1.591,21,0.01,22,1.475,23,0.55,24,1.268,25,1.475,29,0.289,38,0.097,39,0.005,46,3.764,67,0.007,68,0.005,79,1.333,111,2.056,113,2.126,115,2.824,123,4.317,137,2.976,140,0.963,147,2.824,148,1.571,150,2.156,315,2.468,340,4.114,356,3.153,600,4.534,682,3.153,684,3.365,693,4.257,860,4.257,862,5.144,863,3.987,1087,3.153,1127,3.631,1400,4.543,1401,3.987,1402,3.631,1403,4.528,1404,4.528,1405,4.528,1406,4.528,1407,4.528,1408,4.528,1409,3.631,1410,3.987,1411,4.528,1412,4.528,1413,4.528,1414,4.528,1415,4.528]],["title/classes/UserDto.html",[0,0.219,1083,2.842]],["body/classes/UserDto.html",[0,0.374,2,1.05,3,0.131,4,0.131,5,0.116,10,0.546,18,0.776,21,0.01,23,0.546,29,0.22,36,4.163,38,0.131,39,0.007,67,0.008,68,0.007,73,1.417,79,1.323,127,1.65,305,3.783,307,5.135,308,4.847,309,3.059,1083,4.847,1416,5.341,1417,6.066]],["title/modules/UserModule.html",[181,1.214,230,2.842]],["body/modules/UserModule.html",[0,0.246,3,0.105,4,0.105,5,0.093,21,0.01,29,0.301,38,0.105,39,0.005,67,0.007,68,0.005,113,3.008,140,1.033,181,2.013,183,2.067,184,2.067,185,2.281,186,2.281,187,2.134,188,3.254,189,3.254,192,3.008,193,2.281,194,2.281,197,2.887,198,2.134,203,2.544,223,4.21,224,4.21,230,5.453,239,4.277,340,5.188,350,6.313,1400,5.328,1410,4.277,1418,4.277,1419,4.277,1420,4.277,1421,4.858,1422,4.858,1423,4.858,1424,3.382,1425,4.277,1426,4.858]],["title/classes/UserRepository.html",[0,0.219,1424,3.011]],["body/classes/UserRepository.html",[0,0.303,2,1.034,3,0.129,4,0.129,5,0.114,21,0.01,29,0.298,30,1.676,38,0.129,39,0.006,46,2.711,67,0.008,68,0.006,71,1.807,173,4.487,174,3.394,175,2.541,176,2.541,177,2.541,356,4.157,600,3.394,1087,4.157,1409,4.788,1424,5.086,1427,5.258,1428,5.972]],["title/interfaces/UserResult.html",[737,1.84,1429,3.214]],["body/interfaces/UserResult.html",[3,0.127,4,0.127,5,0.113,10,0.531,21,0.01,23,0.77,29,0.214,38,0.127,39,0.006,40,2.422,41,2.15,67,0.008,68,0.006,73,1.393,109,4.109,148,2.516,609,5.109,617,4.386,737,2.512,739,3.091,1327,4.733,1429,5.391,1430,5.198,1431,4.733]],["title/injectables/UserService.html",[208,1.017,340,2.571]],["body/injectables/UserService.html",[0,0.125,3,0.053,4,0.053,5,0.047,10,0.221,11,0.964,13,2.746,18,0.857,20,1.743,21,0.01,22,1.616,23,0.625,24,1.389,25,1.542,26,2.372,29,0.28,30,0.564,33,2.68,38,0.053,39,0.003,40,0.726,42,1.658,43,2.701,45,2.164,46,3.593,49,3.276,50,2.886,57,1.397,60,1.154,61,1.339,67,0.004,68,0.003,79,0.536,109,1.711,140,0.522,148,1.912,150,2.087,175,2.345,176,1.046,177,1.046,198,1.079,208,0.916,209,0.955,266,1.658,297,3.983,337,1.769,340,2.316,352,3.125,354,1.532,356,1.711,360,2.944,448,4.403,449,4.403,487,3.431,489,4.853,492,3.431,600,4.069,609,1.532,617,1.826,721,1.826,860,3.371,1083,5.417,1087,1.711,1402,3.125,1409,1.97,1424,4.451,1425,2.164,1429,2.896,1431,1.97,1432,2.164,1433,3.897,1434,3.897,1435,3.897,1436,3.897,1437,3.897,1438,2.457,1439,2.457,1440,2.457,1441,3.897,1442,2.457,1443,3.897,1444,2.457,1445,3.897,1446,2.457,1447,3.897,1448,2.457,1449,3.897,1450,2.457,1451,3.897,1452,2.457,1453,2.457,1454,2.457,1455,2.457,1456,2.457,1457,2.457,1458,2.457,1459,2.457,1460,2.457,1461,2.457,1462,2.457,1463,2.457,1464,2.457,1465,2.457,1466,2.457,1467,2.457,1468,2.457,1469,2.457,1470,2.457,1471,2.457,1472,3.897,1473,2.457,1474,3.897,1475,2.457,1476,4.842,1477,2.457,1478,3.897,1479,3.897,1480,2.457,1481,2.457,1482,2.457,1483,2.457]],["title/coverage.html",[1484,5.218]],["body/coverage.html",[0,0.431,1,1.196,5,0.029,6,2.724,7,2.724,13,0.893,21,0.01,23,0.134,34,0.886,36,0.781,39,0.002,46,0.677,50,0.781,60,1.209,66,0.677,67,0.003,68,0.002,69,0.781,70,1.313,72,0.635,74,0.98,95,0.615,111,2.429,112,1.108,114,1.313,122,0.98,134,1.038,141,0.98,159,0.98,160,1.196,161,1.313,162,0.886,170,1.108,171,1.313,172,1.313,181,0.723,187,0.655,199,1.108,205,1.313,208,1.73,210,1.313,235,1.196,236,1.196,242,1.826,243,1.108,255,1.313,263,1.196,264,1.313,265,1.313,272,0.93,292,1.108,293,1.313,295,0.98,297,0.886,303,0.98,304,1.313,315,0.813,316,1.038,320,1.108,322,1.038,330,1.313,333,1.313,340,0.886,343,1.038,381,1.196,382,1.313,383,1.313,388,0.98,392,1.038,396,0.98,412,5.356,414,0.725,448,0.98,449,0.98,451,1.038,453,1.038,458,1.038,459,1.196,460,1.196,477,0.781,478,2.665,479,1.038,509,1.038,510,1.313,511,2.814,520,1.038,524,1.313,533,1.313,534,2.064,535,1.313,536,1.313,538,1.108,542,0.98,543,1.313,544,2.064,560,0.98,561,1.313,562,2.524,593,0.98,594,1.313,600,0.848,601,1.313,602,1.313,605,1.196,620,1.038,621,1.313,622,1.196,625,1.313,656,1.196,657,1.313,658,1.313,662,1.313,670,1.108,671,1.313,679,1.038,685,0.93,705,1.038,708,1.313,710,1.313,719,0.98,720,1.038,722,1.196,734,1.313,737,2.407,738,1.038,740,1.313,741,1.313,747,0.886,748,1.913,749,1.313,750,1.313,764,0.886,796,1.108,822,1.108,831,0.98,843,2.524,844,2.064,846,4.535,851,1.108,852,1.196,853,1.313,856,1.038,857,2.814,858,1.313,860,1.038,862,1.108,897,1.038,898,1.196,899,1.313,911,1.108,912,1.313,935,1.038,939,1.313,959,1.108,960,1.313,961,1.313,973,0.93,979,1.313,991,1.108,997,1.313,1001,1.108,1002,1.313,1003,1.313,1004,1.313,1034,1.313,1038,1.196,1041,1.313,1055,1.313,1068,0.98,1069,1.313,1074,1.313,1077,1.313,1083,0.98,1092,1.313,1101,1.108,1102,1.313,1109,1.038,1118,1.038,1122,1.038,1135,0.93,1137,0.93,1152,1.313,1153,1.313,1156,1.313,1169,1.196,1170,1.313,1171,1.313,1178,1.108,1179,1.313,1180,1.313,1192,1.038,1194,1.038,1216,1.038,1222,1.313,1223,1.313,1225,1.313,1226,1.313,1238,1.196,1264,1.196,1265,1.313,1266,1.313,1275,1.038,1278,1.196,1279,1.313,1280,1.313,1284,1.313,1287,1.313,1301,1.196,1318,1.313,1324,1.313,1327,2.064,1331,0.98,1332,1.313,1333,1.313,1336,1.313,1342,1.313,1352,1.108,1353,1.313,1357,1.313,1362,1.313,1367,1.313,1369,1.313,1371,1.313,1373,1.313,1383,1.196,1390,1.313,1393,1.313,1400,1.108,1401,1.313,1416,1.313,1424,1.038,1427,1.313,1429,1.108,1430,1.313,1431,1.196,1432,1.313,1484,1.313,1485,1.491,1486,1.491,1487,1.491,1488,5.35,1489,8.537,1490,4.563,1491,5.35,1492,2.267,1493,7.909,1494,5.918,1495,6.523,1496,2.574,1497,6.822,1498,3.391,1499,1.196,1500,1.313,1501,1.313,1502,1.313,1503,1.313,1504,2.267,1505,1.313,1506,1.313,1507,1.313,1508,1.313,1509,4.043,1510,2.267,1511,1.313,1512,2.267,1513,2.267,1514,1.313,1515,1.313,1516,2.267,1517,1.313,1518,1.313,1519,1.313,1520,1.313,1521,1.313,1522,1.313,1523,2.574,1524,1.491,1525,1.313,1526,2.574,1527,1.313,1528,1.491,1529,1.313,1530,1.313,1531,1.313,1532,4.29,1533,1.313,1534,1.313,1535,1.313,1536,1.313,1537,1.313,1538,1.491,1539,1.313,1540,1.491,1541,1.313,1542,1.313,1543,1.313,1544,1.313,1545,1.313,1546,1.491]],["title/dependencies.html",[184,2.216,1547,3.6]],["body/dependencies.html",[0,0.358,21,0.01,30,1.622,32,4.159,39,0.005,60,2.218,64,2.474,67,0.007,68,0.005,140,1.004,175,2.01,176,2.01,177,2.01,184,2.01,198,2.075,234,3.288,309,3.171,319,3.51,469,4.159,556,4.159,590,2.807,613,4.159,795,2.474,954,4.159,999,3.787,1015,5.538,1016,3.787,1051,4.159,1381,4.159,1382,6.638,1548,4.723,1549,7.071,1550,4.723,1551,4.723,1552,4.723,1553,6.289,1554,4.723,1555,4.723,1556,4.723,1557,4.723,1558,4.723,1559,4.723,1560,4.723,1561,4.723,1562,4.723,1563,4.723,1564,4.723,1565,4.723,1566,4.723,1567,4.723,1568,4.723,1569,4.723,1570,4.723,1571,4.723,1572,4.723,1573,4.723,1574,4.723,1575,4.723,1576,4.723,1577,4.723,1578,4.723,1579,4.723,1580,4.159,1581,4.723,1582,4.723,1583,4.723,1584,4.723,1585,4.723,1586,4.723,1587,4.723]],["title/miscellaneous/enumerations.html",[1588,2.14,1589,4.586]],["body/miscellaneous/enumerations.html",[10,0.444,21,0.01,39,0.005,46,2.939,64,3.391,66,2.939,67,0.007,68,0.005,69,3.391,87,5.192,116,3.265,120,3.148,159,3.243,267,4.836,285,5.701,286,5.701,420,5.701,421,5.701,474,5.701,481,4.255,482,5.701,609,4.038,636,5.701,1068,4.255,1331,4.255,1588,2.934,1589,4.346,1590,4.936,1591,7.671,1592,4.346,1593,6.475,1594,4.936,1595,6.475,1596,6.475,1597,6.475,1598,4.936,1599,4.936,1600,4.936,1601,6.475,1602,6.475,1603,4.936]],["title/miscellaneous/functions.html",[1588,2.14,1604,4.586]],["body/miscellaneous/functions.html",[10,0.434,20,2.113,21,0.01,22,1.959,24,1.684,25,1.998,26,1.988,39,0.005,46,2.191,67,0.007,68,0.005,187,3.14,237,5.651,600,2.744,605,5.731,644,6.098,751,6.696,860,4.442,1402,3.871,1498,3.587,1499,5.731,1521,4.251,1522,5.618,1532,3.871,1533,5.618,1534,5.618,1535,5.618,1536,5.618,1544,4.251,1545,5.618,1588,2.869,1604,4.251,1605,6.963,1606,4.827,1607,4.827,1608,3.871,1609,4.827,1610,4.827,1611,4.827,1612,4.827,1613,4.827,1614,5.618]],["title/index.html",[10,0.324,1615,3.6,1616,3.6]],["body/index.html",[15,3.33,21,0.009,39,0.006,52,5.631,67,0.008,68,0.006,184,2.384,486,4.932,1386,4.492,1617,6.183,1618,6.183,1619,7.082,1620,7.022,1621,5.601,1622,5.601,1623,5.601,1624,5.601,1625,5.601,1626,4.932,1627,5.601,1628,5.601,1629,5.601,1630,5.601,1631,4.932,1632,5.601,1633,5.601,1634,5.601,1635,5.601,1636,5.601,1637,5.601,1638,7.671,1639,7.022,1640,5.601,1641,5.601,1642,5.601,1643,4.492,1644,5.601,1645,7.022,1646,5.601,1647,5.601,1648,5.601,1649,5.601,1650,5.601,1651,5.601]],["title/modules.html",[183,2.522]],["body/modules.html",[21,0.007,39,0.006,67,0.007,68,0.006,182,3.71,183,2.268,220,3.96,223,3.502,224,3.502,225,3.71,226,3.502,227,3.71,228,3.71,229,3.71,230,3.502,314,3.71,821,3.96,924,3.71,1212,3.71,1652,8.885,1653,8.885,1654,8.885,1655,8.921,1656,5.329,1657,5.329]],["title/overview.html",[1658,5.218]],["body/overview.html",[2,0.499,21,0.01,39,0.003,67,0.005,68,0.003,113,1.353,141,3.522,181,0.809,182,4.508,183,1.226,184,1.226,185,1.353,186,1.353,187,1.266,188,1.308,189,1.308,190,2.537,191,2.537,192,2.071,193,1.353,194,1.353,209,1.119,220,6.28,221,2.537,222,2.537,223,5.416,224,4.939,225,4.755,226,4.671,227,4.755,228,4.755,229,5.233,230,4.671,297,4.225,310,2.537,311,2.537,312,2.537,313,2.537,314,5.34,315,3.874,316,3.732,340,4.225,445,2.537,446,2.537,447,2.537,448,4.671,449,4.671,458,4.948,503,2.537,504,2.537,505,2.537,517,2.537,518,2.537,519,2.537,520,4.948,620,4.948,685,4.433,700,2.537,701,2.537,702,2.537,739,1.509,856,4.948,897,4.948,924,5.233,925,2.537,926,2.537,927,2.537,973,3.746,987,2.537,988,2.537,1029,2.537,1030,2.537,1031,2.537,1135,4.433,1137,3.343,1209,2.537,1210,2.537,1211,2.537,1212,4.755,1270,2.537,1271,2.537,1272,2.537,1418,2.537,1419,2.537,1420,2.537,1658,2.537,1659,2.881,1660,2.881,1661,2.881,1662,2.881,1663,2.881]],["title/miscellaneous/typealiases.html",[1588,2.14,1664,5.208]],["body/miscellaneous/typealiases.html",[10,0.555,21,0.009,23,0.555,39,0.007,67,0.008,68,0.007,459,4.942,460,6.418,464,5.427,468,5.427,484,6.558,485,6.558,753,5.972,846,4.942,918,6.558,1498,4.58,1588,3.663,1592,6.558,1608,4.942,1614,6.558,1665,6.163,1666,5.427,1667,7.448,1668,6.163,1669,6.163]],["title/miscellaneous/variables.html",[1588,2.14,1643,4.176]],["body/miscellaneous/variables.html",[6,1.777,7,3.624,10,0.199,21,0.01,23,0.723,33,1.078,34,2.132,35,1.951,36,1.879,37,1.951,39,0.002,41,1.237,49,2.132,50,3.367,52,2.877,53,1.951,57,1.26,67,0.004,68,0.002,85,0.914,127,1.708,150,1.408,235,2.877,236,3.624,242,0.887,243,1.647,266,3.588,267,4.595,320,3.358,394,1.26,414,1.078,416,1.543,477,1.161,478,1.316,538,2.666,622,2.877,629,1.543,722,2.877,748,1.647,752,3.159,764,1.317,795,1.161,796,3.358,803,1.647,822,1.647,848,1.777,862,2.666,943,1.777,956,1.951,1011,1.951,1016,1.777,1038,2.877,1044,1.951,1157,1.647,1177,1.951,1238,2.877,1301,2.877,1352,1.647,1354,1.951,1355,1.951,1383,2.877,1386,1.777,1492,1.951,1498,1.647,1499,1.777,1500,3.979,1501,3.979,1502,3.979,1503,3.159,1504,1.951,1505,3.979,1506,1.951,1507,3.979,1508,1.951,1510,1.951,1511,3.979,1512,1.951,1513,3.979,1514,3.979,1515,3.159,1516,1.951,1517,3.979,1518,3.979,1519,1.951,1520,3.159,1525,1.951,1527,3.159,1529,1.951,1530,4.574,1531,1.951,1532,1.777,1537,3.159,1539,3.159,1541,1.951,1542,1.951,1543,3.159,1580,1.951,1588,1.317,1605,3.159,1608,4.165,1617,3.159,1618,3.159,1619,1.951,1626,1.951,1631,1.951,1643,1.777,1666,1.951,1670,2.216,1671,3.587,1672,3.587,1673,2.216,1674,2.216,1675,2.216,1676,2.216,1677,2.216,1678,3.587,1679,3.587,1680,2.216,1681,2.216,1682,3.587,1683,3.587,1684,2.216,1685,5.705,1686,2.216,1687,2.216,1688,2.216,1689,2.216,1690,3.587,1691,2.216,1692,2.216,1693,2.216,1694,2.216,1695,2.216,1696,2.216,1697,2.216,1698,2.216,1699,2.216,1700,2.216,1701,2.216,1702,2.216,1703,2.216,1704,2.216,1705,2.216,1706,2.216,1707,2.216,1708,2.216,1709,2.216,1710,4.519,1711,2.216,1712,2.216,1713,2.216,1714,2.216,1715,2.216,1716,2.216,1717,2.216,1718,2.216,1719,2.216,1720,2.216,1721,2.216,1722,2.216,1723,2.216,1724,2.216,1725,2.216,1726,2.216,1727,4.519,1728,2.216,1729,2.216,1730,2.216,1731,2.216,1732,2.216,1733,3.587,1734,2.216,1735,2.216,1736,3.587,1737,2.216,1738,2.216,1739,2.216,1740,2.216,1741,2.216,1742,2.216,1743,2.216,1744,2.216,1745,2.216,1746,2.216,1747,2.216,1748,2.216,1749,2.216,1750,2.216,1751,2.216,1752,2.216,1753,2.216,1754,2.216,1755,2.216,1756,2.216,1757,2.216,1758,2.216,1759,2.216,1760,2.216]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"modules/QuestionModule.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":412,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1576,"title":{},"body":{"dependencies.html":{}}}],["0.1.20",{"_index":1587,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":1556,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1558,"title":{},"body":{"dependencies.html":{}}}],["0.2.31",{"_index":1583,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1557,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":1550,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1489,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1496,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1523,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1540,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1524,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1494,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1495,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1497,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1509,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1488,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1491,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1490,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1177,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"miscellaneous/variables.html":{}}}],["1.10.0",{"_index":1570,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":1562,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1560,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10h",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14",{"_index":1659,"title":{},"body":{"overview.html":{}}}],["19",{"_index":1661,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":1586,"title":{},"body":{"dependencies.html":{}}}],["2.2.5",{"_index":1572,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["200",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["29997856155",{"_index":35,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":1578,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1574,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1582,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":1568,"title":{},"body":{"dependencies.html":{}}}],["4.7.15",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["5.2.2",{"_index":1548,"title":{},"body":{"dependencies.html":{}}}],["5.2.6",{"_index":1565,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1662,"title":{},"body":{"overview.html":{}}}],["5000",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.6.6",{"_index":1579,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":1755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":1660,"title":{},"body":{"overview.html":{}}}],["7.1.5",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["7.6.13",{"_index":1549,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1663,"title":{},"body":{"overview.html":{}}}],["9",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.7.0",{"_index":1566,"title":{},"body":{"dependencies.html":{}}}],["999999",{"_index":37,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["__dirname",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a.position",{"_index":654,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{}}}],["ability",{"_index":464,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory",{"_index":508,"title":{},"body":{"modules/CaslModule.html":{}}}],["ability.factory.ts",{"_index":460,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:32",{"_index":463,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":465,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":466,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abstract",{"_index":1391,"title":{},"body":{"classes/UploaderService.html":{}}}],["accessors",{"_index":761,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["accesstoken",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["action",{"_index":216,"title":{},"body":{"injectables/AnswerService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["action.enum",{"_index":476,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["action.enum.ts",{"_index":1593,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["active",{"_index":420,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":410,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["adds",{"_index":217,"title":{},"body":{"injectables/AnswerService.html":{}}}],["admin",{"_index":64,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["admin.constants",{"_index":797,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{}}}],["admin.constants.ts",{"_index":1527,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.module",{"_index":934,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["admin.module.ts",{"_index":823,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:14",{"_index":827,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:27",{"_index":832,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider",{"_index":835,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider.ts",{"_index":750,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["admin.provider.ts:18",{"_index":792,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:22",{"_index":794,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:26",{"_index":766,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:30",{"_index":769,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:34",{"_index":774,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:38",{"_index":776,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:42",{"_index":778,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:46",{"_index":780,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:50",{"_index":782,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:54",{"_index":784,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:58",{"_index":786,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:62",{"_index":788,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:66",{"_index":773,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:8",{"_index":765,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin/firebase",{"_index":822,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin/providers/firebase",{"_index":749,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["adminuser.ts",{"_index":7,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminuser.ts:37",{"_index":19,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser.ts:8",{"_index":28,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser1620299822480",{"_index":1,"title":{"classes/AdminUser1620299822480.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{}}}],["affectedrows",{"_index":1330,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["afterload",{"_index":642,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{}}}],["age=31536000",{"_index":957,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["aliases",{"_index":1665,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow_anonymous",{"_index":418,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{}}}],["allowanonymous",{"_index":545,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{}}}],["anonymous",{"_index":404,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement.html":{}}}],["answer",{"_index":69,"title":{"classes/Answer.html":{}},"body":{"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Grade.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answer.controller",{"_index":196,"title":{},"body":{"modules/AnswerModule.html":{}}}],["answer.dto",{"_index":144,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{}}}],["answer.dto.ts",{"_index":534,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["answer.entity",{"_index":169,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer.grade",{"_index":986,"title":{},"body":{"classes/Grade.html":{}}}],["answer.service",{"_index":142,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{}}}],["answer/answer.module",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["answer/entities/answer.entity",{"_index":470,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["answer:16",{"_index":165,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:19",{"_index":166,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:22",{"_index":164,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer_grade",{"_index":1599,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["answercontroller",{"_index":112,"title":{"controllers/AnswerController.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"coverage.html":{}}}],["answergrade",{"_index":159,"title":{"classes/AnswerGrade.html":{}},"body":{"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answergraderepository",{"_index":170,"title":{"classes/AnswerGradeRepository.html":{}},"body":{"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"coverage.html":{}}}],["answermodule",{"_index":182,"title":{"modules/AnswerModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["answerrepository",{"_index":199,"title":{"classes/AnswerRepository.html":{}},"body":{"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"coverage.html":{}}}],["answers",{"_index":980,"title":{},"body":{"classes/Grade.html":{}}}],["answerservice",{"_index":141,"title":{"injectables/AnswerService.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"coverage.html":{},"overview.html":{}}}],["answertype",{"_index":87,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"miscellaneous/enumerations.html":{}}}],["api",{"_index":1619,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":689,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{}}}],["apinotfoundresponse",{"_index":1126,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiokresponse",{"_index":690,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiokresponse({type",{"_index":1205,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["apiproperty",{"_index":589,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["apiproperty({type",{"_index":573,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["app",{"_index":751,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/functions.html":{}}}],["appability",{"_index":485,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["applyglobals",{"_index":1533,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyglobals(app",{"_index":1609,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applyperflayer",{"_index":1534,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyperflayer(app",{"_index":1610,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applysecuritylayer",{"_index":1535,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applysecuritylayer(app",{"_index":1611,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appmodule",{"_index":220,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":850,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["async",{"_index":13,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"controllers/UploadController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["auth",{"_index":60,"title":{"classes/Auth.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["auth.constants",{"_index":1039,"title":{},"body":{"classes/LoginDto.html":{}}}],["auth.dto",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["auth.dto.ts",{"_index":536,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["auth.password",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FirebaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth.service.ts",{"_index":858,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:14",{"_index":880,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:27",{"_index":874,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:31",{"_index":869,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:37",{"_index":878,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:44",{"_index":872,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:9",{"_index":866,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.ts",{"_index":265,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["auth.ts:15",{"_index":269,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:4",{"_index":268,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:6",{"_index":270,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth/auth.module",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["auth/dtos/create",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["auth/guards/jwt.guard",{"_index":1127,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["auth1619445806509",{"_index":263,"title":{"classes/Auth1619445806509.html":{}},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["authcontroller",{"_index":292,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":303,"title":{"classes/AuthDto.html":{}},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["authdto.login",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto:6",{"_index":540,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["authguard",{"_index":998,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('jwt",{"_index":1000,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authmodule",{"_index":223,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["authrepository",{"_index":322,"title":{"classes/AuthRepository.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authservice",{"_index":297,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["auto_increment",{"_index":279,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["auxiliary.ts",{"_index":383,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["auxiliary.ts:34",{"_index":385,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["auxiliary.ts:4",{"_index":384,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["auxiliary.ts:6",{"_index":386,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["auxiliary/auxiliary.module",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["auxiliary1620477175799",{"_index":381,"title":{"classes/Auxiliary1620477175799.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["auxiliarymodule",{"_index":224,"title":{"modules/AuxiliaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuxiliaryModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["available",{"_index":1657,"title":{},"body":{"modules.html":{}}}],["await",{"_index":43,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"controllers/UploadController.html":{},"injectables/UserService.html":{}}}],["b",{"_index":653,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{}}}],["b.position",{"_index":655,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{}}}],["baseentity",{"_index":1358,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["baserepository",{"_index":173,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["basic",{"_index":1561,"title":{},"body":{"dependencies.html":{}}}],["bcrypt",{"_index":31,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":56,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{}}}],["bcrypt.hash(createauthdto.password",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(process.env.admin_password",{"_index":58,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["bcryptjs",{"_index":32,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"dependencies.html":{}}}],["body",{"_index":137,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["bool",{"_index":628,"title":{},"body":{"classes/Exam.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["boolean",{"_index":548,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["bootstrap",{"_index":187,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brazilian",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["break",{"_index":492,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["browse",{"_index":1655,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1652,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":946,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["buffer",{"_index":742,"title":{},"body":{"interfaces/FileSendDto.html":{},"injectables/FirebaseStorageService.html":{}}}],["build",{"_index":486,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"index.html":{}}}],["buildswaggerdoc",{"_index":1536,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["buildswaggerdoc(app",{"_index":1612,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cachecontrol",{"_index":955,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["callback",{"_index":1614,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["callhandler",{"_index":1046,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["can(action.manage",{"_index":491,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.read",{"_index":494,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.update",{"_index":497,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["cannot(action.delete",{"_index":498,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["case",{"_index":489,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["casl/ability",{"_index":469,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["casl/casl.module",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{}}}],["caslabilityfactory",{"_index":458,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslaction",{"_index":474,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["caslmodule",{"_index":314,"title":{"modules/CaslModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["caslsubjects",{"_index":484,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["catch",{"_index":891,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["cert",{"_index":848,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":424,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/QuestionImage1620477869366.html":{}}}],["childentity",{"_index":168,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamRepository.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"modules/QuestionModule.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamRepository.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cli",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloud",{"_index":898,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["cls",{"_index":176,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["cluster_answermodule",{"_index":190,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_answermodule_providers",{"_index":191,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":310,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":311,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":312,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule",{"_index":445,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_exports",{"_index":447,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_providers",{"_index":446,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":503,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":504,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":505,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":517,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_exports",{"_index":518,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_providers",{"_index":519,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_exammodule",{"_index":700,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_exports",{"_index":701,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_providers",{"_index":702,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_firebasemodule",{"_index":925,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_exports",{"_index":927,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_providers",{"_index":926,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_inframodule",{"_index":987,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_exports",{"_index":988,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_imports",{"_index":989,"title":{},"body":{"modules/InfraModule.html":{}}}],["cluster_loggermodule",{"_index":1029,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1030,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1031,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule",{"_index":1209,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule_imports",{"_index":1211,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule_providers",{"_index":1210,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questionmodule",{"_index":1270,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_questionmodule_exports",{"_index":1271,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_questionmodule_providers",{"_index":1272,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1418,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1419,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1420,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":393,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/Subject.html":{}}}],["code_id",{"_index":397,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["codeid",{"_index":1343,"title":{},"body":{"classes/Subject.html":{}}}],["collection",{"_index":917,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type",{"_index":920,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type.ts",{"_index":1667,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["column",{"_index":102,"title":{},"body":{"classes/Answer.html":{},"classes/Auth.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["column({type",{"_index":82,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["command",{"_index":1650,"title":{},"body":{"index.html":{}}}],["completed",{"_index":1470,"title":{},"body":{"injectables/UserService.html":{}}}],["compose",{"_index":1639,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1559,"title":{},"body":{"dependencies.html":{}}}],["computador",{"_index":1637,"title":{},"body":{"index.html":{}}}],["config",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{}}}],["configmodule",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/InfraModule.html":{}}}],["configmodule.forroot",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('firebase",{"_index":995,"title":{},"body":{"modules/InfraModule.html":{}}}],["configservice.get(databaseconfigkey",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(jwtconfigkey",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(jwtconfigkey)!.secret",{"_index":1025,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.error(e",{"_index":1467,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('create",{"_index":1468,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":33,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":426,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["constructor",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(firebase_options",{"_index":798,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(authrepository",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":1006,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(firebaseadmin",{"_index":865,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{}}}],["constructor(options",{"_index":763,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(private",{"_index":147,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"injectables/FirebaseUploader.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["constructor(repository",{"_index":711,"title":{},"body":{"injectables/ExamService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["constructor(storageservice",{"_index":962,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["constructor(userrepository",{"_index":1438,"title":{},"body":{"injectables/UserService.html":{}}}],["contenttype",{"_index":944,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["context",{"_index":1048,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["controller",{"_index":111,"title":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('answer",{"_index":146,"title":{},"body":{"controllers/AnswerController.html":{}}}],["controller('exam",{"_index":692,"title":{},"body":{"controllers/ExamController.html":{}}}],["controller('question",{"_index":1140,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["controller('upload",{"_index":1385,"title":{},"body":{"controllers/UploadController.html":{}}}],["controller('user",{"_index":1411,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":113,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"modules/InfraModule.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers/auth.controller",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/question",{"_index":1214,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/question.controller",{"_index":1220,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/upload.controller",{"_index":992,"title":{},"body":{"modules/InfraModule.html":{}}}],["controllers/user.controller",{"_index":1423,"title":{},"body":{"modules/UserModule.html":{}}}],["copy",{"_index":1181,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copy(copyquestiongroupdto",{"_index":1182,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copying",{"_index":1644,"title":{},"body":{"index.html":{}}}],["copyquestiongroupdto",{"_index":509,"title":{"classes/CopyQuestionGroupDto.html":{}},"body":{"classes/CopyQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["copytogroup",{"_index":1288,"title":{},"body":{"injectables/QuestionService.html":{}}}],["copytogroup(group",{"_index":1290,"title":{},"body":{"injectables/QuestionService.html":{}}}],["core/core.module",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["core/decorators/is",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["core/entities/ff.entity",{"_index":107,"title":{},"body":{"classes/Answer.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["coremodule",{"_index":225,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["cors",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corsconfig",{"_index":1500,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsconfigkey",{"_index":1501,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["course",{"_index":392,"title":{"classes/Course.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/Subject.html":{},"coverage.html":{}}}],["course.entity",{"_index":1349,"title":{},"body":{"classes/Subject.html":{}}}],["course_id",{"_index":398,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["course`(`id",{"_index":434,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["coverage",{"_index":1484,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":1646,"title":{},"body":{"index.html":{}}}],["cpf",{"_index":34,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["create",{"_index":116,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"miscellaneous/enumerations.html":{}}}],["create(@body",{"_index":149,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{}}}],["create(createanswerdto",{"_index":121,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["create(createexamdto",{"_index":672,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["create(createquestiongroupdto",{"_index":1186,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["createanswerdto",{"_index":122,"title":{"classes/CreateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["createauth",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauth(createauthdto",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauthdto",{"_index":343,"title":{"classes/CreateAuthDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["createauthdto.login",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["created_at",{"_index":273,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["createdat",{"_index":76,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdatecolumn",{"_index":94,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdto",{"_index":870,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createexamdto",{"_index":542,"title":{"classes/CreateExamDto.html":{}},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["createforuser",{"_index":461,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":462,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createparamdecorator",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquestion",{"_index":1103,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestion(createquestiondto",{"_index":1106,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestiondto",{"_index":560,"title":{"classes/CreateQuestionDto.html":{}},"body":{"classes/CreateQuestionDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["createquestiondto.groupid",{"_index":1141,"title":{},"body":{"controllers/QuestionController.html":{}}}],["createquestiongroupdto",{"_index":593,"title":{"classes/CreateQuestionGroupDto.html":{}},"body":{"classes/CreateQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["createquestiongroupdto.examid",{"_index":1242,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["createstudent",{"_index":1078,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createstudent(createdto",{"_index":1080,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createuser",{"_index":860,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuser(@body",{"_index":1412,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createdto",{"_index":867,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["createuser(createuserdto",{"_index":1402,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["createuserbytype",{"_index":1433,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserbytype(createuserdto",{"_index":1441,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":600,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuserdto.enrollment",{"_index":1463,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":1464,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.type",{"_index":1471,"title":{},"body":{"injectables/UserService.html":{}}}],["credential",{"_index":805,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["crypto",{"_index":969,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["ctx",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp(6",{"_index":276,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["customlogger",{"_index":620,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":943,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":752,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/variables.html":{}}}],["database(url",{"_index":768,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["database/migrations/*.{js,ts",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":1505,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseconfigkey",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseurl",{"_index":801,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["date",{"_index":93,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["datetime",{"_index":390,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{},"classes/Period.html":{}}}],["datetime(6",{"_index":274,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["de",{"_index":1623,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":186,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":852,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["decoded.email",{"_index":889,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.email_verified",{"_index":890,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.uid",{"_index":888,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decorators",{"_index":79,"title":{},"body":{"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"controllers/UploadController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["decoratos/get",{"_index":1407,"title":{},"body":{"controllers/UserController.html":{}}}],["default",{"_index":266,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/Student.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["default_port",{"_index":1537,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":66,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"classes/Auxiliary1620477175799.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":131,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["delete(':id')@apiokresponse()@apinotfoundresponse",{"_index":1115,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["deleted_at",{"_index":278,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["deletedat",{"_index":77,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deletedatecolumn",{"_index":97,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deleteuser",{"_index":861,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["deleteuser(uid",{"_index":871,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["dependencies",{"_index":184,"title":{"dependencies.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":416,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["detectsubjecttype",{"_index":500,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["development",{"_index":1631,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["docker",{"_index":1638,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1485,"title":{},"body":{"coverage.html":{}}}],["down",{"_index":14,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["down(queryrunner",{"_index":16,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["drop",{"_index":290,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["dto/copy",{"_index":1198,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["dto/create",{"_index":143,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["dto/reorder",{"_index":1199,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["dto/update",{"_index":145,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["dtos/auth.dto",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["dtos/create",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["dtos/file",{"_index":971,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["dtos/login.dto",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/question",{"_index":1298,"title":{},"body":{"injectables/QuestionService.html":{}}}],["dtos/reorder",{"_index":1299,"title":{},"body":{"injectables/QuestionService.html":{}}}],["dtos/update",{"_index":1300,"title":{},"body":{"injectables/QuestionService.html":{}}}],["dtos/user.dto",{"_index":1456,"title":{},"body":{"injectables/UserService.html":{}}}],["dynamicmodule",{"_index":828,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["e",{"_index":1466,"title":{},"body":{"injectables/UserService.html":{}}}],["each",{"_index":1326,"title":{},"body":{"classes/ReorderQuestionGroupDto.html":{}}}],["ela",{"_index":583,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["em",{"_index":1630,"title":{},"body":{"index.html":{}}}],["email",{"_index":854,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{}}}],["emailverified",{"_index":855,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{}}}],["encoding",{"_index":743,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["ended_at",{"_index":391,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["endedat",{"_index":546,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/Period.html":{}}}],["engine=innodb",{"_index":284,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["enrollment",{"_index":36,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"classes/UserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["enrollment.decorator",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enrollment.decorator.ts",{"_index":1522,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["enrollmentlength",{"_index":1520,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/answer",{"_index":178,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entities/answer.entity",{"_index":206,"title":{},"body":{"classes/AnswerRepository.html":{}}}],["entities/auth.entity",{"_index":331,"title":{},"body":{"classes/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["entities/exam.entity",{"_index":691,"title":{},"body":{"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["entities/professor.entity",{"_index":1075,"title":{},"body":{"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{}}}],["entities/question",{"_index":1197,"title":{},"body":{"controllers/QuestionGroupController.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["entities/question.entity",{"_index":1285,"title":{},"body":{"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{}}}],["entities/student.entity",{"_index":1334,"title":{},"body":{"classes/StudentRepository.html":{},"injectables/StudentService.html":{}}}],["entities/user.entity",{"_index":1409,"title":{},"body":{"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":103,"title":{},"body":{"classes/Answer.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["entity('answer",{"_index":110,"title":{},"body":{"classes/Answer.html":{}}}],["entity('auth",{"_index":262,"title":{},"body":{"classes/Auth.html":{}}}],["entity('course",{"_index":531,"title":{},"body":{"classes/Course.html":{}}}],["entity('exam",{"_index":648,"title":{},"body":{"classes/Exam.html":{}}}],["entity('exam_agreement",{"_index":668,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["entity('grade",{"_index":985,"title":{},"body":{"classes/Grade.html":{}}}],["entity('period",{"_index":1065,"title":{},"body":{"classes/Period.html":{}}}],["entity('subject",{"_index":1350,"title":{},"body":{"classes/Subject.html":{}}}],["entity('user",{"_index":1398,"title":{},"body":{"classes/User.html":{}}}],["entity.{js,ts",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrepository",{"_index":174,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(answer",{"_index":207,"title":{},"body":{"classes/AnswerRepository.html":{}}}],["entityrepository(answergrade",{"_index":180,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entityrepository(auth",{"_index":332,"title":{},"body":{"classes/AuthRepository.html":{}}}],["entityrepository(exam",{"_index":709,"title":{},"body":{"classes/ExamRepository.html":{}}}],["entityrepository(professor",{"_index":1076,"title":{},"body":{"classes/ProfessorRepository.html":{}}}],["entityrepository(question",{"_index":1286,"title":{},"body":{"classes/QuestionRepository.html":{}}}],["entityrepository(questiongroup",{"_index":1224,"title":{},"body":{"classes/QuestionGroupRepository.html":{}}}],["entityrepository(student",{"_index":1335,"title":{},"body":{"classes/StudentRepository.html":{}}}],["entityrepository(user",{"_index":1428,"title":{},"body":{"classes/UserRepository.html":{}}}],["enum",{"_index":88,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["enum/user",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["enumerations",{"_index":1589,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/answer",{"_index":108,"title":{},"body":{"classes/Answer.html":{}}}],["enums/casl",{"_index":475,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["enums/exam",{"_index":646,"title":{},"body":{"classes/Exam.html":{}}}],["env",{"_index":52,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["env.example",{"_index":1645,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1642,"title":{},"body":{"index.html":{}}}],["err",{"_index":892,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["error",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error('admin_password",{"_index":51,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["error('needs",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["essa",{"_index":580,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["esses",{"_index":1634,"title":{},"body":{"index.html":{}}}],["exam",{"_index":414,"title":{"classes/Exam.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/Period.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam.constants",{"_index":723,"title":{},"body":{"injectables/ExamService.html":{}}}],["exam.controller",{"_index":704,"title":{},"body":{"modules/ExamModule.html":{}}}],["exam.dto",{"_index":687,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{}}}],["exam.dto.ts",{"_index":544,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["exam.dto.ts:13",{"_index":555,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:17",{"_index":551,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:21",{"_index":554,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:25",{"_index":553,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:31",{"_index":550,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.period",{"_index":1067,"title":{},"body":{"classes/Period.html":{}}}],["exam.service",{"_index":686,"title":{},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{}}}],["exam.ts",{"_index":658,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam.ts:10",{"_index":660,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:4",{"_index":659,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:6",{"_index":661,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam/entities/agreement.entity",{"_index":472,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/entities/exam.entity",{"_index":471,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/exam.module",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{}}}],["exam1620478273991",{"_index":656,"title":{"classes/Exam1620478273991.html":{}},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam_agreement",{"_index":402,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["exam_agreement_id",{"_index":439,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["exam_agreement`(`id",{"_index":440,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["exam_id",{"_index":413,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["exam_not_found",{"_index":722,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam`(`id",{"_index":430,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["examagreement",{"_index":74,"title":{"classes/ExamAgreement.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{},"coverage.html":{}}}],["examagreementnotfinished",{"_index":499,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["examcontroller",{"_index":670,"title":{"controllers/ExamController.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examid",{"_index":512,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["exammodule",{"_index":226,"title":{"modules/ExamModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["examrepository",{"_index":705,"title":{"classes/ExamRepository.html":{}},"body":{"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["exams",{"_index":1056,"title":{},"body":{"classes/Period.html":{}}}],["examservice",{"_index":685,"title":{"injectables/ExamService.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"overview.html":{}}}],["examstatus",{"_index":636,"title":{},"body":{"classes/Exam.html":{},"miscellaneous/enumerations.html":{}}}],["executioncontext",{"_index":1044,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":38,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"modules/QuestionModule.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":189,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":1382,"title":{},"body":{"controllers/UploadController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1375,"title":{},"body":{"controllers/UploadController.html":{}}}],["extends",{"_index":71,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/AuthRepository.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamRepository.html":{},"classes/FFEntity.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"classes/Grade.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":1013,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1022,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":467,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["factories/casl",{"_index":507,"title":{},"body":{"modules/CaslModule.html":{}}}],["false",{"_index":629,"title":{},"body":{"classes/Exam.html":{},"injectables/FirebaseStorageService.html":{},"injectables/JwtStrategy.html":{},"classes/QuestionGroup.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":1617,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fcm",{"_index":900,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["ff",{"_index":1626,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ff.uneb.br",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ffentity",{"_index":72,"title":{"classes/FFEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"coverage.html":{}}}],["ffentity:10",{"_index":639,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/User.html":{}}}],["ffentity:13",{"_index":641,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/User.html":{}}}],["ffentity:16",{"_index":640,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/User.html":{}}}],["ffentity:6",{"_index":92,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"modules/QuestionModule.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.publicurl",{"_index":958,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file.save(data",{"_index":952,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["filedto",{"_index":967,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["filedto.buffer",{"_index":977,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["filedto.mimetype",{"_index":978,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["fileinterceptor",{"_index":1380,"title":{},"body":{"controllers/UploadController.html":{}}}],["filesenddto",{"_index":738,"title":{"interfaces/FileSendDto.html":{}},"body":{"interfaces/FileSendDto.html":{},"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{},"coverage.html":{}}}],["find",{"_index":1104,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find(@query",{"_index":1144,"title":{},"body":{"controllers/QuestionController.html":{}}}],["find(finddto",{"_index":1108,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto",{"_index":1131,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto.ts",{"_index":1153,"title":{},"body":{"classes/QuestionFindDto.html":{},"coverage.html":{}}}],["find.dto.ts:6",{"_index":1155,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["findall",{"_index":117,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["findauth",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["findauth(authdto",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["finddto",{"_index":1111,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["finddto.groupid",{"_index":1307,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findone",{"_index":118,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["findone(@param('id",{"_index":153,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["findone(id",{"_index":126,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["findone(userdto",{"_index":1082,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["findspecializeduser",{"_index":1434,"title":{},"body":{"injectables/UserService.html":{}}}],["findspecializeduser(userdto",{"_index":1443,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser",{"_index":1435,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(userdto",{"_index":1445,"title":{},"body":{"injectables/UserService.html":{}}}],["firebase",{"_index":795,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["firebase.app.app",{"_index":790,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.appoptions",{"_index":808,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.auth.auth",{"_index":767,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.createrequest",{"_index":868,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.updaterequest",{"_index":877,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.credential.cert(options.cert",{"_index":806,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.database.database",{"_index":772,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.firestore.collectionreference",{"_index":1669,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["firebase.firestore.firestore",{"_index":775,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{}}}],["firebase.initializeapp",{"_index":800,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.instanceid.instanceid",{"_index":777,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.machinelearning.machinelearning",{"_index":779,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.messaging.messaging",{"_index":781,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingoptions",{"_index":906,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingpayload",{"_index":905,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.projectmanagement.projectmanagement",{"_index":783,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.remoteconfig.remoteconfig",{"_index":785,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.securityrules.securityrules",{"_index":787,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.serviceaccount",{"_index":849,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["firebase.storage.storage",{"_index":789,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{}}}],["firebase_admin",{"_index":1530,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebase_bucket",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebase_options",{"_index":796,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebaseadmin",{"_index":747,"title":{"injectables/FirebaseAdmin.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["firebaseadmin.auth",{"_index":885,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseadmin.firestore",{"_index":922,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firebaseadmin.messaging",{"_index":909,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebaseadmin.storage",{"_index":950,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["firebaseadminmodule",{"_index":821,"title":{"modules/FirebaseAdminModule.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules.html":{}}}],["firebaseadminmodule.forroot(options",{"_index":937,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseadminmodule.forrootasync(options",{"_index":938,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseasyncmoduleoptions",{"_index":831,"title":{"interfaces/FirebaseAsyncModuleOptions.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["firebaseauth",{"_index":859,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseauthdecodedtoken",{"_index":851,"title":{"interfaces/FirebaseAuthDecodedToken.html":{}},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["firebaseauthservice",{"_index":856,"title":{"injectables/FirebaseAuthService.html":{}},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebasecloudmessagingservice",{"_index":897,"title":{"injectables/FirebaseCloudMessagingService.html":{}},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebaseconfig",{"_index":1507,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasefirestorecollection",{"_index":918,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firebasefirestoreservice",{"_index":911,"title":{"injectables/FirebaseFirestoreService.html":{}},"body":{"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["firebasemodule",{"_index":924,"title":{"modules/FirebaseModule.html":{}},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["firebasemodule.forrootasync",{"_index":994,"title":{},"body":{"modules/InfraModule.html":{}}}],["firebasemoduleoptions",{"_index":764,"title":{"interfaces/FirebaseModuleOptions.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasestorageservice",{"_index":935,"title":{"injectables/FirebaseStorageService.html":{}},"body":{"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["firebaseuploader",{"_index":959,"title":{"injectables/FirebaseUploader.html":{}},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"coverage.html":{}}}],["firestore",{"_index":753,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firestore.service.ts",{"_index":912,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"coverage.html":{}}}],["firestore.service.ts:14",{"_index":916,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firestore.service.ts:8",{"_index":914,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["fk_1d110bd5138b275a2ea2944e290",{"_index":429,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_3b2789ae1c494ff1bf8dd4d4607",{"_index":423,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["fk_814144bcce3b80921f41f15b823",{"_index":438,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_971014f1fb44be716098484bb5a",{"_index":441,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_b472107b61171823120f069fd50",{"_index":435,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_b9db72ddc93f196bf9d79132171",{"_index":433,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_ba483ad17eb41fb181aa3a77d4f",{"_index":431,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_d35fb46683694975ba85bcd804e",{"_index":437,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["following",{"_index":1649,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":422,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["form",{"_index":1618,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fornecida",{"_index":582,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["forroot",{"_index":825,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forroot(options",{"_index":826,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync",{"_index":829,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync(options",{"_index":830,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forwardref",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["found",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fullfil",{"_index":1640,"title":{},"body":{"index.html":{}}}],["function",{"_index":846,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1604,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":128,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get(':id')@apiokresponse({type",{"_index":1112,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get()@apiokresponse({type",{"_index":675,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get()@useguards(jwtguard",{"_index":1405,"title":{},"body":{"controllers/UserController.html":{}}}],["getcollection",{"_index":913,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getcollection(collection",{"_index":915,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getname",{"_index":791,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["getoptions",{"_index":793,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["getting",{"_index":1615,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":862,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuser(@getuser",{"_index":1414,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(uid",{"_index":873,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["getuser(user",{"_index":1404,"title":{},"body":{"controllers/UserController.html":{}}}],["global",{"_index":522,"title":{},"body":{"modules/CoreModule.html":{},"modules/FirebaseModule.html":{}}}],["grade",{"_index":162,"title":{"classes/Grade.html":{}},"body":{"classes/AnswerGrade.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Subject.html":{},"coverage.html":{}}}],["grade.entity",{"_index":179,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Subject.html":{}}}],["grade.entity.ts",{"_index":161,"title":{},"body":{"classes/AnswerGrade.html":{},"coverage.html":{}}}],["grade.entity.ts:8",{"_index":163,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["grade.period",{"_index":1066,"title":{},"body":{"classes/Period.html":{}}}],["grade.repository",{"_index":202,"title":{},"body":{"modules/AnswerModule.html":{}}}],["grade.repository.ts",{"_index":172,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["grade.subject",{"_index":1351,"title":{},"body":{"classes/Subject.html":{}}}],["grade_id",{"_index":442,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["grade`(`id",{"_index":443,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["grades",{"_index":1057,"title":{},"body":{"classes/Period.html":{},"classes/Subject.html":{}}}],["graph",{"_index":1656,"title":{},"body":{"modules.html":{}}}],["group",{"_index":649,"title":{},"body":{"classes/Exam.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["group.constants",{"_index":1239,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.constants.ts",{"_index":1539,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group.controller",{"_index":1215,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.controller.ts",{"_index":1180,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group.controller.ts:35",{"_index":1187,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:43",{"_index":1188,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:50",{"_index":1189,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:57",{"_index":1195,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:67",{"_index":1185,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:75",{"_index":1193,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:82",{"_index":1190,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.dto",{"_index":1196,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["group.dto.ts",{"_index":511,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:12",{"_index":599,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:16",{"_index":596,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:20",{"_index":598,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:24",{"_index":597,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:5",{"_index":516,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["group.dto.ts:8",{"_index":515,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{}}}],["group.dto.ts:9",{"_index":1325,"title":{},"body":{"classes/ReorderQuestionGroupDto.html":{}}}],["group.entity",{"_index":480,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["group.entity.ts",{"_index":1156,"title":{},"body":{"classes/QuestionGroup.html":{},"coverage.html":{}}}],["group.entity.ts:12",{"_index":1158,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:15",{"_index":1161,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:18",{"_index":1162,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:21",{"_index":1160,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:24",{"_index":1163,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:27",{"_index":1159,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:30",{"_index":1165,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:9",{"_index":1164,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.exam",{"_index":650,"title":{},"body":{"classes/Exam.html":{}}}],["group.module",{"_index":244,"title":{},"body":{"modules/AppModule.html":{}}}],["group.module.ts",{"_index":1213,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.position",{"_index":1262,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.questions",{"_index":1253,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.repository",{"_index":1218,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["group.repository.ts",{"_index":1223,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group.service",{"_index":1139,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{}}}],["group.service.ts",{"_index":1226,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group.service.ts:103",{"_index":1234,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:124",{"_index":1232,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:19",{"_index":1227,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:28",{"_index":1229,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:40",{"_index":1230,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:44",{"_index":1231,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:58",{"_index":1235,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:79",{"_index":1228,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group/controllers/question",{"_index":1179,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts",{"_index":1102,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts:35",{"_index":1107,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:46",{"_index":1110,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:53",{"_index":1114,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:60",{"_index":1124,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:73",{"_index":1120,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:82",{"_index":1116,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/dto/copy",{"_index":510,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dto/create",{"_index":594,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dto/reorder",{"_index":1324,"title":{},"body":{"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dto/update",{"_index":1371,"title":{},"body":{"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group/entities/question",{"_index":479,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"coverage.html":{}}}],["group/question",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/question/dtos/create",{"_index":561,"title":{},"body":{"classes/CreateQuestionDto.html":{},"coverage.html":{}}}],["group/question/dtos/question",{"_index":1152,"title":{},"body":{"classes/QuestionFindDto.html":{},"coverage.html":{}}}],["group/question/dtos/reorder",{"_index":1318,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"coverage.html":{}}}],["group/question/dtos/update",{"_index":1369,"title":{},"body":{"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["group/question/entities/question.entity.ts",{"_index":1092,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["group/question/entities/question.entity.ts:11",{"_index":1097,"title":{},"body":{"classes/Question.html":{}}}],["group/question/entities/question.entity.ts:14",{"_index":1096,"title":{},"body":{"classes/Question.html":{}}}],["group/question/entities/question.entity.ts:17",{"_index":1099,"title":{},"body":{"classes/Question.html":{}}}],["group/question/entities/question.entity.ts:20",{"_index":1095,"title":{},"body":{"classes/Question.html":{}}}],["group/question/entities/question.entity.ts:23",{"_index":1098,"title":{},"body":{"classes/Question.html":{}}}],["group/question/entities/question.entity.ts:26",{"_index":1094,"title":{},"body":{"classes/Question.html":{}}}],["group/question/entities/question.entity.ts:8",{"_index":1100,"title":{},"body":{"classes/Question.html":{}}}],["group/question/question.constants.ts",{"_index":1541,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/question/question.module.ts",{"_index":1273,"title":{},"body":{"modules/QuestionModule.html":{}}}],["group/question/question.service.ts",{"_index":1287,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["group/question/question.service.ts:16",{"_index":1289,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/question/question.service.ts:23",{"_index":1292,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/question/question.service.ts:29",{"_index":1293,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/question/question.service.ts:40",{"_index":1294,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/question/question.service.ts:50",{"_index":1297,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/question/question.service.ts:59",{"_index":1291,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/question/question.service.ts:71",{"_index":1296,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/question/question.service.ts:92",{"_index":1295,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/question/repositories/question.repository.ts",{"_index":1284,"title":{},"body":{"classes/QuestionRepository.html":{},"coverage.html":{}}}],["group/repositories/question",{"_index":1222,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group/services/question",{"_index":1225,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group_id",{"_index":425,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["groupid",{"_index":513,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["groupidpositionmap",{"_index":1258,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupidpositionmap.get(group.id",{"_index":1263,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupids",{"_index":1256,"title":{},"body":{"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["groupids.map((id",{"_index":1260,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groups",{"_index":626,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["groups.map((group",{"_index":1261,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["guards/jwt.guard",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{}}}],["gzip",{"_index":953,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["hasfinishedexam",{"_index":663,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["helmet",{"_index":1567,"title":{},"body":{"dependencies.html":{}}}],["helpers/create",{"_index":1457,"title":{},"body":{"injectables/UserService.html":{}}}],["hooked",{"_index":177,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["host",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":40,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":1486,"title":{},"body":{"coverage.html":{}}}],["idx_2b38bb607ef3e86920e9bd0163",{"_index":407,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_31ef2b4d30675d0c15056b7f6e",{"_index":289,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_5cf4963ae12285cda6432d5a3a",{"_index":395,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_914f18c8fbe52b10a6b276bc0c",{"_index":287,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_92374adc6b583e8cf659977e48",{"_index":399,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_952e252e7470ff78b18a9ec786",{"_index":281,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_a6235b5ef0939d8deaad755fc8",{"_index":288,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["ignoreexpiration",{"_index":1023,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image_alt",{"_index":1176,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["image_url",{"_index":1175,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["imagealt",{"_index":563,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["imageurl",{"_index":564,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseUploader.html":{},"injectables/PayloadInterceptor.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["import",{"_index":29,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"modules/QuestionModule.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":203,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{}}}],["in(groupids",{"_index":1257,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["in(questionids",{"_index":1312,"title":{},"body":{"injectables/QuestionService.html":{}}}],["inactive",{"_index":421,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":468,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"modules/QuestionModule.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["infra.constants",{"_index":1384,"title":{},"body":{"controllers/UploadController.html":{}}}],["infra/infra.module",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["inframodule",{"_index":227,"title":{"modules/InfraModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["inherited",{"_index":91,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["initialize",{"_index":1647,"title":{},"body":{"index.html":{}}}],["inject",{"_index":254,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{}}}],["inject(forwardref",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":208,"title":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":209,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["injectrepository(authrepository",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(examrepository",{"_index":724,"title":{},"body":{"injectables/ExamService.html":{}}}],["injectrepository(professorrepository",{"_index":1088,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["injectrepository(questiongrouprepository",{"_index":1240,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["injectrepository(questionrepository",{"_index":1303,"title":{},"body":{"injectables/QuestionService.html":{}}}],["injectrepository(studentrepository",{"_index":1340,"title":{},"body":{"injectables/StudentService.html":{}}}],["injectrepository(userrepository",{"_index":1460,"title":{},"body":{"injectables/UserService.html":{}}}],["insert",{"_index":59,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["instalação",{"_index":1627,"title":{},"body":{"index.html":{}}}],["instanceid",{"_index":754,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["int",{"_index":83,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/Subject.html":{}}}],["intercept",{"_index":1042,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["intercept(context",{"_index":1043,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["interceptors/payload.interceptor",{"_index":523,"title":{},"body":{"modules/CoreModule.html":{}}}],["interface",{"_index":737,"title":{"interfaces/FileSendDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{}},"body":{"interfaces/FileSendDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["interfaces",{"_index":739,"title":{},"body":{"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"overview.html":{}}}],["interfaces/firebase",{"_index":882,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{}}}],["interfaces/jwt",{"_index":1017,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["interfaces/user",{"_index":1459,"title":{},"body":{"injectables/UserService.html":{}}}],["isarray",{"_index":1322,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isarray()@ispositive({each",{"_index":1320,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isboolean",{"_index":557,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["iscpf",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdate",{"_index":558,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdate()@type(undefined",{"_index":552,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdate()@type(undefined)@isoptional()@isboolean",{"_index":549,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isemail",{"_index":1036,"title":{},"body":{"classes/LoginDto.html":{}}}],["isenrollment",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isenum",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userrole",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(usertype",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty",{"_index":307,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/UserDto.html":{}}}],["isoptional",{"_index":559,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/QuestionFindDto.html":{}}}],["isoptional()@isboolean",{"_index":595,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@ispositive",{"_index":567,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@isstring()@isnotempty",{"_index":569,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["isoptional()@isurl",{"_index":571,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["ispositive",{"_index":514,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["ispositive()@isoptional",{"_index":1154,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["ispositive({each",{"_index":1323,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["isprod",{"_index":1502,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":308,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["isstring()@isnotempty",{"_index":305,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["isstring()@length(password_min",{"_index":537,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["issuer",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isurl",{"_index":591,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["item",{"_index":501,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":502,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["json",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.parse(process.env.firebase_admin",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt",{"_index":1016,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":1511,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfigkey",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":1021,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":315,"title":{"injectables/JwtGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/ExamController.html":{},"injectables/JwtGuard.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtmodule",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmoduleoptions",{"_index":1011,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwtpayload",{"_index":1001,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":316,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":283,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["legend",{"_index":185,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1037,"title":{},"body":{"classes/LoginDto.html":{}}}],["length(password_min",{"_index":1040,"title":{},"body":{"classes/LoginDto.html":{}}}],["limit",{"_index":1564,"title":{},"body":{"dependencies.html":{}}}],["limit.config.ts",{"_index":1513,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["literal",{"_index":1329,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["load",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["localmente",{"_index":1629,"title":{},"body":{"index.html":{}}}],["logger",{"_index":622,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('bootstrap",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger.service",{"_index":1033,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger/logger.module",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":228,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["logging",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":61,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/UserService.html":{}}}],["login(@body",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto",{"_index":541,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["logindto",{"_index":295,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.login",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto:8",{"_index":539,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["lógica",{"_index":1622,"title":{},"body":{"index.html":{}}}],["machinelearning",{"_index":755,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["manage",{"_index":1601,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manager",{"_index":285,"title":{},"body":{"classes/Auth1619445806509.html":{},"miscellaneous/enumerations.html":{}}}],["manytoone",{"_index":104,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{}}}],["manytoone(undefined",{"_index":80,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{}}}],["map",{"_index":1052,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["match",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"modules/QuestionModule.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":956,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"miscellaneous/variables.html":{}}}],["maxqueryexecutiontime",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":904,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["messaging",{"_index":756,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["messaging.service",{"_index":932,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["messaging.service.ts",{"_index":899,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"coverage.html":{}}}],["messaging.service.ts:12",{"_index":907,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["messaging.service.ts:7",{"_index":902,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["metadata",{"_index":954,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["migrations",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mimetype",{"_index":744,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["miscellaneous",{"_index":1588,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1632,"title":{},"body":{"index.html":{}}}],["module",{"_index":181,"title":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["modulemetadata",{"_index":847,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["modules",{"_index":183,"title":{"modules.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["morgan",{"_index":1569,"title":{},"body":{"dependencies.html":{}}}],["mustfindauth",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindauth(authdto",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindspecializeduser",{"_index":1436,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfindspecializeduser(userdto",{"_index":1447,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser",{"_index":1437,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser(userdto",{"_index":1449,"title":{},"body":{"injectables/UserService.html":{}}}],["mysql",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1571,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":22,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["naming",{"_index":1584,"title":{},"body":{"dependencies.html":{}}}],["namingstrategy",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessário",{"_index":1633,"title":{},"body":{"index.html":{}}}],["needed",{"_index":1641,"title":{},"body":{"index.html":{}}}],["needs",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["negócio",{"_index":1624,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1050,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["nestjs/common",{"_index":140,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"injectables/CustomLogger.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1364,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["nestjs/passport",{"_index":999,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1381,"title":{},"body":{"controllers/UploadController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":590,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"classes/UpdateQuestionDto.html":{},"controllers/UploadController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":198,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/ProfessorService.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":50,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":1045,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1054,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["node:console",{"_index":1236,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["notfoundexception",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["notfoundexception(authdto",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["null",{"_index":275,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"injectables/FirebaseAuthService.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["nullable",{"_index":84,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["number",{"_index":41,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"miscellaneous/variables.html":{}}}],["não",{"_index":576,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["obrigatória",{"_index":578,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["observable",{"_index":1049,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["onetomany",{"_index":105,"title":{},"body":{"classes/Answer.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{}}}],["onetomany(undefined",{"_index":527,"title":{},"body":{"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{}}}],["optional",{"_index":24,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam1620478273991.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":762,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{}}}],["options.databaseurl",{"_index":802,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.imports",{"_index":839,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.inject",{"_index":841,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.interface",{"_index":933,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["options.interface.ts",{"_index":844,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["options.storagebucket",{"_index":804,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.usefactory",{"_index":840,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["optionssuccessstatus",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["origin",{"_index":1499,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["origin(origin",{"_index":1613,"title":{},"body":{"miscellaneous/functions.html":{}}}],["originalname",{"_index":745,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["out",{"_index":194,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1658,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1547,"title":{"dependencies.html":{}},"body":{}}],["padrão",{"_index":592,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["padrão'})@isboolean()@isoptional",{"_index":586,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["para",{"_index":1620,"title":{},"body":{"index.html":{}}}],["param",{"_index":139,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["param('id",{"_index":697,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.db_port",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.db_query_timeout",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_max",{"_index":1756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_window_ms",{"_index":1754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseintpipe",{"_index":683,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["partialtype",{"_index":1363,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["partialtype(createanswerdto",{"_index":1366,"title":{},"body":{"classes/UpdateAnswerDto.html":{}}}],["partialtype(createexamdto",{"_index":1368,"title":{},"body":{"classes/UpdateExamDto.html":{}}}],["partialtype(createquestiondto",{"_index":1370,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["partialtype(createquestiongroupdto",{"_index":1372,"title":{},"body":{"classes/UpdateQuestionGroupDto.html":{}}}],["partialuser",{"_index":1479,"title":{},"body":{"injectables/UserService.html":{}}}],["partialuser.type",{"_index":1480,"title":{},"body":{"injectables/UserService.html":{}}}],["passport",{"_index":1015,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":1012,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1019,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":57,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["password_max",{"_index":538,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_min",{"_index":1038,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":138,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["patch(':id",{"_index":135,"title":{},"body":{"controllers/AnswerController.html":{}}}],["patch()@apiokresponse({type",{"_index":1119,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["path",{"_index":948,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["path}/${randombytes(32).tostring('hex",{"_index":976,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["payload",{"_index":1010,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":1018,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":1003,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payload.uid",{"_index":1027,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payloadinterceptor",{"_index":520,"title":{"injectables/PayloadInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"injectables/PayloadInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["period",{"_index":388,"title":{"classes/Period.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"coverage.html":{}}}],["period.entity",{"_index":984,"title":{},"body":{"classes/Grade.html":{}}}],["period_id",{"_index":401,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["period`(`id",{"_index":432,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["personal",{"_index":411,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/QuestionGroup.html":{}}}],["pick",{"_index":845,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["picktype",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["picktype(createauthdto",{"_index":619,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["pode",{"_index":575,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["por",{"_index":585,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["port",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["position",{"_index":1093,"title":{},"body":{"classes/Question.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{}}}],["post",{"_index":123,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["post()@apiokresponse({type",{"_index":673,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["post()@useinterceptors(undefined",{"_index":1376,"title":{},"body":{"controllers/UploadController.html":{}}}],["prefix",{"_index":115,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":282,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["primarygeneratedcolumn",{"_index":90,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["private",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["process.env.admin_password",{"_index":48,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["process.env.db_database",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_logging",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.firebase_admin",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.firebase_bucket",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["professor",{"_index":1068,"title":{"classes/Professor.html":{}},"body":{"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["professorrepository",{"_index":451,"title":{"classes/ProfessorRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"coverage.html":{}}}],["professorservice",{"_index":448,"title":{"injectables/ProfessorService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["programas",{"_index":1635,"title":{},"body":{"index.html":{}}}],["projectmanagement",{"_index":757,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["promise",{"_index":26,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"classes/UploaderService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":73,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"classes/Grade.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{}}}],["propriedade",{"_index":581,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["provide",{"_index":836,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/InfraModule.html":{}}}],["provider",{"_index":833,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["providers",{"_index":188,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/firebase",{"_index":834,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["public",{"_index":12,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"injectables/FirebaseStorageService.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["publicfile",{"_index":945,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["put",{"_index":684,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":680,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put(':id')@apiokresponse({type",{"_index":1123,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put()@apiokresponse({type",{"_index":1183,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["qb",{"_index":1306,"title":{},"body":{"injectables/QuestionService.html":{}}}],["qb.where(`${qb.alias}.groupid",{"_index":1308,"title":{},"body":{"injectables/QuestionService.html":{}}}],["query",{"_index":1125,"title":{},"body":{"controllers/QuestionController.html":{}}}],["queryrunner",{"_index":17,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["queryrunner.manager.query",{"_index":44,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.manager.query('delete",{"_index":65,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.query",{"_index":271,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["queryrunner.query(\"alter",{"_index":408,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["queryrunner.query(\"create",{"_index":387,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["queryrunner.query(\"drop",{"_index":444,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["queryrunner.query('drop",{"_index":291,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["question",{"_index":242,"title":{"classes/Question.html":{}},"body":{"modules/AppModule.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["question.constants",{"_index":1302,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.dto",{"_index":1129,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{}}}],["question.dto.ts",{"_index":562,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:14",{"_index":588,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:18",{"_index":572,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:23",{"_index":570,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:32",{"_index":587,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:36",{"_index":568,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:5",{"_index":1319,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.dto.ts:9",{"_index":1321,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.group",{"_index":1166,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["question.position",{"_index":1315,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.service",{"_index":1274,"title":{},"body":{"modules/QuestionModule.html":{}}}],["question/dtos/create",{"_index":1128,"title":{},"body":{"controllers/QuestionController.html":{}}}],["question/dtos/question",{"_index":1130,"title":{},"body":{"controllers/QuestionController.html":{}}}],["question/dtos/reorder",{"_index":1132,"title":{},"body":{"controllers/QuestionController.html":{}}}],["question/dtos/update",{"_index":1133,"title":{},"body":{"controllers/QuestionController.html":{}}}],["question/entities/question.entity",{"_index":1134,"title":{},"body":{"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["question/question.module",{"_index":1219,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["question/question.service",{"_index":1136,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionGroupService.html":{}}}],["question_group",{"_index":409,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["question_group`(`id",{"_index":428,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["questioncontroller",{"_index":1101,"title":{"controllers/QuestionController.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questionfinddto",{"_index":1109,"title":{"classes/QuestionFindDto.html":{}},"body":{"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questiongroup",{"_index":477,"title":{"classes/QuestionGroup.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongroup.exam",{"_index":1243,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.ts",{"_index":1171,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroup.ts:12",{"_index":1173,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:4",{"_index":1172,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:6",{"_index":1174,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup1620179231630",{"_index":1169,"title":{"classes/QuestionGroup1620179231630.html":{}},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroupcontroller",{"_index":1178,"title":{"controllers/QuestionGroupController.html":{}},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questiongroupmodule",{"_index":229,"title":{"modules/QuestionGroupModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["questiongroupnotfound",{"_index":1238,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongrouprepository",{"_index":1216,"title":{"classes/QuestionGroupRepository.html":{}},"body":{"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["questiongroupservice",{"_index":1137,"title":{"injectables/QuestionGroupService.html":{}},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"overview.html":{}}}],["questiongroup})@apinotfoundresponse",{"_index":1184,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["questionids",{"_index":1311,"title":{},"body":{"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["questionids.map((id",{"_index":1314,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionimage.ts",{"_index":1266,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionimage.ts:14",{"_index":1268,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:4",{"_index":1267,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:6",{"_index":1269,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage1620477869366",{"_index":1264,"title":{"classes/QuestionImage1620477869366.html":{}},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionmodule",{"_index":1212,"title":{"modules/QuestionModule.html":{}},"body":{"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules.html":{},"overview.html":{}}}],["questionnotfound",{"_index":1301,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionposition.ts",{"_index":1280,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionposition.ts:11",{"_index":1282,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:4",{"_index":1281,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:6",{"_index":1283,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition1620488935141",{"_index":1278,"title":{"classes/QuestionPosition1620488935141.html":{}},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionpositionmap",{"_index":1313,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionpositionmap.get(question.id",{"_index":1316,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionrepository",{"_index":1275,"title":{"classes/QuestionRepository.html":{}},"body":{"modules/QuestionModule.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questions",{"_index":1157,"title":{},"body":{"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["questions.map((question",{"_index":1310,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionservice",{"_index":1135,"title":{"injectables/QuestionService.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionGroupService.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["question})@apinotfoundresponse",{"_index":1113,"title":{},"body":{"controllers/QuestionController.html":{}}}],["questão",{"_index":574,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["randombytes",{"_index":968,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["rate",{"_index":1563,"title":{},"body":{"dependencies.html":{}}}],["ratelimit",{"_index":1758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ratelimitconfig",{"_index":1514,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ratelimitconfigkey",{"_index":1515,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["raw",{"_index":1328,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["read",{"_index":1602,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":148,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["readonlymap",{"_index":1259,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["record",{"_index":1356,"title":{},"body":{"interfaces/SwaggerOptions.html":{}}}],["references",{"_index":427,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["reflect",{"_index":1575,"title":{},"body":{"dependencies.html":{}}}],["regexp",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp('^http://localhost:3000",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp('^http://localhost:5000",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regexp('^https://(.*\\\\.|)constante.app",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(ratelimitconfigkey",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regular",{"_index":286,"title":{},"body":{"classes/Auth1619445806509.html":{},"miscellaneous/enumerations.html":{}}}],["relations",{"_index":728,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["remoteconfig",{"_index":758,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["remove",{"_index":119,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["remove(@param('id",{"_index":157,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["remove(id",{"_index":130,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["removes",{"_index":219,"title":{},"body":{"injectables/AnswerService.html":{}}}],["reorder",{"_index":1105,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorder(@body",{"_index":1206,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["reorder(reorderquesitondto",{"_index":1117,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorder(reorderquestiongroupdto",{"_index":1191,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["reorder(undefined",{"_index":1233,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorderquesitondto",{"_index":1121,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorderquestiondto",{"_index":1118,"title":{"classes/ReorderQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"coverage.html":{}}}],["reorderquestiongroupdto",{"_index":1192,"title":{"classes/ReorderQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["repositories/answer",{"_index":201,"title":{},"body":{"modules/AnswerModule.html":{}}}],["repositories/answer.repository",{"_index":200,"title":{},"body":{"modules/AnswerModule.html":{}}}],["repositories/auth.repository",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["repositories/exam.repository",{"_index":706,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{}}}],["repositories/professor.repository",{"_index":452,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{}}}],["repositories/question",{"_index":1217,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["repositories/question.repository",{"_index":1276,"title":{},"body":{"modules/QuestionModule.html":{},"injectables/QuestionService.html":{}}}],["repositories/student.repository",{"_index":454,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{}}}],["repositories/user.repository",{"_index":1425,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":713,"title":{},"body":{"injectables/ExamService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["request",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('bcryptjs",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["required",{"_index":565,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["reset",{"_index":193,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["result",{"_index":39,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"modules/QuestionModule.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.interface",{"_index":721,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{}}}],["result.interface.ts",{"_index":1327,"title":{},"body":{"interfaces/SoftDeleteResult.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["result.raw.affectedrows",{"_index":733,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["result?.length",{"_index":47,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["results",{"_index":68,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"modules/QuestionModule.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":150,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1577,"title":{},"body":{"dependencies.html":{}}}],["rodar",{"_index":1628,"title":{},"body":{"index.html":{}}}],["role",{"_index":63,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["role.enum",{"_index":483,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["role.enum.ts",{"_index":1597,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["runontransactioncomplete",{"_index":1455,"title":{},"body":{"injectables/UserService.html":{}}}],["runontransactioncomplete((e",{"_index":1465,"title":{},"body":{"injectables/UserService.html":{}}}],["rxjs",{"_index":1051,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1053,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["salt",{"_index":55,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{}}}],["scope",{"_index":623,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["scope.transient",{"_index":624,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["score",{"_index":75,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{}}}],["se",{"_index":579,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["secret",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1024,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["securityrules",{"_index":759,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["select",{"_index":45,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/UserService.html":{}}}],["send.dto",{"_index":972,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["send.dto.ts",{"_index":741,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["sendtodevice",{"_index":901,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["sendtodevice(token",{"_index":903,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["senhaforte",{"_index":1760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ser",{"_index":577,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["service",{"_index":1386,"title":{},"body":{"controllers/UploadController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["services",{"_index":936,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["services/firebase",{"_index":931,"title":{},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{}}}],["services/professor.service",{"_index":455,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/question",{"_index":1138,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{}}}],["services/student.service",{"_index":456,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/uploader.service",{"_index":993,"title":{},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{}}}],["set",{"_index":54,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["seu",{"_index":1636,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sistema",{"_index":1625,"title":{},"body":{"index.html":{}}}],["size",{"_index":746,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["snakenamingstrategy",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["softdeleteresult",{"_index":719,"title":{"interfaces/SoftDeleteResult.html":{}},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["sortitems",{"_index":627,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"modules/QuestionModule.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["specialized",{"_index":1431,"title":{},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/.../1620299822480",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../answer",{"_index":1590,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../casl",{"_index":1592,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../core.constants.ts",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":1608,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1606,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../database.config.ts",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exam",{"_index":1594,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../exam.constants.ts",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase",{"_index":1666,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../firebase.config.ts",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase.constants.ts",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../infra.constants.ts",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1607,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.config.ts",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1605,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../question",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../question.constants.ts",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rate",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1596,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/answer/answer.controller.ts",{"_index":114,"title":{},"body":{"controllers/AnswerController.html":{},"coverage.html":{}}}],["src/answer/answer.controller.ts:11",{"_index":124,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:16",{"_index":125,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:21",{"_index":129,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:26",{"_index":136,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:31",{"_index":132,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.module.ts",{"_index":195,"title":{},"body":{"modules/AnswerModule.html":{}}}],["src/answer/answer.service.ts",{"_index":210,"title":{},"body":{"injectables/AnswerService.html":{},"coverage.html":{}}}],["src/answer/answer.service.ts:11",{"_index":212,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:15",{"_index":213,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:19",{"_index":215,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:23",{"_index":214,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:7",{"_index":211,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/dto/create",{"_index":533,"title":{},"body":{"classes/CreateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/dto/update",{"_index":1362,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/entities/answer",{"_index":160,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Grade.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity.ts",{"_index":70,"title":{},"body":{"classes/Answer.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity.ts:16",{"_index":86,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:19",{"_index":89,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:22",{"_index":81,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/enums/answer",{"_index":1598,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/answer/repositories/answer",{"_index":171,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["src/answer/repositories/answer.repository.ts",{"_index":205,"title":{},"body":{"classes/AnswerRepository.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.constants.ts",{"_index":1492,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.module.ts",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":1452,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:23",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/casl/casl.module.ts",{"_index":506,"title":{},"body":{"modules/CaslModule.html":{}}}],["src/auth/casl/enums/casl",{"_index":1600,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/casl/factories/casl",{"_index":459,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/controllers/auth.controller.ts",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/controllers/auth.controller.ts:10",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/dtos/auth.dto.ts",{"_index":304,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/auth.dto.ts:6",{"_index":306,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dtos/create",{"_index":535,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts",{"_index":1034,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts:8",{"_index":1035,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":255,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts:10",{"_index":259,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:13",{"_index":260,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:7",{"_index":258,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/guards/jwt.guard",{"_index":688,"title":{},"body":{"controllers/ExamController.html":{},"controllers/UploadController.html":{}}}],["src/auth/guards/jwt.guard.ts",{"_index":997,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/interfaces/jwt",{"_index":1002,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/repositories/auth.repository.ts",{"_index":330,"title":{},"body":{"classes/AuthRepository.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1004,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:14",{"_index":1007,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:27",{"_index":1009,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auxiliary/auxiliary.module",{"_index":1422,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auxiliary/auxiliary.module.ts",{"_index":450,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["src/auxiliary/entities/course.entity.ts",{"_index":524,"title":{},"body":{"classes/Course.html":{},"coverage.html":{}}}],["src/auxiliary/entities/course.entity.ts:11",{"_index":529,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:14",{"_index":528,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:8",{"_index":526,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/grade.entity",{"_index":167,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["src/auxiliary/entities/grade.entity.ts",{"_index":979,"title":{},"body":{"classes/Grade.html":{},"coverage.html":{}}}],["src/auxiliary/entities/grade.entity.ts:11",{"_index":983,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:14",{"_index":982,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:17",{"_index":981,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/period.entity",{"_index":645,"title":{},"body":{"classes/Exam.html":{}}}],["src/auxiliary/entities/period.entity.ts",{"_index":1055,"title":{},"body":{"classes/Period.html":{},"coverage.html":{}}}],["src/auxiliary/entities/period.entity.ts:12",{"_index":1063,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:15",{"_index":1059,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:18",{"_index":1061,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:21",{"_index":1060,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:9",{"_index":1062,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/professor.entity.ts",{"_index":1069,"title":{},"body":{"classes/Professor.html":{},"coverage.html":{}}}],["src/auxiliary/entities/student.entity.ts",{"_index":1332,"title":{},"body":{"classes/Student.html":{},"coverage.html":{}}}],["src/auxiliary/entities/subject.entity.ts",{"_index":1342,"title":{},"body":{"classes/Subject.html":{},"coverage.html":{}}}],["src/auxiliary/entities/subject.entity.ts:10",{"_index":1344,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:13",{"_index":1348,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:16",{"_index":1345,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:19",{"_index":1346,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:22",{"_index":1347,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/repositories/professor.repository.ts",{"_index":1074,"title":{},"body":{"classes/ProfessorRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/student.repository.ts",{"_index":1333,"title":{},"body":{"classes/StudentRepository.html":{},"coverage.html":{}}}],["src/auxiliary/services/professor.service",{"_index":1453,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/professor.service.ts",{"_index":1077,"title":{},"body":{"injectables/ProfessorService.html":{},"coverage.html":{}}}],["src/auxiliary/services/professor.service.ts:11",{"_index":1079,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:18",{"_index":1081,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:24",{"_index":1084,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/student.service",{"_index":1454,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/student.service.ts",{"_index":1336,"title":{},"body":{"injectables/StudentService.html":{},"coverage.html":{}}}],["src/auxiliary/services/student.service.ts:11",{"_index":1337,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:18",{"_index":1338,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:24",{"_index":1339,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/config/cors.config.ts",{"_index":1498,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/config/database.config.ts",{"_index":1504,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/firebase.config.ts",{"_index":1506,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/index.ts",{"_index":1508,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/interfaces/swagger.interface.ts",{"_index":1353,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{}}}],["src/config/jwt.config.ts",{"_index":1510,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/rate",{"_index":1512,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.config.ts",{"_index":1516,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.constants.ts",{"_index":1519,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":521,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/decorators/is",{"_index":1521,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/entities/ff.entity",{"_index":261,"title":{},"body":{"classes/Auth.html":{},"classes/ExamAgreement.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["src/core/entities/ff.entity.ts",{"_index":734,"title":{},"body":{"classes/FFEntity.html":{},"coverage.html":{}}}],["src/core/entities/ff.entity.ts:6",{"_index":735,"title":{},"body":{"classes/FFEntity.html":{}}}],["src/core/entities/timestamp.entity.ts",{"_index":1357,"title":{},"body":{"classes/TimestampEntity.html":{},"coverage.html":{}}}],["src/core/entities/timestamp.entity.ts:10",{"_index":1359,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:13",{"_index":1361,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:16",{"_index":1360,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/interceptors/payload.interceptor.ts",{"_index":1041,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/payload.interceptor.ts:12",{"_index":1047,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["src/core/interfaces/soft",{"_index":720,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["src/database/migrations",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/migrations/1619445806509",{"_index":264,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["src/database/migrations/1620179231630",{"_index":1170,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["src/database/migrations/1620299822480",{"_index":6,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1620477175799",{"_index":382,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["src/database/migrations/1620477869366",{"_index":1265,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["src/database/migrations/1620478273991",{"_index":657,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["src/database/migrations/1620488935141",{"_index":1279,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["src/exam/dto/create",{"_index":543,"title":{},"body":{"classes/CreateExamDto.html":{},"coverage.html":{}}}],["src/exam/dto/update",{"_index":1367,"title":{},"body":{"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["src/exam/entities/agreement.entity",{"_index":101,"title":{},"body":{"classes/Answer.html":{}}}],["src/exam/entities/agreement.entity.ts",{"_index":662,"title":{},"body":{"classes/ExamAgreement.html":{},"coverage.html":{}}}],["src/exam/entities/agreement.entity.ts:10",{"_index":664,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["src/exam/entities/agreement.entity.ts:13",{"_index":665,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["src/exam/entities/agreement.entity.ts:15",{"_index":667,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["src/exam/entities/agreement.entity.ts:7",{"_index":666,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["src/exam/entities/exam.entity",{"_index":1064,"title":{},"body":{"classes/Period.html":{},"classes/QuestionGroup.html":{}}}],["src/exam/entities/exam.entity.ts",{"_index":625,"title":{},"body":{"classes/Exam.html":{},"coverage.html":{}}}],["src/exam/entities/exam.entity.ts:10",{"_index":638,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:13",{"_index":631,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:16",{"_index":635,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:19",{"_index":632,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:22",{"_index":630,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:25",{"_index":637,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:28",{"_index":634,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:31",{"_index":633,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:34",{"_index":643,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/enums/exam",{"_index":1603,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/exam/exam.constants.ts",{"_index":1525,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/exam/exam.controller.ts",{"_index":671,"title":{},"body":{"controllers/ExamController.html":{},"coverage.html":{}}}],["src/exam/exam.controller.ts:27",{"_index":674,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:33",{"_index":676,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:38",{"_index":677,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:43",{"_index":681,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:51",{"_index":678,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.module.ts",{"_index":703,"title":{},"body":{"modules/ExamModule.html":{}}}],["src/exam/exam.service",{"_index":1237,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["src/exam/exam.service.ts",{"_index":710,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{}}}],["src/exam/exam.service.ts:12",{"_index":712,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/exam.service.ts:19",{"_index":714,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/exam.service.ts:25",{"_index":715,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/exam.service.ts:29",{"_index":716,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/exam.service.ts:39",{"_index":718,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/exam.service.ts:48",{"_index":717,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/repositories/exam.repository.ts",{"_index":708,"title":{},"body":{"classes/ExamRepository.html":{},"coverage.html":{}}}],["src/firebase",{"_index":970,"title":{},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["src/firebase/firebase",{"_index":748,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.constants.ts",{"_index":1529,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.module.ts",{"_index":928,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:31",{"_index":929,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:41",{"_index":930,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/interfaces/firebase",{"_index":843,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["src/firebase/services/firebase",{"_index":857,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["src/firebase/types/firebase",{"_index":1668,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/infra/controllers/upload.controller.ts",{"_index":1373,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{}}}],["src/infra/controllers/upload.controller.ts:22",{"_index":1377,"title":{},"body":{"controllers/UploadController.html":{}}}],["src/infra/dtos/file",{"_index":740,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["src/infra/infra.constants.ts",{"_index":1531,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infra/infra.module.ts",{"_index":990,"title":{},"body":{"modules/InfraModule.html":{}}}],["src/infra/services/firebase",{"_index":960,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["src/infra/services/uploader.service.ts",{"_index":1390,"title":{},"body":{"classes/UploaderService.html":{},"coverage.html":{}}}],["src/infra/services/uploader.service.ts:4",{"_index":1392,"title":{},"body":{"classes/UploaderService.html":{}}}],["src/logger/logger.module.ts",{"_index":1032,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logger.service.ts",{"_index":621,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1532,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/question",{"_index":478,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"modules/QuestionModule.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/controllers/user.controller.ts",{"_index":1401,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/controllers/user.controller.ts:13",{"_index":1403,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controllers/user.controller.ts:19",{"_index":1406,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/decoratos/get",{"_index":1542,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dtos/create",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto",{"_index":1085,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["src/user/dtos/user.dto.ts",{"_index":1416,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto.ts:6",{"_index":1417,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/entities/user.entity.ts",{"_index":1393,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:10",{"_index":1395,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:13",{"_index":1394,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:15",{"_index":1397,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:18",{"_index":1396,"title":{},"body":{"classes/User.html":{}}}],["src/user/enum/user",{"_index":482,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/helpers/create",{"_index":1544,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/user/interfaces/user",{"_index":1430,"title":{},"body":{"interfaces/UserResult.html":{},"coverage.html":{}}}],["src/user/repositories/user.repository.ts",{"_index":1427,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/user/user.module.ts",{"_index":1421,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1432,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:24",{"_index":1439,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":1440,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:47",{"_index":1442,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:58",{"_index":1446,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":1450,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:70",{"_index":1444,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:98",{"_index":1448,"title":{},"body":{"injectables/UserService.html":{}}}],["started",{"_index":1616,"title":{"index.html":{}},"body":{}}],["started_at",{"_index":417,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["startedat",{"_index":547,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{}}}],["stated_at",{"_index":389,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["statedat",{"_index":1058,"title":{},"body":{"classes/Period.html":{}}}],["statement",{"_index":566,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["statements",{"_index":1487,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":824,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["status",{"_index":419,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{}}}],["status.enum",{"_index":647,"title":{},"body":{"classes/Exam.html":{}}}],["status.enum.ts",{"_index":1595,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["storage",{"_index":760,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts",{"_index":939,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["storage.service.ts:14",{"_index":947,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:8",{"_index":941,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storagebucket",{"_index":803,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["storageservice",{"_index":964,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["strategies",{"_index":1585,"title":{},"body":{"dependencies.html":{}}}],["strategies/jwt.strategy",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1014,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":127,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["student",{"_index":1331,"title":{"classes/Student.html":{}},"body":{"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["studentrepository",{"_index":453,"title":{"classes/StudentRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{}}}],["studentservice",{"_index":449,"title":{"injectables/StudentService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["subject",{"_index":396,"title":{"classes/Subject.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/Grade.html":{},"classes/Subject.html":{},"coverage.html":{}}}],["subject.course",{"_index":532,"title":{},"body":{"classes/Course.html":{}}}],["subject.entity",{"_index":530,"title":{},"body":{"classes/Course.html":{},"classes/Grade.html":{}}}],["subject_id",{"_index":400,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["subject`(`id",{"_index":436,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["subjects",{"_index":525,"title":{},"body":{"classes/Course.html":{}}}],["subscriber.{js,ts",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscribers",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sudo",{"_index":1651,"title":{},"body":{"index.html":{}}}],["super",{"_index":1020,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":1653,"title":{},"body":{"modules.html":{}}}],["suprir",{"_index":1621,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1654,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1580,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":1517,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfigkey",{"_index":1518,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":1352,"title":{"interfaces/SwaggerOptions.html":{}},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":487,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["synchronize",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":272,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["tableinheritance",{"_index":106,"title":{},"body":{"classes/Answer.html":{},"classes/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1546,"title":{},"body":{"coverage.html":{}}}],["text",{"_index":415,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["this.answerservice.create(createanswerdto",{"_index":151,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.findall",{"_index":152,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.findone(+id",{"_index":154,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.remove(+id",{"_index":158,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.update(+id",{"_index":156,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.app",{"_index":799,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.auth",{"_index":810,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.database(url",{"_index":811,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.delete",{"_index":820,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.firestore",{"_index":812,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.instanceid",{"_index":813,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.machinelearning",{"_index":814,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.messaging",{"_index":815,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.name",{"_index":807,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.options",{"_index":809,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.projectmanagement",{"_index":816,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.remoteconfig",{"_index":817,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.securityrules",{"_index":818,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.storage",{"_index":819,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.authrepository.findone",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authrepository.save",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.createauth",{"_index":1462,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.findauth",{"_index":1026,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.login(logindto",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.createuserbytype(createuserdto",{"_index":1461,"title":{},"body":{"injectables/UserService.html":{}}}],["this.examservice.create(createexamdto",{"_index":694,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findall",{"_index":695,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findone",{"_index":1244,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(copyquestiongroupdto.examid",{"_index":1250,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(id",{"_index":696,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.remove(id",{"_index":699,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.update(id",{"_index":698,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.exports",{"_index":842,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.fcm",{"_index":908,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.fcm.sendtodevice(token",{"_index":910,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.findauth",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findone(copyquestiongroupdto.groupid",{"_index":1249,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.findone(id",{"_index":730,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.findspecializeduser(userdto",{"_index":1483,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduser(userdto",{"_index":1477,"title":{},"body":{"injectables/UserService.html":{}}}],["this.firebaseauth",{"_index":884,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.createuser(createdto",{"_index":894,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.deleteuser(uid",{"_index":896,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.getuser(uid",{"_index":893,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.updateuser(uid",{"_index":895,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.verifyidtoken(token",{"_index":887,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firestore",{"_index":921,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.firestore.collection(collection",{"_index":923,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.groups",{"_index":651,"title":{},"body":{"classes/Exam.html":{}}}],["this.groups?.sort((a",{"_index":652,"title":{},"body":{"classes/Exam.html":{}}}],["this.jwtservice.signasync",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mustfindauth(logindto",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.professorservice.createstudent(createuserdto",{"_index":1473,"title":{},"body":{"injectables/UserService.html":{}}}],["this.professorservice.findone(userdto",{"_index":1481,"title":{},"body":{"injectables/UserService.html":{}}}],["this.providers",{"_index":838,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.questiongroupservice.copy(copyquestiongroupdto",{"_index":1204,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.create(createquestiongroupdto",{"_index":1200,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findall",{"_index":1201,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findone(createquestiondto.groupid",{"_index":1142,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questiongroupservice.findone(id",{"_index":1202,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findone(updatequestiondto.groupid",{"_index":1148,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questiongroupservice.remove(id",{"_index":1208,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.reorder(reorderquestiongroupdto",{"_index":1207,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.update(id",{"_index":1203,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questions",{"_index":1167,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questions?.sort((a",{"_index":1168,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questionservice.copytogroup",{"_index":1254,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.questionservice.createquestion(createquestiondto",{"_index":1143,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.find(finddto",{"_index":1145,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findone(id",{"_index":1146,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.remove(id",{"_index":1151,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.reorder(reorderquesitondto",{"_index":1150,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.update(id",{"_index":1149,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.repository.create",{"_index":1252,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.create(createdto",{"_index":1089,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["this.repository.create(createexamdto",{"_index":725,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.create(createquestiondto",{"_index":1304,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.create(createquestiongroupdto",{"_index":1241,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.find",{"_index":727,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.findone",{"_index":1091,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["this.repository.findone(id",{"_index":729,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.merge",{"_index":1246,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.merge(exam",{"_index":731,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.merge(question",{"_index":1309,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save",{"_index":1251,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.save(exam",{"_index":726,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.save(professor",{"_index":1090,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["this.repository.save(question",{"_index":1305,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save(questiongroup",{"_index":1245,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.save(student",{"_index":1341,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.repository.softdelete",{"_index":1317,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.softdelete(id",{"_index":732,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["this.service.upload(file",{"_index":1389,"title":{},"body":{"controllers/UploadController.html":{}}}],["this.storage",{"_index":949,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storage.bucket(bucket).file(path",{"_index":951,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storageservice.upload",{"_index":975,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["this.studentservice.createstudent(createuserdto",{"_index":1475,"title":{},"body":{"injectables/UserService.html":{}}}],["this.studentservice.findone(userdto",{"_index":1482,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":1476,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":1413,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findspecializeduser",{"_index":1028,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.mustfinduser",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateuser",{"_index":1415,"title":{},"body":{"controllers/UserController.html":{}}}],["this.uuid",{"_index":669,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["throw",{"_index":49,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"injectables/ExamService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["timestamp.entity",{"_index":736,"title":{},"body":{"classes/FFEntity.html":{}}}],["timestampentity",{"_index":95,"title":{"classes/TimestampEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"coverage.html":{}}}],["timestampentity:10",{"_index":96,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:13",{"_index":100,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:16",{"_index":98,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timewindow",{"_index":1753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tinyint",{"_index":405,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["title",{"_index":394,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["tocopy",{"_index":1248,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["tocopy.questions",{"_index":1255,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["token",{"_index":881,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["token.interface",{"_index":883,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["token.interface.ts",{"_index":853,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"coverage.html":{}}}],["transaction",{"_index":1469,"title":{},"body":{"injectables/UserService.html":{}}}],["transactional",{"_index":175,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["transformer",{"_index":556,"title":{},"body":{"classes/CreateExamDto.html":{},"dependencies.html":{}}}],["true",{"_index":85,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/ExamAgreement.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":886,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":109,"title":{},"body":{"classes/Answer.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["type.enum.ts",{"_index":1591,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":1664,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":30,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":197,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([answerrepository",{"_index":204,"title":{},"body":{"modules/AnswerModule.html":{}}}],["typeormmodule.forfeature([authrepository",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([examrepository",{"_index":707,"title":{},"body":{"modules/ExamModule.html":{}}}],["typeormmodule.forfeature([questiongrouprepository",{"_index":1221,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["typeormmodule.forfeature([questionrepository",{"_index":1277,"title":{},"body":{"modules/QuestionModule.html":{}}}],["typeormmodule.forfeature([studentrepository",{"_index":457,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":1426,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":1365,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["types/firebase",{"_index":919,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["ui",{"_index":1581,"title":{},"body":{"dependencies.html":{}}}],["uid",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/JwtPayload.html":{}}}],["unauthorizedexception",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception(logindto",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(userdto",{"_index":1478,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":42,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["unique",{"_index":257,"title":{},"body":{"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/ExamAgreement.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["unknown",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unprocessableentityexception",{"_index":1451,"title":{},"body":{"injectables/UserService.html":{}}}],["up",{"_index":15,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"index.html":{}}}],["up(queryrunner",{"_index":27,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{}}}],["update",{"_index":120,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"injectables/QuestionService.html":{},"miscellaneous/enumerations.html":{}}}],["update(@param('id",{"_index":155,"title":{},"body":{"controllers/AnswerController.html":{}}}],["update(id",{"_index":133,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["updateanswerdto",{"_index":134,"title":{"classes/UpdateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["updated_at",{"_index":277,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["updatedat",{"_index":78,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedatecolumn",{"_index":99,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedto",{"_index":876,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/QuestionService.html":{}}}],["updateexamdto",{"_index":679,"title":{"classes/UpdateExamDto.html":{}},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["updatequestiondto",{"_index":1122,"title":{"classes/UpdateQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["updatequestiondto.groupid",{"_index":1147,"title":{},"body":{"controllers/QuestionController.html":{}}}],["updatequestiongroupdto",{"_index":1194,"title":{"classes/UpdateQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["updatequestiongroupdto.examid",{"_index":1247,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["updates",{"_index":218,"title":{},"body":{"injectables/AnswerService.html":{}}}],["updateuser",{"_index":863,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{}}}],["updateuser(uid",{"_index":875,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["upload",{"_index":940,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{}}}],["upload(@uploadedfile",{"_index":1388,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(file",{"_index":1374,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(filedto",{"_index":965,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["upload(path",{"_index":942,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["upload_path",{"_index":1383,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadcontroller",{"_index":991,"title":{"controllers/UploadController.html":{}},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":1378,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploader.service",{"_index":974,"title":{},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["uploader.service.ts",{"_index":961,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["uploader.service.ts:11",{"_index":966,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploader.service.ts:8",{"_index":963,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploaderservice",{"_index":973,"title":{"classes/UploaderService.html":{}},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":770,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["useclass",{"_index":996,"title":{},"body":{"modules/InfraModule.html":{}}}],["usefactory",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{}}}],["useguards",{"_index":682,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtguard",{"_index":693,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useinterceptors",{"_index":1379,"title":{},"body":{"controllers/UploadController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1387,"title":{},"body":{"controllers/UploadController.html":{}}}],["user",{"_index":46,"title":{"classes/User.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtStrategy.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["user.decorator",{"_index":1408,"title":{},"body":{"controllers/UserController.html":{}}}],["user.decorator.ts",{"_index":1543,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1087,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.enrollment",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.helper",{"_index":1458,"title":{},"body":{"injectables/UserService.html":{}}}],["user.helper.ts",{"_index":1545,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["user.id",{"_index":496,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.role",{"_index":488,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.service",{"_index":1410,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.type",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/dtos/create",{"_index":1086,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["user/entities/user.entity",{"_index":473,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["user/user.module",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user:10",{"_index":1071,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:13",{"_index":1070,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:15",{"_index":1073,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:18",{"_index":1072,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user_id",{"_index":406,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["usercontroller",{"_index":1400,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":1083,"title":{"classes/UserDto.html":{}},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":495,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{}}}],["usermodule",{"_index":230,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":1424,"title":{"classes/UserRepository.html":{}},"body":{"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userresult",{"_index":1429,"title":{"interfaces/UserResult.html":{}},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userrole",{"_index":481,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":490,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.manager",{"_index":493,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.regular",{"_index":1399,"title":{},"body":{"classes/User.html":{}}}],["users",{"_index":1354,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":340,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertype",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["usertype.professor",{"_index":1472,"title":{},"body":{"injectables/UserService.html":{}}}],["usertype.student",{"_index":1474,"title":{},"body":{"injectables/UserService.html":{}}}],["usevalue",{"_index":837,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["using",{"_index":1648,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":403,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{}}}],["v0.0.1",{"_index":1759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":1005,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":1008,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":309,"title":{},"body":{"classes/AuthDto.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["value",{"_index":267,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":62,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["var",{"_index":53,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":256,"title":{},"body":{"classes/Auth.html":{},"classes/Course.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["varchar(255",{"_index":280,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["variable",{"_index":1493,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1643,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verdadeira",{"_index":584,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["verifytoken",{"_index":864,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["verifytoken(token",{"_index":879,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["version",{"_index":1355,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":644,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"miscellaneous/functions.html":{}}}],["whitelist",{"_index":1503,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":771,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseStorageService.html":{},"classes/UploaderService.html":{}}}],["zoom",{"_index":192,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUser1620299822480.html":{"url":"classes/AdminUser1620299822480.html","title":"class - AdminUser1620299822480","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUser1620299822480\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620299822480-AdminUser.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\n\nconst cpf = '29997856155';\nconst enrollment = '999999';\n\nexport class AdminUser1620299822480 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    const result:\n      | {\n          id: number;\n        }[]\n      | undefined = await queryRunner.manager.query(\n      'SELECT id FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n\n    if (!result?.length) {\n      if (!process.env.ADMIN_PASSWORD) {\n        throw new Error('ADMIN_PASSWORD env var not set');\n      }\n\n      const salt = await bcrypt.genSalt();\n      const password = await bcrypt.hash(process.env.ADMIN_PASSWORD, salt);\n\n      await queryRunner.manager.query(\n        'INSERT INTO auth (login, password, salt) VALUES (?, ?, ?)',\n        [enrollment, password, salt],\n      );\n      await queryRunner.manager.query(\n        'INSERT INTO user (enrollment, cpf, type, role) VALUES (?, ?, ?, ?)',\n        [enrollment, cpf, 'User', 'admin'],\n      );\n    }\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.manager.query('DELETE FROM auth WHERE login = ?', [\n      enrollment,\n    ]);\n    await queryRunner.manager.query(\n      'DELETE FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Answer.html":{"url":"classes/Answer.html","title":"class - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examAgreement\n                            \n                            \n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/agreement.entity';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  TableInheritance,\n} from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { AnswerType } from '../enums/answer-type.enum';\n\n@Entity('answer')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: AnswerType } })\nexport class Answer extends FFEntity {\n  @Column({ type: 'int', nullable: true })\n  score: number;\n\n  @Column({ type: 'enum', enum: AnswerType })\n  type: AnswerType;\n\n  @ManyToOne(() => ExamAgreement)\n  examAgreement: ExamAgreement;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnswerController.html":{"url":"controllers/AnswerController.html","title":"controller - AnswerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnswerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                answer\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createAnswerDto: CreateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAnswerDto\n                                    \n                                                CreateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { AnswerService } from './answer.service';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\n\n@Controller('answer')\nexport class AnswerController {\n  constructor(private readonly answerService: AnswerService) {}\n\n  @Post()\n  create(@Body() createAnswerDto: CreateAnswerDto) {\n    return this.answerService.create(createAnswerDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.answerService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.answerService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateAnswerDto: UpdateAnswerDto) {\n    return this.answerService.update(+id, updateAnswerDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.answerService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGrade.html":{"url":"classes/AnswerGrade.html","title":"class - AnswerGrade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGrade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer-grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Answer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                grade\n                            \n                            \n                                examAgreement\n                            \n                            \n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grade\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer-grade.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:19\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Grade } from 'src/auxiliary/entities/grade.entity';\nimport { ChildEntity, ManyToOne } from 'typeorm';\nimport { Answer } from './answer.entity';\n\n@ChildEntity()\nexport class AnswerGrade extends Answer {\n  @ManyToOne(() => Grade)\n  grade: Grade;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGradeRepository.html":{"url":"classes/AnswerGradeRepository.html","title":"class - AnswerGradeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGradeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer-grade.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { AnswerGrade } from '../entities/answer-grade.entity';\n\n@EntityRepository(AnswerGrade)\nexport class AnswerGradeRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnswerModule.html":{"url":"modules/AnswerModule.html","title":"module - AnswerModule","body":"\n                   \n\n\n\n\n    Modules\n    AnswerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_providers\n\n\n\n\nAnswerService\n\nAnswerService\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/answer/answer.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnswerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnswerController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AnswerService } from './answer.service';\nimport { AnswerController } from './answer.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnswerRepository } from './repositories/answer.repository';\nimport { AnswerGradeRepository } from './repositories/answer-grade.repository';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AnswerRepository, AnswerGradeRepository]),\n  ],\n  controllers: [AnswerController],\n  providers: [AnswerService],\n})\nexport class AnswerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerRepository.html":{"url":"classes/AnswerRepository.html","title":"class - AnswerRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Answer } from '../entities/answer.entity';\n\n@EntityRepository(Answer)\nexport class AnswerRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnswerService.html":{"url":"injectables/AnswerService.html","title":"injectable - AnswerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AnswerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createAnswerDto: CreateAnswerDto)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAnswerDto\n                                    \n                                                CreateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\n\n@Injectable()\nexport class AnswerService {\n  create(createAnswerDto: CreateAnswerDto) {\n    return 'This action adds a new answer';\n  }\n\n  findAll() {\n    return `This action returns all answer`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} answer`;\n  }\n\n  update(id: number, updateAnswerDto: UpdateAnswerDto) {\n    return `This action updates a #${id} answer`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} answer`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnswerModule\n\nAnswerModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnswerModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nInfraModule\n\nInfraModule\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AnswerModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            AuxiliaryModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            ExamModule\n                        \n                        \n                            InfraModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            QuestionGroupModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { configs, databaseConfigKey } from './config';\nimport { LoggerModule } from './logger/logger.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './user/user.module';\nimport { ExamModule } from './exam/exam.module';\nimport { QuestionGroupModule } from './question-group/question-group.module';\nimport { AnswerModule } from './answer/answer.module';\nimport { CoreModule } from './core/core.module';\nimport { AuxiliaryModule } from './auxiliary/auxiliary.module';\nimport { InfraModule } from './infra/infra.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ load: configs }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(databaseConfigKey)!,\n      inject: [ConfigService],\n    }),\n    CoreModule,\n    LoggerModule,\n    AuthModule,\n    UserModule,\n    ExamModule,\n    QuestionGroupModule,\n    AnswerModule,\n    AuxiliaryModule,\n    InfraModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity } from 'typeorm';\n\n@Entity('auth')\nexport class Auth extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  login: string;\n\n  @Column({ type: 'varchar' })\n  password: string;\n\n  @Column({ type: 'varchar' })\n  salt: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth1619445806509.html":{"url":"classes/Auth1619445806509.html","title":"class - Auth1619445806509","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth1619445806509\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1619445806509-Auth.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auth1619445806509'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1619445806509-Auth.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Auth1619445806509 implements MigrationInterface {\n  name = 'Auth1619445806509';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'CREATE TABLE `auth` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `login` varchar(255) NOT NULL, `password` varchar(255) NOT NULL, `salt` varchar(255) NOT NULL, UNIQUE INDEX `IDX_952e252e7470ff78b18a9ec786` (`login`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      \"CREATE TABLE `user` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `enrollment` varchar(255) NOT NULL, `cpf` varchar(255) NOT NULL, `type` varchar(255) NOT NULL, `role` enum ('manager', 'admin', 'regular') NOT NULL DEFAULT 'regular', UNIQUE INDEX `IDX_914f18c8fbe52b10a6b276bc0c` (`enrollment`), UNIQUE INDEX `IDX_a6235b5ef0939d8deaad755fc8` (`cpf`), INDEX `IDX_31ef2b4d30675d0c15056b7f6e` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_a6235b5ef0939d8deaad755fc8` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_914f18c8fbe52b10a6b276bc0c` ON `user`',\n    );\n    await queryRunner.query('DROP TABLE `user`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_952e252e7470ff78b18a9ec786` ON `auth`',\n    );\n    await queryRunner.query('DROP TABLE `auth`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/auth/controllers/auth.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { LoginDto } from '../dtos/login.dto';\n\n@Controller(\"auth\")\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  login(@Body() loginDto: LoginDto): Promise {\n    return this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/auth.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  login: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtGuard\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            CaslModule\n                        \n                        \n                            JwtGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserModule } from '../user/user.module';\nimport { jwtConfigKey } from '../config';\n\nimport { CaslModule } from './casl/casl.module';\n\nimport { AuthService } from './auth.service';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { JwtGuard } from './guards/jwt.guard';\nimport { AuthController } from './controllers/auth.controller';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AuthRepository]),\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(jwtConfigKey)!,\n      inject: [ConfigService],\n    }),\n    UserModule,\n    CaslModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtGuard, JwtStrategy],\n  exports: [AuthService, JwtGuard, CaslModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthRepository.html":{"url":"classes/AuthRepository.html","title":"class - AuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/repositories/auth.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Auth } from '../entities/auth.entity';\n\n@EntityRepository(Auth)\nexport class AuthRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuth\n                            \n                            \n                                findAuth\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                mustFindAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authRepository: AuthRepository, jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        AuthRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAuth(createAuthDto: CreateAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAuthDto\n                                    \n                                                CreateAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAuth\n                        \n                        \n                    \n                \n            \n            \n                \nfindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport bcrypt = require('bcryptjs');\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { UserService } from '../user/user.service';\n\nimport { LoginDto } from './dtos/login.dto';\nimport { Auth } from './entities/auth.entity';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { CreateAuthDto } from './dtos/create-auth.dto';\nimport { AuthDto } from './dtos/auth.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(AuthRepository)\n    private readonly authRepository: AuthRepository,\n    private readonly jwtService: JwtService,\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  findAuth(authDto: AuthDto): Promise {\n    return this.authRepository.findOne({ ...authDto });\n  }\n\n  async mustFindAuth(authDto: AuthDto): Promise {\n    const auth = await this.findAuth({ login: authDto.login });\n    if (!auth) {\n      throw new NotFoundException(authDto);\n    }\n\n    return auth;\n  }\n\n  async login(loginDto: LoginDto): Promise {\n    const auth = await this.mustFindAuth(loginDto);\n\n    const match = await bcrypt.compare(loginDto.password, auth.password);\n    if (!match) {\n      throw new UnauthorizedException(loginDto);\n    }\n\n    const user = await this.userService.mustFindUser({\n      enrollment: loginDto.login,\n    });\n    const accessToken = await this.jwtService.signAsync({\n      uid: user.enrollment,\n      type: user.type,\n    });\n\n    return accessToken;\n  }\n\n  @Transactional()\n  async createAuth(createAuthDto: CreateAuthDto): Promise {\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(createAuthDto.password, salt);\n\n    await this.authRepository.save({\n      login: createAuthDto.login,\n      salt,\n      password,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auxiliary1620477175799.html":{"url":"classes/Auxiliary1620477175799.html","title":"class - Auxiliary1620477175799","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auxiliary1620477175799\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477175799-Auxiliary.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auxiliary1620477175799'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Auxiliary1620477175799 implements MigrationInterface {\n    name = 'Auxiliary1620477175799'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `period` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) NULL, `stated_at` datetime NOT NULL, `ended_at` datetime NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `course` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, UNIQUE INDEX `IDX_5cf4963ae12285cda6432d5a3a` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `subject` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, `code_id` int NOT NULL, `course_id` int NULL, UNIQUE INDEX `IDX_92374adc6b583e8cf659977e48` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `subject_id` int NULL, `period_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `exam_agreement` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `uuid` varchar(255) NOT NULL, `anonymous` tinyint NOT NULL, `user_id` int NOT NULL, UNIQUE INDEX `IDX_2b38bb607ef3e86920e9bd0163` (`uuid`), PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `question_group` ADD `personal` tinyint NOT NULL DEFAULT 0\");\n        await queryRunner.query(\"ALTER TABLE `question_group` ADD `exam_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD `text` text NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD `description` text NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD `started_at` datetime NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD `ended_at` datetime NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD `allow_anonymous` tinyint NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD `status` enum ('active', 'inactive') NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD `period_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL DEFAULT 0\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `question_group` ADD CONSTRAINT `FK_1d110bd5138b275a2ea2944e290` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_814144bcce3b80921f41f15b823` FOREIGN KEY (`exam_agreement_id`) REFERENCES `exam_agreement`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_971014f1fb44be716098484bb5a` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_971014f1fb44be716098484bb5a`\");\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_814144bcce3b80921f41f15b823`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`\");\n        await queryRunner.query(\"ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`\");\n        await queryRunner.query(\"ALTER TABLE `question_group` DROP FOREIGN KEY `FK_1d110bd5138b275a2ea2944e290`\");\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `exam` DROP COLUMN `period_id`\");\n        await queryRunner.query(\"ALTER TABLE `exam` DROP COLUMN `status`\");\n        await queryRunner.query(\"ALTER TABLE `exam` DROP COLUMN `allow_anonymous`\");\n        await queryRunner.query(\"ALTER TABLE `exam` DROP COLUMN `ended_at`\");\n        await queryRunner.query(\"ALTER TABLE `exam` DROP COLUMN `started_at`\");\n        await queryRunner.query(\"ALTER TABLE `exam` DROP COLUMN `description`\");\n        await queryRunner.query(\"ALTER TABLE `exam` DROP COLUMN `text`\");\n        await queryRunner.query(\"ALTER TABLE `question_group` DROP COLUMN `exam_id`\");\n        await queryRunner.query(\"ALTER TABLE `question_group` DROP COLUMN `personal`\");\n        await queryRunner.query(\"DROP INDEX `IDX_2b38bb607ef3e86920e9bd0163` ON `exam_agreement`\");\n        await queryRunner.query(\"DROP TABLE `exam_agreement`\");\n        await queryRunner.query(\"DROP TABLE `grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_92374adc6b583e8cf659977e48` ON `subject`\");\n        await queryRunner.query(\"DROP TABLE `subject`\");\n        await queryRunner.query(\"DROP INDEX `IDX_5cf4963ae12285cda6432d5a3a` ON `course`\");\n        await queryRunner.query(\"DROP TABLE `course`\");\n        await queryRunner.query(\"DROP TABLE `period`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuxiliaryModule.html":{"url":"modules/AuxiliaryModule.html","title":"module - AuxiliaryModule","body":"\n                   \n\n\n\n\n    Modules\n    AuxiliaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\n\nProfessorService \n\nProfessorService \n\n\n\nStudentService \n\nStudentService \n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auxiliary/auxiliary.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ProfessorRepository } from './repositories/professor.repository';\nimport { StudentRepository } from './repositories/student.repository';\nimport { ProfessorService } from './services/professor.service';\nimport { StudentService } from './services/student.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([StudentRepository, ProfessorRepository])],\n  providers: [StudentService, ProfessorService],\n  exports: [StudentService, ProfessorService],\n})\nexport class AuxiliaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/casl/factories/casl-ability.factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createForUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/casl/factories/casl-ability.factory.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { Answer } from '../../../answer/entities/answer.entity';\nimport { Exam } from '../../../exam/entities/exam.entity';\nimport { ExamAgreement } from '../../../exam/entities/agreement.entity';\nimport { User } from '../../../user/entities/user.entity';\nimport { CaslAction as Action } from '../enums/casl-action.enum';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { UserRole } from 'src/user/enum/user-role.enum';\n\ntype CaslSubjects =\n  | InferSubjects\n  | 'all';\n\ntype AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder(\n      Ability as AbilityClass,\n    );\n\n    switch (user.role) {\n      case UserRole.ADMIN:\n        can(Action.MANAGE, 'all');\n        break;\n      case UserRole.MANAGER:\n        can(Action.READ, 'all');\n        can(Action.MANAGE, QuestionGroup);\n        break;\n      default:\n        can(Action.READ, User);\n        can(Action.READ, ExamAgreement, { userId: user.id });\n    }\n\n    // User\n    can(Action.UPDATE, User, { id: user.id });\n\n    can(Action.MANAGE, Answer, {});\n\n    // ExamAgreement\n    cannot(Action.DELETE, ExamAgreement, { uuid: undefined });\n\n    const examAgreementNotFinished = {\n      userId: user.id,\n      uuid: undefined,\n    };\n\n    can(Action.MANAGE, ExamAgreement, examAgreementNotFinished);\n\n    // Answer\n    can(Action.MANAGE, Answer, {\n      examAgreement: examAgreementNotFinished,\n    });\n\n    // Answer Grade\n\n    return build({\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/casl/casl.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './factories/casl-ability.factory';\n\n@Module({ providers: [CaslAbilityFactory], exports: [CaslAbilityFactory] })\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CopyQuestionGroupDto.html":{"url":"classes/CopyQuestionGroupDto.html","title":"class - CopyQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CopyQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dto/copy-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dto/copy-question-group.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dto/copy-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPositive } from 'class-validator';\n\nexport class CopyQuestionGroupDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsPositive()\n  examId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_providers\n\n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\n\n\nCoreModule\n\nCoreModule\n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PayloadInterceptor } from './interceptors/payload.interceptor';\n\n@Global()\n@Module({ providers: [PayloadInterceptor], exports: [PayloadInterceptor] })\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Course.html":{"url":"classes/Course.html","title":"class - Course","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Course\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/course.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                subjects\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subjects\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('course')\nexport class Course extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @OneToMany(() => Subject, (subject) => subject.course)\n  subjects: Subject[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnswerDto.html":{"url":"classes/CreateAnswerDto.html","title":"class - CreateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/create-answer.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAnswerDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/create-auth.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        LoginDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         LoginDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         LoginDto:8\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { LoginDto } from './login.dto';\n\nexport class CreateAuthDto extends LoginDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamDto.html":{"url":"classes/CreateExamDto.html","title":"class - CreateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dto/create-exam.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                startedAt\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)@IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dto/create-exam.dto.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dto/create-exam.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dto/create-exam.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dto/create-exam.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dto/create-exam.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsDate,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class CreateExamDto {\n  @IsString()\n  @IsNotEmpty()\n  text: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsDate()\n  @Type(() => Date)\n  startedAt: Date;\n\n  @IsDate()\n  @Type(() => Date)\n  endedAt: Date;\n\n  @IsDate()\n  @Type(() => Date)\n  @IsOptional()\n  @IsBoolean()\n  allowAnonymous?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionDto.html":{"url":"classes/CreateQuestionDto.html","title":"class - CreateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/question/dtos/create-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    Optional\n                                required\n                            \n                            \n                                statement\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/dtos/create-question.dto.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/dtos/create-question.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsUrl()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/dtos/create-question.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Boolean, title: 'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão'})@IsBoolean()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/dtos/create-question.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/dtos/create-question.dto.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class CreateQuestionDto {\n  @IsString()\n  @IsNotEmpty()\n  statement: string;\n\n  @IsOptional()\n  @IsUrl()\n  imageUrl?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  imageAlt?: string;\n\n  @ApiProperty({\n    type: Boolean,\n    title:\n      'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão',\n  })\n  @IsBoolean()\n  @IsOptional()\n  required?: boolean;\n\n  @IsOptional()\n  @IsPositive()\n  groupId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionGroupDto.html":{"url":"classes/CreateQuestionGroupDto.html","title":"class - CreateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dto/create-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                class\n                            \n                            \n                                    Optional\n                                examId\n                            \n                            \n                                    Optional\n                                personal\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dto/create-question-group.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dto/create-question-group.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dto/create-question-group.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dto/create-question-group.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n} from 'class-validator';\n\nexport class CreateQuestionGroupDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsOptional()\n  @IsBoolean()\n  class?: boolean;\n\n  @IsOptional()\n  @IsBoolean()\n  personal?: boolean;\n\n  @IsOptional()\n  @IsPositive()\n  examId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsCPF()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnrollment()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserRole)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserType)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum } from 'class-validator';\nimport { IsCPF } from 'brazilian-class-validator';\nimport { PickType } from '@nestjs/swagger';\n\nimport { IsEnrollment } from '../../core/decorators/is-enrollment.decorator';\nimport { UserType } from '../enum/user-type.enum';\nimport { CreateAuthDto } from '../../auth/dtos/create-auth.dto';\nimport { UserRole } from '../enum/user-role.enum';\n\nexport class CreateUserDto extends PickType(CreateAuthDto, ['password']) {\n  @IsCPF()\n  cpf: string;\n\n  @IsEnrollment()\n  enrollment: string;\n\n  @IsEnum(UserType)\n  type: UserType;\n\n  @IsEnum(UserRole)\n  role: UserRole;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger, Injectable, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class CustomLogger extends Logger {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam.html":{"url":"classes/Exam.html","title":"class - Exam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                groups\n                            \n                            \n                                period\n                            \n                            \n                                startedAt\n                            \n                            \n                                status\n                            \n                            \n                                text\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groups\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QuestionGroup[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamStatus})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/exam/entities/exam.entity.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Period } from 'src/auxiliary/entities/period.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { AfterLoad, Column, Entity, ManyToOne, OneToMany } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { ExamStatus } from '../enums/exam-status.enum';\n\n@Entity('exam')\nexport class Exam extends FFEntity {\n  @Column({ type: 'text' })\n  text: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'datetime' })\n  startedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @Column({ type: 'bool', default: false })\n  allowAnonymous: boolean;\n\n  @Column({ type: 'enum', enum: ExamStatus })\n  status: ExamStatus;\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => QuestionGroup, (group) => group.exam)\n  groups: QuestionGroup[];\n\n  @AfterLoad()\n  sortItems() {\n    this.groups = this.groups?.sort((a, b) => a.position - b.position) ?? [];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam1620478273991.html":{"url":"classes/Exam1620478273991.html","title":"class - Exam1620478273991","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam1620478273991\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620478273991-Exam.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam1620478273991'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620478273991-Exam.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Exam1620478273991 implements MigrationInterface {\n    name = 'Exam1620478273991'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL DEFAULT 0\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreement.html":{"url":"classes/ExamAgreement.html","title":"class - ExamAgreement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/agreement.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anonymous\n                            \n                            \n                                userId\n                            \n                            \n                                uuid\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasFinishedExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'boolean'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/agreement.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/agreement.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uuid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'uuid', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/agreement.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasFinishedExam\n                        \n                        \n                    \n                \n            \n            \n                \nhasFinishedExam()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/entities/agreement.entity.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity } from 'typeorm';\n\n@Entity('exam_agreement')\nexport class ExamAgreement extends FFEntity {\n  @Column({ type: 'uuid', unique: true })\n  uuid: string;\n\n  @Column({ type: 'boolean' })\n  anonymous: boolean;\n\n  @Column({ type: 'int' })\n  userId: number;\n\n  hasFinishedExam(): boolean {\n    return !!this.uuid;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamController.html":{"url":"controllers/ExamController.html","title":"controller - ExamController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/exam.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Exam})\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n} from '@nestjs/common';\nimport { ExamService } from './exam.service';\nimport { CreateExamDto } from './dto/create-exam.dto';\nimport { UpdateExamDto } from './dto/update-exam.dto';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ApiBearerAuth, ApiOkResponse } from '@nestjs/swagger';\nimport { Exam } from './entities/exam.entity';\n\n@Controller('exam')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class ExamController {\n  constructor(private readonly examService: ExamService) {}\n\n  @Post()\n  @ApiOkResponse({ type: Exam })\n  async create(@Body() createExamDto: CreateExamDto): Promise {\n    return await this.examService.create(createExamDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Exam] })\n  async findAll(): Promise {\n    return await this.examService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.examService.findOne(id);\n  }\n\n  @Put(':id')\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateExamDto: UpdateExamDto,\n  ): Promise {\n    return await this.examService.update(id, updateExamDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.examService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExamModule.html":{"url":"modules/ExamModule.html","title":"module - ExamModule","body":"\n                   \n\n\n\n\n    Modules\n    ExamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\n\nExamService \n\nExamService \n\n\n\nExamModule\n\nExamModule\n\nExamService  -->\n\nExamModule->ExamService \n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exam/exam.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExamService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExamController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExamService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { ExamService } from './exam.service';\nimport { ExamController } from './exam.controller';\nimport { ExamRepository } from './repositories/exam.repository';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ExamRepository])],\n  controllers: [ExamController],\n  providers: [ExamService],\n  exports: [ExamService],\n})\nexport class ExamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamRepository.html":{"url":"classes/ExamRepository.html","title":"class - ExamRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Exam } from '../entities/exam.entity';\n\n@EntityRepository(Exam)\nexport class ExamRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamService.html":{"url":"injectables/ExamService.html","title":"injectable - ExamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/exam.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamRepository)\n                    \n                \n                        \n                            \n                                Defined in src/exam/exam.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/exam.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/exam.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/exam.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateExamDto } from './dto/create-exam.dto';\nimport { UpdateExamDto } from './dto/update-exam.dto';\nimport { Exam } from './entities/exam.entity';\nimport { EXAM_NOT_FOUND } from './exam.constants';\nimport { ExamRepository } from './repositories/exam.repository';\n\n@Injectable()\nexport class ExamService {\n  constructor(\n    @InjectRepository(ExamRepository)\n    private readonly repository: ExamRepository,\n  ) {}\n\n  @Transactional()\n  create(createExamDto: CreateExamDto): Promise {\n    const exam = this.repository.create(createExamDto);\n\n    return this.repository.save(exam);\n  }\n\n  findAll() {\n    return this.repository.find({ relations: ['groups'] });\n  }\n\n  async findOne(id: number) {\n    const exam = await this.repository.findOne(id);\n    if (!exam) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n\n    return exam;\n  }\n\n  @Transactional()\n  async update(id: number, updateExamDto: UpdateExamDto) {\n    let exam = await this.findOne(id);\n\n    exam = this.repository.merge(exam, updateExamDto);\n\n    return this.repository.save(exam);\n  }\n\n  @Transactional()\n  async remove(id: number) {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FFEntity.html":{"url":"classes/FFEntity.html","title":"class - FFEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FFEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/ff.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        TimestampEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/ff.entity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PrimaryGeneratedColumn } from 'typeorm';\nimport { TimestampEntity } from './timestamp.entity';\n\nexport class FFEntity extends TimestampEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileSendDto.html":{"url":"interfaces/FileSendDto.html","title":"interface - FileSendDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileSendDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/dtos/file-send.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        buffer\n                                \n                                \n                                        encoding\n                                \n                                \n                                        mimetype\n                                \n                                \n                                        originalname\n                                \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalname\n                                    \n                                \n                                \n                                    \n                                        originalname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FileSendDto {\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n  buffer: Buffer;\n  size: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAdmin.html":{"url":"injectables/FirebaseAdmin.html","title":"injectable - FirebaseAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                app\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                auth\n                            \n                            \n                                database\n                            \n                            \n                                delete\n                            \n                            \n                                firestore\n                            \n                            \n                                instanceId\n                            \n                            \n                                machineLearning\n                            \n                            \n                                messaging\n                            \n                            \n                                projectManagement\n                            \n                            \n                                remoteConfig\n                            \n                            \n                                securityRules\n                            \n                            \n                                storage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    options\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: FirebaseModuleOptions)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        FirebaseModuleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            auth\n                        \n                        \n                    \n                \n            \n            \n                \nauth()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         firebase.auth.Auth\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            database\n                        \n                        \n                    \n                \n            \n            \n                \ndatabase(url?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     firebase.database.Database\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            firestore\n                        \n                        \n                    \n                \n            \n            \n                \nfirestore()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.firestore.Firestore\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            instanceId\n                        \n                        \n                    \n                \n            \n            \n                \ninstanceId()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.instanceId.InstanceId\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            machineLearning\n                        \n                        \n                    \n                \n            \n            \n                \nmachineLearning()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.machineLearning.MachineLearning\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            messaging\n                        \n                        \n                    \n                \n            \n            \n                \nmessaging()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.messaging.Messaging\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            projectManagement\n                        \n                        \n                    \n                \n            \n            \n                \nprojectManagement()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.projectManagement.ProjectManagement\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remoteConfig\n                        \n                        \n                    \n                \n            \n            \n                \nremoteConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.remoteConfig.RemoteConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            securityRules\n                        \n                        \n                    \n                \n            \n            \n                \nsecurityRules()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.securityRules.SecurityRules\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            storage\n                        \n                        \n                    \n                \n            \n            \n                \nstorage()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.storage.Storage\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.app.App\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:18\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FIREBASE_OPTIONS } from '../firebase-admin.constants';\nimport { FirebaseModuleOptions } from '../../interfaces';\n\n@Injectable()\nexport class FirebaseAdmin implements firebase.app.App {\n  private readonly app: firebase.app.App;\n\n  constructor(@Inject(FIREBASE_OPTIONS) options: FirebaseModuleOptions) {\n    this.app = firebase.initializeApp({\n      databaseURL: options.databaseURL,\n      storageBucket: options.storageBucket,\n      credential: firebase.credential.cert(options.cert),\n    });\n  }\n\n  get name(): string {\n    return this.app.name;\n  }\n\n  get options(): firebase.AppOptions {\n    return this.app.options;\n  }\n\n  auth(): firebase.auth.Auth {\n    return this.app.auth();\n  }\n\n  database(url?: string): firebase.database.Database {\n    return this.app.database(url);\n  }\n\n  firestore(): firebase.firestore.Firestore {\n    return this.app.firestore();\n  }\n\n  instanceId(): firebase.instanceId.InstanceId {\n    return this.app.instanceId();\n  }\n\n  machineLearning(): firebase.machineLearning.MachineLearning {\n    return this.app.machineLearning();\n  }\n\n  messaging(): firebase.messaging.Messaging {\n    return this.app.messaging();\n  }\n\n  projectManagement(): firebase.projectManagement.ProjectManagement {\n    return this.app.projectManagement();\n  }\n\n  remoteConfig(): firebase.remoteConfig.RemoteConfig {\n    return this.app.remoteConfig();\n  }\n\n  securityRules(): firebase.securityRules.SecurityRules {\n    return this.app.securityRules();\n  }\n\n  storage(): firebase.storage.Storage {\n    return this.app.storage();\n  }\n\n  delete(): Promise {\n    return this.app.delete();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseAdminModule.html":{"url":"modules/FirebaseAdminModule.html","title":"module - FirebaseAdminModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseAdminModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase-admin/firebase-admin.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from '../interfaces';\nimport { FirebaseAdmin } from './providers/firebase-admin.provider';\nimport { FIREBASE_OPTIONS } from './firebase-admin.constants';\n\n@Module({})\nexport class FirebaseAdminModule {\n  private static readonly exports = [FirebaseAdmin];\n  private static readonly providers: Provider[] = [FirebaseAdmin];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useValue: options,\n        },\n        ...this.providers,\n      ],\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      imports: options.imports ?? [],\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useFactory: options.useFactory,\n          inject: options.inject ?? [],\n        },\n        ...this.providers,\n      ],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAsyncModuleOptions.html":{"url":"interfaces/FirebaseAsyncModuleOptions.html","title":"interface - FirebaseAsyncModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAsyncModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        inject\n                                \n                                \n                                        useFactory\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAuthDecodedToken.html":{"url":"interfaces/FirebaseAuthDecodedToken.html","title":"interface - FirebaseAuthDecodedToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAuthDecodedToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        emailVerified\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailVerified\n                                    \n                                \n                                \n                                    \n                                        emailVerified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FirebaseAuthDecodedToken {\n  emailVerified?: boolean;\n  email?: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAuthService.html":{"url":"injectables/FirebaseAuthService.html","title":"injectable - FirebaseAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firebaseAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                deleteUser\n                            \n                            \n                                getUser\n                            \n                            \n                                updateUser\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createDto: firebase.auth.CreateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            firebase.auth.CreateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \nupdateUser(uid: string, updateDto: firebase.auth.UpdateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            firebase.auth.UpdateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firebaseAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         firebase.auth.Auth\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\n\nimport { FirebaseAuthDecodedToken } from '../interfaces/firebase-auth-decoded-token.interface';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseAuthService {\n  private readonly firebaseAuth: firebase.auth.Auth;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firebaseAuth = firebaseAdmin.auth();\n  }\n\n  async verifyToken(token: string): Promise {\n    try {\n      const decoded = await this.firebaseAuth.verifyIdToken(token);\n      return {\n        uid: decoded.uid,\n        email: decoded.email,\n        emailVerified: decoded.email_verified,\n      };\n    } catch (err) {\n      return null;\n    }\n  }\n\n  getUser(uid: string): Promise {\n    return this.firebaseAuth.getUser(uid);\n  }\n\n  createUser(\n    createDto: firebase.auth.CreateRequest,\n  ): Promise {\n    return this.firebaseAuth.createUser(createDto);\n  }\n\n  updateUser(\n    uid: string,\n    updateDto: firebase.auth.UpdateRequest,\n  ): Promise {\n    return this.firebaseAuth.updateUser(uid, updateDto);\n  }\n\n  deleteUser(uid: string): Promise {\n    return this.firebaseAuth.deleteUser(uid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseCloudMessagingService.html":{"url":"injectables/FirebaseCloudMessagingService.html","title":"injectable - FirebaseCloudMessagingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseCloudMessagingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-cloud-messaging.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                fcm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendToDevice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendToDevice\n                        \n                        \n                    \n                \n            \n            \n                \nsendToDevice(token: string, message: firebase.messaging.MessagingPayload, options?: firebase.messaging.MessagingOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            firebase.messaging.MessagingPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            firebase.messaging.MessagingOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            fcm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.messaging.Messaging\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseCloudMessagingService {\n  private readonly fcm: firebase.messaging.Messaging;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.fcm = firebaseAdmin.messaging();\n  }\n\n  sendToDevice(\n    token: string,\n    message: firebase.messaging.MessagingPayload,\n    options?: firebase.messaging.MessagingOptions,\n  ): Promise {\n    return this.fcm.sendToDevice(token, message, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseFirestoreService.html":{"url":"injectables/FirebaseFirestoreService.html","title":"injectable - FirebaseFirestoreService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseFirestoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-firestore.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firestore\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collection: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-firestore.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FirebaseFirestoreCollection\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firestore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.firestore.Firestore\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\nimport { FirebaseFirestoreCollection } from '../types/firebase-firestore-collection.type';\n\n@Injectable()\nexport class FirebaseFirestoreService {\n  private readonly firestore: firebase.firestore.Firestore;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firestore = firebaseAdmin.firestore();\n  }\n\n  getCollection(collection: string): FirebaseFirestoreCollection {\n    return this.firestore.collection(collection);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseModule.html":{"url":"modules/FirebaseModule.html","title":"module - FirebaseModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_FirebaseModule_exports\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module, Provider } from '@nestjs/common';\n\nimport { FirebaseAuthService } from './services/firebase-auth.service';\nimport { FirebaseCloudMessagingService } from './services/firebase-cloud-messaging.service';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from './interfaces/firebase-async-module-options.interface';\nimport { FirebaseAdminModule } from './firebase-admin/firebase-admin.module';\nimport { FirebaseStorageService, FirebaseFirestoreService } from './services';\n\n@Module({\n  providers: [FirebaseAuthService, FirebaseCloudMessagingService],\n  exports: [FirebaseAuthService, FirebaseCloudMessagingService],\n})\nexport class FirebaseModule {\n  private static readonly providers: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  private static readonly exports: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRoot(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRootAsync(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseModuleOptions.html":{"url":"interfaces/FirebaseModuleOptions.html","title":"interface - FirebaseModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cert\n                                \n                                \n                                            Optional\n                                        databaseURL\n                                \n                                \n                                            Optional\n                                        storageBucket\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cert\n                                    \n                                \n                                \n                                    \n                                        cert:     firebase.ServiceAccount\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     firebase.ServiceAccount\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        databaseURL\n                                    \n                                \n                                \n                                    \n                                        databaseURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storageBucket\n                                    \n                                \n                                \n                                    \n                                        storageBucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseStorageService.html":{"url":"injectables/FirebaseStorageService.html","title":"injectable - FirebaseStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-storage.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                storage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-storage.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(path: string, data: Buffer, contentType: string, publicFile, bucket?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-storage.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    contentType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    publicFile\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    bucket\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            storage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.storage.Storage\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-storage.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { Injectable } from '@nestjs/common';\n\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseStorageService {\n  private readonly storage: firebase.storage.Storage;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.storage = firebaseAdmin.storage();\n  }\n\n  async upload(\n    path: string,\n    data: Buffer,\n    contentType: string,\n    publicFile = false,\n    bucket?: string,\n  ): Promise {\n    const file = this.storage.bucket(bucket).file(path);\n    await file.save(data, {\n      gzip: true,\n      contentType,\n      public: publicFile,\n      metadata: {\n        cacheControl: 'public, max-age=31536000',\n      },\n    });\n    return file.publicUrl();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseUploader.html":{"url":"injectables/FirebaseUploader.html","title":"injectable - FirebaseUploader","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseUploader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/firebase-uploader.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: FirebaseStorageService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/services/firebase-uploader.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        FirebaseStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/firebase-uploader.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { randomBytes } from 'crypto';\nimport { FirebaseStorageService } from 'src/firebase';\nimport { FileSendDto } from '../dtos/file-send.dto';\nimport { UploaderService } from './uploader.service';\n\n@Injectable()\nexport class FirebaseUploader implements UploaderService {\n  constructor(private readonly storageService: FirebaseStorageService) {}\n\n  async upload(fileDto: FileSendDto, path = ''): Promise {\n    return await this.storageService.upload(\n      `${path}/${randomBytes(32).toString('hex')}`,\n      fileDto.buffer,\n      fileDto.mimetype,\n      true,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grade.html":{"url":"classes/Grade.html","title":"class - Grade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                period\n                            \n                            \n                                subject\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AnswerGrade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnswerGrade } from 'src/answer/entities/answer-grade.entity';\nimport { Entity, ManyToOne, OneToMany } from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Period } from './period.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('grade')\nexport class Grade extends FFEntity {\n  @ManyToOne(() => Subject)\n  subject: Subject;\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => AnswerGrade, (answer) => answer.grade)\n  answers: AnswerGrade[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InfraModule.html":{"url":"modules/InfraModule.html","title":"module - InfraModule","body":"\n                   \n\n\n\n\n    Modules\n    InfraModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_exports\n\n\n\ncluster_InfraModule_imports\n\n\n\n\nFirebaseModule\n\nFirebaseModule\n\n\n\nInfraModule\n\nInfraModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/infra.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UploadController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FirebaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UploaderService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { FirebaseModule } from 'src/firebase';\nimport { UploadController } from './controllers/upload.controller';\nimport { FirebaseUploader } from './services/firebase-uploader.service';\nimport { UploaderService } from './services/uploader.service';\n\n@Module({\n  imports: [\n    FirebaseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get('firebase')!,\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [{ provide: UploaderService, useClass: FirebaseUploader }],\n  controllers: [UploadController],\n  exports: [UploaderService],\n})\nexport class InfraModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        type\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  type: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userService: UserService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModuleOptions } from '@nestjs/jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { jwtConfigKey } from '../../config';\n\nimport { UserService } from '../../user/user.service';\nimport { AuthService } from '../auth.service';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n    configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get(jwtConfigKey)!.secret,\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const auth = await this.authService.findAuth({ login: payload.uid });\n    if (!auth) {\n      throw new UnauthorizedException();\n    }\n\n    const user = await this.userService.findSpecializedUser({\n      enrollment: payload.uid,\n    });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CustomLogger } from './logger.service';\n\n@Module({\n  providers: [CustomLogger],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/login.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        AuthDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/login.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { PASSWORD_MAX, PASSWORD_MIN } from '../auth.constants';\nimport { AuthDto } from './auth.dto';\n\nexport class LoginDto extends AuthDto {\n  @IsString()\n  @Length(PASSWORD_MIN, PASSWORD_MAX)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PayloadInterceptor.html":{"url":"injectables/PayloadInterceptor.html","title":"injectable - PayloadInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PayloadInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/payload.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/payload.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class PayloadInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Period.html":{"url":"classes/Period.html","title":"class - Period","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Period\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/period.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                endedAt\n                            \n                            \n                                exams\n                            \n                            \n                                grades\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                statedAt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exams\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport { Column, Entity, OneToMany } from 'typeorm';\nimport { Grade } from './grade.entity';\n\n@Entity('period')\nexport class Period extends FFEntity {\n  @Column({ type: 'varchar', nullable: true })\n  name?: string;\n\n  @Column({ type: 'datetime' })\n  statedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @OneToMany(() => Grade, (grade) => grade.period)\n  grades: Grade[];\n\n  @OneToMany(() => Exam, (exam) => exam.period)\n  exams: Exam[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Professor.html":{"url":"classes/Professor.html","title":"class - Professor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Professor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/professor.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:18\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:15\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChildEntity } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\n\n@ChildEntity()\nexport class Professor extends User {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfessorRepository.html":{"url":"classes/ProfessorRepository.html","title":"class - ProfessorRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfessorRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/professor.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Professor } from '../entities/professor.entity';\n\n@EntityRepository(Professor)\nexport class ProfessorRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfessorService.html":{"url":"injectables/ProfessorService.html","title":"injectable - ProfessorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfessorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/professor.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ProfessorRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/professor.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ProfessorRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Professor } from '../entities/professor.entity';\nimport { ProfessorRepository } from '../repositories/professor.repository';\n\n@Injectable()\nexport class ProfessorService {\n  constructor(\n    @InjectRepository(ProfessorRepository)\n    private readonly repository: ProfessorRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const professor = this.repository.create(createDto);\n\n    return this.repository.save(professor);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/question/entities/question.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                group\n                            \n                            \n                                    Optional\n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                position\n                            \n                            \n                                required\n                            \n                            \n                                statement\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuestionGroup\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/entities/question.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/entities/question.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/entities/question.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/entities/question.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/entities/question.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/entities/question.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/entities/question.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { Column, Entity, ManyToOne } from 'typeorm';\n\n@Entity()\nexport class Question extends FFEntity {\n  @Column({ type: 'text' })\n  statement: string;\n\n  @Column({ type: 'text', nullable: true })\n  imageUrl?: string;\n\n  @Column({ type: 'varchar', nullable: true })\n  imageAlt?: string;\n\n  @Column({ type: 'bool', default: true })\n  required: boolean;\n\n  @Column({ type: 'int', nullable: true })\n  groupId?: number;\n\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @ManyToOne(() => QuestionGroup)\n  group: QuestionGroup;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createQuestion\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Question})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(findDto: QuestionFindDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuesitonDto: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuesitonDto\n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiNotFoundResponse, ApiOkResponse } from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { CreateQuestionDto } from '../question/dtos/create-question.dto';\nimport { QuestionFindDto } from '../question/dtos/question-find.dto';\nimport { ReorderQuestionDto } from '../question/dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from '../question/dtos/update-question.dto';\nimport { Question } from '../question/entities/question.entity';\nimport { QuestionService } from '../question/question.service';\nimport { QuestionGroupService } from '../services/question-group.service';\n\n@Controller('question')\n@UseGuards(JwtGuard)\nexport class QuestionController {\n  constructor(\n    private readonly questionService: QuestionService,\n    private readonly questionGroupService: QuestionGroupService,\n  ) {}\n\n  @Post()\n  @ApiOkResponse({ type: Question })\n  async createQuestion(\n    @Body() createQuestionDto: CreateQuestionDto,\n  ): Promise {\n    if (createQuestionDto.groupId) {\n      await this.questionGroupService.findOne(createQuestionDto.groupId);\n    }\n    return await this.questionService.createQuestion(createQuestionDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Question] })\n  async find(@Query() findDto: QuestionFindDto) {\n    return await this.questionService.find(findDto);\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.questionService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionDto: UpdateQuestionDto,\n  ): Promise {\n    if (updateQuestionDto.groupId) {\n      await this.questionGroupService.findOne(updateQuestionDto.groupId);\n    }\n\n    return await this.questionService.update(id, updateQuestionDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({ type: [Question] })\n  async reorder(\n    @Body() reorderQuesitonDto: ReorderQuestionDto,\n  ): Promise {\n    return await this.questionService.reorder(reorderQuesitonDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.questionService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionFindDto.html":{"url":"classes/QuestionFindDto.html","title":"class - QuestionFindDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionFindDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/question/dtos/question-find.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/dtos/question-find.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class QuestionFindDto {\n  @IsPositive()\n  @IsOptional()\n  groupId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup.html":{"url":"classes/QuestionGroup.html","title":"class - QuestionGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question-group.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                personal\n                            \n                            \n                                position\n                            \n                            \n                                questions\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/question-group/entities/question-group.entity.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport { AfterLoad, Column, Entity, ManyToOne, OneToMany } from 'typeorm';\nimport { Question } from '../question/entities/question.entity';\n\n@Entity()\nexport class QuestionGroup extends FFEntity {\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @Column({ type: 'bool', default: false })\n  class: boolean;\n\n  @Column({ type: 'bool', default: false })\n  personal: boolean;\n\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @Column({ type: 'int', nullable: true })\n  examId: number;\n\n  @OneToMany(() => Question, (question) => question.group)\n  questions: Question[];\n\n  @ManyToOne(() => Exam)\n  exam: Exam;\n\n  @AfterLoad()\n  sortItems() {\n    this.questions =\n      this.questions?.sort((a, b) => a.position - b.position) ?? [];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup1620179231630.html":{"url":"classes/QuestionGroup1620179231630.html","title":"class - QuestionGroup1620179231630","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup1620179231630\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620179231630-QuestionGroup.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup1620179231630'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionGroup1620179231630 implements MigrationInterface {\n    name = 'QuestionGroup1620179231630'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `question` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `statement` text NOT NULL, `image_url` text NOT NULL, `image_alt` varchar(255) NOT NULL DEFAULT '', `required` tinyint NOT NULL DEFAULT 1, `group_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `question_group` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"DROP TABLE `question_group`\");\n        await queryRunner.query(\"DROP TABLE `question`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionGroupController.html":{"url":"controllers/QuestionGroupController.html","title":"controller - QuestionGroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionGroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question-group.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question-group\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: QuestionGroup})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuestionGroupDto: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuestionGroupDto\n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n  Patch,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n} from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { QuestionGroupService } from '../services/question-group.service';\nimport { CreateQuestionGroupDto } from '../dto/create-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dto/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CopyQuestionGroupDto } from '../dto/copy-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dto/reorder-question-group.dto';\n\n@Controller('question-group')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class QuestionGroupController {\n  constructor(private readonly questionGroupService: QuestionGroupService) {}\n\n  @Post()\n  @ApiOkResponse({ type: QuestionGroup })\n  async create(\n    @Body() createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    return await this.questionGroupService.create(createQuestionGroupDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async findAll(): Promise {\n    return await this.questionGroupService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.questionGroupService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    return await this.questionGroupService.update(id, updateQuestionGroupDto);\n  }\n\n  @Put()\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async copy(\n    @Body() copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    return await this.questionGroupService.copy(copyQuestionGroupDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({type: [QuestionGroup]})\n  async reorder(@Body() reorderQuestionGroupDto: ReorderQuestionGroupDto ): Promise {\n    return await this.questionGroupService.reorder(reorderQuestionGroupDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.questionGroupService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionGroupModule.html":{"url":"modules/QuestionGroupModule.html","title":"module - QuestionGroupModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionGroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\ncluster_QuestionGroupModule_imports\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\nQuestionGroupModule -->\n\nQuestionModule->QuestionGroupModule\n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question-group/question-group.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestionGroupService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionGroupController\n                        \n                        \n                            QuestionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ExamModule\n                        \n                        \n                            QuestionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuestionGroupService } from './services/question-group.service';\nimport { QuestionGroupController } from './controllers/question-group.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QuestionGroupRepository } from './repositories/question-group.repository';\nimport { QuestionModule } from './question/question.module';\nimport { QuestionController } from './controllers/question.controller';\nimport { ExamModule } from '../exam/exam.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([QuestionGroupRepository]),\n    QuestionModule,\n    ExamModule,\n  ],\n  controllers: [QuestionGroupController, QuestionController],\n  providers: [QuestionGroupService],\n})\nexport class QuestionGroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupRepository.html":{"url":"classes/QuestionGroupRepository.html","title":"class - QuestionGroupRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/repositories/question-group.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from \"typeorm\";\nimport { BaseRepository } from \"typeorm-transactional-cls-hooked\";\nimport { QuestionGroup } from \"../entities/question-group.entity\";\n\n@EntityRepository(QuestionGroup)\nexport class QuestionGroupRepository extends BaseRepository {}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionGroupService.html":{"url":"injectables/QuestionGroupService.html","title":"injectable - QuestionGroupService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionGroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/services/question-group.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionGroupRepository, examService: ExamService, questionService: QuestionService)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/services/question-group.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionGroupRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examService\n                                                  \n                                                        \n                                                                        ExamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { group } from 'node:console';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { ExamService } from 'src/exam/exam.service';\nimport { In } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CopyQuestionGroupDto } from '../dto/copy-question-group.dto';\nimport { CreateQuestionGroupDto } from '../dto/create-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dto/reorder-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dto/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { questionGroupNotFound } from '../question-group.constants';\nimport { Question } from '../question/entities/question.entity';\nimport { QuestionService } from '../question/question.service';\nimport { QuestionGroupRepository } from '../repositories/question-group.repository';\n\n@Injectable()\nexport class QuestionGroupService {\n  constructor(\n    @InjectRepository(QuestionGroupRepository)\n    private readonly repository: QuestionGroupRepository,\n    private readonly examService: ExamService,\n    private readonly questionService: QuestionService,\n  ) {}\n\n  @Transactional()\n  async create(\n    createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    const questionGroup = this.repository.create(createQuestionGroupDto);\n    if (createQuestionGroupDto.examId) {\n      questionGroup.exam = await this.examService.findOne(\n        createQuestionGroupDto.examId,\n      );\n    }\n    return this.repository.save(questionGroup);\n  }\n\n  findAll(): Promise {\n    return this.repository.find({ relations: ['questions'] });\n  }\n\n  async findOne(id: number): Promise {\n    const questionGroup = await this.repository.findOne({\n      where: { id },\n      relations: ['questions'],\n    });\n\n    if (!questionGroup) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n\n    return questionGroup;\n  }\n\n  @Transactional()\n  async update(\n    id: number,\n    updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    let questionGroup = await this.findOne(id);\n\n    questionGroup = this.repository.merge(\n      questionGroup,\n      updateQuestionGroupDto,\n    );\n\n    if (updateQuestionGroupDto.examId) {\n      questionGroup.exam = await this.examService.findOne(\n        updateQuestionGroupDto.examId,\n      );\n    }\n\n    return this.repository.save(questionGroup);\n  }\n\n  @Transactional()\n  async copy(\n    copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    const toCopy = await this.findOne(copyQuestionGroupDto.groupId);\n    const exam = await this.examService.findOne(copyQuestionGroupDto.examId);\n\n    const group = await this.repository.save(\n      this.repository.create({\n        ...toCopy,\n        questions: [],\n        exam,\n        id: undefined,\n      }),\n    );\n\n    group.questions = await this.questionService.copyToGroup(\n      group,\n      toCopy.questions,\n    );\n\n    return group;\n  }\n\n  @Transactional()\n  async reorder({\n    examId,\n    groupIds,\n  }: ReorderQuestionGroupDto): Promise {\n    const groups = await this.repository.find({\n      where: { examId, id: In(groupIds) },\n    });\n\n    const groupIdPositionMap: ReadonlyMap = new Map(\n      groupIds.map((id, position) => [id, position]),\n    );\n\n    return await this.repository.save(\n      groups.map((group) => {\n        group.position = groupIdPositionMap.get(group.id) ?? 0;\n        return group;\n      }),\n    );\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionImage1620477869366.html":{"url":"classes/QuestionImage1620477869366.html","title":"class - QuestionImage1620477869366","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionImage1620477869366\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477869366-QuestionImage.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionImage1620477869366'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionImage1620477869366 implements MigrationInterface {\n    name = 'QuestionImage1620477869366'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NOT NULL DEFAULT ''\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionModule.html":{"url":"modules/QuestionModule.html","title":"module - QuestionModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_exports\n\n\n\ncluster_QuestionModule_providers\n\n\n\n\nQuestionService \n\nQuestionService \n\n\n\nQuestionModule\n\nQuestionModule\n\nQuestionService  -->\n\nQuestionModule->QuestionService \n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question-group/question/question.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QuestionService } from './question.service';\nimport { QuestionRepository } from './repositories/question.repository';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([QuestionRepository])],\n  providers: [QuestionService],\n  exports: [QuestionService],\n})\nexport class QuestionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPosition1620488935141.html":{"url":"classes/QuestionPosition1620488935141.html","title":"class - QuestionPosition1620488935141","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPosition1620488935141\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620488935141-QuestionPosition.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionPosition1620488935141'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionPosition1620488935141 implements MigrationInterface {\n    name = 'QuestionPosition1620488935141'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` ADD `position` int NOT NULL DEFAULT '0'\");\n        await queryRunner.query(\"ALTER TABLE `question_group` ADD `position` int NOT NULL DEFAULT '0'\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question_group` DROP COLUMN `position`\");\n        await queryRunner.query(\"ALTER TABLE `question` DROP COLUMN `position`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionRepository.html":{"url":"classes/QuestionRepository.html","title":"class - QuestionRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/question/repositories/question.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Question } from '../entities/question.entity';\n\n@EntityRepository(Question)\nexport class QuestionRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/question/question.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copyToGroup\n                            \n                            \n                                createQuestion\n                            \n                            \n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionRepository)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/question/question.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copyToGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copyToGroup(group: QuestionGroup, questions: Question[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/question/question.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                QuestionGroup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questions\n                                    \n                                                Question[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \ncreateQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/question/question.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(findDto: QuestionFindDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/question/question.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/question/question.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/question/question.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/question/question.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/question/question.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { In } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CreateQuestionDto } from './dtos/create-question.dto';\nimport { QuestionFindDto } from './dtos/question-find.dto';\nimport { ReorderQuestionDto } from './dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from './dtos/update-question.dto';\nimport { Question } from './entities/question.entity';\nimport { questionNotFound } from './question.constants';\nimport { QuestionRepository } from './repositories/question.repository';\n\n@Injectable()\nexport class QuestionService {\n  constructor(\n    @InjectRepository(QuestionRepository)\n    private readonly repository: QuestionRepository,\n  ) {}\n\n  @Transactional()\n  createQuestion(createQuestionDto: CreateQuestionDto): Promise {\n    const question = this.repository.create(createQuestionDto);\n\n    return this.repository.save(question);\n  }\n\n  find(findDto: QuestionFindDto): Promise {\n    return this.repository.find({\n      where: (qb) => {\n        if (findDto.groupId) {\n          qb.where(`${qb.alias}.groupId = :groupId`, findDto);\n        }\n        return qb;\n      },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const question = await this.repository.findOne({ id });\n    if (!question) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n\n    return question;\n  }\n\n  @Transactional()\n  async update(id: number, updateDto: UpdateQuestionDto): Promise {\n    let question = await this.findOne(id);\n\n    question = this.repository.merge(question, updateDto);\n\n    return this.repository.save(question);\n  }\n\n  @Transactional()\n  async copyToGroup(\n    group: QuestionGroup,\n    questions: Question[],\n  ): Promise {\n    return await this.repository.save(\n      questions.map((question) =>\n        this.repository.create({ ...question, group, id: undefined }),\n      ),\n    );\n  }\n\n  @Transactional()\n  async reorder({\n    groupId,\n    questionIds,\n  }: ReorderQuestionDto): Promise {\n    const questions = await this.repository.find({\n      where: { groupId, id: In(questionIds) },\n    });\n\n    const questionPositionMap: ReadonlyMap = new Map(\n      questionIds.map((id, position) => [id, position]),\n    );\n\n    return await this.repository.save(\n      questions.map((question) => {\n        question.position = questionPositionMap.get(question.id) ?? 0;\n        return question;\n      }),\n    );\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete({ id });\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionDto.html":{"url":"classes/ReorderQuestionDto.html","title":"class - ReorderQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/question/dtos/reorder-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupId\n                            \n                            \n                                questionIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/dtos/reorder-question.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/question/dtos/reorder-question.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from \"class-validator\";\n\nexport class ReorderQuestionDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsArray()\n  @IsPositive({each: true})\n  questionIds: number[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionGroupDto.html":{"url":"classes/ReorderQuestionGroupDto.html","title":"class - ReorderQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dto/reorder-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dto/reorder-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dto/reorder-question-group.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from 'class-validator';\n\nexport class ReorderQuestionGroupDto {\n  @IsPositive()\n  examId: number;\n\n  @IsArray()\n  @IsPositive({ each: true })\n  groupIds: number[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SoftDeleteResult.html":{"url":"interfaces/SoftDeleteResult.html","title":"interface - SoftDeleteResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SoftDeleteResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/soft-delete-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        raw\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        raw\n                                    \n                                \n                                \n                                    \n                                        raw:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SoftDeleteResult {\n  raw: {\n    affectedRows: number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Student.html":{"url":"classes/Student.html","title":"class - Student","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Student\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/student.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:18\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:15\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChildEntity } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\n\n@ChildEntity()\nexport class Student extends User {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StudentRepository.html":{"url":"classes/StudentRepository.html","title":"class - StudentRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StudentRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/student.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Student } from '../entities/student.entity';\n\n@EntityRepository(Student)\nexport class StudentRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StudentService.html":{"url":"injectables/StudentService.html","title":"injectable - StudentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StudentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/student.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: StudentRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/student.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        StudentRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Student } from '../entities/student.entity';\nimport { StudentRepository } from '../repositories/student.repository';\n\n@Injectable()\nexport class StudentService {\n  constructor(\n    @InjectRepository(StudentRepository)\n    private readonly repository: StudentRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const student = this.repository.create(createDto);\n\n    return this.repository.save(student);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Subject.html":{"url":"classes/Subject.html","title":"class - Subject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/subject.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                codeId\n                            \n                            \n                                course\n                            \n                            \n                                grades\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            codeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Course\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, OneToMany } from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Course } from './course.entity';\nimport { Grade } from './grade.entity';\n\n@Entity('subject')\nexport class Subject extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @Column({ type: 'int' })\n  codeId: number;\n\n  @ManyToOne(() => Course)\n  course: Course;\n\n  @OneToMany(() => Grade, (grade) => grade.subject)\n  grades: Grade[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerOptions.html":{"url":"interfaces/SwaggerOptions.html","title":"interface - SwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/interfaces/swagger.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        title\n                                \n                                \n                                        users\n                                \n                                \n                                        version\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        users\n                                    \n                                \n                                \n                                    \n                                        users:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerOptions {\n  title: string;\n  description: string;\n  version: string;\n  users: Record;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimestampEntity.html":{"url":"classes/TimestampEntity.html","title":"class - TimestampEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimestampEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/timestamp.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport class TimestampEntity extends BaseEntity {\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnswerDto.html":{"url":"classes/UpdateAnswerDto.html","title":"class - UpdateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/update-answer.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnswerDto } from './create-answer.dto';\n\nexport class UpdateAnswerDto extends PartialType(CreateAnswerDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamDto.html":{"url":"classes/UpdateExamDto.html","title":"class - UpdateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dto/update-exam.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateExamDto } from './create-exam.dto';\n\nexport class UpdateExamDto extends PartialType(CreateExamDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionDto.html":{"url":"classes/UpdateQuestionDto.html","title":"class - UpdateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/question/dtos/update-question.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateQuestionDto } from './create-question.dto';\n\nexport class UpdateQuestionDto extends PartialType(CreateQuestionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionGroupDto.html":{"url":"classes/UpdateQuestionGroupDto.html","title":"class - UpdateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dto/update-question-group.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateQuestionGroupDto } from './create-question-group.dto';\n\nexport class UpdateQuestionGroupDto extends PartialType(CreateQuestionGroupDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadController.html":{"url":"controllers/UploadController.html","title":"controller - UploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/controllers/upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                upload\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/infra/controllers/upload.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBearerAuth } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { UPLOAD_PATH } from '../infra.constants';\nimport { UploaderService } from '../services/uploader.service';\n\n@Controller('upload')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class UploadController {\n  constructor(private readonly service: UploaderService) {}\n\n  @Post()\n  @UseInterceptors(FileInterceptor('file'))\n  async upload(@UploadedFile() file: Express.Multer.File) {\n    return await this.service.upload(file, UPLOAD_PATH);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploaderService.html":{"url":"classes/UploaderService.html","title":"class - UploaderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploaderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/uploader.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/uploader.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileSendDto } from '../dtos/file-send.dto';\n\nexport abstract class UploaderService {\n  abstract upload(fileDto: FileSendDto, path?: string): Promise;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, TableInheritance } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { UserRole } from '../enum/user-role.enum';\nimport { UserType } from '../enum/user-type.enum';\n\n@Entity('user')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: UserType } })\nexport class User extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  enrollment: string;\n\n  @Column({ type: 'varchar', unique: true })\n  cpf: string;\n\n  type: UserType;\n\n  @Column({ type: 'enum', default: UserRole.REGULAR, enum: UserRole })\n  role: UserRole;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\nimport { GetUser } from '../decoratos/get-user.decorator';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../entities/user.entity';\nimport { UserService } from '../user.service';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  createUser(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUser(createUserDto);\n  }\n\n  @Get()\n  @UseGuards(JwtGuard)\n  getUser(@GetUser() user: User) {\n    return user;\n  }\n\n  // @Put()\n  // @UseGuards(JwtGuard)\n  // updateUser() {\n  //   return this.userService.updateUser();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                enrollment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class UserDto {\n  @IsString()\n  @IsNotEmpty()\n  enrollment: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { UserController } from './controllers/user.controller';\nimport { UserRepository } from './repositories/user.repository';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    forwardRef(() => AuthModule),\n    forwardRef(() => AuxiliaryModule),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/repositories/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../entities/user.entity';\n\n@EntityRepository(User)\nexport class UserRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserResult.html":{"url":"interfaces/UserResult.html","title":"interface - UserResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/interfaces/user-specialized-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         UserType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserType } from '../enum/user-type.enum';\n\nexport interface UserResult {\n  readonly type: UserType;\n  readonly id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Private\n                                    Async\n                                createUserByType\n                            \n                            \n                                    Async\n                                findSpecializedUser\n                            \n                            \n                                findUser\n                            \n                            \n                                    Async\n                                mustFindSpecializedUser\n                            \n                            \n                                    Async\n                                mustFindUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, authService: AuthService, studentService: StudentService, professorService: ProfessorService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        studentService\n                                                  \n                                                        \n                                                                        StudentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        professorService\n                                                  \n                                                        \n                                                                        ProfessorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/user/user.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createUserByType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserByType(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findUser\n                        \n                        \n                    \n                \n            \n            \n                \nfindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthService } from 'src/auth/auth.service';\nimport { ProfessorService } from 'src/auxiliary/services/professor.service';\nimport { StudentService } from 'src/auxiliary/services/student.service';\nimport {\n  runOnTransactionComplete,\n  Transactional,\n} from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { UserDto } from './dtos/user.dto';\nimport { User } from './entities/user.entity';\nimport { UserType } from './enum/user-type.enum';\nimport { createUser } from './helpers/create-user.helper';\nimport { UserResult } from './interfaces/user-specialized-result.interface';\nimport { UserRepository } from './repositories/user.repository';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private readonly userRepository: UserRepository,\n    private readonly authService: AuthService,\n    private readonly studentService: StudentService,\n    private readonly professorService: ProfessorService,\n  ) {}\n\n  @Transactional()\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const user = await this.createUserByType(createUserDto);\n    await this.authService.createAuth({\n      login: createUserDto.enrollment,\n      password: createUserDto.password,\n    });\n    runOnTransactionComplete((e) => {\n      e && console.error(e);\n      console.log('create auth transaction completed');\n    });\n    return user;\n  }\n\n  private async createUserByType(createUserDto: CreateUserDto): Promise {\n    switch (createUserDto.type) {\n      case UserType.PROFESSOR:\n        return this.professorService.createStudent(createUserDto);\n      case UserType.STUDENT:\n        return this.studentService.createStudent(createUserDto);\n      default:\n        throw new UnprocessableEntityException();\n    }\n  }\n\n  findUser(userDto: UserDto): Promise {\n    return this.userRepository.findOne({ ...userDto });\n  }\n\n  async mustFindUser(userDto: UserDto): Promise {\n    const user = await this.findUser(userDto);\n    if (!user) {\n      throw new UnauthorizedException(userDto);\n    }\n    return user;\n  }\n\n  async findSpecializedUser(userDto: UserDto): Promise {\n    const partialUser:\n      | UserResult\n      | undefined = await this.userRepository.findOne({\n      select: ['type', 'id'],\n      where: { ...userDto },\n    });\n\n    if (!partialUser) {\n      throw new UnauthorizedException(userDto);\n    }\n\n    let user: User | undefined;\n\n    switch (partialUser.type) {\n      case UserType.PROFESSOR:\n        user = await this.professorService.findOne(userDto);\n        break;\n      case UserType.STUDENT:\n        user = await this.studentService.findOne(userDto);\n        break;\n      default:\n        user = await this.userRepository.findOne({ ...userDto });\n    }\n\n    return user;\n  }\n\n  async mustFindSpecializedUser(userDto: UserDto): Promise {\n    const user = await this.findSpecializedUser(userDto);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/answer/answer.controller.ts\n            \n            controller\n            AnswerController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/answer/answer.service.ts\n            \n            injectable\n            AnswerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/answer/dto/create-answer.dto.ts\n            \n            class\n            CreateAnswerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/dto/update-answer.dto.ts\n            \n            class\n            UpdateAnswerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/entities/answer-grade.entity.ts\n            \n            class\n            AnswerGrade\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/answer/entities/answer.entity.ts\n            \n            class\n            Answer\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer-grade.repository.ts\n            \n            class\n            AnswerGradeRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer.repository.ts\n            \n            class\n            AnswerRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MAX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/casl/factories/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/repositories/auth.repository.ts\n            \n            class\n            AuthRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/course.entity.ts\n            \n            class\n            Course\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/grade.entity.ts\n            \n            class\n            Grade\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/period.entity.ts\n            \n            class\n            Period\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/professor.entity.ts\n            \n            class\n            Professor\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/student.entity.ts\n            \n            class\n            Student\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/subject.entity.ts\n            \n            class\n            Subject\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/professor.repository.ts\n            \n            class\n            ProfessorRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/student.repository.ts\n            \n            class\n            StudentRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/services/professor.service.ts\n            \n            injectable\n            ProfessorService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auxiliary/services/student.service.ts\n            \n            injectable\n            StudentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            function\n            origin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            isProd\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/firebase.config.ts\n            \n            variable\n            firebaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            configs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/interfaces/swagger.interface.ts\n            \n            interface\n            SwaggerOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/core.constants.ts\n            \n            variable\n            enrollmentLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/decorators/is-enrollment.decorator.ts\n            \n            function\n            IsEnrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/entities/ff.entity.ts\n            \n            class\n            FFEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/entities/timestamp.entity.ts\n            \n            class\n            TimestampEntity\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/interceptors/payload.interceptor.ts\n            \n            injectable\n            PayloadInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/soft-delete-result.interface.ts\n            \n            interface\n            SoftDeleteResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/migrations/1619445806509-Auth.ts\n            \n            class\n            Auth1619445806509\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620179231630-QuestionGroup.ts\n            \n            class\n            QuestionGroup1620179231630\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            class\n            AdminUser1620299822480\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            cpf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            enrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477175799-Auxiliary.ts\n            \n            class\n            Auxiliary1620477175799\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477869366-QuestionImage.ts\n            \n            class\n            QuestionImage1620477869366\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620478273991-Exam.ts\n            \n            class\n            Exam1620478273991\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620488935141-QuestionPosition.ts\n            \n            class\n            QuestionPosition1620488935141\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/dto/create-exam.dto.ts\n            \n            class\n            CreateExamDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/exam/dto/update-exam.dto.ts\n            \n            class\n            UpdateExamDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/entities/agreement.entity.ts\n            \n            class\n            ExamAgreement\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/exam/entities/exam.entity.ts\n            \n            class\n            Exam\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/exam/exam.constants.ts\n            \n            variable\n            EXAM_NOT_FOUND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/exam.controller.ts\n            \n            controller\n            ExamController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/exam/exam.service.ts\n            \n            injectable\n            ExamService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam.repository.ts\n            \n            class\n            ExamRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/firebase-admin.constants.ts\n            \n            variable\n            FIREBASE_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n            \n            injectable\n            FirebaseAdmin\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/firebase/firebase.constants.ts\n            \n            variable\n            FIREBASE_ADMIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseAsyncModuleOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseModuleOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n            \n            interface\n            FirebaseAuthDecodedToken\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-auth.service.ts\n            \n            injectable\n            FirebaseAuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-cloud-messaging.service.ts\n            \n            injectable\n            FirebaseCloudMessagingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-firestore.service.ts\n            \n            injectable\n            FirebaseFirestoreService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-storage.service.ts\n            \n            injectable\n            FirebaseStorageService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/controllers/upload.controller.ts\n            \n            controller\n            UploadController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/dtos/file-send.dto.ts\n            \n            interface\n            FileSendDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infra/infra.constants.ts\n            \n            variable\n            UPLOAD_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/services/firebase-uploader.service.ts\n            \n            injectable\n            FirebaseUploader\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/services/uploader.service.ts\n            \n            class\n            UploaderService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyGlobals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyPerfLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applySecurityLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            buildSwaggerDoc\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            DEFAULT_PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question-group.controller.ts\n            \n            controller\n            QuestionGroupController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/question-group/dto/copy-question-group.dto.ts\n            \n            class\n            CopyQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dto/create-question-group.dto.ts\n            \n            class\n            CreateQuestionGroupDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/question-group/dto/reorder-question-group.dto.ts\n            \n            class\n            ReorderQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dto/update-question-group.dto.ts\n            \n            class\n            UpdateQuestionGroupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/entities/question-group.entity.ts\n            \n            class\n            QuestionGroup\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/question-group/question-group.constants.ts\n            \n            variable\n            questionGroupNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/question/dtos/create-question.dto.ts\n            \n            class\n            CreateQuestionDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/question-group/question/dtos/question-find.dto.ts\n            \n            class\n            QuestionFindDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/question/dtos/reorder-question.dto.ts\n            \n            class\n            ReorderQuestionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/question/dtos/update-question.dto.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/question/entities/question.entity.ts\n            \n            class\n            Question\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/question-group/question/question.constants.ts\n            \n            variable\n            questionNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/question/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/question-group/question/repositories/question.repository.ts\n            \n            class\n            QuestionRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/repositories/question-group.repository.ts\n            \n            class\n            QuestionGroupRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/services/question-group.service.ts\n            \n            injectable\n            QuestionGroupService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/decoratos/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/helpers/create-user.helper.ts\n            \n            function\n            createUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/interfaces/user-specialized-result.interface.ts\n            \n            interface\n            UserResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/repositories/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.2.2\n        \n            @nestjs/common : ^7.6.13\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.13\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.13\n        \n            @nestjs/swagger : ^4.7.15\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            bcryptjs : ^2.4.3\n        \n            brazilian-class-validator : ^0.1.6\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            express-basic-auth : ^1.2.0\n        \n            express-rate-limit : ^5.2.6\n        \n            firebase-admin : ^9.7.0\n        \n            helmet : ^4.4.1\n        \n            morgan : ^1.10.0\n        \n            mysql2 : ^2.2.5\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.31\n        \n            typeorm-naming-strategies : ^2.0.0\n        \n            typeorm-transactional-cls-hooked : ^0.1.20\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnswerType   (src/.../answer-type.enum.ts)\n                        \n                        \n                            CaslAction   (src/.../casl-action.enum.ts)\n                        \n                        \n                            ExamStatus   (src/.../exam-status.enum.ts)\n                        \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserType   (src/.../user-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/answer/enums/answer-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AnswerType\n                    \n                \n                        \n                            \n                                 ANSWER\n                            \n                        \n                        \n                            \n                                Value : Answer\n                            \n                        \n                        \n                            \n                                 ANSWER_GRADE\n                            \n                        \n                        \n                            \n                                Value : AnswerGrade\n                            \n                        \n            \n        \n\n    src/auth/casl/enums/casl-action.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CaslAction\n                    \n                \n                        \n                            \n                                 MANAGE\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 CREATE\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 READ\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 UPDATE\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/user/enum/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 MANAGER\n                            \n                        \n                        \n                            \n                                Value : manager\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 REGULAR\n                            \n                        \n                        \n                            \n                                Value : regular\n                            \n                        \n            \n        \n\n    src/user/enum/user-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserType\n                    \n                \n                        \n                            \n                                 PROFESSOR\n                            \n                        \n                        \n                            \n                                Value : Professor\n                            \n                        \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : Student\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            applyGlobals   (src/.../main.ts)\n                        \n                        \n                            applyPerfLayer   (src/.../main.ts)\n                        \n                        \n                            applySecurityLayer   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            buildSwaggerDoc   (src/.../main.ts)\n                        \n                        \n                            createUser   (src/.../create-user.helper.ts)\n                        \n                        \n                            IsEnrollment   (src/.../is-enrollment.decorator.ts)\n                        \n                        \n                            origin   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            applyGlobals\n                        \n                        \n                    \n                \n            \n            \n                \napplyGlobals(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyPerfLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplyPerfLayer(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applySecurityLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplySecurityLayer(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildSwaggerDoc\n                        \n                        \n                    \n                \n            \n            \n                \nbuildSwaggerDoc(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/user/helpers/create-user.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/decorators/is-enrollment.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            IsEnrollment\n                        \n                        \n                    \n                \n            \n            \n                \nIsEnrollment()\n                \n            \n\n\n\n\n        \n    \n    src/config/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            origin\n                        \n                        \n                    \n                \n            \n            \n                \norigin(origin, callback)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    origin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nFast Form API\nAPI para suprir a lógica de negócio do sistema Fast Form (FF)\nInstalação\nPara rodar a API localmente (em development mode) é necessário esses programas no seu computador:\n\ndocker\ndocker-compose\n\n# fullfil all needed environment variables copying .env.example to .env\n$ cp .env.example .env\n# initialize api service and its dependencies using following command\n$ sudo docker-compose up --build\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnswerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuxiliaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseAdminModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InfraModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionGroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_exports\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_exports\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_imports\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_exports\n\n\n\ncluster_QuestionModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAnswerService\n\nAnswerService\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnswerModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nProfessorService \n\nProfessorService \n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\n\n\nStudentService \n\nStudentService \n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\n\n\nInfraModule\n\nInfraModule\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\nQuestionGroupModule -->\n\nQuestionModule->QuestionGroupModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionModule->QuestionService \n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        14 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    50 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            Callback   (src/.../cors.config.ts)\n                        \n                        \n                            CaslSubjects   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            FirebaseFirestoreCollection   (src/.../firebase-firestore-collection.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/casl/factories/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CaslSubjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    src/config/cors.config.ts\n    \n    \n        \n            \n                \n                    \n                    Callback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/firebase/types/firebase-firestore-collection.type.ts\n    \n    \n        \n            \n                \n                    \n                    FirebaseFirestoreCollection\n                \n            \n            \n                \n                        firebase.firestore.CollectionReference\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configs   (src/.../index.ts)\n                        \n                        \n                            corsConfig   (src/.../cors.config.ts)\n                        \n                        \n                            corsConfigKey   (src/.../cors.config.ts)\n                        \n                        \n                            cpf   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            databaseConfigKey   (src/.../database.config.ts)\n                        \n                        \n                            DEFAULT_PORT   (src/.../main.ts)\n                        \n                        \n                            enrollment   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            enrollmentLength   (src/.../core.constants.ts)\n                        \n                        \n                            EXAM_NOT_FOUND   (src/.../exam.constants.ts)\n                        \n                        \n                            FIREBASE_ADMIN   (src/.../firebase.constants.ts)\n                        \n                        \n                            FIREBASE_OPTIONS   (src/.../firebase-admin.constants.ts)\n                        \n                        \n                            firebaseConfig   (src/.../firebase.config.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            isProd   (src/.../cors.config.ts)\n                        \n                        \n                            jwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            jwtConfigKey   (src/.../jwt.config.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            PASSWORD_MAX   (src/.../auth.constants.ts)\n                        \n                        \n                            PASSWORD_MIN   (src/.../auth.constants.ts)\n                        \n                        \n                            questionGroupNotFound   (src/.../question-group.constants.ts)\n                        \n                        \n                            questionNotFound   (src/.../question.constants.ts)\n                        \n                        \n                            rateLimitConfig   (src/.../rate-limit.config.ts)\n                        \n                        \n                            rateLimitConfigKey   (src/.../rate-limit.config.ts)\n                        \n                        \n                            swaggerConfig   (src/.../swagger.config.ts)\n                        \n                        \n                            swaggerConfigKey   (src/.../swagger.config.ts)\n                        \n                        \n                            UPLOAD_PATH   (src/.../infra.constants.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  swaggerConfig,\n  databaseConfig,\n  rateLimitConfig,\n  corsConfig,\n  jwtConfig,\n  firebaseConfig,\n]\n                        \n                    \n\n\n            \n        \n\n    src/config/cors.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  corsConfigKey,\n  (): CorsOptions => ({\n    origin,\n    optionsSuccessStatus: 200,\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cors'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isProd\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.NODE_ENV === 'production'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            whiteList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp[]\n\n                        \n                    \n                    \n                        \n                            Default value : isProd\n  ? [new RegExp('^https://(.*\\\\.|)constante.app$')]\n  : [\n      new RegExp('^http://localhost:3000$'),\n      new RegExp('^http://localhost:5000$'),\n    ]\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1620299822480-AdminUser.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '29997856155'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '999999'\n                        \n                    \n\n\n            \n        \n\n    src/config/database.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  databaseConfigKey,\n  (): TypeOrmModuleOptions => ({\n    type: 'mysql',\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_DATABASE,\n    port: parseInt(process.env.DB_PORT!),\n    maxQueryExecutionTime: parseInt(process.env.DB_QUERY_TIMEOUT ?? '5000'),\n    entities: [__dirname + '/../**/*.entity.{js,ts}'],\n    migrations: [__dirname + '/../database/migrations/*.{js,ts}'],\n    subscribers: [__dirname + '/../**/*.subscriber.{js,ts}'],\n    synchronize: false,\n    logging:\n      process.env.DB_LOGGING === 'true' ||\n      process.env.NODE_ENV === 'development',\n    cli: {\n      migrationsDir: 'src/database/migrations',\n    },\n    namingStrategy: new SnakeNamingStrategy(),\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'database'\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_PORT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3000\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('bootstrap')\n                        \n                    \n\n\n            \n        \n\n    src/core/core.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            enrollmentLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : [1, 9]\n                        \n                    \n\n\n            \n        \n\n    src/exam/exam.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EXAM_NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam not found'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_ADMIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_ADMIN'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase-admin/firebase-admin.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_OPTIONS'\n                        \n                    \n\n\n            \n        \n\n    src/config/firebase.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            firebaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  'firebase',\n  (): FirebaseModuleOptions => {\n    if (!process.env.FIREBASE_ADMIN) {\n      throw new Error(\n        'Needs FIREBASE_ADMIN env (JSON Service Account as string)',\n      );\n    }\n\n    if (!process.env.FIREBASE_BUCKET) {\n      throw new Error('Needs FIREBASE_BUCKET env var');\n    }\n\n    return {\n      cert: JSON.parse(process.env.FIREBASE_ADMIN),\n      storageBucket: process.env.FIREBASE_BUCKET,\n    };\n    //return JSON.parse(process.env.FIREBASE_ADMIN);\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/user/decoratos/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/config/jwt.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  jwtConfigKey,\n  (): JwtModuleOptions => ({\n    secret: process.env.JWT_SECRET,\n    signOptions: { issuer: 'ff.uneb.br', expiresIn: '10h' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'jwt'\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MAX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 100\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 6\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question-group.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionGroupNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup not found'\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question/question.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Question not found'\n                        \n                    \n\n\n            \n        \n\n    src/config/rate-limit.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(rateLimitConfigKey, () => ({\n  timeWindow: parseInt(process.env.RATE_LIMIT_WINDOW_MS ?? '60000'),\n  max: parseInt(process.env.RATE_LIMIT_MAX ?? '20'),\n}))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'rateLimit'\n                        \n                    \n\n\n            \n        \n\n    src/config/swagger.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  swaggerConfigKey,\n  (): SwaggerOptions => ({\n    title: 'Fast Form',\n    description: 'Fast Form API',\n    version: 'v0.0.1',\n    users: { ff: 'senhaforte' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'swagger'\n                        \n                    \n\n\n            \n        \n\n    src/infra/infra.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UPLOAD_PATH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/questions'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
