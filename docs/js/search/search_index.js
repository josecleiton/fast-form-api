var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUser1620299822480.html",[0,0.241,1,3.821]],["body/classes/AdminUser1620299822480.html",[0,0.222,1,4.951,2,0.608,3,0.059,4,0.059,5,0.052,6,5.726,7,3.52,8,2.259,9,2.984,10,0.234,11,1.105,12,3.457,13,2.119,14,2.642,15,2.58,16,2.58,17,3.772,18,0.566,19,4.307,20,1.207,21,0.007,22,1.067,23,0.393,24,0.84,25,1.086,26,1.683,27,2.58,28,4.307,29,0.156,30,0.844,31,3.287,32,3.833,33,2.752,34,4.954,35,3.833,36,4.661,37,3.833,38,0.059,39,0.004,40,1.63,41,1.005,42,1.676,43,2.765,44,7.602,45,3.101,46,2.463,47,4.307,48,4.307,49,2.338,50,1.835,51,4.307,52,3.52,53,3.833,54,4.307,55,5.199,56,3.287,57,3.929,58,3.52,59,4.951,60,2.926,61,3.288,62,4.361,63,2.696,64,2.416,65,4.307,66,1.752,67,0.004,68,0.003]],["title/classes/Answer.html",[0,0.241,69,2.538]],["body/classes/Answer.html",[0,0.211,2,0.579,3,0.056,4,0.056,5,0.05,10,0.222,18,0.829,21,0.007,22,0.721,23,0.531,24,0.81,29,0.203,30,0.802,38,0.056,39,0.003,40,1.573,41,1.963,67,0.004,68,0.003,69,3.173,70,3.645,71,1.517,72,3.322,73,0.75,74,4.297,75,6.065,76,3.346,77,5.571,78,5.201,79,2.613,80,2.679,81,2.679,82,1.966,83,3.519,84,4.096,85,3.59,86,3.565,87,4.096,88,4.096,89,4.096,90,3.817,91,2.049,92,4.096,93,5.883,94,3.947,95,4.096,96,1.926,97,3.322,98,1.978,99,2.711,100,1.877,101,2.973,102,1.926,103,1.877,104,1.926,105,1.877,106,1.926,107,2.948,108,2.675,109,1.436,110,3.645,111,3.565,112,2.223,113,4.267,114,2.466,115,5.201,116,2.675,117,3.348,118,1.787,119,4.096]],["title/classes/Answer1622421768424.html",[0,0.241,120,3.821]],["body/classes/Answer1622421768424.html",[0,0.209,2,0.571,3,0.055,4,0.055,5,0.049,8,2.16,9,2.882,10,0.367,11,1.057,12,3.386,13,2.075,14,2.527,15,2.467,16,2.467,17,3.717,18,0.632,20,1.154,21,0.006,22,1.377,23,0.439,24,0.803,25,1.038,26,1.636,27,2.467,29,0.104,30,0.792,38,0.055,39,0.003,40,1.559,43,2.827,66,2.753,67,0.004,68,0.003,69,4.807,73,0.743,78,3.086,86,3.411,94,1.953,120,6.04,121,6.576,122,3.599,123,0.806,124,2.151,125,1.54,126,4.044,127,4.044,128,4.044,129,2.765,130,3.928,131,2.765,132,4.628,133,3.901,134,4.628,135,2.765,136,3.387,137,2.765,138,2.765,139,2.641,140,5.792,141,5.792,142,4.42,143,5.792,144,2.765,145,4.864,146,2.765,147,4.899,148,3.674,149,4.074,150,5.792,151,4.899,152,4.074,153,4.044,154,4.723,155,5.792,156,4.044,157,5.792,158,3.599,159,3.561,160,3.961]],["title/controllers/AnswerController.html",[161,1.991,162,3.567]],["body/controllers/AnswerController.html",[0,0.211,3,0.056,4,0.056,5,0.05,10,0.222,11,1.065,13,2.231,18,0.636,20,1.357,21,0.007,22,1.199,23,0.416,24,0.944,25,1.22,26,1.292,29,0.226,38,0.056,39,0.003,40,1.998,41,2.042,42,1.59,46,2.205,66,1.662,67,0.004,68,0.003,69,3.168,82,1.507,161,1.741,162,4.454,163,1.873,164,3.637,165,2.46,166,3.288,167,3.654,168,6.808,169,4.087,170,4.47,171,6.058,172,5.585,173,4.087,174,4.087,175,3.583,176,2.559,177,4.454,178,4.087,179,4.087,180,6.188,181,4.201,182,4.087,183,2.46,184,3.388,185,3.34,186,2.942,187,5.836,188,2.795,189,5.345,190,2.559,191,0.905,192,4.201,193,4.201,194,2.46,195,1.922,196,2.151,197,2.942,198,3.119,199,2.46,200,3.514,201,2.669,202,2.795,203,4.655,204,3.637,205,3.637,206,4.77,207,3.637,208,3.34,209,4.087,210,4.087,211,2.559,212,2.151,213,1.274,214,4.087,215,3.637,216,4.087,217,4.087,218,1.799,219,4.087,220,2.559,221,2.795,222,2.942,223,4.087,224,3.119,225,4.087]],["title/classes/AnswerGrade.html",[0,0.241,139,3.052]],["body/classes/AnswerGrade.html",[0,0.229,2,0.627,3,0.061,4,0.061,5,0.054,10,0.241,18,0.852,21,0.007,23,0.52,24,0.857,29,0.184,30,0.869,38,0.061,39,0.003,40,1.664,41,1.798,67,0.004,68,0.003,69,4.84,71,1.605,72,1.983,73,0.793,74,3.637,75,5.503,76,2.832,77,5.055,78,4.719,79,2.764,80,2.834,81,2.834,82,2.021,83,4.286,85,3.72,86,3.105,90,2.897,91,1.555,93,4.452,94,2.987,96,2.087,97,4.036,98,2.143,99,2.832,100,2.033,101,3.105,102,2.087,103,2.033,104,2.087,105,2.033,106,2.087,113,3.871,139,4.038,226,5.055,227,3.626,228,3.846,229,4.437,230,4.437,231,4.437,232,4.437,233,4.437,234,4.437,235,4.437,236,3.948,237,5.055,238,4.437]],["title/classes/AnswerGradeRepository.html",[0,0.241,239,3.365]],["body/classes/AnswerGradeRepository.html",[0,0.347,2,0.949,3,0.092,4,0.092,5,0.082,21,0.007,29,0.225,30,1.587,38,0.092,39,0.005,67,0.006,68,0.005,71,2.104,139,4.389,239,5.834,240,5.981,241,5.981,242,4.579,243,3.537,244,2.734,245,2.734,246,2.734,247,6.722,248,4.596,249,6.722]],["title/modules/AnswerModule.html",[250,1.639,251,3.365]],["body/modules/AnswerModule.html",[0,0.277,3,0.073,4,0.073,5,0.065,21,0.007,29,0.237,38,0.073,39,0.004,67,0.005,68,0.004,109,1.881,162,5.988,163,3.224,191,1.189,203,6.067,204,4.776,239,5.064,250,2.751,251,6.738,252,2.593,253,2.524,254,2.742,255,2.742,256,2.593,257,4.009,258,2.742,259,4.776,260,4.776,261,4.776,262,5.793,263,6.067,264,3.594,265,2.742,266,2.742,267,5.368,268,3.945,269,5.368,270,3.505,271,2.286,272,3.864,273,4.776,274,4.776,275,4.776,276,3.864,277,4.776,278,5.368,279,5.368]],["title/classes/AnswerRepository.html",[0,0.241,272,3.365]],["body/classes/AnswerRepository.html",[0,0.35,2,0.956,3,0.092,4,0.092,5,0.082,21,0.007,29,0.225,30,1.594,38,0.092,39,0.005,67,0.006,68,0.005,69,3.675,71,2.113,208,5.532,242,4.593,243,3.562,244,2.753,245,2.753,246,2.753,272,5.859,280,6.023,281,6.769]],["title/injectables/AnswerService.html",[203,3.197,282,1.091]],["body/injectables/AnswerService.html",[0,0.153,3,0.04,4,0.04,5,0.036,10,0.161,11,0.838,13,2.162,18,0.677,20,1.366,21,0.007,22,1.207,23,0.384,24,0.95,25,1.229,26,1.731,29,0.224,30,0.58,33,2.817,38,0.04,39,0.002,40,1.951,41,1.873,43,2.532,46,1.822,49,3.053,50,2.698,66,1.205,67,0.003,68,0.002,69,4.243,74,2.873,76,2.726,82,1.245,93,2.133,109,1.61,110,2.637,117,2.422,118,1.293,136,2.105,167,2.875,171,4.087,172,4.332,176,2.875,180,5.627,191,0.656,199,1.784,203,3.141,205,2.637,206,3.754,207,2.637,208,2.422,213,1.975,218,1.916,239,5.445,244,3.179,245,1.205,246,1.205,271,1.262,272,5.22,273,2.637,274,2.637,275,2.637,282,1.072,283,1.129,284,2.637,285,5.624,286,4.136,287,2.666,288,1.911,289,2.963,290,4.735,291,4.735,292,2.963,293,2.963,294,4.834,295,2.963,296,2.963,297,2.999,298,2.963,299,2.963,300,2.999,301,2.963,302,3.52,303,1.56,304,2.999,305,2.027,306,2.133,307,2.261,308,2.261,309,2.963,310,2.963,311,2.963,312,2.465,313,2.963,314,2.963,315,2.963,316,1.855,317,2.963,318,2.963,319,2.963,320,2.963,321,2.261,322,2.963,323,2.963,324,3.754,325,2.422,326,2.963,327,4.593,328,2.963,329,2.963,330,2.422,331,2.261,332,2.963,333,2.637,334,2.963,335,2.963,336,2.963,337,4.593,338,2.963,339,2.963,340,2.963,341,2.261,342,2.963,343,2.963,344,2.963,345,2.963]],["title/controllers/AppController.html",[161,1.991,346,3.567]],["body/controllers/AppController.html",[0,0.321,3,0.085,4,0.085,5,0.076,10,0.338,11,1.41,18,0.722,21,0.007,25,1.385,29,0.161,38,0.085,39,0.004,67,0.005,68,0.004,82,1.712,123,1.676,161,3.292,163,2.851,183,3.745,191,1.377,218,2.043,346,5.898,347,5.535,348,8.795,349,8.795,350,7.729,351,6.22,352,6.22,353,6.22,354,6.22,355,6.22,356,6.22,357,6.22,358,6.22]],["title/modules/AppModule.html",[250,1.639,359,3.567]],["body/modules/AppModule.html",[0,0.222,3,0.059,4,0.059,5,0.052,21,0.007,29,0.24,38,0.059,39,0.003,67,0.004,68,0.003,76,1.709,163,2.772,191,0.952,250,2.453,251,5.976,252,2.076,253,2.021,254,2.195,255,2.195,256,2.076,257,2.195,258,2.195,262,5.421,263,5.677,264,3.09,265,2.195,266,2.195,268,3.925,270,2.806,271,1.83,276,3.094,277,3.824,346,5.34,359,7.329,360,3.824,361,3.824,362,5.677,363,5.197,364,5.976,365,5.976,366,5.976,367,5.677,368,4.298,369,4.615,370,4.959,371,2.587,372,4.943,373,3.513,374,3.28,375,4.298,376,3.824,377,3.824,378,3.824,379,4.298,380,4.298,381,4.298,382,4.298,383,4.298,384,4.298,385,4.298,386,4.298,387,2.939,388,4.298,389,2.495]],["title/classes/Auth.html",[0,0.241,60,2.258]],["body/classes/Auth.html",[0,0.258,2,0.707,3,0.068,4,0.068,5,0.061,10,0.272,18,0.83,21,0.007,23,0.518,29,0.173,30,0.98,38,0.068,39,0.003,40,1.807,41,1.168,55,5.182,57,4.25,60,3.243,61,4.114,67,0.005,68,0.003,71,1.743,72,3.62,73,0.861,79,3.001,80,3.077,81,3.077,82,1.967,85,3.66,91,2.354,96,2.353,97,3.62,98,2.417,99,3.014,100,2.293,101,3.306,102,2.353,103,2.293,104,2.353,105,2.293,106,2.353,111,3.533,112,2.716,123,1.733,390,4.453,391,5.048,392,3.766,393,5.004,394,5.004,395,5.004,396,3.602,397,5.004]],["title/classes/Auth1619445806509.html",[0,0.241,398,3.821]],["body/classes/Auth1619445806509.html",[0,0.205,2,0.561,3,0.054,4,0.054,5,0.048,8,2.131,9,2.852,10,0.472,11,1.043,12,3.365,13,2.062,14,2.493,15,2.434,16,2.434,17,3.7,18,0.626,20,1.139,21,0.007,22,1.367,23,0.435,24,0.792,25,1.024,26,1.622,27,2.434,29,0.103,30,0.777,34,3.317,36,3.007,38,0.054,39,0.003,40,1.971,43,2.763,46,2.515,55,2.714,57,2.226,60,3.234,61,3.102,63,2.484,64,2.226,67,0.004,68,0.003,73,0.733,86,2.493,94,1.917,123,0.791,124,2.57,125,1.511,130,3.358,131,3.908,132,5.53,133,4.128,134,5.53,135,3.908,136,2.619,137,3.908,138,3.908,144,3.908,145,3.317,146,3.908,159,3.855,166,2.76,392,3.756,398,5.988,399,6.519,400,3.532,401,3.969,402,3.969,403,3.969,404,4.694,405,5.28,406,5.715,407,3.029,408,5.085,409,5.715,410,5.715,411,5.085,412,4.671]],["title/controllers/AuthController.html",[161,1.991,413,3.567]],["body/controllers/AuthController.html",[0,0.306,3,0.081,4,0.081,5,0.072,10,0.322,11,1.369,18,0.554,20,1.182,21,0.007,22,1.044,23,0.333,24,0.822,25,1.063,26,1.661,29,0.223,38,0.081,39,0.004,60,2.865,61,4.073,67,0.005,68,0.004,82,1.314,161,2.526,163,2.719,165,3.571,183,4.954,184,3.443,191,1.314,194,3.571,195,2.79,212,3.122,213,1.85,218,1.568,413,5.725,414,5.279,415,5.279,416,6.23,417,5.932,418,5.151,419,4.527,420,5.279,421,5.932,422,5.932,423,5.932,424,5.932]],["title/classes/AuthDto.html",[0,0.241,425,3.197]],["body/classes/AuthDto.html",[0,0.418,2,0.949,3,0.092,4,0.092,5,0.082,10,0.365,18,0.628,21,0.007,23,0.377,29,0.174,38,0.092,39,0.005,61,4.723,67,0.006,68,0.005,73,1.04,82,1.488,123,1.615,425,5.542,426,5.981,427,4.389,428,6.722,429,5.073,430,4.879,431,3.081]],["title/modules/AuthModule.html",[250,1.639,362,3.197]],["body/modules/AuthModule.html",[0,0.231,3,0.061,4,0.061,5,0.054,21,0.007,29,0.238,38,0.061,39,0.003,67,0.004,68,0.003,163,2.848,191,0.989,196,4.851,250,2.505,252,2.158,253,2.101,254,2.282,255,2.282,256,2.158,257,3.65,258,3.65,264,3.175,265,2.282,266,2.282,268,4.007,270,2.917,271,1.903,362,6.488,367,5.748,369,5.453,370,5.044,371,2.69,374,3.409,377,3.976,387,3.055,389,2.593,413,5.453,418,5.77,419,3.409,432,3.976,433,3.976,434,3.976,435,3.976,436,6.635,437,6.05,438,4.468,439,4.468,440,3.409,441,3.409,442,4.468,443,3.216,444,3.976,445,4.468,446,4.468,447,4.468,448,4.468,449,4.468,450,4.468]],["title/classes/AuthRepository.html",[0,0.241,443,3.365]],["body/classes/AuthRepository.html",[0,0.35,2,0.956,3,0.092,4,0.092,5,0.082,21,0.007,29,0.225,30,1.594,38,0.092,39,0.005,60,3.269,67,0.006,68,0.005,71,2.113,242,4.593,243,3.562,244,2.753,245,2.753,246,2.753,443,5.859,451,6.023,452,6.023,453,6.769]],["title/injectables/AuthService.html",[282,1.091,418,2.926]],["body/injectables/AuthService.html",[0,0.184,3,0.049,4,0.049,5,0.043,10,0.193,11,0.964,13,2.156,18,0.694,20,1.482,21,0.007,22,1.309,23,0.437,24,1.03,25,1.248,26,1.833,29,0.225,30,0.698,31,2.719,33,2.769,36,1.875,38,0.049,39,0.002,43,2.681,46,1.154,49,2.867,50,2.25,55,4.304,56,2.719,57,2.962,60,3.59,61,3.779,67,0.004,68,0.002,82,0.789,191,0.789,213,1.962,218,1.663,244,2.831,245,1.449,246,1.449,271,1.518,282,1.233,283,1.357,288,2.198,302,2.231,303,1.875,312,2.449,389,2.068,415,4.7,416,5.083,418,3.307,420,3.171,425,5.882,440,2.719,443,5.604,444,3.171,452,3.171,454,3.171,455,5.282,456,5.282,457,5.282,458,3.563,459,8.058,460,5.181,461,3.563,462,5.282,463,5.351,464,3.563,465,5.282,466,3.563,467,3.563,468,5.282,469,3.563,470,2.719,471,2.912,472,2.912,473,3.171,474,1.934,475,2.912,476,3.563,477,3.563,478,2.912,479,3.563,480,3.563,481,3.563,482,3.563,483,3.563,484,5.282,485,3.563,486,3.563,487,3.563,488,3.563,489,3.563,490,5.282,491,3.563,492,2.719,493,3.563,494,3.563,495,3.563,496,3.563,497,3.563]],["title/classes/Auxiliary1620477175799.html",[0,0.241,498,3.821]],["body/classes/Auxiliary1620477175799.html",[0,0.287,2,0.278,3,0.027,4,0.027,5,0.024,8,1.232,9,1.817,10,0.347,11,0.603,12,2.503,13,1.534,14,1.441,15,1.407,16,1.407,17,2.968,18,0.398,20,0.658,21,0.007,22,1.059,23,0.239,24,0.458,25,0.592,26,1.105,27,1.407,29,0.051,30,0.386,38,0.027,39,0.001,40,2.037,43,3.013,66,2.599,67,0.002,68,0.001,73,0.424,76,2.393,86,3.481,94,0.952,111,3.04,123,0.393,124,2.571,125,0.751,130,4.234,131,4.114,132,5.663,133,4.215,134,5.663,135,4.114,136,3.539,137,4.114,138,4.114,144,4.114,145,4.899,146,4.114,148,3.783,149,3.847,151,4.731,152,3.847,154,4.562,159,4.402,166,2.906,228,2.689,392,2.392,404,5.219,405,3.928,412,4.544,498,4.08,499,4.442,500,1.611,501,1.754,502,1.971,503,1.754,504,2.741,505,3.125,506,2.378,507,2.378,508,3.809,509,3.255,510,2.94,511,4.002,512,2.392,513,2.068,514,1.611,515,1.754,516,4.002,517,1.64,518,1.754,519,2.476,520,3.125,521,1.596,522,3.304,523,3.227,524,1.754,525,2.521,526,3.304,527,2.521,528,3.07,529,2.521,530,1.504,531,1.419,532,3.304,533,5.6,534,4.377,535,1.989,536,3.07,537,3.809,538,2.897,539,4.591,540,2.521,541,3.304,542,1.504,543,2.94,544,2.7,545,2.94,546,1.754,547,2.94,548,1.754,549,2.94,550,5.687]],["title/classes/Auxiliary1624416663574.html",[0,0.241,551,3.821]],["body/classes/Auxiliary1624416663574.html",[0,0.192,2,0.32,3,0.031,4,0.031,5,0.028,8,1.383,9,2.005,10,0.42,11,0.677,12,2.681,13,1.643,14,1.618,15,1.58,16,1.58,17,3.129,18,0.44,20,0.739,21,0.006,22,1.057,23,0.264,24,0.514,25,0.665,26,1.205,27,1.58,29,0.059,30,0.444,38,0.031,39,0.002,40,0.998,43,3.067,66,3.148,67,0.003,68,0.002,73,0.476,86,3.56,94,1.095,111,1.618,123,0.452,124,2.161,125,0.863,129,3.22,130,4.3,131,1.55,132,3.22,133,3.958,134,3.22,135,1.55,136,3.62,137,1.55,138,1.55,142,5.416,144,3.22,145,5.195,146,3.22,147,5.569,148,4.364,149,4.66,151,5.299,152,4.66,154,4.958,158,3.301,159,4.23,160,4.853,228,3.53,405,1.48,500,1.853,501,2.017,503,2.017,507,2.67,508,2.831,511,2.67,512,2.641,513,2.322,516,4.638,517,1.842,518,3.301,521,1.095,523,4.12,524,3.301,525,4.917,527,4.917,528,2.67,531,5.109,535,1.365,536,2.67,538,4.12,542,1.73,544,3.032,545,4.842,546,3.301,547,4.842,548,3.301,549,4.842,551,4.447,552,4.842,553,2.267,554,6.001,555,2.322,556,3.301,557,6.316,558,3.709,559,3.709,560,5.416,561,3.709,562,3.709,563,3.032,564,2.017,565,3.709,566,3.709,567,3.301,568,4.842,569,3.709,570,3.709,571,3.709]],["title/modules/AuxiliaryModule.html",[250,1.639,363,2.926]],["body/modules/AuxiliaryModule.html",[0,0.244,3,0.065,4,0.065,5,0.058,21,0.007,29,0.236,38,0.065,39,0.003,67,0.005,68,0.003,191,1.048,250,2.582,252,2.286,253,2.226,254,2.417,255,2.417,256,2.286,257,3.762,258,3.762,264,3.303,265,2.417,266,2.417,268,2.654,270,3.09,271,2.016,363,5.957,572,4.211,573,4.211,574,4.211,575,6.364,576,6.364,577,6.364,578,6.364,579,4.732,580,4.654,581,4.211,582,4.654,583,4.211,584,4.654,585,4.211,586,4.654,587,4.211,588,4.732,589,4.732,590,4.732,591,4.732,592,4.211]],["title/interfaces/BatchUser.html",[294,3.567,593,1.353]],["body/interfaces/BatchUser.html",[3,0.092,4,0.092,5,0.082,10,0.367,21,0.007,23,0.456,38,0.092,39,0.005,41,2.196,67,0.006,68,0.005,73,1.044,175,4.765,220,5.668,294,6.211,593,1.959,594,2.883,595,6.023,596,4.873]],["title/injectables/CaslAbilityFactory.html",[282,1.091,597,3.365]],["body/injectables/CaslAbilityFactory.html",[0,0.228,3,0.06,4,0.06,5,0.054,10,0.24,11,1.125,18,0.413,20,0.88,21,0.007,22,0.778,23,0.398,24,0.612,25,0.792,29,0.23,33,2.118,38,0.06,39,0.003,40,1.188,42,2.399,46,2.84,50,1.881,67,0.004,68,0.003,69,4.389,74,4.278,108,2.884,109,1.548,124,1.403,154,2.563,191,0.978,218,1.167,220,3.859,221,4.856,228,1.974,282,1.439,283,1.682,504,1.682,529,4.704,597,4.438,598,5.038,599,3.61,600,6.165,601,6.165,602,4.416,603,6.319,604,6.165,605,6.165,606,6.165,607,5.486,608,3.93,609,4.416,610,4.416,611,4.416,612,3.61,613,3.93,614,4.416,615,4.416,616,3.244,617,3.02,618,2.659,619,3.02,620,3.61,621,3.61,622,3.93,623,3.93,624,5.486,625,3.93,626,4.416,627,5.486,628,4.416,629,8.085,630,5.486,631,4.416,632,7.102,633,4.416,634,4.416,635,7.102,636,4.416,637,4.416,638,4.416]],["title/modules/CaslModule.html",[250,1.639,436,3.365]],["body/modules/CaslModule.html",[0,0.32,3,0.085,4,0.085,5,0.075,21,0.007,29,0.199,38,0.085,39,0.004,67,0.005,68,0.004,191,1.373,250,2.943,252,2.995,253,2.916,254,3.167,255,3.167,256,2.995,257,4.289,258,4.289,264,3.94,265,3.167,266,3.167,436,6.725,597,6.97,639,5.517,640,5.517,641,5.517,642,6.2,643,6.2,644,6.2]],["title/classes/CopyQuestionGroupDto.html",[0,0.241,645,3.365]],["body/classes/CopyQuestionGroupDto.html",[0,0.402,2,0.887,3,0.086,4,0.086,5,0.076,10,0.341,18,0.726,21,0.007,23,0.436,29,0.162,38,0.086,39,0.004,41,2.06,67,0.005,68,0.004,73,0.997,76,3.359,82,1.722,109,2.96,175,4.445,431,2.879,645,5.598,646,7.515,647,4.522,648,5.084,649,5.265,650,6.281,651,5.59]],["title/modules/CoreModule.html",[250,1.639,364,3.365]],["body/modules/CoreModule.html",[0,0.298,3,0.079,4,0.079,5,0.07,21,0.007,29,0.221,38,0.079,39,0.004,67,0.005,68,0.004,191,1.278,250,2.848,252,2.787,253,2.714,254,2.948,255,2.948,256,2.787,257,4.15,258,4.15,264,3.766,265,2.948,266,2.948,268,3.237,364,6.702,369,5.626,371,3.474,652,5.136,653,5.136,654,5.136,655,6.079,656,6.903,657,5.771,658,6.561,659,5.771,660,5.771,661,5.771]],["title/classes/Course.html",[0,0.241,519,2.713]],["body/classes/Course.html",[0,0.253,2,0.692,3,0.067,4,0.067,5,0.06,10,0.266,18,0.826,21,0.007,23,0.511,29,0.194,30,0.96,38,0.067,39,0.003,40,1.782,41,1.144,42,1.907,67,0.005,68,0.003,71,1.719,72,3.59,73,0.849,79,2.96,80,3.035,81,3.035,82,1.957,85,3.198,91,2.321,96,2.305,97,3.59,98,2.367,99,2.983,100,2.246,101,3.271,102,2.305,103,2.246,104,2.305,105,2.246,106,2.305,111,3.271,112,2.661,114,3.987,116,3.201,123,1.601,391,4.662,392,3.714,519,3.844,520,4.695,521,3.622,523,4.869,662,4.362,663,7.499,664,4.901,665,2.749,666,4.901,667,4.901,668,4.362,669,4.901,670,4.901]],["title/classes/CreateAnswerDto.html",[0,0.241,172,3.197]],["body/classes/CreateAnswerDto.html",[0,0.363,2,0.758,3,0.073,4,0.073,5,0.065,10,0.291,18,0.778,21,0.007,23,0.507,24,1.154,29,0.182,38,0.073,39,0.004,41,2.071,67,0.005,68,0.004,73,0.902,77,6.413,78,5.988,82,1.844,93,5.649,117,4.387,118,2.341,124,1.706,125,2.044,172,5.366,333,4.776,431,2.46,649,4.834,671,7.693,672,4.387,673,7.847,674,5.368,675,5.368,676,5.368,677,5.368,678,5.368,679,7.035,680,5.368,681,5.368,682,4.387,683,4.724,684,4.387,685,5.368,686,5.368,687,5.368,688,5.368,689,5.368,690,5.368,691,5.368]],["title/classes/CreateAuthDto.html",[0,0.241,463,3.365]],["body/classes/CreateAuthDto.html",[0,0.332,2,0.908,3,0.088,4,0.088,5,0.078,10,0.349,18,0.737,21,0.007,23,0.442,29,0.166,38,0.088,39,0.004,57,4.424,61,4.282,67,0.005,68,0.004,71,2.048,73,1.012,82,1.747,97,3.526,123,1.572,416,6.084,425,4.396,427,4.198,463,5.678,692,5.721,693,5.721,694,5.721,695,4.906,696,6.429,697,5.721,698,6.429]],["title/classes/CreateExamAgreementDto.html",[0,0.241,699,3.365]],["body/classes/CreateExamAgreementDto.html",[0,0.429,2,0.856,3,0.083,4,0.083,5,0.074,10,0.329,18,0.566,21,0.007,23,0.466,24,1.054,29,0.225,38,0.083,39,0.004,67,0.005,68,0.004,71,1.574,73,0.976,82,1.343,195,2.851,220,3.795,431,2.779,504,3.165,683,4.579,699,5.476,700,6.217,701,4.627,702,8.312,703,4.374,704,5.395,705,6.063,706,4.955,707,4.146,708,4.967,709,4.627,710,4.955,711,6.063]],["title/classes/CreateExamDto.html",[0,0.241,712,3.197]],["body/classes/CreateExamDto.html",[0,0.386,2,0.689,3,0.067,4,0.067,5,0.059,10,0.265,18,0.806,21,0.007,23,0.51,24,1.111,29,0.193,38,0.067,39,0.003,67,0.005,68,0.003,73,0.846,82,1.911,91,2.313,99,3.433,118,2.127,123,1.597,427,4.309,429,4.682,430,4.503,431,2.235,506,5.384,521,3.613,682,3.986,683,4.503,700,7.214,703,3.473,707,3.335,708,4.309,712,4.513,713,3.986,714,6.656,715,5.708,716,5.708,717,4.342,718,4.339,719,4.877,720,4.877,721,6.599,722,4.877,723,4.877,724,4.06,725,4.877,726,5.036,727,4.877,728,4.877,729,4.75,730,7.48,731,2.491,732,2.18,733,4.877]],["title/classes/CreateQuestion.html",[0,0.241,734,3.197]],["body/classes/CreateQuestion.html",[0,0.438,2,0.796,3,0.077,4,0.077,5,0.069,10,0.306,18,0.526,21,0.007,23,0.451,24,1.006,29,0.219,38,0.077,39,0.004,40,2.161,41,1.695,67,0.005,68,0.004,71,1.463,73,0.931,82,1.248,91,2.545,109,2.545,166,2.722,195,2.65,316,3.528,429,3.528,430,3.393,431,2.583,648,3.393,649,4.215,683,4.371,706,4.606,707,3.854,708,3.68,726,5.541,729,5.227,734,5.802,735,5.227,736,4.606,737,5.015,738,5.636,739,4.606,740,4.606,741,5.015,742,6.461,743,4.606,744,6.461,745,3.528,746,4.057,747,5.015,748,3.854,749,5.015]],["title/classes/CreateQuestionDto.html",[0,0.241,745,2.926]],["body/classes/CreateQuestionDto.html",[0,0.334,2,0.668,3,0.065,4,0.065,5,0.058,10,0.257,18,0.774,21,0.007,23,0.48,24,1.186,29,0.167,38,0.065,39,0.003,41,1.509,67,0.005,68,0.003,73,0.829,82,1.835,109,2.999,123,1.705,195,2.226,427,3.09,429,4.611,430,4.434,431,2.169,521,3.123,648,4.434,649,4.275,683,4.765,703,4.166,708,4.222,735,6.158,739,5.285,743,5.285,745,4.048,750,3.611,751,6.554,752,6.554,753,6.02,754,6.02,755,4.732,756,4.211,757,4.732,758,4.732,759,4.732,760,4.732,761,6.466,762,6.466,763,7.916,764,6.466,765,6.466,766,6.466,767,6.466,768,6.466,769,6.466,770,6.466,771,6.466,772,6.466,773,4.732,774,4.732,775,4.732,776,4.732]],["title/classes/CreateQuestionGroupDto.html",[0,0.241,777,3.197]],["body/classes/CreateQuestionGroupDto.html",[0,0.449,2,0.771,3,0.074,4,0.074,5,0.066,10,0.296,18,0.783,21,0.007,23,0.47,24,1.235,29,0.141,38,0.074,39,0.004,41,1.66,67,0.005,68,0.004,73,0.912,76,3.458,82,1.856,109,3.047,123,1.418,175,4.164,427,3.565,429,4.453,430,4.282,431,2.502,521,3.821,535,4.763,647,3.93,649,4.129,683,5.046,703,4.411,708,5.166,718,6.329,735,6.258,737,4.858,777,4.864,778,5.459,779,5.459,780,5.459,781,5.459]],["title/classes/CreateQuestionsDto.html",[0,0.241,748,3.197]],["body/classes/CreateQuestionsDto.html",[0,0.438,2,0.796,3,0.077,4,0.077,5,0.069,10,0.306,18,0.526,21,0.007,23,0.451,29,0.219,38,0.077,39,0.004,40,1.516,41,1.316,67,0.005,68,0.004,71,1.463,73,0.931,82,1.248,91,2.545,109,2.545,166,2.722,195,2.65,316,5.029,429,3.528,430,3.393,431,2.583,648,3.393,649,4.215,683,4.371,706,4.606,707,3.854,708,3.68,726,5.541,729,5.227,734,5.802,735,5.227,736,4.606,739,4.606,740,4.606,741,5.015,742,6.461,743,4.606,744,6.461,745,3.528,746,4.057,747,5.015,748,4.965,749,5.015,782,5.636,783,5.636,784,5.636,785,5.636]],["title/classes/CreateUserDto.html",[0,0.241,786,2.814]],["body/classes/CreateUserDto.html",[0,0.4,2,0.74,3,0.071,4,0.071,5,0.064,10,0.284,18,0.77,21,0.007,23,0.504,29,0.232,34,4.499,36,4.079,38,0.071,39,0.004,57,2.936,63,4.853,67,0.005,68,0.004,71,1.359,73,0.888,82,1.826,118,2.284,123,1.644,195,2.462,431,3.172,463,3.769,475,4.279,619,5.301,621,4.279,682,4.279,740,4.279,786,4.166,787,7.632,788,4.279,789,7.752,790,5.236,791,6.336,792,5.236,793,6.92,794,5.236,795,4.667,796,6.92,797,5.236,798,4.659,799,5.236,800,5.236,801,5.281,802,5.236,803,5.236]],["title/injectables/CustomLogger.html",[282,1.091,804,3.365]],["body/injectables/CustomLogger.html",[0,0.36,3,0.095,4,0.095,5,0.085,21,0.007,29,0.18,38,0.095,39,0.005,67,0.006,68,0.005,71,2.149,191,1.542,282,1.933,283,2.653,804,5.96,805,6.198,806,6.041,807,8.279,808,6.966]],["title/classes/Exam.html",[0,0.241,504,1.78]],["body/classes/Exam.html",[0,0.153,2,0.419,3,0.04,4,0.04,5,0.036,10,0.161,11,0.838,18,0.854,21,0.007,23,0.521,24,0.637,25,0.531,29,0.195,30,0.58,38,0.04,39,0.002,40,1.236,41,1.313,42,1.787,67,0.003,68,0.002,71,1.192,72,3.381,73,0.589,74,3.236,79,2.831,80,2.903,81,2.903,82,2.002,83,1.784,85,3.653,86,2.003,94,3.059,96,1.394,97,3.381,98,1.431,99,3.372,100,2.105,101,2.453,102,1.394,103,2.105,104,1.394,105,2.105,106,1.394,108,1.935,109,1.039,111,3.409,112,1.609,113,2.875,114,3.386,116,1.935,123,1.263,124,1.46,218,1.214,504,2.412,505,3.965,506,4.048,508,4.834,513,3.52,517,3.755,521,2.716,616,3.334,617,2.027,618,1.784,665,2.576,703,2.417,714,5.004,715,4.292,716,4.292,717,3.264,731,1.514,809,2.637,810,5.004,811,4.596,812,4.596,813,5.177,814,3.306,815,4.292,816,4.292,817,2.963,818,3.306,819,2.999,820,2.963,821,2.963,822,2.963,823,2.963,824,2.963,825,2.963,826,2.963,827,5.602,828,2.963,829,4.136,830,2.963,831,2.963,832,2.963,833,1.935,834,1.935,835,1.935,836,4.596,837,2.963,838,2.133,839,2.963,840,2.963,841,2.963,842,2.963,843,2.963,844,3.505,845,3.505,846,2.261,847,2.261,848,2.963,849,1.784,850,2.963,851,1.855,852,2.963,853,2.963,854,2.963,855,2.261,856,2.422,857,2.422,858,2.963,859,2.963]],["title/classes/Exam1620478273991.html",[0,0.241,860,3.821]],["body/classes/Exam1620478273991.html",[0,0.27,2,0.74,3,0.071,4,0.071,5,0.064,8,2.58,9,3.302,10,0.284,11,1.263,12,3.666,13,2.247,14,3.019,15,2.948,16,2.948,17,3.931,18,0.724,20,1.379,21,0.007,22,1.51,23,0.435,24,0.959,25,1.24,26,1.826,27,2.948,29,0.135,30,1.025,38,0.071,39,0.004,43,2.242,67,0.005,68,0.004,73,0.888,123,1.044,124,2.199,125,1.994,130,3.172,133,3.093,147,4.166,504,2.636,510,7.339,511,4.982,512,2.936,538,4.017,860,6.741,861,7.339,862,4.659,863,5.236,864,5.236,865,5.236]],["title/classes/ExamAgreement.html",[0,0.241,74,2.388]],["body/classes/ExamAgreement.html",[0,0.176,2,0.482,3,0.047,4,0.047,5,0.041,10,0.185,11,0.933,18,0.848,21,0.007,23,0.52,24,0.709,25,0.611,29,0.188,30,0.668,38,0.047,39,0.002,40,1.376,41,1.703,42,1.327,46,2.573,67,0.004,68,0.002,71,1.327,72,3.551,73,0.656,74,2.612,79,3.045,80,3.122,81,3.122,82,1.995,83,3.078,85,3.525,86,2.971,90,3.339,91,2.388,94,3.29,96,1.604,97,3.551,98,1.648,99,3.047,100,2.343,101,2.675,102,1.604,103,2.343,104,1.604,105,2.343,106,1.604,107,6.125,111,3.465,112,1.852,113,3.839,116,2.228,123,1.358,124,2.165,175,3.228,218,0.902,220,3.839,392,1.913,504,3.025,505,3.201,513,3.839,529,4.68,530,4.68,703,4.032,731,1.743,819,3.339,833,2.228,834,2.228,835,2.228,846,2.603,851,2.135,866,3.036,867,5.013,868,6.812,869,3.411,870,3.411,871,3.411,872,3.411,873,5.964,874,3.411,875,3.411,876,3.411,877,3.411,878,3.411,879,3.411,880,3.411,881,2.788,882,3.411,883,3.411,884,3.411,885,3.411,886,3.411,887,3.036]],["title/classes/ExamAgreement1622332886234.html",[0,0.241,888,3.821]],["body/classes/ExamAgreement1622332886234.html",[0,0.222,2,0.608,3,0.059,4,0.059,5,0.052,8,2.259,9,2.984,10,0.234,11,1.105,12,3.457,13,2.119,14,2.642,15,2.58,16,2.58,17,3.772,18,0.655,20,1.207,21,0.007,22,1.41,23,0.393,24,0.84,25,1.086,26,1.683,27,2.58,29,0.111,30,0.844,38,0.059,39,0.003,43,2.822,66,2.464,67,0.004,68,0.003,73,0.777,86,1.879,111,1.879,123,0.858,124,1.369,125,1.64,130,3.993,133,3.132,136,2.776,145,4.412,148,3.803,149,3.647,151,4.577,152,3.647,154,4.412,159,3.687,404,5.057,405,2.813,528,6.272,529,5.801,531,3.101,533,5.689,536,5.044,538,3.516,542,3.287,567,3.833,888,6.213,889,6.765,890,3.833,891,4.307,892,4.307,893,4.307,894,4.307,895,6.057,896,6.057]],["title/classes/ExamAgreementAnonymousDefault1622334780336.html",[0,0.241,897,3.821]],["body/classes/ExamAgreementAnonymousDefault1622334780336.html",[0,0.266,2,0.728,3,0.07,4,0.07,5,0.063,8,2.553,9,3.275,10,0.28,11,1.249,12,3.649,13,2.236,14,2.986,15,2.916,16,2.916,17,3.919,18,0.718,20,1.365,21,0.007,22,1.502,23,0.431,24,0.949,25,1.227,26,1.815,27,2.916,29,0.133,30,1.009,38,0.07,39,0.004,43,2.218,67,0.005,68,0.004,73,0.878,123,1.027,124,2.176,125,1.962,130,3.138,133,3.06,404,3.974,511,4.928,512,2.889,528,4.928,530,6.253,533,4.471,538,3.974,897,6.697,898,7.292,899,4.584,900,5.151,901,5.151,902,5.151]],["title/controllers/ExamAgreementController.html",[161,1.991,903,3.567]],["body/controllers/ExamAgreementController.html",[0,0.231,3,0.061,4,0.061,5,0.054,10,0.243,11,1.136,13,2.145,18,0.581,20,1.241,21,0.007,22,1.096,23,0.349,24,0.863,25,1.116,26,1.712,29,0.231,38,0.061,39,0.003,40,1.925,41,1.67,46,2.505,67,0.004,68,0.003,74,2.288,82,1.378,108,2.924,161,1.907,163,2.052,165,2.696,181,4.481,183,4.307,184,4.153,186,3.224,188,3.062,189,4.481,190,2.803,191,0.992,192,4.481,194,2.696,195,2.106,196,2.357,197,3.224,199,2.696,200,3.747,201,2.924,202,3.062,211,2.803,212,2.357,213,1.396,218,1.645,222,3.224,291,4.479,308,3.417,474,2.431,504,2.725,699,5.566,710,5.087,851,4.479,903,4.75,904,5.847,905,3.985,906,6.367,907,7.155,908,3.985,909,5.566,910,4.478,911,6.367,912,4.478,913,6.881,914,5.566,915,4.478,916,2.803,917,3.062,918,3.062,919,3.66,920,3.66,921,4.478,922,4.478,923,4.478]],["title/classes/ExamAgreementDto.html",[0,0.241,709,3.567]],["body/classes/ExamAgreementDto.html",[0,0.402,2,0.89,3,0.086,4,0.086,5,0.077,10,0.342,18,0.728,21,0.007,23,0.437,29,0.201,38,0.086,39,0.004,41,2.063,67,0.005,68,0.004,73,0.999,82,1.725,175,4.451,195,2.964,220,5.295,431,2.888,649,4.909,701,4.809,709,5.946,924,6.913,925,6.302,926,8.458,927,6.302]],["title/classes/ExamAgreementObservation1622417032753.html",[0,0.241,928,3.821]],["body/classes/ExamAgreementObservation1622417032753.html",[0,0.27,2,0.738,3,0.071,4,0.071,5,0.063,8,2.576,9,3.297,10,0.283,11,1.26,12,3.663,13,2.245,14,3.013,15,2.942,16,2.942,17,3.929,18,0.723,20,1.377,21,0.007,22,1.509,23,0.434,24,0.957,25,1.238,26,1.824,27,2.942,29,0.135,30,1.023,38,0.071,39,0.004,43,2.238,67,0.005,68,0.004,73,0.886,111,2.278,123,1.041,124,1.659,125,1.989,130,3.166,133,2.334,148,2.835,159,2.748,404,4.01,505,3.269,528,4.973,533,4.511,867,5.646,928,6.733,929,7.331,930,4.646,931,5.222,932,5.222,933,5.222]],["title/classes/ExamAgreementRepository.html",[0,0.241,934,3.365]],["body/classes/ExamAgreementRepository.html",[0,0.347,2,0.949,3,0.092,4,0.092,5,0.082,21,0.007,29,0.225,30,1.587,38,0.092,39,0.005,67,0.006,68,0.005,71,2.104,74,3.434,108,4.389,242,4.579,243,3.537,244,2.734,245,2.734,246,2.734,917,4.596,934,5.834,935,5.494,936,5.981,937,6.722]],["title/injectables/ExamAgreementService.html",[282,1.091,291,2.926]],["body/injectables/ExamAgreementService.html",[0,0.15,3,0.04,4,0.04,5,0.035,10,0.158,11,0.825,13,2.152,18,0.701,20,1.497,21,0.007,22,1.322,23,0.447,24,1.041,25,1.289,26,1.868,29,0.223,30,0.886,33,2.153,38,0.04,39,0.002,40,1.494,41,1.585,43,2.03,46,2.2,49,3.015,50,2.365,67,0.003,68,0.002,74,3.202,79,1.298,82,1.23,99,2.861,108,1.897,170,3.773,175,1.529,191,0.643,199,2.723,213,1.41,218,1.901,220,3.476,221,3.093,244,3.158,245,1.182,246,1.182,271,1.237,282,1.056,283,1.106,287,2.625,288,1.882,291,2.831,302,2.831,303,1.529,307,5.926,312,1.76,389,1.686,470,2.217,474,1.577,478,2.374,504,2.739,699,4.512,710,3.696,731,1.484,815,2.217,816,4.783,846,2.217,851,5.105,873,2.374,887,2.585,906,4.942,908,2.585,909,4.512,911,4.942,913,5.577,914,4.512,916,1.819,917,1.987,918,3.093,934,4.512,938,2.585,939,4.523,940,4.523,941,4.523,942,5.553,943,1.819,944,4.861,945,2.905,946,2.831,947,4.523,948,2.905,949,2.905,950,4.523,951,4.024,952,2.905,953,3.696,954,4.523,955,2.905,956,4.523,957,2.905,958,2.905,959,2.905,960,2.905,961,1.403,962,2.374,963,1.331,964,2.374,965,2.585,966,2.374,967,2.585,968,2.905,969,2.905,970,2.905,971,3.696,972,3.256,973,2.905,974,2.905,975,2.374,976,5.553,977,2.585,978,2.905,979,3.093,980,2.905,981,3.696,982,2.905,983,2.905]],["title/interfaces/ExamAgreementUser.html",[593,1.353,909,3.365]],["body/interfaces/ExamAgreementUser.html",[3,0.09,4,0.09,5,0.081,10,0.36,11,1.466,18,0.619,21,0.007,23,0.372,25,1.188,38,0.09,39,0.005,40,2.419,41,2.019,67,0.006,68,0.005,73,1.031,198,6.133,593,1.918,594,2.823,596,4.772,703,4.229,851,5.031,909,5.785,984,8.991,985,6.629]],["title/controllers/ExamController.html",[161,1.991,986,3.567]],["body/controllers/ExamController.html",[0,0.182,3,0.048,4,0.048,5,0.043,10,0.192,11,0.957,13,2.355,18,0.725,20,1.476,21,0.007,22,1.304,23,0.463,24,1.026,25,1.391,26,1.952,29,0.222,38,0.048,39,0.002,40,2.088,41,1.968,42,1.374,46,1.699,66,1.436,67,0.004,68,0.002,82,1.718,136,2.869,161,1.504,163,1.618,165,2.125,166,2.534,167,3.284,170,4.172,176,2.21,177,4.003,181,3.776,183,3.158,184,3.045,186,2.542,188,2.414,189,4.988,190,2.21,191,0.782,192,3.776,193,4.988,194,2.125,195,1.66,196,1.858,197,2.542,199,2.125,200,2.125,201,2.305,202,2.414,211,2.21,212,1.858,213,1.101,218,2.051,222,2.542,224,2.694,286,4.525,287,3.045,297,2.305,300,2.305,474,1.917,504,2.82,535,2.125,712,5.306,916,2.21,918,2.414,920,2.886,944,3.919,986,4.003,987,3.142,988,4.003,989,3.142,990,2.886,991,3.531,992,2.694,993,3.531,994,4.288,995,3.531,996,3.142,997,3.531,998,4.506,999,3.531,1000,3.531,1001,5.941,1002,3.531,1003,3.142,1004,4.288,1005,2.414,1006,2.542,1007,3.142,1008,3.531,1009,3.531,1010,3.531,1011,3.531,1012,3.531,1013,3.531,1014,3.531,1015,2.886,1016,3.531,1017,3.531,1018,3.531]],["title/modules/ExamModule.html",[250,1.639,262,3.052]],["body/modules/ExamModule.html",[0,0.222,3,0.059,4,0.059,5,0.052,21,0.007,29,0.24,38,0.059,39,0.003,67,0.004,68,0.003,163,2.772,191,0.952,250,2.453,252,2.076,253,2.021,254,2.195,255,2.195,256,2.076,257,3.575,258,3.575,262,6.19,264,3.09,265,2.195,266,2.195,268,3.392,270,2.806,271,1.83,291,5.731,308,3.28,363,5.197,592,3.824,732,2.703,903,5.34,919,4.943,934,4.354,944,5.731,966,4.943,967,3.824,986,5.34,1003,3.824,1019,3.824,1020,3.824,1021,4.298,1022,3.824,1023,5.421,1024,5.421,1025,5.677,1026,4.298,1027,5.34,1028,4.298,1029,4.354,1030,3.824,1031,4.354,1032,3.824,1033,3.513,1034,6.048,1035,4.298,1036,4.298,1037,3.824,1038,3.824,1039,3.824,1040,3.824,1041,3.513]],["title/classes/ExamPersonalResult.html",[0,0.241,998,3.365]],["body/classes/ExamPersonalResult.html",[0,0.338,2,0.924,3,0.089,4,0.089,5,0.08,10,0.355,18,0.745,21,0.007,23,0.447,29,0.169,38,0.089,39,0.005,67,0.006,68,0.005,73,1.022,504,3.494,535,5.176,971,7.026,998,5.737,1005,4.471,1042,6.561,1043,5.818,1044,7.65,1045,6.538,1046,6.538]],["title/classes/ExamRepository.html",[0,0.241,1029,3.365]],["body/classes/ExamRepository.html",[0,0.217,2,0.592,3,0.057,4,0.057,5,0.051,10,0.228,11,1.085,13,1.761,18,0.392,20,0.836,21,0.007,22,0.738,23,0.235,24,0.581,25,0.752,26,1.316,29,0.213,30,1.164,33,1.441,38,0.057,39,0.003,45,4.279,46,1.359,67,0.004,68,0.003,71,1.543,133,2.657,218,1.108,242,3.634,243,2.207,244,1.706,245,1.706,246,1.706,504,3.137,513,3.721,514,4.859,717,4.603,731,2.143,732,3.087,815,5.733,816,5.27,827,3.428,829,3.882,846,3.201,847,3.201,917,2.868,965,6.145,1005,2.868,1029,4.279,1047,3.732,1048,6.906,1049,4.194,1050,5.733,1051,4.194,1052,5.945,1053,5.945,1054,6.685,1055,5.29,1056,6.906,1057,7.931,1058,6.906,1059,5.945,1060,4.859,1061,6.906,1062,6.906,1063,6.145,1064,6.685,1065,5.945,1066,5.945,1067,5.945,1068,3.732,1069,2.868,1070,4.194,1071,3.428,1072,4.859,1073,4.194,1074,4.194,1075,4.194,1076,4.194,1077,4.194,1078,4.194,1079,4.194,1080,4.194,1081,4.194,1082,4.194,1083,4.194,1084,3.732]],["title/injectables/ExamService.html",[282,1.091,944,2.926]],["body/injectables/ExamService.html",[0,0.137,3,0.036,4,0.036,5,0.032,10,0.144,11,0.768,13,2.247,18,0.724,20,1.446,21,0.007,22,1.277,23,0.422,24,1.005,25,1.3,26,1.826,29,0.219,30,0.519,33,2.663,38,0.036,39,0.003,40,1.749,41,1.809,43,2.511,46,1.364,49,2.285,50,1.793,66,1.079,67,0.003,68,0.002,73,0.54,82,1.32,124,0.843,125,1.01,136,1.93,166,2.033,167,2.635,170,3.588,176,2.635,191,0.587,199,1.597,213,2.262,218,1.829,244,3.23,245,1.079,246,1.079,271,1.13,282,0.983,283,1.01,286,3.892,287,2.444,288,1.752,291,3.731,297,2.749,300,2.749,302,3.277,303,1.396,304,2.749,305,1.814,306,1.909,308,2.024,312,3.09,341,2.024,474,1.44,504,3.087,517,2.09,535,1.597,576,4.96,712,5.146,717,3.46,810,3.746,811,3.441,916,1.66,918,1.814,943,1.66,944,2.635,946,2.635,971,4.279,977,2.36,979,1.814,981,5.314,988,3.213,989,3.746,996,3.746,998,1.909,1001,5.717,1004,3.441,1005,1.814,1006,1.909,1007,2.36,1024,3.892,1029,4.291,1030,2.36,1033,2.168,1044,3.746,1071,2.168,1085,2.36,1086,3.995,1087,4.21,1088,4.658,1089,5.235,1090,4.21,1091,2.652,1092,2.652,1093,2.652,1094,2.652,1095,4.21,1096,2.652,1097,3.746,1098,2.652,1099,2.652,1100,2.652,1101,4.279,1102,2.652,1103,2.652,1104,2.652,1105,2.652,1106,2.652,1107,2.652,1108,2.652,1109,2.36,1110,2.652,1111,2.652,1112,2.168,1113,2.652,1114,4.21,1115,4.21,1116,2.652,1117,2.652,1118,2.652,1119,2.36,1120,2.652,1121,2.652,1122,2.652,1123,2.36,1124,2.168]],["title/classes/ExamTarget.html",[0,0.241,829,3.052]],["body/classes/ExamTarget.html",[0,0.248,2,0.679,3,0.066,4,0.066,5,0.058,10,0.261,18,0.836,21,0.007,23,0.523,29,0.192,30,0.941,38,0.066,39,0.003,40,1.758,41,1.121,67,0.005,68,0.003,71,1.696,72,3.93,73,0.838,79,3.56,80,3.65,81,3.65,82,1.981,85,2.32,91,2.29,94,3.847,96,2.259,97,3.93,98,2.32,99,3.418,100,2.994,101,3.237,102,2.259,103,2.994,104,2.259,105,2.994,106,2.259,107,4.702,111,2.849,112,2.607,118,2.095,392,4.162,396,3.458,724,4.522,731,2.454,732,2.147,829,4.265,833,3.136,834,3.136,835,3.136,1125,4.274,1126,4.803,1127,4.803]],["title/classes/ExamTarget1622326106015.html",[0,0.241,1128,3.821]],["body/classes/ExamTarget1622326106015.html",[0,0.182,2,0.498,3,0.048,4,0.048,5,0.043,8,1.953,9,2.663,10,0.458,11,0.956,12,3.227,13,1.977,14,2.285,15,2.231,16,2.231,17,3.59,18,0.584,20,1.044,21,0.007,22,1.303,23,0.435,24,0.726,25,0.939,26,1.533,27,2.231,29,0.091,30,0.69,33,1.211,38,0.048,39,0.002,40,1.41,43,2.955,62,2.537,66,2.131,67,0.004,68,0.002,73,0.672,86,2.727,94,2.53,111,1.537,123,0.702,124,1.987,125,1.342,130,3.931,131,2.41,132,4.276,133,3.687,134,4.276,135,2.41,136,2.866,137,2.41,138,2.41,144,3.582,145,4.501,146,3.582,148,3.394,149,3.154,151,4.168,152,3.154,154,3.041,159,4.225,166,3.02,392,1.976,404,5.169,412,4.282,533,5.063,534,4.521,536,4.984,542,2.689,568,4.662,717,2.046,732,3.094,961,3.02,963,2.866,1055,7.341,1060,5.658,1128,5.658,1129,5.658,1130,2.88,1131,3.524,1132,3.524,1133,3.524,1134,4.662,1135,5.239,1136,3.524,1137,3.136,1138,6.923,1139,5.239,1140,5.239,1141,5.239,1142,5.239,1143,3.524]],["title/classes/ExamTargetAdd1622378888497.html",[0,0.241,1144,3.821]],["body/classes/ExamTargetAdd1622378888497.html",[0,0.243,2,0.664,3,0.064,4,0.064,5,0.057,8,2.399,9,3.125,10,0.255,11,1.174,12,3.552,13,2.177,14,2.806,15,2.74,16,2.74,17,3.845,18,0.685,20,1.282,21,0.007,22,1.455,23,0.506,24,0.892,25,1.153,26,1.747,27,2.74,29,0.121,30,0.92,33,1.614,38,0.064,39,0.003,43,2.556,62,3.382,66,1.911,67,0.004,68,0.003,73,0.825,94,3.107,123,0.936,124,1.493,125,1.789,130,2.948,133,2.875,228,2.875,325,3.839,404,4.259,519,3.734,533,4.201,538,3.734,732,2.1,961,3.107,963,2.948,1054,4.18,1060,6.45,1137,4.18,1144,6.45,1145,6.45,1146,3.839,1147,4.697,1148,4.697,1149,4.697,1150,5.997,1151,4.697,1152,4.697]],["title/controllers/ExamTargetController.html",[161,1.991,1027,3.567]],["body/controllers/ExamTargetController.html",[0,0.26,3,0.069,4,0.069,5,0.061,10,0.273,11,1.229,13,1.938,18,0.629,20,1.003,21,0.007,22,0.886,23,0.378,24,0.697,25,1.208,26,1.492,29,0.23,38,0.069,39,0.004,42,2.622,46,2.183,67,0.005,68,0.004,82,1.492,118,2.194,123,1.003,161,2.142,163,2.305,165,3.028,170,4.886,190,3.149,191,1.114,193,4.851,194,3.028,195,2.366,196,2.647,197,3.621,199,3.028,200,3.028,201,3.284,202,3.44,211,3.149,212,2.647,213,1.568,218,1.781,504,1.916,724,2.73,731,2.57,732,3.396,904,6.21,918,3.44,919,4.111,920,4.111,992,3.838,1024,4.4,1027,5.142,1033,4.111,1088,4.476,1119,4.476,1153,4.476,1154,6.738,1155,7.223,1156,5.03,1157,5.03,1158,5.03,1159,5.996,1160,5.03,1161,6.738,1162,5.03,1163,5.03,1164,5.03,1165,5.03,1166,5.03,1167,5.03]],["title/interfaces/ExamTargetManagerDto.html",[593,1.353,1168,3.821]],["body/interfaces/ExamTargetManagerDto.html",[3,0.092,4,0.092,5,0.082,10,0.366,21,0.007,23,0.378,24,1.126,29,0.174,38,0.092,39,0.005,67,0.006,68,0.005,73,1.042,118,2.942,593,1.952,594,2.873,717,5.25,724,4.91,731,3.446,732,3.63,924,5.513,1168,6.638,1169,6.002]],["title/classes/ExamTargetNode.html",[0,0.241,1170,3.052]],["body/classes/ExamTargetNode.html",[0,0.273,2,0.746,3,0.072,4,0.072,5,0.064,10,0.287,11,1.27,18,0.773,20,1.052,21,0.007,22,0.929,23,0.518,24,0.732,25,0.946,29,0.136,33,2.391,38,0.072,39,0.004,42,2.054,67,0.005,68,0.004,73,0.893,118,2.303,123,1.551,218,2.187,703,2.778,724,4.225,731,2.697,732,3.947,814,5.009,1042,6.562,1170,5.615,1171,4.315,1172,5.94,1173,6.958,1174,7.783,1175,5.279,1176,5.279,1177,6.958,1178,5.279,1179,4.686,1180,5.279,1181,5.279,1182,5.279,1183,5.279,1184,5.279,1185,4.315,1186,5.279,1187,7.783,1188,5.279]],["title/injectables/ExamTargetNodeFactory.html",[282,1.091,1023,3.052]],["body/injectables/ExamTargetNodeFactory.html",[0,0.296,3,0.078,4,0.078,5,0.07,10,0.311,11,1.34,18,0.536,20,1.143,21,0.007,22,1.01,23,0.412,24,0.795,25,1.028,29,0.209,33,1.971,38,0.078,39,0.004,50,2.443,67,0.005,68,0.004,118,2.502,191,1.27,218,1.516,282,1.714,283,2.185,593,1.66,724,3.987,731,2.931,732,3.818,1006,4.13,1023,4.796,1159,5.105,1170,5.577,1172,4.378,1185,6.003,1189,6.003,1190,4.689,1191,7.344,1192,6.535,1193,6.737,1194,5.737,1195,4.689,1196,5.105,1197,5.105,1198,5.105,1199,5.105,1200,5.105]],["title/interfaces/ExamTargetNodeSchema.html",[593,1.353,1193,3.567]],["body/interfaces/ExamTargetNodeSchema.html",[0,0.298,3,0.079,4,0.079,5,0.07,10,0.313,21,0.007,23,0.507,24,1.022,29,0.21,33,1.983,38,0.079,39,0.004,50,2.458,67,0.005,68,0.004,73,0.946,118,2.517,191,1.278,218,1.525,282,1.721,593,1.67,594,2.458,724,4.647,731,2.948,732,3.631,1006,4.155,1023,3.769,1170,5.305,1172,6.532,1185,6.026,1189,4.717,1190,4.717,1192,5.136,1193,6.903,1195,4.717,1196,5.136,1197,5.136,1198,5.136,1199,5.136,1200,5.136]],["title/classes/ExamTargetRepository.html",[0,0.241,1031,3.365]],["body/classes/ExamTargetRepository.html",[0,0.347,2,0.949,3,0.092,4,0.092,5,0.082,21,0.007,29,0.225,30,1.587,38,0.092,39,0.005,67,0.006,68,0.005,71,2.104,242,4.579,243,3.537,244,2.734,245,2.734,246,2.734,829,4.389,847,5.129,917,4.596,935,5.494,1031,5.834,1201,5.981,1202,6.722]],["title/injectables/ExamTargetService.html",[282,1.091,1024,3.052]],["body/injectables/ExamTargetService.html",[0,0.211,3,0.056,4,0.056,5,0.05,10,0.222,11,1.065,13,2.083,18,0.763,20,1.163,21,0.007,22,1.028,23,0.382,24,1.029,25,1.331,26,1.808,29,0.217,33,2.005,38,0.056,39,0.003,43,1.891,50,2.486,67,0.004,68,0.003,73,0.749,118,1.783,123,1.357,191,0.905,213,1.82,218,1.962,271,1.741,282,1.362,283,1.556,288,2.429,303,2.151,307,6.415,312,3.345,321,4.454,717,2.372,724,3.695,731,2.088,732,3.319,829,2.669,847,3.119,917,2.795,943,2.559,946,3.654,966,3.34,979,2.795,1024,3.811,1025,5.078,1031,5.345,1032,3.637,1037,3.637,1038,3.637,1063,5.194,1109,3.637,1155,6.608,1203,3.637,1204,6.808,1205,7.425,1206,5.836,1207,7.425,1208,6.808,1209,5.836,1210,4.087,1211,4.087,1212,5.836,1213,4.087,1214,4.087,1215,4.087,1216,4.087,1217,4.087,1218,5.836,1219,5.836,1220,4.454,1221,4.087,1222,4.087,1223,5.836,1224,4.087,1225,4.087,1226,4.087,1227,4.087,1228,4.087,1229,4.087]],["title/injectables/ExamTargetTree.html",[282,1.091,1025,3.197]],["body/injectables/ExamTargetTree.html",[0,0.25,3,0.066,4,0.066,5,0.059,10,0.263,11,1.198,18,0.696,20,1.309,21,0.007,22,1.156,23,0.494,24,0.91,25,0.867,29,0.216,33,1.663,38,0.066,39,0.003,49,2.627,50,2.061,67,0.005,68,0.003,73,0.842,118,2.111,123,1.485,191,1.072,213,2.323,218,1.279,282,1.532,283,1.843,288,2.014,302,3.03,312,2.899,504,1.843,724,2.627,731,2.472,732,4.061,1005,3.31,1006,3.484,1023,5.217,1025,4.49,1039,4.307,1040,4.307,1170,5.454,1172,5.01,1179,4.486,1195,3.956,1230,7.11,1231,4.307,1232,7.451,1233,6.565,1234,6.565,1235,6.565,1236,4.84,1237,6.565,1238,4.84,1239,4.84,1240,4.84,1241,4.84,1242,4.84,1243,4.84,1244,4.84,1245,4.84,1246,4.84]],["title/classes/ExamTitle1621036457247.html",[0,0.241,1247,3.821]],["body/classes/ExamTitle1621036457247.html",[0,0.272,2,0.744,3,0.072,4,0.072,5,0.064,8,2.59,9,3.311,10,0.286,11,1.267,12,3.672,13,2.25,14,3.03,15,2.958,16,2.958,17,3.936,18,0.726,20,1.384,21,0.007,22,1.513,23,0.436,24,0.963,25,1.245,26,1.83,27,2.958,29,0.136,30,1.031,38,0.072,39,0.004,43,2.25,67,0.005,68,0.004,73,0.891,123,1.049,124,1.673,125,2.005,130,3.183,133,3.104,147,4.181,504,2.645,505,5.174,521,3.355,538,4.031,1247,6.755,1248,7.355,1249,4.685,1250,5.265,1251,5.265,1252,5.265]],["title/interfaces/ExamUser.html",[170,2.814,593,1.353]],["body/interfaces/ExamUser.html",[3,0.09,4,0.09,5,0.081,10,0.36,21,0.007,23,0.525,29,0.171,38,0.09,39,0.005,40,2.419,41,2.019,67,0.006,68,0.005,73,1.031,118,2.891,170,4.838,198,5.058,593,1.918,594,2.823,596,4.772,795,5.413,1253,6.629]],["title/classes/FFEntity.html",[0,0.241,72,2.089]],["body/classes/FFEntity.html",[0,0.303,2,0.828,3,0.08,4,0.08,5,0.071,10,0.318,18,0.804,21,0.007,23,0.483,29,0.192,30,1.147,38,0.08,39,0.004,40,2.201,41,1.738,67,0.005,68,0.004,71,1.932,72,3.327,73,0.955,79,3.327,80,3.412,81,3.412,82,1.906,96,3.848,97,3.657,99,3.254,100,2.685,101,3.961,102,2.756,103,2.685,104,2.756,105,2.685,106,2.756,1254,5.214,1255,5.859,1256,5.859]],["title/interfaces/FileSendDto.html",[593,1.353,1257,3.365]],["body/interfaces/FileSendDto.html",[3,0.084,4,0.084,5,0.075,10,0.336,21,0.007,23,0.506,38,0.084,39,0.004,41,1.957,67,0.005,68,0.004,73,0.987,123,1.896,593,1.788,594,2.632,1257,5.541,1258,5.5,1259,5.5,1260,8.307,1261,8.775,1262,8.775,1263,8.775,1264,8.775]],["title/interfaces/FindExamByUserDto.html",[593,1.353,1050,3.567]],["body/interfaces/FindExamByUserDto.html",[3,0.084,4,0.084,5,0.075,10,0.334,21,0.007,23,0.47,29,0.216,38,0.084,39,0.004,46,2.84,67,0.005,68,0.004,73,0.985,118,2.687,170,5.277,199,3.709,504,3.435,593,1.783,594,2.624,717,5.088,724,4.758,731,3.147,732,2.754,788,5.035,918,4.213,1005,4.213,1050,5.863,1071,7.164,1265,5.482]],["title/classes/FindPersonalDto.html",[0,0.241,1266,3.567]],["body/classes/FindPersonalDto.html",[0,0.326,2,0.893,3,0.086,4,0.086,5,0.077,10,0.343,18,0.729,21,0.007,23,0.438,29,0.202,38,0.086,39,0.004,41,1.822,46,2.999,67,0.005,68,0.004,73,1.001,109,2.969,175,4.458,881,5.168,1266,5.958,1267,7.538,1268,5.626,1269,6.323,1270,6.464,1271,6.323,1272,5.626,1273,5.168]],["title/injectables/FirebaseAdmin.html",[282,1.091,1274,2.814]],["body/injectables/FirebaseAdmin.html",[0,0.179,3,0.047,4,0.047,5,0.042,8,1.295,10,0.189,11,0.946,18,0.844,20,1.033,21,0.007,22,1.295,23,0.348,24,0.718,25,1.555,26,1.148,29,0.178,38,0.047,39,0.002,60,3.32,64,1.948,66,2.796,67,0.004,68,0.002,73,0.665,123,1.37,191,0.769,213,1.933,218,2.347,282,1.21,283,1.323,288,1.445,312,2.412,389,2.016,594,1.479,814,3.73,1274,3.12,1275,6.945,1276,8.099,1277,3.091,1278,5.516,1279,4.611,1280,5.618,1281,6.873,1282,6.873,1283,6.873,1284,6.873,1285,6.873,1286,6.873,1287,6.116,1288,5.612,1289,3.473,1290,4.303,1291,5.182,1292,3.473,1293,4.611,1294,5.182,1295,3.473,1296,3.473,1297,2.65,1298,5.182,1299,3.473,1300,3.473,1301,4.611,1302,3.473,1303,5.182,1304,3.473,1305,5.182,1306,3.473,1307,4.611,1308,3.473,1309,5.182,1310,3.473,1311,5.182,1312,3.473,1313,5.182,1314,3.473,1315,4.611,1316,6.199,1317,3.473,1318,3.473,1319,3.473,1320,3.473,1321,3.477,1322,2.65,1323,3.091,1324,3.473,1325,3.473,1326,3.473,1327,2.839,1328,3.473,1329,2.65,1330,3.473,1331,3.473,1332,3.473,1333,3.473,1334,3.473,1335,3.473,1336,3.473,1337,3.473,1338,3.473,1339,3.473,1340,3.473,1341,3.473,1342,3.473,1343,3.473,1344,3.473,1345,3.473,1346,3.473]],["title/modules/FirebaseAdminModule.html",[250,1.639,1347,3.365]],["body/modules/FirebaseAdminModule.html",[0,0.231,3,0.061,4,0.061,5,0.054,11,0.817,18,0.581,20,1.241,21,0.007,22,1.096,23,0.349,24,0.863,25,1.116,29,0.2,38,0.061,39,0.003,67,0.004,68,0.003,191,0.992,213,1.941,218,1.645,250,2.848,252,2.163,253,2.106,254,2.288,255,2.288,256,2.163,257,4.297,258,4.151,264,3.18,265,2.288,266,2.288,268,2.511,312,2.422,387,3.062,389,2.599,594,1.907,1086,6.419,1274,5.629,1275,5.46,1288,5.46,1290,4.84,1321,2.511,1322,5.46,1323,3.985,1347,6.431,1348,3.985,1349,3.985,1350,3.985,1351,5.46,1352,4.478,1353,3.985,1354,5.539,1355,4.478,1356,7.231,1357,3.985,1358,5.539,1359,5.288,1360,4.478,1361,5.539,1362,4.478,1363,4.478,1364,5.539,1365,4.478,1366,5.539,1367,4.478,1368,4.478,1369,4.478,1370,3.985]],["title/interfaces/FirebaseAsyncModuleOptions.html",[593,1.353,1359,3.197]],["body/interfaces/FirebaseAsyncModuleOptions.html",[3,0.083,4,0.083,5,0.074,10,0.331,13,1.556,21,0.007,23,0.428,24,1.058,26,1.351,29,0.197,38,0.104,39,0.004,64,3.422,67,0.005,68,0.004,71,1.982,73,0.98,123,1.522,191,1.351,250,2.139,387,5.974,389,5.07,593,2.21,594,2.599,1290,4.781,1321,4.283,1327,4.987,1329,4.656,1359,5.222,1371,4.656,1372,4.987,1373,6.796,1374,6.242,1375,5.43,1376,4.987,1377,5.43,1378,5.43]],["title/interfaces/FirebaseAuthDecodedToken.html",[593,1.353,1379,3.567]],["body/interfaces/FirebaseAuthDecodedToken.html",[3,0.088,4,0.088,5,0.078,10,0.349,21,0.007,23,0.479,24,1.233,38,0.088,39,0.004,60,3.105,67,0.005,68,0.004,73,1.012,123,1.852,492,6.79,593,1.86,594,2.738,703,4.491,1371,4.906,1379,6.019,1380,5.254,1381,5.721,1382,7.917,1383,7.917]],["title/injectables/FirebaseAuthService.html",[282,1.091,1384,3.365]],["body/injectables/FirebaseAuthService.html",[0,0.205,3,0.054,4,0.054,5,0.048,10,0.216,11,1.044,13,1.71,18,0.779,20,1.613,21,0.007,22,1.425,23,0.468,24,1.122,25,1.393,26,1.954,29,0.189,33,1.366,38,0.054,39,0.003,43,1.288,60,1.921,64,3.21,67,0.004,68,0.003,73,0.734,123,1.799,133,1.778,191,0.881,200,3.445,213,2.09,218,2.139,282,1.336,283,1.515,288,1.655,312,2.609,331,4.368,492,5.93,1274,4.678,1293,5.093,1321,3.76,1379,3.035,1380,4.678,1382,3.539,1383,3.539,1384,4.12,1385,6.143,1386,3.539,1387,6.705,1388,4.826,1389,5.723,1390,5.966,1391,5.723,1392,4.368,1393,5.723,1394,3.977,1395,6.705,1396,3.977,1397,5.723,1398,3.977,1399,5.723,1400,3.977,1401,3.977,1402,6.526,1403,6.705,1404,3.977,1405,5.723,1406,3.977,1407,3.539,1408,3.539,1409,3.977,1410,3.977,1411,3.977,1412,3.977,1413,3.977,1414,3.977,1415,3.977,1416,3.977,1417,3.035,1418,3.977,1419,3.977,1420,3.977,1421,3.977,1422,3.977]],["title/injectables/FirebaseCloudMessagingService.html",[282,1.091,1423,3.365]],["body/injectables/FirebaseCloudMessagingService.html",[0,0.272,3,0.072,4,0.072,5,0.064,10,0.286,11,1.267,18,0.726,20,1.384,21,0.007,22,1.223,23,0.436,24,0.963,25,0.944,26,1.538,29,0.201,38,0.072,39,0.004,64,3.895,67,0.005,68,0.004,73,0.891,123,1.549,191,1.166,213,2.424,218,1.391,282,1.621,283,2.005,288,2.191,312,3.025,1274,5.172,1288,6.307,1297,4.018,1307,6.181,1321,4.359,1385,5.95,1392,5.3,1407,6.181,1423,5,1424,6.755,1425,4.685,1426,7.773,1427,7.773,1428,6.946,1429,5.265,1430,6.307,1431,7.773,1432,7.773,1433,5.265,1434,5.265,1435,5.265,1436,5.265]],["title/injectables/FirebaseFirestoreService.html",[282,1.091,1437,3.567]],["body/injectables/FirebaseFirestoreService.html",[0,0.283,3,0.075,4,0.075,5,0.067,10,0.297,11,1.3,18,0.74,20,1.42,21,0.007,22,1.255,23,0.444,24,0.988,25,0.981,29,0.217,38,0.075,39,0.004,64,3.996,67,0.005,68,0.004,73,0.914,123,1.579,191,1.212,213,2.47,218,1.447,282,1.663,283,2.085,288,2.278,312,3.083,1274,5.238,1280,6.859,1301,6.341,1321,4.443,1385,6.041,1392,5.438,1437,5.438,1438,4.872,1439,7.126,1440,7.126,1441,7.126,1442,5.475,1443,5.475,1444,7.05,1445,5.475,1446,5.475,1447,5.475,1448,5.475,1449,5.475]],["title/modules/FirebaseModule.html",[250,1.639,1450,3.365]],["body/modules/FirebaseModule.html",[0,0.219,3,0.058,4,0.058,5,0.052,11,0.774,13,1.081,18,0.56,20,1.194,21,0.007,22,1.055,23,0.336,24,0.83,25,1.074,29,0.214,38,0.058,39,0.003,67,0.004,68,0.003,91,2.1,191,0.939,213,1.868,218,1.583,250,2.897,252,2.048,253,1.994,254,2.166,255,2.166,256,2.048,257,4.223,258,4.223,264,3.061,265,2.166,266,2.166,268,3.36,312,2.331,419,3.236,658,5.331,1086,6.308,1288,4.572,1290,4.726,1321,2.378,1347,3.053,1351,3.236,1353,3.774,1354,5.331,1356,7.087,1357,3.774,1358,5.331,1359,5.163,1361,6.182,1366,5.331,1370,5.331,1384,6.675,1408,3.774,1423,6.675,1424,3.466,1437,5.302,1450,6.575,1451,3.774,1452,3.774,1453,3.774,1454,4.241,1455,4.241,1456,4.241,1457,5.331,1458,4.241,1459,4.241,1460,4.241,1461,5.001,1462,4.241,1463,4.241,1464,4.241]],["title/interfaces/FirebaseModuleOptions.html",[593,1.353,1290,2.926]],["body/interfaces/FirebaseModuleOptions.html",[3,0.081,4,0.081,5,0.072,10,0.322,13,1.513,21,0.007,23,0.461,24,1.198,26,1.314,29,0.194,38,0.102,39,0.004,64,3.327,67,0.005,68,0.004,71,1.54,73,0.962,123,1.816,191,1.314,250,2.079,387,4.056,389,3.443,593,2.171,594,2.526,1290,5.151,1321,4.207,1327,7.067,1329,6.599,1359,4.056,1371,4.527,1372,4.848,1373,5.279,1375,5.279,1376,7.067,1377,7.322,1378,5.279]],["title/injectables/FirebaseStorageService.html",[282,1.091,1461,3.365]],["body/injectables/FirebaseStorageService.html",[0,0.251,3,0.066,4,0.066,5,0.08,10,0.263,11,1.2,12,2.737,13,1.902,18,0.697,20,1.311,21,0.007,22,1.158,23,0.418,24,0.912,25,0.87,26,1.456,29,0.193,33,1.667,38,0.066,39,0.003,43,1.572,64,3.688,67,0.005,68,0.003,73,0.844,91,1.701,123,1.812,124,1.542,125,1.848,191,1.074,213,2.326,218,1.282,282,1.535,283,1.848,288,2.019,312,2.903,684,3.966,819,4.294,1179,3.959,1260,6.639,1274,5.033,1287,6.639,1297,3.703,1315,5.852,1321,4.184,1385,5.757,1392,5.019,1461,4.734,1465,4.317,1466,5.693,1467,6.577,1468,4.852,1469,6.098,1470,7.998,1471,7.998,1472,7.461,1473,4.852,1474,4.852,1475,4.852,1476,4.852,1477,4.852,1478,4.852,1479,4.317,1480,4.852,1481,4.852,1482,4.852]],["title/injectables/FirebaseUploader.html",[282,1.091,1483,3.567]],["body/injectables/FirebaseUploader.html",[0,0.28,3,0.074,4,0.074,5,0.066,8,2.018,10,0.294,11,1.291,13,2.009,18,0.661,20,1.41,21,0.007,22,1.245,23,0.397,24,0.98,25,0.97,26,1.566,29,0.224,38,0.074,39,0.004,67,0.005,68,0.004,91,1.897,123,1.41,124,1.72,125,2.061,191,1.199,212,2.849,213,1.688,218,1.431,282,1.651,283,2.061,288,2.252,1179,4.743,1257,6.014,1461,6.014,1466,5.398,1483,5.398,1484,7.011,1485,4.817,1486,5.413,1487,5.413,1488,7.074,1489,6.294,1490,5.413,1491,4.817,1492,5.413,1493,5.413,1494,4.817,1495,4.817,1496,4.817,1497,4.619,1498,4.817,1499,5.413,1500,5.413,1501,5.413,1502,5.413]],["title/classes/Grade.html",[0,0.241,228,2.089]],["body/classes/Grade.html",[0,0.206,2,0.563,3,0.054,4,0.054,5,0.048,10,0.216,18,0.835,21,0.007,22,1.009,23,0.511,29,0.216,30,0.78,38,0.054,39,0.003,40,1.542,41,1.815,42,1.551,67,0.004,68,0.003,69,2.163,71,1.488,72,3.281,73,0.735,79,2.562,80,2.627,81,2.627,82,1.979,83,3.451,85,2.768,86,3.202,96,1.874,97,3.281,98,1.925,99,2.67,100,1.826,101,2.928,102,1.874,103,1.826,104,1.874,105,1.826,106,1.874,111,2.928,112,2.163,113,4.202,114,3.451,116,2.602,139,4.793,226,3.257,228,2.562,248,2.725,324,5.486,517,4.142,523,4.843,557,5.1,560,4.374,665,2.235,668,3.546,812,5.486,844,5.122,845,5.122,961,3.545,963,3.364,1503,3.546,1504,6.712,1505,6.712,1506,6.712,1507,3.985,1508,3.985,1509,3.985,1510,5.732,1511,3.985,1512,3.985,1513,3.985,1514,3.985,1515,3.985,1516,3.985,1517,3.985,1518,3.985,1519,3.985]],["title/classes/GradeIndex1624560625346.html",[0,0.241,1520,3.821]],["body/classes/GradeIndex1624560625346.html",[0,0.363,2,0.756,3,0.073,4,0.073,5,0.065,8,2.618,9,3.338,10,0.425,11,1.281,12,3.689,13,2.261,14,3.063,15,2.991,16,2.991,17,3.948,18,0.732,20,1.4,21,0.007,22,1.521,23,0.439,24,0.973,25,1.259,26,1.842,27,2.991,29,0.138,30,1.048,38,0.073,39,0.004,43,2.275,67,0.005,68,0.004,73,0.901,123,1.067,124,1.701,125,2.038,129,3.66,160,3.66,534,4.585,536,3.853,1520,6.799,1521,7.403,1522,4.763,1523,5.353,1524,5.353,1525,5.353,1526,7.022]],["title/classes/GradeRepository.html",[0,0.241,580,3.365]],["body/classes/GradeRepository.html",[0,0.266,2,0.728,3,0.07,4,0.07,5,0.063,10,0.28,11,1.249,18,0.481,20,1.027,21,0.007,22,0.907,23,0.289,24,0.714,25,0.923,26,1.516,29,0.231,30,1.341,33,1.77,38,0.07,39,0.004,46,2.763,67,0.005,68,0.004,71,1.777,218,1.361,220,4.286,221,3.523,228,2.303,242,4.047,243,2.711,244,2.095,245,2.095,246,2.095,517,4.443,523,2.99,580,4.928,812,5.596,961,3.307,963,3.138,1072,5.596,1084,4.584,1270,6.253,1273,4.21,1527,4.584,1528,6.092,1529,6.092,1530,5.151,1531,4.584,1532,3.931,1533,4.21,1534,4.21,1535,4.584,1536,5.151,1537,5.151,1538,6.092,1539,5.151,1540,5.151,1541,5.151,1542,5.151,1543,4.21,1544,5.151]],["title/injectables/GradeService.html",[282,1.091,575,3.197]],["body/injectables/GradeService.html",[0,0.274,3,0.072,4,0.072,5,0.065,10,0.288,11,1.274,18,0.729,20,1.392,21,0.007,22,1.23,23,0.438,24,0.968,25,1.252,26,1.836,29,0.228,38,0.072,39,0.004,46,1.72,67,0.005,68,0.004,191,1.175,213,1.655,218,1.846,228,2.373,271,2.261,282,1.63,283,2.022,286,5.414,288,2.906,303,2.793,312,2.066,517,4.542,575,4.776,580,6.367,581,4.724,1270,6.328,1273,4.339,1528,6.214,1529,6.214,1531,4.724,1532,4.051,1535,4.724,1545,4.724,1546,5.308,1547,5.308,1548,5.308,1549,5.308,1550,5.308,1551,5.308,1552,5.308]],["title/classes/HttpExceptionFilter.html",[0,0.241,655,3.052]],["body/classes/HttpExceptionFilter.html",[0,0.205,2,0.562,3,0.054,4,0.054,5,0.048,8,2.134,10,0.216,11,1.044,18,0.626,20,1.141,21,0.007,22,1.18,23,0.321,24,0.793,25,0.713,29,0.189,33,2.932,38,0.054,39,0.003,41,1.336,50,2.856,67,0.004,68,0.003,73,0.734,91,1.394,123,1.549,124,1.264,125,1.515,184,2.308,191,0.881,212,2.093,213,2.286,288,1.655,312,2.609,370,5.284,371,2.394,513,4.591,520,2.49,593,1.656,655,3.737,806,5.015,838,2.863,1179,3.445,1417,5.116,1430,5.116,1553,5.596,1554,3.035,1555,5.48,1556,3.977,1557,5.723,1558,4.678,1559,4.678,1560,5.994,1561,5.116,1562,5.994,1563,3.977,1564,3.977,1565,4.368,1566,4.678,1567,2.863,1568,4.678,1569,3.035,1570,4.12,1571,5.48,1572,4.678,1573,3.25,1574,4.12,1575,3.035,1576,3.25,1577,3.035,1578,3.25,1579,3.25,1580,3.25,1581,3.25,1582,3.25,1583,3.25,1584,3.25,1585,3.25,1586,3.25,1587,5.48,1588,3.25,1589,3.035,1590,3.25,1591,3.25,1592,4.678,1593,3.25,1594,3.25,1595,3.25,1596,3.25,1597,3.25,1598,4.678,1599,3.25,1600,3.25,1601,3.25,1602,3.25,1603,3.25,1604,3.25,1605,3.25,1606,3.25,1607,3.25,1608,3.25,1609,3.25,1610,3.25,1611,3.25,1612,3.25,1613,3.25]],["title/interfaces/IClassValidatorException.html",[593,1.353,1574,3.365]],["body/interfaces/IClassValidatorException.html",[0,0.219,3,0.058,4,0.058,5,0.052,8,1.585,10,0.231,21,0.007,22,0.748,23,0.39,29,0.195,33,2.983,38,0.058,39,0.003,41,1.764,50,2.556,67,0.004,68,0.003,73,0.77,91,1.49,123,1.76,184,2.467,191,0.941,212,2.237,213,1.871,312,1.654,370,4.542,371,2.559,513,4.731,520,2.661,593,1.736,594,1.81,655,2.775,806,4.103,1179,3.612,1417,3.243,1430,6.313,1553,3.243,1554,3.243,1555,4.904,1558,3.474,1559,3.474,1560,4.904,1561,3.243,1562,4.904,1565,4.579,1566,4.904,1567,3.059,1568,4.904,1569,3.243,1570,4.32,1571,6.761,1572,4.904,1573,3.474,1574,5.007,1575,5.767,1576,3.474,1577,3.243,1578,3.474,1579,3.474,1580,3.474,1581,3.474,1582,3.474,1583,3.474,1584,3.474,1585,3.474,1586,3.474,1587,5.685,1588,3.474,1589,3.243,1590,3.474,1591,3.474,1592,4.904,1593,3.474,1594,3.474,1595,3.474,1596,3.474,1597,3.474,1598,4.904,1599,3.474,1600,3.474,1601,3.474,1602,3.474,1603,3.474,1604,3.474,1605,3.474,1606,3.474,1607,3.474,1608,3.474,1609,3.474,1610,3.474,1611,3.474,1612,3.474,1613,3.474]],["title/interfaces/IEntity.html",[593,1.353,1614,3.567]],["body/interfaces/IEntity.html",[0,0.147,3,0.039,4,0.039,5,0.035,8,1.061,9,1.895,10,0.154,12,1.851,13,1.135,16,1.212,17,2.334,21,0.007,22,0.965,23,0.25,26,0.985,27,1.212,29,0.16,30,0.557,31,2.171,33,2.959,34,2.582,36,3.539,38,0.039,39,0.002,40,2.4,41,1.279,43,3.006,45,5.836,46,2.31,55,4.237,56,2.171,57,3.073,58,2.325,59,6.089,60,2.149,61,2.415,62,5.363,63,1.781,67,0.003,68,0.002,73,0.571,91,0.997,99,2.179,142,2.171,221,3.043,228,3.187,404,5.14,407,2.171,472,2.325,507,2.048,509,2.171,516,3.944,517,3.54,519,4.138,520,4.463,521,2.149,523,4.138,525,2.171,527,4.181,531,3.203,560,3.395,593,0.823,594,1.212,963,2.039,1543,5.064,1614,6.406,1615,2.171,1616,2.171,1617,2.531,1618,2.531,1619,2.531,1620,2.325,1621,2.325,1622,2.531,1623,6.186,1624,2.325,1625,2.325,1626,2.325,1627,2.171,1628,2.531,1629,2.531,1630,2.531,1631,2.531,1632,2.531,1633,2.531,1634,2.325,1635,2.531,1636,3.959,1637,5.514,1638,6.344,1639,2.531,1640,3.959,1641,6.63]],["title/interfaces/IException.html",[593,1.353,1570,3.365]],["body/interfaces/IException.html",[0,0.207,3,0.055,4,0.055,5,0.049,8,1.492,10,0.217,21,0.007,22,1.295,23,0.469,24,1.124,29,0.19,33,2.937,38,0.055,39,0.003,41,1.717,50,2.449,67,0.004,68,0.003,73,0.737,91,1.403,123,1.783,184,4.269,191,0.886,212,2.106,213,1.793,312,1.557,370,4.393,371,2.409,513,4.604,520,2.505,593,1.664,594,1.704,655,2.613,806,3.931,1179,4.689,1417,3.054,1430,6.188,1553,3.054,1554,3.054,1555,4.699,1558,3.271,1559,3.271,1560,4.699,1561,3.054,1562,4.699,1565,4.387,1566,4.699,1567,2.881,1568,4.699,1569,3.054,1570,4.843,1571,6.628,1572,6.366,1573,6.011,1574,4.138,1575,3.054,1576,3.271,1577,3.054,1578,3.271,1579,3.271,1580,3.271,1581,3.271,1582,3.271,1583,3.271,1584,3.271,1585,3.271,1586,3.271,1587,5.499,1588,3.271,1589,3.054,1590,3.271,1591,3.271,1592,4.699,1593,3.271,1594,3.271,1595,3.271,1596,3.271,1597,3.271,1598,4.699,1599,3.271,1600,3.271,1601,3.271,1602,3.271,1603,3.271,1604,3.271,1605,3.271,1606,3.271,1607,3.271,1608,3.271,1609,3.271,1610,3.271,1611,3.271,1612,3.271,1613,3.271]],["title/modules/InfraModule.html",[250,1.639,365,3.365]],["body/modules/InfraModule.html",[0,0.28,3,0.074,4,0.074,5,0.066,21,0.007,29,0.23,38,0.074,39,0.004,67,0.005,68,0.004,163,3.248,191,1.202,250,2.766,252,2.622,253,2.553,254,2.773,255,2.773,256,2.622,257,3.62,258,4.031,264,3.62,265,2.773,266,2.773,268,4.425,365,6.525,369,5.408,370,5.462,371,3.268,387,3.712,389,3.151,1364,4.831,1450,6.246,1457,4.831,1483,5.408,1494,4.831,1497,6.003,1498,4.831,1642,4.831,1643,4.831,1644,5.428,1645,5.428,1646,6.021,1647,5.428,1648,4.831,1649,5.428,1650,5.428,1651,5.428]],["title/injectables/JwtGuard.html",[196,2.46,282,1.091]],["body/injectables/JwtGuard.html",[0,0.362,3,0.096,4,0.096,5,0.085,21,0.007,29,0.215,38,0.096,39,0.005,67,0.006,68,0.005,71,1.821,191,1.554,196,4.376,282,1.941,283,2.672,1652,6.244,1653,7.016,1654,5.735,1655,7.016]],["title/interfaces/JwtPayload.html",[593,1.353,1656,3.567]],["body/interfaces/JwtPayload.html",[3,0.092,4,0.092,5,0.082,10,0.367,21,0.007,23,0.528,38,0.092,39,0.005,67,0.006,68,0.005,73,1.044,123,1.875,492,6.91,593,1.959,594,2.883,1656,6.211,1657,6.023,1658,6.023]],["title/injectables/JwtStrategy.html",[282,1.091,437,3.365]],["body/injectables/JwtStrategy.html",[0,0.236,3,0.062,4,0.062,5,0.056,10,0.248,11,1.153,13,1.845,18,0.59,20,1.259,21,0.007,22,1.112,23,0.354,24,0.876,25,0.82,26,1.399,29,0.235,33,2.17,36,2.407,38,0.062,39,0.003,43,2.046,46,2.344,49,3.429,50,2.69,60,3.051,61,2.483,67,0.004,68,0.003,71,1.187,91,1.603,118,1.995,191,1.013,213,1.97,218,1.209,282,1.474,283,1.742,288,2.628,312,2.458,370,5.667,371,2.754,374,3.491,418,5.3,419,3.491,437,4.547,440,3.491,441,3.491,460,5.432,471,5.914,473,4.07,620,3.739,795,2.754,1654,3.739,1656,5.955,1659,4.07,1660,6.317,1661,4.574,1662,4.574,1663,6.317,1664,4.574,1665,4.574,1666,4.574,1667,4.07,1668,4.574,1669,4.574,1670,4.574,1671,4.07,1672,3.739,1673,4.574,1674,4.574,1675,4.574,1676,4.574,1677,4.574,1678,4.574,1679,4.574,1680,4.574,1681,4.574,1682,4.574,1683,6.317,1684,4.574]],["title/modules/LoggerModule.html",[250,1.639,366,3.365]],["body/modules/LoggerModule.html",[0,0.321,3,0.085,4,0.085,5,0.076,21,0.007,29,0.2,38,0.085,39,0.004,67,0.005,68,0.004,191,1.377,250,2.947,252,3.004,253,2.925,254,3.178,255,3.178,256,3.004,257,4.296,258,4.296,264,3.948,265,3.178,266,3.178,366,6.729,804,6.973,1685,5.535,1686,5.535,1687,5.535,1688,6.22,1689,6.22]],["title/classes/LoginDto.html",[0,0.241,416,3.197]],["body/classes/LoginDto.html",[0,0.394,2,0.859,3,0.083,4,0.083,5,0.074,10,0.33,18,0.712,21,0.007,23,0.427,29,0.215,38,0.083,39,0.004,57,4.668,61,4.137,67,0.005,68,0.004,71,1.978,73,0.978,82,1.688,97,2.719,123,1.659,416,5.212,425,5.967,427,3.972,430,4.588,431,2.788,475,4.971,694,5.412,695,6.352,697,5.412,1690,5.412,1691,6.082,1692,6.082,1693,6.082,1694,4.971,1695,6.082,1696,6.082]],["title/injectables/PayloadInterceptor.html",[282,1.091,656,3.365]],["body/injectables/PayloadInterceptor.html",[0,0.311,3,0.082,4,0.082,5,0.073,8,2.246,10,0.327,11,1.382,18,0.563,20,1.201,21,0.007,22,1.061,23,0.338,24,0.835,25,1.08,29,0.214,38,0.082,39,0.004,67,0.005,68,0.004,191,1.334,218,1.592,282,1.768,283,2.295,656,5.454,1220,4.598,1469,4.924,1697,5.361,1698,7.576,1699,7.576,1700,7.738,1701,8.288,1702,8.696,1703,6.025,1704,6.025,1705,8.288,1706,7.576,1707,5.361,1708,6.025,1709,6.025]],["title/classes/Period.html",[0,0.241,517,2.321]],["body/classes/Period.html",[0,0.239,2,0.654,3,0.063,4,0.063,5,0.056,10,0.346,18,0.828,21,0.007,22,1.282,23,0.516,24,0.883,29,0.188,30,0.907,38,0.063,39,0.003,40,1.714,41,1.081,42,1.801,67,0.004,68,0.003,71,1.653,72,3.505,73,0.817,79,2.847,80,2.919,81,2.919,82,1.964,85,3.517,90,4.159,91,2.233,96,2.177,97,3.505,98,2.236,99,3.463,100,2.122,101,3.176,102,2.177,103,2.122,104,2.177,105,2.122,106,2.177,111,3.421,112,2.513,114,3.834,123,1.269,391,3.697,396,3.333,504,3.132,508,5.985,517,3.162,665,2.596,715,5.985,716,5.985,1112,3.784,1710,4.12,1711,7.281,1712,4.629,1713,4.629,1714,4.629,1715,4.629,1716,3.784,1717,4.629,1718,4.629]],["title/classes/PeriodIndex1624547816204.html",[0,0.241,1719,3.821]],["body/classes/PeriodIndex1624547816204.html",[0,0.233,2,0.639,3,0.062,4,0.062,5,0.055,8,2.336,9,3.062,10,0.39,11,1.143,12,3.51,13,2.151,14,2.733,15,2.668,16,2.668,17,3.813,18,0.672,20,1.249,21,0.007,22,1.436,23,0.403,24,0.868,25,1.123,26,1.719,27,2.668,29,0.117,30,0.885,38,0.062,39,0.003,43,2.857,66,2.548,67,0.004,68,0.003,73,0.804,86,2.733,123,0.901,124,1.437,125,1.722,129,3.091,130,3.866,133,2.8,136,2.871,145,4.506,147,5.079,148,3.401,149,3.772,151,4.674,152,3.772,154,4.506,159,3.297,160,3.091,504,3.213,507,3.254,509,3.45,516,6.073,517,3.11,538,3.637,543,6.908,544,5.121,1719,6.345,1720,6.908,1721,4.023,1722,4.52,1723,4.52,1724,4.52,1725,6.265]],["title/classes/PeriodRepository.html",[0,0.241,582,3.365]],["body/classes/PeriodRepository.html",[0,0.35,2,0.956,3,0.092,4,0.092,5,0.082,21,0.007,29,0.225,30,1.594,38,0.092,39,0.005,67,0.006,68,0.005,71,2.113,242,4.593,243,3.562,244,2.753,245,2.753,246,2.753,517,3.361,582,5.859,1532,5.166,1726,6.023,1727,6.769]],["title/injectables/PeriodService.html",[282,1.091,576,3.197]],["body/injectables/PeriodService.html",[0,0.224,3,0.059,4,0.059,5,0.053,10,0.236,11,1.112,13,2.125,18,0.713,20,1.215,21,0.007,22,1.073,23,0.342,24,0.845,25,1.262,26,1.845,29,0.208,30,0.851,33,2.094,38,0.059,39,0.003,43,1.975,49,3.309,50,2.596,67,0.004,68,0.003,99,3.036,191,0.962,213,1.355,218,2.017,271,1.851,282,1.423,283,1.655,286,4.984,288,2.537,302,2.721,303,2.287,312,1.691,330,4.982,517,4.248,576,4.169,582,5.998,583,3.868,715,4.652,716,4.652,815,3.317,816,3.317,818,3.129,1532,3.317,1728,3.868,1729,7.632,1730,7.041,1731,4.346,1732,4.346,1733,4.346,1734,4.346,1735,4.346,1736,7.041,1737,4.346,1738,4.346,1739,4.346,1740,4.346,1741,4.346,1742,4.346,1743,4.346,1744,7.632,1745,6.096,1746,4.346,1747,6.096,1748,4.346,1749,6.096,1750,4.346,1751,4.346,1752,6.096,1753,6.096,1754,4.346,1755,4.346]],["title/classes/PersonalQuestionGroup.html",[0,0.241,1756,3.365]],["body/classes/PersonalQuestionGroup.html",[0,0.317,2,0.621,3,0.06,4,0.06,5,0.053,10,0.239,11,1.121,13,1.806,18,0.574,20,1.225,21,0.007,22,1.082,23,0.345,24,0.852,25,0.788,26,1.361,29,0.226,33,2.434,38,0.06,39,0.005,43,1.991,46,2.295,50,1.872,67,0.004,68,0.003,91,1.541,109,2.483,213,1.916,218,1.872,228,1.965,248,3.006,271,1.872,288,2.557,303,2.313,312,2.391,504,3.335,575,5.87,616,2.313,618,2.647,849,4.265,855,3.355,943,2.752,946,3.847,961,3.705,962,3.593,963,3.515,964,3.593,979,3.006,1112,3.593,1716,3.593,1756,4.423,1757,6.304,1758,3.912,1759,7.084,1760,5.245,1761,4.396,1762,4.396,1763,4.396,1764,4.396,1765,4.689,1766,4.423,1767,3.593,1768,3.593,1769,3.912,1770,3.355,1771,4.396,1772,4.396,1773,6.145,1774,4.396,1775,4.396,1776,6.145,1777,4.396,1778,4.396,1779,4.396,1780,3.912,1781,4.396,1782,4.396]],["title/classes/Professor.html",[0,0.241,961,2.258]],["body/classes/Professor.html",[0,0.223,2,0.611,3,0.059,4,0.059,5,0.053,10,0.235,18,0.848,21,0.007,23,0.514,26,1.555,29,0.181,30,0.847,34,3.527,36,3.198,38,0.059,39,0.003,40,1.635,41,1.01,42,2.365,46,2.826,63,3.804,67,0.004,68,0.003,71,1.577,72,1.934,73,0.779,74,2.21,79,2.716,80,2.785,81,2.785,82,1.989,85,3.679,91,2.67,94,3.679,96,2.035,97,3.963,98,2.09,99,2.794,100,1.983,101,3.064,102,2.035,103,1.983,104,2.035,105,1.983,106,2.035,123,1.211,124,1.375,218,1.143,228,2.716,237,4.967,248,2.959,391,3.527,392,3.408,612,3.536,619,4.155,665,2.427,795,3.658,814,4.374,844,3.302,845,4.637,961,2.935,1770,5.36,1783,3.85,1784,7.024,1785,4.967,1786,3.85,1787,5.407,1788,4.327,1789,3.85,1790,3.85,1791,3.85,1792,3.85,1793,3.85,1794,3.85,1795,4.327,1796,4.327]],["title/classes/ProfessorRepository.html",[0,0.241,584,3.365]],["body/classes/ProfessorRepository.html",[0,0.35,2,0.956,3,0.092,4,0.092,5,0.082,21,0.007,29,0.225,30,1.594,38,0.092,39,0.005,67,0.006,68,0.005,71,2.113,242,4.593,243,3.562,244,2.753,245,2.753,246,2.753,584,5.859,961,3.269,1533,5.532,1797,6.023,1798,6.769]],["title/injectables/ProfessorService.html",[282,1.091,577,3.197]],["body/injectables/ProfessorService.html",[0,0.26,3,0.069,4,0.069,5,0.061,10,0.274,11,1.232,18,0.711,20,1.516,21,0.007,22,1.34,23,0.427,24,1.055,25,1.21,26,1.799,29,0.23,30,0.988,33,1.733,38,0.069,39,0.004,67,0.005,68,0.004,82,1.117,191,1.117,213,1.572,218,1.784,244,3.305,245,2.051,246,2.051,271,2.148,282,1.576,283,1.921,287,3.918,288,2.809,303,2.654,312,1.962,331,3.849,577,4.616,584,5.849,585,4.488,786,4.891,943,3.157,946,4.226,961,3.26,972,3.63,1069,3.449,1533,4.122,1799,4.488,1800,6.007,1801,5.043,1802,6.007,1803,5.043,1804,6.007,1805,5.961,1806,5.043,1807,4.488,1808,4.488,1809,5.043,1810,4.488,1811,5.043]],["title/classes/Question.html",[0,0.241,76,1.859]],["body/classes/Question.html",[0,0.182,2,0.497,3,0.048,4,0.048,5,0.043,10,0.284,18,0.846,21,0.007,23,0.525,24,0.959,29,0.179,30,0.689,38,0.048,39,0.002,40,1.408,41,1.726,42,1.369,67,0.004,68,0.002,69,4.013,71,1.358,72,3.587,73,0.671,76,2.081,79,3.092,80,3.17,81,3.17,82,2.005,83,2.118,85,3.571,86,3.017,90,4.517,91,2.716,96,1.654,97,3.587,98,1.699,99,3.082,100,2.398,101,2.724,102,1.654,103,2.398,104,1.654,105,2.398,106,1.654,109,3.005,111,3.5,112,2.84,113,3.275,114,3.15,123,1.544,124,2.198,324,5.105,391,3.037,396,2.532,505,4.33,512,2.934,555,3.91,616,3.64,617,2.405,618,2.118,648,3.76,665,1.973,703,2.753,751,5.558,752,5.558,753,5.105,754,5.105,818,3.766,833,2.297,834,2.297,835,2.297,849,3.76,1812,3.13,1813,3.518,1814,3.518,1815,3.518,1816,3.518,1817,3.518,1818,3.518,1819,3.518,1820,3.518,1821,3.518,1822,3.518,1823,3.518,1824,3.518]],["title/controllers/QuestionController.html",[161,1.991,1825,3.567]],["body/controllers/QuestionController.html",[0,0.157,3,0.041,4,0.041,5,0.037,10,0.165,11,0.854,13,2.339,18,0.713,20,1.521,21,0.007,22,1.344,23,0.484,24,1.058,25,1.368,26,1.888,29,0.217,38,0.041,39,0.002,40,1.971,41,1.991,42,2.223,66,1.236,67,0.003,68,0.002,76,3.216,82,1.69,109,2.762,136,2.618,161,1.294,163,1.393,165,1.829,167,2.931,176,1.902,177,2.319,181,2.187,183,2.819,184,4.025,185,3.827,186,2.187,188,2.078,189,4.991,190,1.902,191,0.673,193,5.673,194,1.829,195,1.429,196,1.599,211,1.902,212,1.599,213,0.947,218,2.017,222,2.187,224,2.319,287,2.718,290,3.576,297,1.984,300,1.984,474,2.542,648,2.819,734,3.907,745,4.585,746,4.113,748,5.389,916,1.902,953,3.827,990,2.483,992,2.319,994,2.483,1015,2.483,1072,2.483,1825,3.573,1826,2.704,1827,5.084,1828,4.167,1829,4.36,1830,2.704,1831,3.039,1832,2.704,1833,3.039,1834,3.039,1835,2.704,1836,4.621,1837,3.039,1838,2.704,1839,4.683,1840,3.039,1841,2.704,1842,3.039,1843,3.039,1844,4.621,1845,2.704,1846,3.039,1847,4.683,1848,5.673,1849,2.704,1850,3.039,1851,5.712,1852,2.483,1853,2.704,1854,2.704,1855,2.319,1856,2.483,1857,2.704,1858,1.902,1859,2.483,1860,2.319,1861,2.704,1862,2.704,1863,3.039,1864,3.039,1865,3.039,1866,3.039,1867,3.039,1868,3.039,1869,3.039,1870,3.039,1871,3.039,1872,3.039,1873,3.039]],["title/classes/QuestionFindDto.html",[0,0.241,1836,3.365]],["body/classes/QuestionFindDto.html",[0,0.413,2,0.93,3,0.09,4,0.09,5,0.08,10,0.357,18,0.615,21,0.007,23,0.369,24,1.109,29,0.17,38,0.09,39,0.005,41,1.868,67,0.006,68,0.005,73,1.027,82,1.458,109,2.805,431,3.017,648,5.191,649,4.645,683,4.818,1836,5.761,1874,7.121,1875,5.858,1876,6.583,1877,6.583]],["title/classes/QuestionGroup.html",[0,0.241,616,2.46]],["body/classes/QuestionGroup.html",[0,0.373,2,0.47,3,0.045,4,0.045,5,0.04,10,0.272,11,0.916,18,0.838,21,0.007,23,0.516,25,0.597,29,0.187,30,0.652,38,0.045,39,0.002,40,1.351,41,1.685,42,1.295,67,0.003,68,0.002,71,1.303,72,3.522,73,0.644,76,2.872,79,3.008,80,3.084,81,3.084,82,1.986,83,2.004,85,3.25,86,2.935,90,3.278,91,1.759,94,1.608,96,1.565,97,3.522,98,1.608,99,3.019,100,2.301,101,2.636,102,1.565,103,2.301,104,1.565,105,2.301,106,1.565,109,2.909,111,3.311,112,2.725,113,3.142,114,3.022,118,1.452,123,1,124,2.412,175,3.541,316,3.783,391,2.914,396,2.396,504,3,512,2.815,521,2.919,535,3.638,555,3.783,616,2.642,617,5.675,665,1.867,703,3.541,724,1.807,732,1.488,813,5.5,818,4.844,819,4.394,833,2.173,834,2.173,835,2.173,836,4.939,838,2.396,855,2.54,856,2.72,857,2.72,1716,2.72,1878,2.962,1879,3.328,1880,3.328,1881,3.328,1882,3.328,1883,2.962,1884,3.328,1885,3.328,1886,3.328,1887,3.328,1888,3.328,1889,3.328,1890,3.328,1891,3.328,1892,3.328,1893,3.328,1894,3.328,1895,2.962,1896,3.328,1897,3.328,1898,3.328,1899,3.328,1900,3.328]],["title/classes/QuestionGroup1620179231630.html",[0,0.241,1901,3.821]],["body/classes/QuestionGroup1620179231630.html",[0,0.307,2,0.592,3,0.057,4,0.057,5,0.051,8,2.217,9,2.941,10,0.228,11,1.085,12,3.427,13,2.1,14,2.593,15,2.532,16,2.532,17,3.749,18,0.645,20,1.185,21,0.007,22,1.396,23,0.387,24,0.824,25,1.066,26,1.664,27,2.532,29,0.108,30,0.821,38,0.057,39,0.003,40,2.021,43,2.668,66,1.706,67,0.004,68,0.003,73,0.763,76,2.988,86,3.012,123,0.836,124,2.692,125,1.597,129,4.065,130,3.775,131,4.065,132,5.633,133,4.163,134,5.633,135,4.065,136,3.165,137,4.065,138,4.065,144,4.065,145,4.361,146,4.065,147,3.579,148,2.277,149,2.525,151,3.579,152,2.525,154,3.451,159,2.207,160,4.065,405,3.882,505,3.721,511,4.279,521,2.026,534,3.882,537,4.537,539,4.537,540,3.201,753,3.428,754,3.428,1901,6.14,1902,6.685,1903,3.732,1904,4.194,1905,4.194,1906,4.194,1907,3.732,1908,3.732,1909,3.201]],["title/controllers/QuestionGroupController.html",[161,1.991,1910,3.567]],["body/controllers/QuestionGroupController.html",[0,0.144,3,0.038,4,0.038,5,0.034,10,0.151,11,0.799,13,2.342,18,0.715,20,1.473,21,0.007,22,1.302,23,0.481,24,1.025,25,1.372,26,1.937,29,0.216,38,0.038,39,0.002,40,1.902,41,1.949,42,2.104,46,2.48,66,1.134,67,0.003,68,0.002,76,2.649,82,1.695,109,2.76,136,2.478,161,1.187,163,1.277,165,1.678,166,2.612,167,2.741,175,2.846,176,1.745,177,2.127,181,2.006,183,2.636,184,3.865,185,3.578,186,2.006,188,2.994,189,4.794,190,1.745,191,0.617,192,3.152,193,5.669,194,1.678,195,1.311,196,1.467,199,1.678,200,2.636,201,1.82,202,1.906,211,1.745,212,1.467,213,0.869,215,2.48,218,2.023,222,2.006,224,2.127,286,4.001,287,2.541,297,1.82,300,1.82,474,1.513,616,4.144,618,1.678,645,5.088,777,4.834,849,3.255,881,2.278,916,1.745,988,4.126,990,2.278,992,2.127,994,2.278,1015,2.278,1766,2.006,1829,4.126,1838,2.48,1841,2.48,1845,2.48,1849,2.48,1851,5.926,1852,2.278,1855,2.127,1858,3.385,1859,2.278,1860,2.127,1862,2.48,1910,3.341,1911,7.008,1912,2.48,1913,4.812,1914,2.48,1915,2.787,1916,5.407,1917,2.787,1918,2.48,1919,2.787,1920,2.787,1921,2.787,1922,2.787,1923,2.787,1924,2.787,1925,2.787,1926,2.787,1927,5.088,1928,2.787,1929,5.512,1930,2.787,1931,5.008,1932,2.48,1933,2.127,1934,2.787,1935,2.787,1936,2.787,1937,2.787,1938,2.787,1939,2.787,1940,2.787,1941,2.787,1942,2.787,1943,2.787,1944,2.787]],["title/classes/QuestionGroupGrade.html",[0,0.241,1765,3.567]],["body/classes/QuestionGroupGrade.html",[0,0.343,2,0.552,3,0.053,4,0.053,5,0.047,10,0.212,11,1.03,18,0.866,21,0.007,23,0.517,25,0.7,29,0.146,38,0.053,39,0.003,40,1.52,41,1.549,42,1.519,67,0.004,68,0.003,71,1.466,72,3.25,73,0.724,76,2.246,79,3.25,80,3.332,81,3.332,82,2.04,83,2.35,85,3.512,86,2.463,90,2.549,91,1.368,96,1.836,97,4.118,98,1.886,99,3.198,100,2.588,101,2.894,102,1.836,103,2.588,104,1.836,105,2.588,106,1.836,109,1.98,123,0.778,124,2.109,175,2.972,227,3.191,228,3.594,236,3.474,316,3.535,391,2.266,504,2.527,512,2.19,521,2.728,535,3.4,555,3.535,616,4.683,617,3.862,618,2.35,665,2.19,703,2.972,813,5.423,818,4.065,819,3.688,833,2.549,834,2.549,835,2.549,836,3.191,838,2.81,849,3.4,1765,4.31,1883,3.474,1945,3.904,1946,3.904,1947,3.904,1948,3.904,1949,3.904,1950,3.904,1951,3.904,1952,3.904,1953,3.904]],["title/modules/QuestionGroupModule.html",[250,1.639,263,3.197]],["body/modules/QuestionGroupModule.html",[0,0.249,3,0.066,4,0.066,5,0.059,21,0.007,29,0.239,38,0.066,39,0.003,67,0.005,68,0.003,109,1.692,163,3.004,191,1.069,250,2.608,252,2.332,253,2.27,254,2.466,255,2.466,256,2.332,257,3.801,258,3.801,262,5.62,263,6.427,264,3.348,265,2.466,266,2.466,268,3.676,270,3.152,271,2.056,276,3.475,290,5.845,363,5.387,378,4.296,1041,3.946,1756,4.718,1760,3.301,1767,3.946,1768,3.946,1825,5.679,1857,4.296,1858,5.387,1859,3.946,1860,3.684,1910,5.679,1954,4.296,1955,4.827,1956,4.296,1957,4.296,1958,4.827,1959,4.827,1960,4.827,1961,4.827,1962,4.718,1963,4.296,1964,4.296,1965,4.296,1966,4.827]],["title/classes/QuestionGroupRepository.html",[0,0.241,1760,3.197]],["body/classes/QuestionGroupRepository.html",[0,0.346,2,0.946,3,0.091,4,0.091,5,0.081,21,0.007,29,0.224,30,1.584,38,0.091,39,0.005,67,0.006,68,0.005,71,2.099,109,2.348,242,4.572,243,3.525,244,2.724,245,2.724,246,2.724,616,3.525,618,4.032,1760,5.53,1766,4.822,1967,5.96,1968,5.96,1969,6.698]],["title/injectables/QuestionGroupService.html",[282,1.091,1858,2.926]],["body/injectables/QuestionGroupService.html",[0,0.177,3,0.028,4,0.028,5,0.025,10,0.112,11,0.624,13,2.233,18,0.701,20,1.412,21,0.007,22,1.247,23,0.41,24,0.982,25,1.27,26,1.811,29,0.218,30,0.67,33,2.577,38,0.028,39,0.004,40,1.966,41,1.79,42,0.8,43,2.649,46,1.424,49,1.857,50,1.872,66,0.836,67,0.002,68,0.001,73,0.439,76,2.264,82,1.26,109,2.688,124,0.653,125,0.783,136,2.015,166,2.123,167,2.142,175,3.233,176,2.142,191,0.455,213,2.031,218,1.803,244,3.12,245,0.836,246,0.836,271,0.875,282,0.799,283,0.783,286,3.346,287,1.986,288,1.424,290,4.078,297,2.234,300,1.342,302,2.752,303,1.082,304,2.234,305,1.406,306,1.48,312,2.843,316,2.752,321,1.569,325,1.68,341,1.569,474,1.116,504,2.167,512,1.153,555,2.752,616,4.247,618,1.237,645,4.423,777,4.202,811,1.68,819,1.342,849,3.426,855,1.569,856,1.68,857,1.68,916,1.287,943,1.287,944,4.078,946,2.142,961,1.653,962,1.68,963,1.568,964,1.68,972,1.48,975,1.68,979,3.006,981,5.022,988,3.354,1068,1.829,1086,3.354,1123,1.829,1124,1.68,1220,1.569,1266,3.911,1538,3.045,1756,3.689,1760,3.505,1766,1.48,1767,1.68,1768,1.68,1769,1.829,1780,1.829,1829,3.354,1855,1.569,1858,2.142,1909,2.611,1913,3.911,1914,1.829,1918,1.829,1927,3.689,1929,4.911,1931,4.189,1932,1.829,1964,1.829,1965,1.829,1970,6.825,1971,1.829,1972,4.396,1973,4.396,1974,2.055,1975,2.055,1976,2.055,1977,2.055,1978,2.055,1979,2.055,1980,2.055,1981,2.055,1982,1.829,1983,2.055,1984,2.055,1985,2.055,1986,2.055,1987,2.055,1988,2.055,1989,3.593,1990,2.055,1991,2.055,1992,1.569,1993,1.829,1994,2.055,1995,2.055,1996,3.422,1997,2.055,1998,2.055,1999,2.055,2000,3.422,2001,3.422,2002,3.422,2003,4.396,2004,4.396,2005,2.055,2006,2.055,2007,3.422,2008,2.055,2009,2.055,2010,1.829,2011,2.055,2012,2.055,2013,2.055,2014,1.829,2015,2.055,2016,2.055,2017,2.055,2018,2.055,2019,3.422,2020,2.055,2021,2.055,2022,2.055,2023,2.055,2024,2.055]],["title/classes/QuestionGroupTarget1621992475274.html",[0,0.241,2025,3.821]],["body/classes/QuestionGroupTarget1621992475274.html",[0,0.219,2,0.6,3,0.058,4,0.058,5,0.052,8,2.237,9,2.963,10,0.462,11,1.095,12,3.442,13,2.109,14,2.617,15,2.556,16,2.556,17,3.761,18,0.65,20,1.196,21,0.007,22,1.403,23,0.495,24,0.832,25,1.076,26,1.673,27,2.556,29,0.11,30,0.832,38,0.058,39,0.003,43,2.96,46,2.86,67,0.004,68,0.003,73,0.77,94,2.898,111,3.034,123,0.847,124,1.351,125,1.619,130,3.791,133,3.109,148,3.776,159,4.353,166,3.359,404,5.195,405,2.775,411,6.725,533,4.935,534,4.935,550,5.34,732,3.109,961,2.898,963,2.75,1134,5.34,2025,6.176,2026,6.725,2027,3.782,2028,4.25,2029,4.25,2030,4.25]],["title/interfaces/QuestionGroupUser.html",[593,1.353,1933,3.567]],["body/interfaces/QuestionGroupUser.html",[3,0.095,4,0.095,5,0.084,10,0.377,21,0.006,23,0.389,38,0.095,39,0.005,40,2.457,41,2.059,67,0.006,68,0.005,73,1.06,109,2.433,593,2.008,594,2.956,596,4.996,849,4.178,1933,6.304,2031,6.176]],["title/classes/QuestionImage1620477869366.html",[0,0.241,2032,3.821]],["body/classes/QuestionImage1620477869366.html",[0,0.22,2,0.602,3,0.058,4,0.058,5,0.052,8,2.241,9,2.966,10,0.231,11,1.097,12,3.445,13,2.111,14,2.621,15,2.56,16,2.56,17,3.762,18,0.651,20,1.198,21,0.007,22,1.405,23,0.391,24,0.833,25,1.077,26,1.675,27,2.56,29,0.11,30,0.834,38,0.058,39,0.003,43,2.901,66,2.445,67,0.004,68,0.003,73,0.771,76,3.561,86,2.621,123,0.849,124,1.91,125,1.622,130,4.104,133,3.7,136,2.755,145,4.391,147,5.39,148,3.263,149,3.618,151,4.554,152,3.618,154,4.391,159,3.163,405,3.924,505,3.762,537,5.773,538,4.805,539,6.317,540,4.586,1907,6.731,1908,6.731,2032,6.183,2033,6.731,2034,3.79,2035,4.259,2036,4.259,2037,4.259]],["title/classes/QuestionPosition1620488935141.html",[0,0.241,2038,3.821]],["body/classes/QuestionPosition1620488935141.html",[0,0.26,2,0.712,3,0.069,4,0.069,5,0.061,8,2.517,9,3.241,10,0.274,11,1.232,12,3.627,13,2.223,14,2.944,15,2.875,16,2.875,17,3.902,18,0.711,20,1.345,21,0.007,22,1.491,23,0.427,24,0.936,25,1.21,26,1.799,27,2.875,29,0.13,30,0.988,38,0.069,39,0.004,43,2.632,67,0.005,68,0.004,73,0.866,76,2.685,86,2.944,111,2.944,123,1.005,124,2.418,125,1.921,130,3.724,133,3.017,147,4.891,148,3.664,159,3.552,512,3.786,534,4.408,555,5.086,2038,6.641,2039,7.23,2040,4.488,2041,5.043,2042,5.043,2043,5.043]],["title/classes/QuestionPositionIdx1620563708532.html",[0,0.241,2044,3.821]],["body/classes/QuestionPositionIdx1620563708532.html",[0,0.228,2,0.624,3,0.06,4,0.06,5,0.054,8,2.298,9,3.025,10,0.439,11,1.125,12,3.485,13,2.136,14,2.689,15,2.626,16,2.626,17,3.793,18,0.663,20,1.229,21,0.007,22,1.423,23,0.398,24,0.854,25,1.105,26,1.702,27,2.626,29,0.114,30,0.865,38,0.06,39,0.003,43,2.922,66,2.507,67,0.004,68,0.003,73,0.791,76,3.487,86,2.689,123,0.88,124,1.403,125,1.682,129,4.216,130,3.838,133,2.755,136,2.825,145,4.461,147,5.042,148,3.346,149,3.711,151,4.627,152,3.711,154,4.461,159,3.244,160,4.216,534,4.025,537,5.865,538,3.578,539,6.391,540,4.704,555,3.859,556,5.486,2044,6.282,2045,6.839,2046,3.93,2047,4.416,2048,4.416,2049,4.416,2050,6.165]],["title/classes/QuestionRepository.html",[0,0.241,1962,3.365]],["body/classes/QuestionRepository.html",[0,0.348,2,0.953,3,0.092,4,0.092,5,0.082,21,0.007,29,0.225,30,1.59,38,0.092,39,0.005,67,0.006,68,0.005,71,2.108,76,2.683,109,2.364,242,4.586,243,3.55,244,2.743,245,2.743,246,2.743,1856,5.513,1962,5.846,2051,6.002,2052,6.745]],["title/injectables/QuestionService.html",[282,1.091,290,2.926]],["body/injectables/QuestionService.html",[0,0.116,3,0.031,4,0.031,5,0.027,10,0.122,11,0.673,13,2.268,18,0.721,20,1.539,21,0.007,22,1.36,23,0.433,24,1.07,25,1.351,26,1.92,29,0.216,30,0.722,33,2.33,38,0.031,39,0.003,40,2.029,41,1.991,42,0.876,43,2.197,49,2.002,50,1.996,66,0.915,67,0.003,68,0.002,76,3.191,82,1.422,109,2.763,136,1.69,167,2.309,176,2.309,191,0.498,213,1.15,218,2.041,244,3.314,245,0.915,246,0.915,271,0.959,282,0.861,283,0.857,287,2.141,288,1.535,290,2.309,297,2.408,300,2.408,302,2.933,303,1.184,304,2.408,305,1.539,306,1.62,312,2.326,316,4.02,321,1.718,341,1.718,389,1.306,470,1.718,474,2.002,478,1.84,512,1.262,555,3.743,616,2.851,618,1.355,648,4.082,734,3.204,745,4.245,746,3.373,748,4.637,849,2.821,916,1.409,943,1.409,946,2.309,953,3.014,972,1.62,975,4.428,979,2.522,1064,2.003,1097,2.003,1124,1.84,1220,1.718,1402,4.821,1766,1.62,1827,4.169,1828,3.282,1829,3.575,1830,2.003,1832,2.003,1835,3.282,1836,3.9,1844,3.9,1848,3.9,1853,2.003,1854,2.003,1855,1.718,1856,1.84,1858,3.743,1860,1.718,1861,2.003,1909,2.814,1962,3.9,1963,2.003,1982,2.003,1992,1.718,1993,2.003,2010,3.282,2053,2.003,2054,4.685,2055,3.688,2056,3.688,2057,4.685,2058,2.251,2059,2.251,2060,2.251,2061,2.251,2062,2.251,2063,2.251,2064,3.688,2065,2.251,2066,2.251,2067,3.688,2068,2.251,2069,2.251,2070,2.251,2071,2.251,2072,3.829,2073,2.251,2074,2.251,2075,2.251,2076,2.251,2077,2.251,2078,3.688,2079,2.251,2080,2.251,2081,3.688,2082,2.251,2083,2.251,2084,2.251,2085,3.688,2086,2.251,2087,3.688,2088,2.251,2089,2.251,2090,3.688,2091,2.003,2092,2.251,2093,2.251,2094,2.251,2095,2.251,2096,2.251]],["title/classes/ReorderQuestionDto.html",[0,0.241,1844,3.365]],["body/classes/ReorderQuestionDto.html",[0,0.401,2,0.884,3,0.085,4,0.085,5,0.076,10,0.34,18,0.725,21,0.007,23,0.435,29,0.162,38,0.085,39,0.004,41,2.058,67,0.005,68,0.004,73,0.995,82,1.718,91,2.72,109,2.956,431,2.869,648,5.077,649,4.895,729,5.586,750,4.778,1844,5.586,2091,7.504,2097,6.893,2098,6.261,2099,5.571,2100,6.261,2101,6.261]],["title/classes/ReorderQuestionGroupDto.html",[0,0.241,1927,3.365]],["body/classes/ReorderQuestionGroupDto.html",[0,0.397,2,0.87,3,0.084,4,0.084,5,0.075,10,0.334,18,0.718,21,0.007,23,0.431,29,0.159,38,0.084,39,0.004,41,2.046,67,0.005,68,0.004,73,0.985,76,3.33,82,1.701,91,2.693,109,2.935,175,4.406,431,2.823,647,4.435,649,5.088,651,5.482,726,4.701,729,5.53,1927,5.53,2014,7.45,2097,6.843,2099,5.482,2102,6.16]],["title/classes/SeedAuxiliary1624412129413.html",[0,0.241,1627,3.567]],["body/classes/SeedAuxiliary1624412129413.html",[0,0.139,2,0.381,3,0.037,4,0.037,5,0.033,8,1.591,9,2.254,10,0.146,11,0.778,12,2.9,13,1.777,14,1.861,15,1.817,16,1.817,17,3.319,18,0.399,20,0.85,21,0.007,22,1.154,23,0.297,24,0.591,25,0.765,26,1.332,27,1.817,29,0.155,30,0.528,31,2.058,33,2.924,34,2.476,36,3.449,38,0.037,39,0.002,40,2.316,41,0.63,43,2.986,45,5.746,46,2.258,55,4.114,56,2.058,57,2.968,58,2.204,59,5.967,60,2.06,61,2.316,62,5.255,63,1.688,67,0.003,68,0.002,91,0.945,99,2.105,142,2.058,221,2.917,228,3.115,404,5.089,407,2.058,472,2.204,507,1.941,509,2.058,516,3.81,517,3.46,519,4.046,520,4.363,521,2.06,523,4.046,525,2.058,527,4.039,531,3.071,560,3.256,593,0.78,963,1.955,1543,4.918,1614,6.214,1615,4.039,1616,2.058,1617,2.4,1618,2.4,1619,2.4,1620,2.204,1621,2.204,1622,2.4,1623,6.091,1624,2.204,1625,2.204,1626,2.204,1627,3.256,1628,2.4,1629,2.4,1630,2.4,1631,2.4,1632,2.4,1633,2.4,1634,2.204,1635,2.4,1636,3.796,1637,5.354,1638,6.202,1639,2.4,1640,3.796,1641,6.496,2103,2.697,2104,2.697]],["title/interfaces/SoftDeleteResult.html",[304,3.052,593,1.353]],["body/interfaces/SoftDeleteResult.html",[3,0.093,4,0.093,5,0.083,10,0.371,21,0.007,23,0.492,38,0.093,39,0.005,41,1.597,66,2.783,67,0.006,68,0.005,73,1.051,304,5.349,305,4.678,593,1.98,594,2.914,951,7.289,2105,5.592,2106,9.087,2107,6.841]],["title/classes/Student.html",[0,0.241,963,2.142]],["body/classes/Student.html",[0,0.223,2,0.61,3,0.059,4,0.059,5,0.052,10,0.234,18,0.848,21,0.007,23,0.514,26,1.553,29,0.181,30,0.845,34,3.522,36,3.193,38,0.059,39,0.003,40,1.632,41,1.008,42,2.361,46,2.824,63,3.798,67,0.004,68,0.003,71,1.575,72,1.93,73,0.778,74,2.205,79,2.712,80,2.781,81,2.781,82,1.988,85,3.675,91,2.667,94,3.675,96,2.03,97,3.961,98,2.085,99,2.79,100,1.979,101,3.06,102,2.03,103,1.979,104,2.03,105,1.979,106,2.03,111,1.883,123,1.209,124,1.372,218,1.141,228,2.712,237,4.959,248,2.952,391,3.522,392,3.403,612,3.528,619,4.149,665,2.421,795,3.652,814,4.367,844,3.294,845,4.63,963,2.781,1770,5.353,1785,4.959,1786,3.842,1787,5.399,1789,3.842,1790,3.842,1791,3.842,1792,3.842,1793,3.842,1794,3.842,2108,3.842,2109,7.015,2110,4.317,2111,4.317,2112,4.317]],["title/classes/StudentRepository.html",[0,0.241,586,3.365]],["body/classes/StudentRepository.html",[0,0.35,2,0.956,3,0.092,4,0.092,5,0.082,21,0.007,29,0.225,30,1.594,38,0.092,39,0.005,67,0.006,68,0.005,71,2.113,242,4.593,243,3.562,244,2.753,245,2.753,246,2.753,586,5.859,963,3.102,1534,5.532,2113,6.023,2114,6.769]],["title/injectables/StudentService.html",[282,1.091,578,3.197]],["body/injectables/StudentService.html",[0,0.26,3,0.069,4,0.069,5,0.061,10,0.274,11,1.232,18,0.711,20,1.516,21,0.007,22,1.34,23,0.427,24,1.055,25,1.21,26,1.799,29,0.23,30,0.988,33,1.733,38,0.069,39,0.004,67,0.005,68,0.004,82,1.117,191,1.117,213,1.572,218,1.784,244,3.305,245,2.051,246,2.051,271,2.148,282,1.576,283,1.921,287,3.918,288,2.809,303,2.654,312,1.962,331,3.849,578,4.616,586,5.849,587,4.488,786,4.891,943,3.157,946,4.226,963,3.094,972,3.63,1069,3.449,1534,4.122,1800,6.007,1802,6.007,1804,6.007,1805,5.961,1807,4.488,1808,4.488,1810,4.488,2115,4.488,2116,5.043,2117,5.043,2118,5.043,2119,5.043,2120,5.043]],["title/classes/Subject.html",[0,0.241,523,2.713]],["body/classes/Subject.html",[0,0.231,2,0.631,3,0.061,4,0.061,5,0.054,10,0.243,18,0.834,21,0.007,23,0.517,29,0.2,30,0.875,38,0.061,39,0.003,40,1.672,41,1.668,42,1.739,67,0.004,68,0.003,71,1.613,72,3.453,73,0.797,79,2.778,80,2.848,81,2.848,82,1.977,83,2.69,85,3.451,86,2.711,91,2.178,96,2.101,97,3.453,98,2.158,99,2.842,100,2.048,101,3.117,102,2.101,103,2.048,104,2.101,105,2.048,106,2.101,111,3.369,112,2.425,113,3.89,114,3.741,116,2.917,123,1.54,228,3.629,248,3.055,391,4.484,392,3.485,519,5.005,520,4.473,521,3.451,523,3.607,665,2.506,1770,5.453,2121,3.976,2122,7.146,2123,4.468,2124,4.468,2125,4.468,2126,4.468,2127,4.468,2128,4.468,2129,4.468,2130,4.468]],["title/interfaces/SwaggerOptions.html",[593,1.353,2131,3.567]],["body/interfaces/SwaggerOptions.html",[3,0.087,4,0.087,5,0.078,10,0.347,21,0.007,23,0.498,38,0.087,39,0.004,67,0.005,68,0.004,73,1.008,123,1.907,506,6.39,521,4.287,593,1.848,594,2.72,2131,5.995,2132,5.683,2133,7.899,2134,7.899,2135,8.508]],["title/classes/TimestampEntity.html",[0,0.241,101,2.039]],["body/classes/TimestampEntity.html",[0,0.314,2,0.859,3,0.083,4,0.083,5,0.074,10,0.33,18,0.778,21,0.007,23,0.467,29,0.157,30,1.191,38,0.083,39,0.004,67,0.005,68,0.004,71,1.978,73,0.978,79,3.72,80,3.815,81,3.815,82,1.843,99,3.647,100,3.815,101,3.324,103,3.815,105,3.815,2136,5.412,2137,8.324,2138,6.082,2139,6.082,2140,6.082]],["title/classes/UpdateAnswerDto.html",[0,0.241,180,3.365]],["body/classes/UpdateAnswerDto.html",[0,0.36,2,0.984,3,0.095,4,0.095,5,0.085,21,0.007,29,0.214,38,0.095,39,0.005,67,0.006,68,0.005,71,1.808,166,3.364,172,4.763,180,5.96,206,5.693,672,5.693,2141,6.198,2142,5.316,2143,5.693,2144,5.693,2145,6.966]],["title/classes/UpdateExamAgreementDto.html",[0,0.241,914,3.365]],["body/classes/UpdateExamAgreementDto.html",[0,0.426,2,0.843,3,0.081,4,0.081,5,0.073,10,0.324,18,0.704,21,0.007,23,0.486,24,1.201,29,0.195,38,0.081,39,0.004,67,0.005,68,0.004,73,0.966,82,1.668,123,1.501,429,4.715,430,4.534,431,2.736,504,3.143,530,6.297,683,4.968,701,4.555,703,4.343,704,5.311,707,4.082,708,4.918,756,5.311,867,6.744,914,5.422,2146,6.744,2147,5.969,2148,5.969]],["title/classes/UpdateExamDto.html",[0,0.241,1001,3.365]],["body/classes/UpdateExamDto.html",[0,0.36,2,0.984,3,0.095,4,0.095,5,0.085,21,0.007,29,0.214,38,0.095,39,0.005,67,0.006,68,0.005,71,1.808,166,3.364,712,4.763,713,5.693,1001,5.96,1004,5.693,2142,5.316,2143,5.693,2144,5.693,2146,5.693,2149,6.966]],["title/classes/UpdateQuestionDto.html",[0,0.241,1848,3.365]],["body/classes/UpdateQuestionDto.html",[0,0.36,2,0.984,3,0.095,4,0.095,5,0.085,21,0.007,29,0.214,38,0.095,39,0.005,67,0.006,68,0.005,71,1.808,109,2.442,166,3.364,195,3.276,745,4.36,746,5.014,750,5.316,1848,5.96,2142,5.316,2150,5.693,2151,6.966]],["title/classes/UpdateQuestionGroupDto.html",[0,0.241,1929,3.365]],["body/classes/UpdateQuestionGroupDto.html",[0,0.356,2,0.973,3,0.094,4,0.094,5,0.084,21,0.007,29,0.212,38,0.094,39,0.005,67,0.006,68,0.005,71,1.789,76,3.272,109,2.415,166,3.328,647,4.96,777,4.712,1929,5.922,1931,5.632,2142,5.258,2143,5.632,2144,5.632,2150,5.632,2152,6.891]],["title/controllers/UploadController.html",[161,1.991,1646,3.567]],["body/controllers/UploadController.html",[0,0.288,3,0.076,4,0.076,5,0.097,10,0.303,11,1.317,13,2.04,18,0.522,20,1.113,21,0.007,22,0.984,23,0.313,24,0.774,25,1.001,29,0.232,38,0.076,39,0.004,67,0.005,68,0.004,82,1.237,161,2.379,163,2.56,165,3.363,183,4.347,190,3.497,191,1.237,192,5.197,194,3.363,195,2.627,196,2.94,197,4.021,211,3.497,212,2.94,213,1.742,218,1.476,1466,6.105,1497,4.715,1567,4.021,1646,5.51,1648,4.971,2153,4.971,2154,5.586,2155,8,2156,5.586,2157,5.586,2158,5.586,2159,5.586,2160,5.586,2161,4.971,2162,5.901,2163,5.586,2164,5.586,2165,5.586,2166,4.566,2167,5.586,2168,5.586,2169,5.586]],["title/classes/UploaderService.html",[0,0.241,1497,3.052]],["body/classes/UploaderService.html",[0,0.33,2,0.902,3,0.087,4,0.087,5,0.078,10,0.347,11,1.433,18,0.597,20,1.273,21,0.007,22,1.124,23,0.358,24,0.885,25,1.145,26,1.74,29,0.165,38,0.087,39,0.004,67,0.005,68,0.004,123,1.696,1179,5.122,1257,6.39,1297,4.873,1466,5.995,1489,6.99,1491,5.683,1495,5.683,1496,5.683,1497,5.13,2170,5.683,2171,8.877,2172,6.386]],["title/classes/User.html",[0,0.241,46,1.514]],["body/classes/User.html",[0,0.197,2,0.539,3,0.052,4,0.052,5,0.046,10,0.207,18,0.837,21,0.007,22,0.672,23,0.53,29,0.198,30,0.748,34,3.803,36,3.448,38,0.052,39,0.003,40,1.495,41,0.891,42,2.163,46,1.8,63,4.101,67,0.004,68,0.003,71,1.443,72,3.681,73,0.713,74,3.676,79,3.216,80,3.298,81,3.298,82,1.983,85,3.475,91,2.522,94,4.222,96,1.796,97,3.681,98,1.844,99,3.174,100,2.547,101,2.858,102,1.796,103,2.547,104,1.796,105,2.547,106,1.796,107,2.749,108,2.494,111,3.481,112,2.073,114,3.346,115,4.945,116,2.494,118,1.666,123,1.434,124,1.766,391,4.177,392,4.036,619,5.229,621,3.121,665,2.142,795,4.804,801,4.241,833,2.494,834,2.494,835,2.494,851,2.39,1785,5.355,2173,3.398,2174,3.819,2175,3.819,2176,3.819,2177,3.819,2178,3.819,2179,3.819,2180,3.819,2181,3.819]],["title/controllers/UserController.html",[161,1.991,2182,3.567]],["body/controllers/UserController.html",[0,0.262,3,0.069,4,0.069,5,0.062,10,0.276,11,1.238,18,0.634,20,1.352,21,0.007,22,1.195,23,0.381,24,0.941,25,1.216,29,0.23,38,0.069,39,0.004,46,2.936,67,0.005,68,0.004,82,1.503,161,2.165,163,2.33,165,3.06,183,4.599,184,2.951,188,3.476,190,3.182,191,1.126,194,3.06,195,2.391,196,2.675,200,4.599,202,3.476,211,4.248,212,2.675,213,1.585,218,2.019,460,4.782,474,2.759,786,5.26,1069,3.476,1388,4.885,1390,4.523,1852,4.155,2182,5.178,2183,4.523,2184,4.155,2185,5.083,2186,5.083,2187,5.083,2188,5.083,2189,5.083,2190,4.155,2191,4.523,2192,5.083,2193,5.083,2194,5.083,2195,5.083,2196,5.083,2197,5.083]],["title/classes/UserDto.html",[0,0.241,1805,3.197]],["body/classes/UserDto.html",[0,0.418,2,0.949,3,0.092,4,0.092,5,0.082,10,0.365,18,0.628,21,0.007,23,0.377,29,0.174,36,4.579,38,0.092,39,0.005,67,0.006,68,0.005,73,1.04,82,1.488,123,1.615,427,4.389,429,5.073,430,4.879,431,3.081,1805,5.542,2198,5.981,2199,6.722]],["title/modules/UserModule.html",[250,1.639,367,3.197]],["body/modules/UserModule.html",[0,0.284,3,0.075,4,0.075,5,0.067,21,0.007,29,0.235,38,0.075,39,0.004,67,0.005,68,0.004,163,3.278,191,1.219,250,2.785,252,2.659,253,2.59,254,2.813,255,2.813,256,2.659,257,4.058,258,4.058,264,3.654,265,2.813,266,2.813,268,3.088,270,3.596,271,2.345,362,4.891,363,4.478,367,6.22,376,4.9,460,5.963,470,6.063,1041,4.5,2182,6.063,2191,4.9,2200,4.9,2201,4.9,2202,4.9,2203,5.506,2204,5.506,2205,3.964,2206,4.9,2207,5.506]],["title/classes/UserRepository.html",[0,0.241,2205,3.365]],["body/classes/UserRepository.html",[0,0.342,2,0.936,3,0.09,4,0.09,5,0.081,21,0.007,29,0.232,30,1.574,38,0.09,39,0.005,46,2.147,67,0.006,68,0.005,71,2.086,242,4.551,243,3.488,244,2.696,245,2.696,246,2.696,474,3.598,786,3.991,1069,4.533,2190,5.418,2205,5.785,2208,5.899,2209,6.629]],["title/interfaces/UserResult.html",[593,1.353,2210,3.567]],["body/interfaces/UserResult.html",[3,0.089,4,0.089,5,0.08,10,0.356,21,0.007,23,0.524,29,0.169,38,0.089,39,0.005,40,2.411,41,2.01,67,0.006,68,0.005,73,1.024,118,2.862,213,2.49,593,1.899,594,2.794,795,5.394,801,5.007,2105,5.362,2210,6.095,2211,5.838,2212,5.362]],["title/injectables/UserService.html",[282,1.091,460,2.926]],["body/injectables/UserService.html",[0,0.151,3,0.04,4,0.04,5,0.035,10,0.158,11,0.828,13,2.231,18,0.703,20,1.499,21,0.007,22,1.324,23,0.436,24,1.042,25,1.292,26,1.87,29,0.221,30,0.572,33,2.159,38,0.04,39,0.002,40,0.785,42,1.766,43,2.519,45,2.101,46,2.834,49,3.411,50,2.676,57,1.637,60,1.41,61,1.584,67,0.003,68,0.002,82,0.646,118,1.273,124,1.442,191,0.646,213,1.959,218,1.988,244,2.555,245,1.187,246,1.187,271,1.243,282,1.059,283,1.111,288,1.889,303,1.536,306,2.101,312,2.927,418,4.708,460,2.841,471,3.709,474,1.584,577,5.143,578,5.143,625,4.039,627,5.591,630,4.039,786,4.809,795,1.757,801,2.227,1069,1.996,1388,4.009,1805,6.203,2184,3.709,2190,2.385,2205,5.187,2206,2.597,2210,3.464,2212,2.385,2213,2.597,2214,4.539,2215,4.539,2216,4.539,2217,4.539,2218,4.539,2219,2.918,2220,2.918,2221,2.918,2222,4.539,2223,2.918,2224,4.539,2225,2.918,2226,4.539,2227,2.918,2228,4.539,2229,2.918,2230,4.539,2231,2.918,2232,4.539,2233,2.918,2234,2.918,2235,2.918,2236,2.918,2237,2.918,2238,2.918,2239,2.918,2240,2.918,2241,2.918,2242,2.918,2243,2.918,2244,2.918,2245,2.918,2246,2.918,2247,2.918,2248,2.918,2249,2.918,2250,2.918,2251,2.918,2252,2.918,2253,4.539,2254,2.918,2255,4.539,2256,2.918,2257,5.569,2258,2.918,2259,4.539,2260,4.539,2261,2.918,2262,2.918,2263,2.918,2264,2.918]],["title/coverage.html",[2265,5.705]],["body/coverage.html",[0,0.485,1,1.075,5,0.016,6,2.564,7,2.564,13,0.594,21,0.007,23,0.074,34,0.764,36,0.692,39,0.001,46,0.426,50,0.56,60,1.126,66,0.535,67,0.002,68,0.001,69,0.714,70,1.171,72,0.588,74,0.672,76,1.726,101,0.574,107,1.678,109,2.791,120,1.075,121,1.171,122,1.171,130,0.603,139,0.859,161,2.594,162,1.004,164,1.171,170,0.792,172,0.9,180,0.947,196,0.692,198,1.779,200,0.792,201,0.859,203,0.9,226,1.075,227,1.905,228,0.588,239,0.947,240,1.171,241,1.171,250,0.817,256,0.635,272,0.947,276,0.947,280,1.171,282,1.875,284,1.171,290,0.824,291,0.824,294,1.004,304,0.859,305,0.9,307,1.779,346,1.004,347,1.171,372,1.075,373,1.075,390,1.171,398,1.075,399,1.171,400,1.171,413,1.004,414,1.171,416,0.9,418,0.824,425,0.9,426,1.171,437,0.947,441,1.004,443,0.947,451,1.171,454,1.171,460,0.824,463,0.947,498,1.075,499,1.171,500,1.905,504,1.445,512,5.508,517,0.653,519,0.764,523,0.764,535,0.792,551,1.075,552,1.171,575,0.9,576,0.9,577,0.9,578,0.9,580,0.947,582,0.947,584,0.947,586,0.947,593,2.147,595,1.171,596,2.732,597,0.947,598,1.075,599,1.075,616,0.692,617,1.594,645,0.947,646,1.171,647,2.732,655,0.859,656,0.947,662,1.171,671,1.171,672,1.905,692,1.171,693,1.171,695,1.004,699,0.947,700,1.905,701,2.394,709,1.004,712,0.9,713,1.905,717,0.764,732,1.94,734,0.9,735,2.732,736,1.905,745,0.824,748,0.9,750,2.394,777,0.9,786,0.792,787,1.171,788,1.905,791,1.075,804,0.947,805,1.171,806,0.9,809,1.171,829,0.859,849,1.403,851,0.824,860,1.075,861,1.171,862,1.171,866,1.171,888,1.075,889,1.171,890,1.171,897,1.075,898,1.171,899,1.171,903,1.004,904,1.905,905,1.171,909,0.947,914,0.947,924,1.905,928,1.075,929,1.171,930,1.171,934,0.947,935,1.905,936,1.171,938,1.171,944,0.824,961,0.635,963,1.068,986,1.004,987,1.171,998,0.947,1001,0.947,1023,0.859,1024,0.859,1025,0.9,1027,1.004,1029,0.947,1031,0.947,1042,1.779,1043,1.171,1047,1.171,1050,1.004,1085,1.171,1101,1.075,1125,1.171,1128,1.075,1129,1.905,1130,1.905,1144,1.075,1145,1.905,1146,1.905,1150,1.075,1153,1.171,1168,1.075,1169,1.171,1170,0.859,1171,1.075,1189,1.905,1190,1.905,1193,1.004,1201,1.171,1203,1.171,1230,1.171,1231,1.171,1247,1.075,1248,1.171,1249,1.171,1254,1.171,1257,0.947,1258,1.171,1259,1.171,1265,1.171,1266,1.004,1267,1.171,1268,1.171,1274,0.792,1275,1.779,1276,1.171,1277,1.171,1290,0.824,1322,1.004,1351,1.004,1359,0.9,1371,2.394,1372,1.905,1374,4.977,1379,1.004,1380,1.075,1381,1.171,1384,0.947,1385,2.732,1386,1.171,1388,0.947,1423,0.947,1424,1.075,1425,1.171,1437,1.004,1438,1.171,1461,0.947,1465,1.171,1483,1.004,1484,1.171,1485,1.171,1497,0.859,1503,1.171,1520,1.075,1521,1.171,1522,1.171,1527,1.171,1545,1.171,1553,2.394,1554,2.394,1570,0.947,1574,0.947,1614,1.004,1615,2.896,1616,2.896,1623,1.004,1627,1.004,1646,1.004,1652,1.171,1656,1.004,1657,1.171,1658,1.171,1659,1.171,1690,1.171,1694,1.075,1697,1.171,1710,1.171,1719,1.075,1720,1.171,1721,1.171,1726,1.171,1728,1.171,1756,0.947,1757,1.171,1758,1.171,1760,0.9,1765,1.004,1783,1.171,1797,1.171,1799,1.171,1805,0.9,1812,1.171,1825,1.004,1826,1.171,1836,0.947,1844,0.947,1848,0.947,1858,0.824,1874,1.171,1875,1.171,1878,1.171,1901,1.075,1902,1.171,1903,1.171,1910,1.004,1911,1.171,1912,1.171,1927,0.947,1929,0.947,1933,1.004,1962,0.947,1967,1.171,1968,1.171,1970,1.171,1971,1.171,1989,1.075,1992,1.004,2025,1.075,2026,1.171,2027,1.171,2031,1.171,2032,1.075,2033,1.171,2034,1.171,2038,1.075,2039,1.171,2040,1.171,2044,1.075,2045,1.171,2046,1.171,2051,1.171,2053,1.171,2072,1.075,2097,1.905,2105,1.905,2108,1.171,2113,1.171,2115,1.171,2121,1.171,2131,1.004,2132,1.171,2136,1.171,2141,1.171,2146,1.905,2150,1.905,2153,1.171,2162,1.075,2170,1.171,2173,1.171,2182,1.004,2183,1.171,2198,1.171,2205,0.947,2208,1.171,2210,1.004,2211,1.171,2212,1.075,2213,1.171,2265,1.171,2266,1.316,2267,1.316,2268,1.316,2269,8.47,2270,3.795,2271,4.799,2272,9.171,2273,3.795,2274,3.138,2275,8.033,2276,2.074,2277,8.47,2278,3.138,2279,7.302,2280,5.192,2281,3.138,2282,2.331,2283,3.312,2284,1.075,2285,1.171,2286,1.171,2287,1.171,2288,1.171,2289,2.074,2290,1.171,2291,1.171,2292,1.171,2293,1.171,2294,2.074,2295,1.171,2296,2.074,2297,2.074,2298,1.171,2299,1.171,2300,1.171,2301,1.171,2302,2.074,2303,1.171,2304,1.171,2305,1.171,2306,1.171,2307,1.171,2308,1.171,2309,1.171,2310,2.331,2311,1.316,2312,1.171,2313,1.316,2314,1.316,2315,1.171,2316,1.316,2317,1.171,2318,1.171,2319,1.171,2320,4.521,2321,1.171,2322,1.171,2323,1.171,2324,1.171,2325,1.171,2326,1.171,2327,2.331,2328,1.171,2329,1.171,2330,1.171,2331,1.316,2332,1.171,2333,1.171,2334,1.316]],["title/dependencies.html",[253,2.648,2335,3.888]],["body/dependencies.html",[0,0.397,21,0.007,30,1.504,32,4.572,39,0.004,60,2.481,64,2.881,67,0.005,68,0.004,99,2.044,191,1.138,195,2.416,244,2.09,245,2.09,246,2.09,253,2.416,271,2.188,371,3.093,431,3.132,440,3.921,608,4.572,707,3.513,798,4.572,1321,2.881,1479,4.572,1567,5.893,1569,3.921,1620,4.199,1621,4.199,1654,4.199,1671,6.081,1672,4.199,1707,4.572,2161,4.572,2336,5.138,2337,7.679,2338,5.138,2339,5.138,2340,5.138,2341,6.834,2342,5.138,2343,6.834,2344,5.138,2345,5.138,2346,5.138,2347,5.138,2348,5.138,2349,5.138,2350,5.138,2351,5.138,2352,5.138,2353,5.138,2354,5.138,2355,5.138,2356,5.138,2357,5.138,2358,5.138,2359,5.138,2360,5.138,2361,5.138,2362,5.138,2363,5.138,2364,5.138,2365,5.138,2366,5.138,2367,5.138,2368,5.138,2369,5.138,2370,5.138,2371,5.138,2372,5.138,2373,5.138,2374,4.572,2375,5.138,2376,5.138,2377,5.138,2378,5.138,2379,5.138,2380,5.138,2381,5.138]],["title/miscellaneous/enumerations.html",[2382,2.434,2383,5.011]],["body/miscellaneous/enumerations.html",[10,0.272,21,0.007,39,0.003,46,2.175,64,3.766,66,2.731,67,0.005,68,0.003,69,3.645,93,4.834,125,3.703,136,3.077,139,3.267,166,3.243,228,3.001,407,5.124,408,5.975,514,5.488,515,5.975,519,3.897,563,5.488,564,5.975,613,5.975,619,4.592,620,5.488,724,3.645,732,3.001,795,4.042,827,5.488,851,4.203,873,5.488,961,3.912,963,3.712,2382,3.132,2383,4.453,2384,5.004,2385,8.697,2386,4.453,2387,6.715,2388,6.744,2389,8.099,2390,5.975,2391,6.715,2392,5.004,2393,5.004,2394,5.004,2395,6.715,2396,6.715,2397,7.578]],["title/miscellaneous/functions.html",[2382,2.434,2398,5.011]],["body/miscellaneous/functions.html",[10,0.277,20,1.807,21,0.007,22,1.597,24,1.257,25,1.625,26,1.505,39,0.004,42,1.983,46,1.651,67,0.005,68,0.004,256,3.694,374,6.812,786,3.068,791,6.252,838,5.874,1278,7.261,1388,4.894,1992,5.188,2184,4.166,2283,3.889,2284,6.252,2307,4.535,2308,6.049,2309,4.535,2320,4.166,2321,6.049,2322,6.049,2323,6.049,2324,6.049,2325,6.049,2332,4.535,2333,6.049,2382,3.191,2398,4.535,2399,7.78,2400,5.097,2401,5.097,2402,5.097,2403,4.166,2404,5.097,2405,5.097,2406,5.097,2407,5.097,2408,5.097,2409,5.097,2410,5.097,2411,5.097,2412,5.097,2413,6.049]],["title/index.html",[10,0.211,563,3.178,2414,3.888]],["body/index.html",[15,2.667,21,0.007,39,0.004,52,6.342,67,0.005,68,0.004,253,2.945,624,5.571,1895,5.571,2166,5.117,2415,6.905,2416,6.905,2417,7.845,2418,7.76,2419,6.261,2420,6.261,2421,6.261,2422,6.261,2423,6.261,2424,5.571,2425,6.261,2426,6.261,2427,6.261,2428,5.571,2429,6.261,2430,6.261,2431,6.261,2432,6.261,2433,6.261,2434,6.261,2435,8.433,2436,7.76,2437,6.261,2438,6.261,2439,6.261,2440,5.117,2441,6.261,2442,7.76,2443,6.261,2444,6.261,2445,6.261,2446,6.261,2447,6.261,2448,6.261]],["title/modules.html",[252,3.097]],["body/modules.html",[21,0.005,39,0.004,67,0.005,68,0.004,251,4.365,252,2.928,262,3.959,263,4.146,359,4.627,362,4.146,363,3.795,364,4.365,365,4.365,366,4.365,367,4.146,436,4.365,1347,4.365,1450,4.365,2449,9.694,2450,9.694,2451,9.694,2452,9.694]],["title/overview.html",[2453,5.705]],["body/overview.html",[2,0.417,21,0.007,39,0.002,67,0.003,68,0.002,163,1.352,196,3.974,203,3.834,250,1.034,251,5.769,252,1.425,253,1.387,254,1.507,255,1.507,256,1.425,257,1.507,258,1.507,259,2.625,260,2.625,261,2.625,262,5.899,263,5.868,264,2.338,265,1.507,266,1.507,283,1.123,290,4.727,291,4.727,359,6.934,360,2.625,361,2.625,362,6.048,363,5.58,364,5.436,365,5.21,366,5.21,367,5.164,418,4.727,432,2.625,433,2.625,434,2.625,435,2.625,436,5.895,437,4.036,460,4.727,572,2.625,573,2.625,574,2.625,575,5.164,576,5.164,577,5.164,578,5.164,594,1.256,597,5.436,639,2.625,640,2.625,641,2.625,652,2.625,653,2.625,654,2.625,655,4.126,656,5.436,804,5.436,944,4.727,1019,2.625,1020,2.625,1022,2.625,1023,3.661,1024,3.661,1025,3.834,1274,4.546,1347,4.924,1348,2.625,1349,2.625,1350,2.625,1384,5.436,1423,5.436,1450,5.769,1451,2.625,1452,2.625,1453,2.625,1497,4.126,1642,2.625,1643,2.625,1685,2.625,1686,2.625,1687,2.625,1858,3.51,1954,2.625,1956,2.625,1957,2.625,2200,2.625,2201,2.625,2202,2.625,2453,2.625,2454,2.95,2455,2.95,2456,2.95,2457,2.95,2458,2.95]],["title/miscellaneous/typealiases.html",[2382,2.434,2459,5.631]],["body/miscellaneous/typealiases.html",[10,0.346,21,0.006,23,0.357,39,0.004,42,2.477,67,0.005,68,0.004,598,5.202,599,6.944,603,5.664,607,5.664,622,6.976,623,6.976,732,3.504,961,3.074,963,2.917,1042,4.857,1170,4.156,1171,6.407,1179,4.719,1270,5.982,1272,5.664,1280,6.407,1374,5.202,1444,6.976,2283,4.857,2382,3.984,2386,6.976,2388,5.664,2390,5.664,2403,5.202,2413,6.976,2460,6.365,2461,5.664,2462,7.839,2463,7.839,2464,6.365,2465,6.365]],["title/miscellaneous/variables.html",[2382,2.434,2440,4.602]],["body/miscellaneous/variables.html",[6,1.979,7,4.026,10,0.131,21,0.007,23,0.502,33,0.832,34,2.859,35,2.155,36,2.592,37,2.155,39,0.002,41,1.15,49,2.125,50,2.41,52,3.199,53,2.155,57,1.358,67,0.003,68,0.002,76,0.963,91,0.849,109,1.372,123,1.675,124,2.955,125,3.541,200,2.356,201,1.581,218,1.302,228,1.082,276,1.743,316,1.516,330,4.026,372,3.199,373,4.026,441,3.759,504,0.922,506,1.743,519,1.405,521,1.169,616,1.274,684,1.979,695,2.987,717,2.272,806,2.676,819,1.581,961,1.169,963,2.258,1101,3.199,1129,1.979,1130,3.199,1145,1.979,1146,3.199,1150,3.199,1275,1.848,1279,3.483,1290,1.516,1321,1.358,1322,3.759,1329,1.848,1351,1.848,1376,1.979,1469,1.979,1561,1.848,1565,1.848,1575,1.848,1577,1.848,1589,1.848,1615,1.848,1616,3.759,1623,2.987,1624,1.979,1625,1.979,1626,1.979,1634,1.979,1667,2.155,1672,1.979,1694,3.199,1700,2.155,1909,1.848,1989,3.199,2072,3.199,2131,1.848,2133,2.155,2134,2.155,2162,3.199,2166,1.979,2276,2.155,2283,1.848,2284,1.979,2285,3.483,2286,4.383,2287,4.383,2288,4.383,2289,2.155,2290,4.383,2291,2.155,2292,4.383,2293,2.155,2294,2.155,2295,4.383,2296,2.155,2297,4.383,2298,4.383,2299,3.483,2300,2.155,2301,4.383,2302,2.155,2303,4.383,2304,4.383,2305,2.155,2306,3.483,2312,2.155,2315,3.483,2317,2.155,2318,5.034,2319,2.155,2320,1.979,2326,3.483,2328,3.483,2329,2.155,2330,3.483,2374,2.155,2382,1.516,2399,3.483,2403,4.624,2415,3.483,2416,3.483,2417,2.155,2424,2.155,2428,2.155,2440,1.979,2461,2.155,2466,2.421,2467,2.421,2468,3.914,2469,3.914,2470,3.914,2471,2.421,2472,2.421,2473,2.421,2474,2.421,2475,2.421,2476,3.914,2477,3.914,2478,2.421,2479,2.421,2480,3.914,2481,2.421,2482,3.914,2483,2.421,2484,2.421,2485,2.421,2486,3.914,2487,2.421,2488,6.211,2489,2.421,2490,2.421,2491,2.421,2492,2.421,2493,3.914,2494,2.421,2495,2.421,2496,2.421,2497,2.421,2498,2.421,2499,2.421,2500,2.421,2501,2.421,2502,2.421,2503,2.421,2504,2.421,2505,2.421,2506,2.421,2507,4.926,2508,2.421,2509,2.421,2510,2.421,2511,2.421,2512,2.421,2513,2.421,2514,2.421,2515,2.421,2516,2.421,2517,2.421,2518,2.421,2519,2.421,2520,2.421,2521,2.421,2522,2.421,2523,2.421,2524,2.421,2525,2.421,2526,2.421,2527,2.421,2528,2.421,2529,3.914,2530,2.421,2531,2.421,2532,3.914,2533,2.421,2534,2.421,2535,2.421,2536,2.421,2537,2.421,2538,2.421,2539,2.421,2540,2.421,2541,2.421,2542,2.421,2543,2.421,2544,2.421,2545,2.421,2546,2.421,2547,2.421,2548,2.421,2549,2.421,2550,2.421,2551,2.421,2552,2.421,2553,2.421,2554,2.421,2555,2.421,2556,2.421]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":512,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":2370,"title":{},"body":{"dependencies.html":{}}}],["0.1.20",{"_index":2381,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":2346,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":2348,"title":{},"body":{"dependencies.html":{}}}],["0.2.31",{"_index":2377,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":2347,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":2367,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":2338,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2272,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2282,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2274,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2273,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2331,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2316,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2327,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2310,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2279,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":2311,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2275,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2269,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2271,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2278,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2270,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2280,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2281,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1909,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["1.10.0",{"_index":2364,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":2353,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":2350,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":2314,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2455,"title":{},"body":{"overview.html":{}}}],["100",{"_index":2544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10h",{"_index":2543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13",{"_index":2454,"title":{},"body":{"overview.html":{}}}],["18",{"_index":2458,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":2380,"title":{},"body":{"dependencies.html":{}}}],["2.2.5",{"_index":2366,"title":{},"body":{"dependencies.html":{}}}],["2.22.1",{"_index":2351,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":2345,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1634,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":2491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":2456,"title":{},"body":{"overview.html":{}}}],["29997856155",{"_index":35,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":2372,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":2521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":2368,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":2376,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":2362,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":2360,"title":{},"body":{"dependencies.html":{}}}],["4.7.15",{"_index":2342,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1605,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["4xx",{"_index":1597,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["5",{"_index":1630,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["5.2.2",{"_index":2336,"title":{},"body":{"dependencies.html":{}}}],["5.2.6",{"_index":2356,"title":{},"body":{"dependencies.html":{}}}],["5.5.3",{"_index":2357,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":2313,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":1601,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["5000",{"_index":2505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["50172241065",{"_index":1625,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":2545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.5.1",{"_index":2343,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":2373,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":2549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.1.5",{"_index":2341,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2340,"title":{},"body":{"dependencies.html":{}}}],["7.6.13",{"_index":2337,"title":{},"body":{"dependencies.html":{}}}],["79",{"_index":2457,"title":{},"body":{"overview.html":{}}}],["9",{"_index":2524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.7.0",{"_index":2358,"title":{},"body":{"dependencies.html":{}}}],["989898",{"_index":1626,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["999999",{"_index":37,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["_",{"_index":1215,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["__dirname",{"_index":2507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_rangeoverlapping",{"_index":1743,"title":{},"body":{"injectables/PeriodService.html":{}}}],["_targetmap",{"_index":1204,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["a.id",{"_index":1781,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["a.position",{"_index":856,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["ability",{"_index":603,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory",{"_index":644,"title":{},"body":{"modules/CaslModule.html":{}}}],["ability.factory.ts",{"_index":599,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:32",{"_index":602,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":604,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":605,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abstract",{"_index":2171,"title":{},"body":{"classes/UploaderService.html":{}}}],["accessors",{"_index":814,"title":{},"body":{"classes/Exam.html":{},"classes/ExamTargetNode.html":{},"injectables/FirebaseAdmin.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["accesstoken",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":2528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["action",{"_index":154,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["action.enum",{"_index":615,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["action.enum.ts",{"_index":2387,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["active",{"_index":514,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamRepository.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":148,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["addmonths",{"_index":1617,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["addtargets",{"_index":1150,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addtargets.map((target",{"_index":1151,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["admin",{"_index":64,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["admin.constants",{"_index":1323,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{}}}],["admin.constants.ts",{"_index":2315,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.module",{"_index":1460,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["admin.module.ts",{"_index":1352,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:14",{"_index":1355,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:27",{"_index":1360,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider",{"_index":1363,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider.ts",{"_index":1277,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["admin.provider.ts:18",{"_index":1318,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:22",{"_index":1320,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:26",{"_index":1292,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:30",{"_index":1295,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:34",{"_index":1300,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:38",{"_index":1302,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:42",{"_index":1304,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:46",{"_index":1306,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:50",{"_index":1308,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:54",{"_index":1310,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:58",{"_index":1312,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:62",{"_index":1314,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:66",{"_index":1299,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:8",{"_index":1291,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin/firebase",{"_index":1351,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin/providers/firebase",{"_index":1276,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["adminuser.ts",{"_index":7,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminuser.ts:37",{"_index":19,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser.ts:8",{"_index":28,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser1620299822480",{"_index":1,"title":{"classes/AdminUser1620299822480.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{}}}],["affected",{"_index":343,"title":{},"body":{"injectables/AnswerService.html":{}}}],["affected.raw.affectedrows",{"_index":345,"title":{},"body":{"injectables/AnswerService.html":{}}}],["affectedrows",{"_index":2107,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["afterload",{"_index":836,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["age=31536000",{"_index":1481,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["agree",{"_index":1117,"title":{},"body":{"injectables/ExamService.html":{}}}],["agree.exam",{"_index":1118,"title":{},"body":{"injectables/ExamService.html":{}}}],["agreed",{"_index":974,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement",{"_index":851,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["agreement.controller",{"_index":1036,"title":{},"body":{"modules/ExamModule.html":{}}}],["agreement.controller.ts",{"_index":905,"title":{},"body":{"controllers/ExamAgreementController.html":{},"coverage.html":{}}}],["agreement.controller.ts:27",{"_index":910,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["agreement.controller.ts:38",{"_index":915,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["agreement.dto",{"_index":710,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["agreement.dto.ts",{"_index":701,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreementDto.html":{},"classes/UpdateExamAgreementDto.html":{},"coverage.html":{}}}],["agreement.dto.ts:12",{"_index":705,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["agreement.dto.ts:13",{"_index":2147,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{}}}],["agreement.dto.ts:6",{"_index":927,"title":{},"body":{"classes/ExamAgreementDto.html":{}}}],["agreement.dto.ts:8",{"_index":2148,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{}}}],["agreement.dto.ts:9",{"_index":925,"title":{},"body":{"classes/ExamAgreementDto.html":{}}}],["agreement.entity",{"_index":108,"title":{},"body":{"classes/Answer.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/User.html":{}}}],["agreement.entity.ts",{"_index":866,"title":{},"body":{"classes/ExamAgreement.html":{},"coverage.html":{}}}],["agreement.entity.ts:11",{"_index":878,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:14",{"_index":869,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:17",{"_index":872,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:24",{"_index":874,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:27",{"_index":876,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:30",{"_index":871,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:33",{"_index":875,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:36",{"_index":870,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:38",{"_index":879,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.exam",{"_index":852,"title":{},"body":{"classes/Exam.html":{}}}],["agreement.repository",{"_index":967,"title":{},"body":{"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{}}}],["agreement.repository.ts",{"_index":936,"title":{},"body":{"classes/ExamAgreementRepository.html":{},"coverage.html":{}}}],["agreement.service",{"_index":308,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{}}}],["agreement.service.ts",{"_index":938,"title":{},"body":{"injectables/ExamAgreementService.html":{},"coverage.html":{}}}],["agreement.service.ts:24",{"_index":945,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:33",{"_index":949,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:55",{"_index":959,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:70",{"_index":948,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:75",{"_index":957,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:82",{"_index":952,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:98",{"_index":955,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.status",{"_index":983,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.user",{"_index":2181,"title":{},"body":{"classes/User.html":{}}}],["agreements",{"_index":810,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamService.html":{}}}],["agreementsbydateinterval",{"_index":939,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreementsbydateinterval(start",{"_index":947,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreementservice",{"_index":1089,"title":{},"body":{"injectables/ExamService.html":{}}}],["aliases",{"_index":2460,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow_anonymous",{"_index":510,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{}}}],["allowanonymous",{"_index":714,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{}}}],["allowedorigins",{"_index":2285,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["alreadyagreed",{"_index":971,"title":{},"body":{"injectables/ExamAgreementService.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{}}}],["alter",{"_index":533,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["andwhere('exam.created_at",{"_index":1083,"title":{},"body":{"classes/ExamRepository.html":{}}}],["andwhere('user.id",{"_index":1544,"title":{},"body":{"classes/GradeRepository.html":{}}}],["anonymouns",{"_index":702,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["anonymous",{"_index":530,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["answer",{"_index":69,"title":{"classes/Answer.html":{}},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Grade.html":{},"classes/Question.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answer.controller",{"_index":269,"title":{},"body":{"modules/AnswerModule.html":{}}}],["answer.dto",{"_index":206,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{}}}],["answer.dto.ts",{"_index":672,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["answer.dto.ts:15",{"_index":678,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:18",{"_index":676,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:22",{"_index":681,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:26",{"_index":675,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.entity",{"_index":238,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer.grade",{"_index":1519,"title":{},"body":{"classes/Grade.html":{}}}],["answer.question",{"_index":1824,"title":{},"body":{"classes/Question.html":{}}}],["answer.service",{"_index":204,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{}}}],["answer.ts",{"_index":122,"title":{},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["answer.ts:13",{"_index":127,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer.ts:4",{"_index":126,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer.ts:6",{"_index":128,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer/answer.module",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["answer/entities/answer.entity",{"_index":609,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["answer1622421768424",{"_index":120,"title":{"classes/Answer1622421768424.html":{}},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["answer:17",{"_index":234,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:20",{"_index":235,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:23",{"_index":231,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:26",{"_index":233,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:29",{"_index":230,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:32",{"_index":232,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer_grade",{"_index":2393,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["answercontroller",{"_index":162,"title":{"controllers/AnswerController.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"coverage.html":{}}}],["answerdto",{"_index":327,"title":{},"body":{"injectables/AnswerService.html":{}}}],["answerdto.type",{"_index":332,"title":{},"body":{"injectables/AnswerService.html":{}}}],["answergrade",{"_index":139,"title":{"classes/AnswerGrade.html":{}},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answergraderepository",{"_index":239,"title":{"classes/AnswerGradeRepository.html":{}},"body":{"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"coverage.html":{}}}],["answermodule",{"_index":251,"title":{"modules/AnswerModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["answerrepository",{"_index":272,"title":{"classes/AnswerRepository.html":{}},"body":{"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"coverage.html":{}}}],["answers",{"_index":324,"title":{},"body":{"injectables/AnswerService.html":{},"classes/Grade.html":{},"classes/Question.html":{}}}],["answerservice",{"_index":203,"title":{"injectables/AnswerService.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"coverage.html":{},"overview.html":{}}}],["answertype",{"_index":93,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"miscellaneous/enumerations.html":{}}}],["answertype.answer",{"_index":679,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answertype.answer_grade",{"_index":333,"title":{},"body":{"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{}}}],["api",{"_index":2417,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":192,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{}}}],["apiexcludeendpoint",{"_index":1161,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["apihideproperty",{"_index":926,"title":{},"body":{"classes/ExamAgreementDto.html":{}}}],["apinotfoundresponse",{"_index":1851,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiokresponse",{"_index":193,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiproperty",{"_index":739,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{}}}],["apiproperty({type",{"_index":760,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["apitags",{"_index":194,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["apitags('answer",{"_index":210,"title":{},"body":{"controllers/AnswerController.html":{}}}],["apitags('auth",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('exam",{"_index":1008,"title":{},"body":{"controllers/ExamController.html":{}}}],["apitags('examagreement",{"_index":921,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["apitags('examtarget",{"_index":1162,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["apitags('question",{"_index":1863,"title":{},"body":{"controllers/QuestionController.html":{}}}],["apitags('questiongroup",{"_index":1935,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["apitags('upload",{"_index":2165,"title":{},"body":{"controllers/UploadController.html":{}}}],["apitags('user",{"_index":2193,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":1278,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/functions.html":{}}}],["appability",{"_index":623,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":346,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applyglobals",{"_index":2321,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyglobals(app",{"_index":2404,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applyperflayer",{"_index":2322,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyperflayer(app",{"_index":2405,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applysecuritylayer",{"_index":2323,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applysecuritylayer(app",{"_index":2406,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appmodule",{"_index":359,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":1378,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["argumentshost",{"_index":1562,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["arr",{"_index":2410,"title":{},"body":{"miscellaneous/functions.html":{}}}],["array",{"_index":1779,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["array.from(map.values()).map((target",{"_index":1227,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["arrayminsize",{"_index":741,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["arrayminsize(1",{"_index":749,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["async",{"_index":13,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"controllers/UploadController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["auth",{"_index":60,"title":{"classes/Auth.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["auth.constants",{"_index":1695,"title":{},"body":{"classes/LoginDto.html":{}}}],["auth.dto",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["auth.dto.ts",{"_index":693,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["auth.password",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FirebaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth.service.ts",{"_index":1386,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:14",{"_index":1406,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:27",{"_index":1400,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:31",{"_index":1396,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:37",{"_index":1404,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:44",{"_index":1398,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:9",{"_index":1393,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.ts",{"_index":400,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["auth.ts:15",{"_index":402,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:4",{"_index":401,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:6",{"_index":403,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth/auth.module",{"_index":376,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["auth/dtos/create",{"_index":802,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["auth/guards/jwt.guard",{"_index":1852,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["auth1619445806509",{"_index":398,"title":{"classes/Auth1619445806509.html":{}},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["authcontroller",{"_index":413,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":425,"title":{"classes/AuthDto.html":{}},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["authdto.login",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto:6",{"_index":697,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["authguard",{"_index":1653,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('jwt",{"_index":1655,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authmodule",{"_index":362,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["authrepository",{"_index":443,"title":{"classes/AuthRepository.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authservice",{"_index":418,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["auto_increment",{"_index":138,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["auxiliary.ts",{"_index":500,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["auxiliary.ts:29",{"_index":553,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:4",{"_index":501,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:6",{"_index":503,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:60",{"_index":502,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["auxiliary/auxiliary.module",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["auxiliary1620477175799",{"_index":498,"title":{"classes/Auxiliary1620477175799.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["auxiliary1624416663574",{"_index":551,"title":{"classes/Auxiliary1624416663574.html":{}},"body":{"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["auxiliarymodule",{"_index":363,"title":{"modules/AuxiliaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["await",{"_index":43,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{}}}],["b",{"_index":855,"title":{},"body":{"classes/Exam.html":{},"classes/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["b.id",{"_index":1782,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["b.position",{"_index":857,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["baseentity",{"_index":2137,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["baserepository",{"_index":242,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["basic",{"_index":2352,"title":{},"body":{"dependencies.html":{}}}],["batchuser",{"_index":294,"title":{"interfaces/BatchUser.html":{}},"body":{"injectables/AnswerService.html":{},"interfaces/BatchUser.html":{},"coverage.html":{}}}],["bcrypt",{"_index":31,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcrypt.compare(logindto.password",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":56,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcrypt.hash(createauthdto.password",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(process.env.admin_password",{"_index":58,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcryptjs",{"_index":32,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"dependencies.html":{}}}],["between",{"_index":965,"title":{},"body":{"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{}}}],["between(start",{"_index":980,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["body",{"_index":184,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["body(new",{"_index":216,"title":{},"body":{"controllers/AnswerController.html":{}}}],["bool",{"_index":818,"title":{},"body":{"classes/Exam.html":{},"injectables/PeriodService.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["boolean",{"_index":703,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamTargetNode.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["bootstrap",{"_index":256,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brazilian",{"_index":798,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["break",{"_index":630,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["browse",{"_index":2452,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2449,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1472,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["buffer",{"_index":1260,"title":{},"body":{"interfaces/FileSendDto.html":{},"injectables/FirebaseStorageService.html":{}}}],["build",{"_index":624,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"index.html":{}}}],["buildswaggerdoc",{"_index":2324,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["buildswaggerdoc(app",{"_index":2407,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cachecontrol",{"_index":1480,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["callback",{"_index":2413,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["callhandler",{"_index":1702,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["can(action.manage",{"_index":629,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.read",{"_index":632,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.update",{"_index":633,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["canagree",{"_index":1044,"title":{},"body":{"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{}}}],["cannot(action.delete",{"_index":634,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["cascade",{"_index":568,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{}}}],["case",{"_index":627,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["casl/ability",{"_index":608,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["casl/casl.module",{"_index":442,"title":{},"body":{"modules/AuthModule.html":{}}}],["caslabilityfactory",{"_index":597,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslaction",{"_index":613,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["caslmodule",{"_index":436,"title":{"modules/CaslModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["caslsubjects",{"_index":622,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["catch",{"_index":1417,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["catch((e",{"_index":1224,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["catch(exception",{"_index":1559,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["catch(httpexception",{"_index":1576,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["cert",{"_index":1376,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":538,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["childentity",{"_index":237,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["childs",{"_index":1172,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["classvalidatorex",{"_index":1606,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["classvalidatorex.error",{"_index":1610,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["classvalidatorex.message",{"_index":1609,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["cli",{"_index":2516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloud",{"_index":1424,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["cls",{"_index":245,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["cluster_answermodule",{"_index":259,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_answermodule_imports",{"_index":260,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_answermodule_providers",{"_index":261,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":432,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":435,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":433,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":434,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule",{"_index":572,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_exports",{"_index":573,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_providers",{"_index":574,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":639,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":641,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":640,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":652,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_exports",{"_index":653,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_providers",{"_index":654,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_exammodule",{"_index":1019,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_exports",{"_index":1020,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_imports",{"_index":1021,"title":{},"body":{"modules/ExamModule.html":{}}}],["cluster_exammodule_providers",{"_index":1022,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule",{"_index":1348,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule_exports",{"_index":1349,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule_providers",{"_index":1350,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebasemodule",{"_index":1451,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_exports",{"_index":1453,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_providers",{"_index":1452,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_inframodule",{"_index":1642,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_exports",{"_index":1643,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_imports",{"_index":1644,"title":{},"body":{"modules/InfraModule.html":{}}}],["cluster_loggermodule",{"_index":1685,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1686,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1687,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule",{"_index":1954,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule_exports",{"_index":1956,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule_imports",{"_index":1955,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["cluster_questiongroupmodule_providers",{"_index":1957,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2200,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2201,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2202,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":520,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{}}}],["code_id",{"_index":524,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["collection",{"_index":1443,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type",{"_index":1446,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type.ts",{"_index":2462,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["column",{"_index":111,"title":{},"body":{"classes/Answer.html":{},"classes/Auth.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["column({type",{"_index":85,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["command",{"_index":2447,"title":{},"body":{"index.html":{}}}],["completed",{"_index":2251,"title":{},"body":{"injectables/UserService.html":{}}}],["compose",{"_index":2436,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2349,"title":{},"body":{"dependencies.html":{}}}],["computador",{"_index":2434,"title":{},"body":{"index.html":{}}}],["config",{"_index":374,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{}}}],["configmodule",{"_index":369,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/InfraModule.html":{}}}],["configmodule.forroot",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":372,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":370,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('firebase",{"_index":1650,"title":{},"body":{"modules/InfraModule.html":{}}}],["configservice.get(databaseconfigkey",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(jwtconfigkey",{"_index":450,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(jwtconfigkey)!.secret",{"_index":1681,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["conflictexception",{"_index":960,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["conflictexception('already",{"_index":973,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["console.error(e",{"_index":2248,"title":{},"body":{"injectables/UserService.html":{}}}],["console.error(exception",{"_index":1604,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["console.log('create",{"_index":2249,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":33,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":149,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["constructor",{"_index":288,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(firebase_options",{"_index":1324,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(answerrepository",{"_index":289,"title":{},"body":{"injectables/AnswerService.html":{}}}],["constructor(authrepository",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":1661,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(configservice",{"_index":1556,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructor(firebaseadmin",{"_index":1392,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{}}}],["constructor(graderepository",{"_index":1546,"title":{},"body":{"injectables/GradeService.html":{}}}],["constructor(options",{"_index":1289,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(periodrepository",{"_index":1731,"title":{},"body":{"injectables/PeriodService.html":{}}}],["constructor(private",{"_index":212,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["constructor(repository",{"_index":943,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["constructor(storageservice",{"_index":1486,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["constructor(targetnodefactory",{"_index":1234,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["constructor(userrepository",{"_index":2219,"title":{},"body":{"injectables/UserService.html":{}}}],["contenttype",{"_index":1470,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["context",{"_index":1704,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["controller",{"_index":161,"title":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('answer",{"_index":209,"title":{},"body":{"controllers/AnswerController.html":{}}}],["controller('auth",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('exam",{"_index":920,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{}}}],["controller('question",{"_index":1862,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["controller('upload",{"_index":2164,"title":{},"body":{"controllers/UploadController.html":{}}}],["controller('user",{"_index":2192,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":163,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{},"modules/InfraModule.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers/app.controller",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["controllers/auth.controller",{"_index":446,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/exam",{"_index":1034,"title":{},"body":{"modules/ExamModule.html":{}}}],["controllers/exam.controller",{"_index":1028,"title":{},"body":{"modules/ExamModule.html":{}}}],["controllers/question",{"_index":1959,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/question.controller",{"_index":1961,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/upload.controller",{"_index":1647,"title":{},"body":{"modules/InfraModule.html":{}}}],["controllers/user.controller",{"_index":2204,"title":{},"body":{"modules/UserModule.html":{}}}],["copy",{"_index":1913,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copy(copyquestiongroupdto",{"_index":1914,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copying",{"_index":2441,"title":{},"body":{"index.html":{}}}],["copyquestiongroupdto",{"_index":645,"title":{"classes/CopyQuestionGroupDto.html":{}},"body":{"classes/CopyQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["copytogroup",{"_index":2054,"title":{},"body":{"injectables/QuestionService.html":{}}}],["copytogroup(group",{"_index":2059,"title":{},"body":{"injectables/QuestionService.html":{}}}],["core/core.module",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["core/decorators/is",{"_index":799,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["core/entities/ff.entity",{"_index":116,"title":{},"body":{"classes/Answer.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["coremodule",{"_index":364,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["cors",{"_index":2492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corsconfig",{"_index":2286,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsconfigkey",{"_index":2287,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":2489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["count",{"_index":1633,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course",{"_index":519,"title":{"classes/Course.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["course.entity",{"_index":2128,"title":{},"body":{"classes/Subject.html":{}}}],["course.id",{"_index":1636,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course_id",{"_index":525,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course`(`id",{"_index":546,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["courseid",{"_index":2122,"title":{},"body":{"classes/Subject.html":{}}}],["coverage",{"_index":2265,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":2443,"title":{},"body":{"index.html":{}}}],["cpf",{"_index":34,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["create",{"_index":166,"title":{},"body":{"controllers/AnswerController.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"miscellaneous/enumerations.html":{}}}],["create(@body",{"_index":1009,"title":{},"body":{"controllers/ExamController.html":{}}}],["create(createexamdto",{"_index":989,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["create(createquestiongroupdto",{"_index":1918,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["create(examid",{"_index":169,"title":{},"body":{"controllers/AnswerController.html":{}}}],["createagreement",{"_index":906,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createagreement(createagreementdto",{"_index":908,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createagreementdto",{"_index":911,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createanswerdto",{"_index":172,"title":{"classes/CreateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["createanswerdtos",{"_index":171,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["createanswerdtos.map((dto",{"_index":318,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createanswerdtos.map(async",{"_index":326,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createauth",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauth(createauthdto",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauthdto",{"_index":463,"title":{"classes/CreateAuthDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["createauthdto.login",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["createbatch",{"_index":285,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createbatch(createanswerdtos",{"_index":293,"title":{},"body":{"injectables/AnswerService.html":{}}}],["created_at",{"_index":131,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["createdat",{"_index":79,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdatecolumn",{"_index":100,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdto",{"_index":331,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createexamagreementdto",{"_index":699,"title":{"classes/CreateExamAgreementDto.html":{}},"body":{"classes/CreateExamAgreementDto.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"coverage.html":{}}}],["createexamdto",{"_index":712,"title":{"classes/CreateExamDto.html":{}},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["createforuser",{"_index":600,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":601,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createparamdecorator",{"_index":2533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquestion",{"_index":734,"title":{"classes/CreateQuestion.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["createquestion(createquestiondto",{"_index":1830,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestiondto",{"_index":745,"title":{"classes/CreateQuestionDto.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["createquestiongroupdto",{"_index":777,"title":{"classes/CreateQuestionGroupDto.html":{}},"body":{"classes/CreateQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["createquestiongroupdto.examid",{"_index":2000,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["createquestions",{"_index":1827,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestions(groupid",{"_index":1832,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestionsdto",{"_index":748,"title":{"classes/CreateQuestionsDto.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["createquestionsdto.questions.map((dto",{"_index":2079,"title":{},"body":{"injectables/QuestionService.html":{}}}],["createstudent",{"_index":1800,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createstudent(createdto",{"_index":1802,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createuser",{"_index":1388,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuser(@body",{"_index":2194,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createdto",{"_index":1394,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["createuser(createuserdto",{"_index":2184,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["createuserbytype",{"_index":2214,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserbytype(createuserdto",{"_index":2222,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":786,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuserdto.enrollment",{"_index":2244,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":2245,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.type",{"_index":2252,"title":{},"body":{"injectables/UserService.html":{}}}],["credential",{"_index":1331,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["crypto",{"_index":1493,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["ctx",{"_index":1577,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1580,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ctx.getresponse",{"_index":1579,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp(6",{"_index":134,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["customlogger",{"_index":804,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":1469,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":1279,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/variables.html":{}}}],["database(url",{"_index":1294,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["database/migrations/*.{js,ts",{"_index":2510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":2290,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseconfigkey",{"_index":373,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseurl",{"_index":1327,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["date",{"_index":99,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":1584,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["datetime",{"_index":508,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/Period.html":{}}}],["datetime(6",{"_index":132,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["de",{"_index":2421,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":255,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":1380,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["decoded.email",{"_index":1415,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.email_verified",{"_index":1416,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.uid",{"_index":1414,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decorators",{"_index":82,"title":{},"body":{"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["decoratos/get",{"_index":2189,"title":{},"body":{"controllers/UserController.html":{}}}],["default",{"_index":124,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateAnswerDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Student.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["default_port",{"_index":2326,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultname",{"_index":1623,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":66,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/FirebaseAdmin.html":{},"classes/PeriodIndex1624547816204.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":177,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["delete(':id')@apiokresponse()@apinotfoundresponse",{"_index":1841,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["deleted_at",{"_index":137,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["deletedat",{"_index":80,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deletedatecolumn",{"_index":103,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deleteuser",{"_index":1389,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["deleteuser(uid",{"_index":1397,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["dependencies",{"_index":253,"title":{"dependencies.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":506,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["detectsubjecttype",{"_index":636,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["development",{"_index":2428,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dfs",{"_index":1173,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["dfs(type",{"_index":1177,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["distinct",{"_index":1052,"title":{},"body":{"classes/ExamRepository.html":{}}}],["distinct(true",{"_index":1074,"title":{},"body":{"classes/ExamRepository.html":{}}}],["docker",{"_index":2435,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":2266,"title":{},"body":{"coverage.html":{}}}],["dont",{"_index":1596,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["down",{"_index":14,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["down(queryrunner",{"_index":16,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["drop",{"_index":159,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["dsn",{"_index":2553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":1097,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionService.html":{}}}],["dto.questionid",{"_index":319,"title":{},"body":{"injectables/AnswerService.html":{}}}],["dto/create",{"_index":205,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["dto/update",{"_index":207,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["dtos/auth.dto",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["dtos/copy",{"_index":1932,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["dtos/create",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["dtos/file",{"_index":1495,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["dtos/find",{"_index":1068,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/QuestionGroupService.html":{}}}],["dtos/login.dto",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/question",{"_index":1853,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["dtos/reorder",{"_index":1855,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["dtos/update",{"_index":916,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["dtos/user.dto",{"_index":2237,"title":{},"body":{"injectables/UserService.html":{}}}],["duration",{"_index":1744,"title":{},"body":{"injectables/PeriodService.html":{}}}],["dynamicmodule",{"_index":1356,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["e",{"_index":2247,"title":{},"body":{"injectables/UserService.html":{}}}],["each",{"_index":726,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["el.id",{"_index":1082,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ela",{"_index":770,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["em",{"_index":1895,"title":{},"body":{"classes/QuestionGroup.html":{},"index.html":{}}}],["email",{"_index":1382,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{}}}],["emailverified",{"_index":1383,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{}}}],["emit",{"_index":1594,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["encoding",{"_index":1261,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["end",{"_index":816,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/PeriodService.html":{}}}],["enda",{"_index":1746,"title":{},"body":{"injectables/PeriodService.html":{}}}],["endb",{"_index":1748,"title":{},"body":{"injectables/PeriodService.html":{}}}],["ended_at",{"_index":509,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["endedat",{"_index":715,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{}}}],["endofmonth",{"_index":1618,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["endofmonth(addmonths(new",{"_index":1629,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["engine=innodb",{"_index":146,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["enrollment",{"_index":36,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{},"classes/UserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["enrollment.decorator",{"_index":800,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enrollment.decorator.ts",{"_index":2308,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["enrollmentlength",{"_index":2306,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":2506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/answer",{"_index":247,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entities/answer.entity",{"_index":208,"title":{},"body":{"controllers/AnswerController.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{}}}],["entities/auth.entity",{"_index":452,"title":{},"body":{"classes/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["entities/exam",{"_index":917,"title":{},"body":{"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{}}}],["entities/exam.entity",{"_index":1005,"title":{},"body":{"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{}}}],["entities/grade.entity",{"_index":1531,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["entities/period.entity",{"_index":1532,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{}}}],["entities/professor.entity",{"_index":1533,"title":{},"body":{"classes/GradeRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{}}}],["entities/question",{"_index":1766,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["entities/question.entity",{"_index":1856,"title":{},"body":{"controllers/QuestionController.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{}}}],["entities/student.entity",{"_index":1534,"title":{},"body":{"classes/GradeRepository.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{}}}],["entities/user.entity",{"_index":2190,"title":{},"body":{"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":112,"title":{},"body":{"classes/Answer.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["entity('answer",{"_index":119,"title":{},"body":{"classes/Answer.html":{}}}],["entity('auth",{"_index":397,"title":{},"body":{"classes/Auth.html":{}}}],["entity('course",{"_index":669,"title":{},"body":{"classes/Course.html":{}}}],["entity('exam",{"_index":848,"title":{},"body":{"classes/Exam.html":{}}}],["entity('exam_agreement",{"_index":883,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["entity('exam_target",{"_index":1127,"title":{},"body":{"classes/ExamTarget.html":{}}}],["entity('grade",{"_index":1518,"title":{},"body":{"classes/Grade.html":{}}}],["entity('period",{"_index":1717,"title":{},"body":{"classes/Period.html":{}}}],["entity('subject",{"_index":2129,"title":{},"body":{"classes/Subject.html":{}}}],["entity('user",{"_index":2179,"title":{},"body":{"classes/User.html":{}}}],["entity.{js,ts",{"_index":2508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entitylike",{"_index":1104,"title":{},"body":{"injectables/ExamService.html":{}}}],["entityrepository",{"_index":243,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(answer",{"_index":281,"title":{},"body":{"classes/AnswerRepository.html":{}}}],["entityrepository(answergrade",{"_index":249,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entityrepository(auth",{"_index":453,"title":{},"body":{"classes/AuthRepository.html":{}}}],["entityrepository(exam",{"_index":1070,"title":{},"body":{"classes/ExamRepository.html":{}}}],["entityrepository(examagreement",{"_index":937,"title":{},"body":{"classes/ExamAgreementRepository.html":{}}}],["entityrepository(examtarget",{"_index":1202,"title":{},"body":{"classes/ExamTargetRepository.html":{}}}],["entityrepository(grade",{"_index":1536,"title":{},"body":{"classes/GradeRepository.html":{}}}],["entityrepository(period",{"_index":1727,"title":{},"body":{"classes/PeriodRepository.html":{}}}],["entityrepository(professor",{"_index":1798,"title":{},"body":{"classes/ProfessorRepository.html":{}}}],["entityrepository(question",{"_index":2052,"title":{},"body":{"classes/QuestionRepository.html":{}}}],["entityrepository(questiongroup",{"_index":1969,"title":{},"body":{"classes/QuestionGroupRepository.html":{}}}],["entityrepository(student",{"_index":2114,"title":{},"body":{"classes/StudentRepository.html":{}}}],["entityrepository(user",{"_index":2209,"title":{},"body":{"classes/UserRepository.html":{}}}],["enum",{"_index":94,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Professor.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["enum/user",{"_index":801,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["enumerations",{"_index":2383,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/answer",{"_index":117,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{}}}],["enums/casl",{"_index":614,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["enums/exam",{"_index":731,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{}}}],["env",{"_index":52,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["env.example",{"_index":2442,"title":{},"body":{"index.html":{}}}],["environment",{"_index":2439,"title":{},"body":{"index.html":{}}}],["err",{"_index":1418,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["error",{"_index":1575,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["error('admin_password",{"_index":51,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["error('needs",{"_index":2530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["essa",{"_index":767,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["essas",{"_index":1893,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["esses",{"_index":2431,"title":{},"body":{"index.html":{}}}],["et",{"_index":1056,"title":{},"body":{"classes/ExamRepository.html":{}}}],["et.exam_id",{"_index":1058,"title":{},"body":{"classes/ExamRepository.html":{}}}],["et.exam_target_id",{"_index":1061,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ex",{"_index":1583,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.body",{"_index":1611,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.message",{"_index":1608,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.name",{"_index":1592,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.stack",{"_index":1590,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exam",{"_index":504,"title":{"classes/Exam.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateExamAgreementDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/FindExamByUserDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateExamAgreementDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam.constants",{"_index":1102,"title":{},"body":{"injectables/ExamService.html":{}}}],["exam.created_at",{"_index":1066,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.deleted_at",{"_index":1067,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.dto",{"_index":1004,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{}}}],["exam.dto.ts",{"_index":713,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["exam.dto.ts:16",{"_index":728,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:20",{"_index":720,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:24",{"_index":723,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:28",{"_index":722,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:32",{"_index":719,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:37",{"_index":727,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.entity",{"_index":882,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["exam.id",{"_index":1057,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.period",{"_index":1112,"title":{},"body":{"injectables/ExamService.html":{},"classes/Period.html":{},"classes/PersonalQuestionGroup.html":{}}}],["exam.service",{"_index":968,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["exam.status",{"_index":1065,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.targets",{"_index":1108,"title":{},"body":{"injectables/ExamService.html":{}}}],["exam.ts",{"_index":862,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam.ts:10",{"_index":864,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:4",{"_index":863,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:6",{"_index":865,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam/entities/exam",{"_index":611,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/entities/exam.entity",{"_index":610,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/enums/exam",{"_index":1888,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["exam/exam.module",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{}}}],["exam1620478273991",{"_index":860,"title":{"classes/Exam1620478273991.html":{}},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam_agreement",{"_index":528,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{}}}],["exam_agreement_id",{"_index":140,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["exam_agreement`(`id",{"_index":153,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["exam_id",{"_index":536,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/GradeIndex1624560625346.html":{}}}],["exam_not_found",{"_index":1101,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam_target",{"_index":1060,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{}}}],["exam_target_id",{"_index":1138,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam_target`(`id",{"_index":1143,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam_targets_exam_target",{"_index":1055,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{}}}],["exam`(`id",{"_index":542,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{}}}],["examagreement",{"_index":74,"title":{"classes/ExamAgreement.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"coverage.html":{}}}],["examagreement.ts",{"_index":890,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["examagreement.ts:21",{"_index":892,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement.ts:4",{"_index":891,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement.ts:6",{"_index":893,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement1622332886234",{"_index":888,"title":{"classes/ExamAgreement1622332886234.html":{}},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["examagreementanonymousdefault.ts",{"_index":899,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["examagreementanonymousdefault.ts:13",{"_index":901,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault.ts:5",{"_index":900,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault.ts:7",{"_index":902,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault1622334780336",{"_index":897,"title":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["examagreementcontroller",{"_index":903,"title":{"controllers/ExamAgreementController.html":{}},"body":{"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examagreementdto",{"_index":709,"title":{"classes/ExamAgreementDto.html":{}},"body":{"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreementDto.html":{},"coverage.html":{}}}],["examagreementid",{"_index":75,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{}}}],["examagreementnotfinished",{"_index":635,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["examagreementobservation.ts",{"_index":930,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["examagreementobservation.ts:13",{"_index":932,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation.ts:5",{"_index":931,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation.ts:7",{"_index":933,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation1622417032753",{"_index":928,"title":{"classes/ExamAgreementObservation1622417032753.html":{}},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["examagreementrepository",{"_index":934,"title":{"classes/ExamAgreementRepository.html":{}},"body":{"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examagreements",{"_index":1785,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["examagreementservice",{"_index":291,"title":{"injectables/ExamAgreementService.html":{}},"body":{"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"coverage.html":{},"overview.html":{}}}],["examagreementstatus",{"_index":873,"title":{},"body":{"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"miscellaneous/enumerations.html":{}}}],["examagreementstatus.finished",{"_index":887,"title":{},"body":{"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{}}}],["examagreementstatus.started",{"_index":885,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["examagreementuser",{"_index":909,"title":{"interfaces/ExamAgreementUser.html":{}},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"coverage.html":{}}}],["examcontroller",{"_index":986,"title":{"controllers/ExamController.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examid",{"_index":175,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"classes/FindPersonalDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["exammodule",{"_index":262,"title":{"modules/ExamModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["exampersonalresult",{"_index":998,"title":{"classes/ExamPersonalResult.html":{}},"body":{"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["examples",{"_index":1163,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["examrepository",{"_index":1029,"title":{"classes/ExamRepository.html":{}},"body":{"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["exams",{"_index":1711,"title":{},"body":{"classes/Period.html":{}}}],["examservice",{"_index":944,"title":{"injectables/ExamService.html":{}},"body":{"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"overview.html":{}}}],["examservice.relations",{"_index":1115,"title":{},"body":{"injectables/ExamService.html":{}}}],["examstatus",{"_index":827,"title":{},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"miscellaneous/enumerations.html":{}}}],["examstatus.active",{"_index":1078,"title":{},"body":{"classes/ExamRepository.html":{}}}],["examtarget",{"_index":829,"title":{"classes/ExamTarget.html":{}},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["examtarget.ts",{"_index":1130,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examtarget.ts:30",{"_index":1132,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget.ts:6",{"_index":1131,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget.ts:8",{"_index":1133,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget1622326106015",{"_index":1128,"title":{"classes/ExamTarget1622326106015.html":{}},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{}}}],["examtargetadd.ts",{"_index":1146,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examtargetadd.ts:21",{"_index":1148,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd.ts:6",{"_index":1147,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd.ts:8",{"_index":1149,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd1622378888497",{"_index":1144,"title":{"classes/ExamTargetAdd1622378888497.html":{}},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{}}}],["examtargetcontroller",{"_index":1027,"title":{"controllers/ExamTargetController.html":{}},"body":{"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["examtargetmanagerdto",{"_index":1168,"title":{"interfaces/ExamTargetManagerDto.html":{}},"body":{"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["examtargetnode",{"_index":1170,"title":{"classes/ExamTargetNode.html":{}},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["examtargetnodefactory",{"_index":1023,"title":{"injectables/ExamTargetNodeFactory.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"overview.html":{}}}],["examtargetnodeschema",{"_index":1193,"title":{"interfaces/ExamTargetNodeSchema.html":{}},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["examtargetrepository",{"_index":1031,"title":{"classes/ExamTargetRepository.html":{}},"body":{"modules/ExamModule.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["examtargetservice",{"_index":1024,"title":{"injectables/ExamTargetService.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{},"overview.html":{}}}],["examtargettree",{"_index":1025,"title":{"injectables/ExamTargetTree.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"overview.html":{}}}],["examtargettype",{"_index":724,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{},"classes/QuestionGroup.html":{},"miscellaneous/enumerations.html":{}}}],["examtargettype.course",{"_index":1241,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.grade",{"_index":1242,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.professor",{"_index":1243,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.student",{"_index":1244,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtitle.ts",{"_index":1249,"title":{},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["examtitle.ts:10",{"_index":1251,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle.ts:4",{"_index":1250,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle.ts:6",{"_index":1252,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle1621036457247",{"_index":1247,"title":{"classes/ExamTitle1621036457247.html":{}},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["examuser",{"_index":170,"title":{"interfaces/ExamUser.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamUser.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["exception",{"_index":1564,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter",{"_index":660,"title":{},"body":{"modules/CoreModule.html":{}}}],["exception.filter.ts",{"_index":1554,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["exception.filter.ts:31",{"_index":1557,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:34",{"_index":1563,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":1607,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.getstatus",{"_index":1581,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.initmessage",{"_index":1582,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.message",{"_index":1586,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.name",{"_index":1593,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.stack",{"_index":1591,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exceptionfilter",{"_index":1555,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exceptions",{"_index":1595,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["executioncontext",{"_index":1700,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":2542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":38,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":258,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":1567,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/UploadController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":2155,"title":{},"body":{"controllers/UploadController.html":{}}}],["extends",{"_index":71,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/AuthRepository.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTargetRepository.html":{},"classes/FFEntity.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodRepository.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":1669,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1678,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":606,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["factories/casl",{"_index":643,"title":{},"body":{"modules/CaslModule.html":{}}}],["factories/exam",{"_index":1039,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetTree.html":{}}}],["faker",{"_index":1621,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"dependencies.html":{}}}],["faker.random.alpha",{"_index":1632,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["faker.random.alphanumeric(20",{"_index":1631,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["false",{"_index":819,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/FirebaseStorageService.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":2415,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fcm",{"_index":1426,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["ff",{"_index":2424,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ff.uneb.br",{"_index":2541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ffentity",{"_index":72,"title":{"classes/FFEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"coverage.html":{}}}],["ffentity:10",{"_index":833,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:13",{"_index":835,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:16",{"_index":834,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:6",{"_index":98,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.publicurl",{"_index":1482,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file.save(data",{"_index":1477,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["filedto",{"_index":1491,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["filedto.buffer",{"_index":1501,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["filedto.mimetype",{"_index":1502,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["fileinterceptor",{"_index":2160,"title":{},"body":{"controllers/UploadController.html":{}}}],["filesenddto",{"_index":1257,"title":{"interfaces/FileSendDto.html":{}},"body":{"interfaces/FileSendDto.html":{},"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{},"coverage.html":{}}}],["filters/http",{"_index":659,"title":{},"body":{"modules/CoreModule.html":{}}}],["find",{"_index":1828,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find(@query",{"_index":1868,"title":{},"body":{"controllers/QuestionController.html":{}}}],["find(finddto",{"_index":1835,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto",{"_index":1854,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto.ts",{"_index":1875,"title":{},"body":{"classes/QuestionFindDto.html":{},"coverage.html":{}}}],["find.dto.ts:6",{"_index":1877,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["find.type",{"_index":1273,"title":{},"body":{"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["find.type.ts",{"_index":2463,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["findall",{"_index":286,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["findauth",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["findauth(authdto",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["findbyids",{"_index":2055,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findbyids(ids",{"_index":2064,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findbyuser",{"_index":1048,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbyuser(undefined",{"_index":1049,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbyuserandperiod",{"_index":1528,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["findbyuserandperiod(user",{"_index":1529,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["finddto",{"_index":953,"title":{},"body":{"injectables/ExamAgreementService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["finddto.groupid",{"_index":2082,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findexambyuserdto",{"_index":1050,"title":{"interfaces/FindExamByUserDto.html":{}},"body":{"classes/ExamRepository.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["findone",{"_index":287,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["findone(@param('id",{"_index":1015,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["findone(finddto",{"_index":950,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["findone(id",{"_index":297,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["findone(userdto",{"_index":1804,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["findpersonal",{"_index":988,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["findpersonal(@getuser",{"_index":1013,"title":{},"body":{"controllers/ExamController.html":{}}}],["findpersonal(examid",{"_index":1922,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["findpersonal(undefined",{"_index":1979,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["findpersonal(user",{"_index":996,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["findpersonaldto",{"_index":1266,"title":{"classes/FindPersonalDto.html":{}},"body":{"classes/FindPersonalDto.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["findspecializeduser",{"_index":2215,"title":{},"body":{"injectables/UserService.html":{}}}],["findspecializeduser(userdto",{"_index":2224,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser",{"_index":2216,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(userdto",{"_index":2226,"title":{},"body":{"injectables/UserService.html":{}}}],["finished",{"_index":564,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"miscellaneous/enumerations.html":{}}}],["finishexam",{"_index":940,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["finishexam(agreement",{"_index":954,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["firebase",{"_index":1321,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["firebase.app.app",{"_index":1316,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.appoptions",{"_index":1334,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.auth.auth",{"_index":1293,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.createrequest",{"_index":1395,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.updaterequest",{"_index":1403,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.credential.cert(options.cert",{"_index":1332,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.database.database",{"_index":1298,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.firestore.collectionreference",{"_index":2465,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["firebase.firestore.firestore",{"_index":1301,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{}}}],["firebase.initializeapp",{"_index":1326,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.instanceid.instanceid",{"_index":1303,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.machinelearning.machinelearning",{"_index":1305,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.messaging.messaging",{"_index":1307,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingoptions",{"_index":1432,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingpayload",{"_index":1431,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.projectmanagement.projectmanagement",{"_index":1309,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.remoteconfig.remoteconfig",{"_index":1311,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.securityrules.securityrules",{"_index":1313,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.serviceaccount",{"_index":1377,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["firebase.storage.storage",{"_index":1315,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{}}}],["firebase_admin",{"_index":2318,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebase_bucket",{"_index":2531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebase_options",{"_index":1322,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebaseadmin",{"_index":1274,"title":{"injectables/FirebaseAdmin.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{},"overview.html":{}}}],["firebaseadmin.auth",{"_index":1411,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseadmin.firestore",{"_index":1448,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firebaseadmin.messaging",{"_index":1435,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebaseadmin.storage",{"_index":1475,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["firebaseadminmodule",{"_index":1347,"title":{"modules/FirebaseAdminModule.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules.html":{},"overview.html":{}}}],["firebaseadminmodule.forroot(options",{"_index":1463,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseadminmodule.forrootasync(options",{"_index":1464,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseasyncmoduleoptions",{"_index":1359,"title":{"interfaces/FirebaseAsyncModuleOptions.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["firebaseauth",{"_index":1387,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseauthdecodedtoken",{"_index":1379,"title":{"interfaces/FirebaseAuthDecodedToken.html":{}},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["firebaseauthservice",{"_index":1384,"title":{"injectables/FirebaseAuthService.html":{}},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebasecloudmessagingservice",{"_index":1423,"title":{"injectables/FirebaseCloudMessagingService.html":{}},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebaseconfig",{"_index":2292,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasefirestorecollection",{"_index":1444,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firebasefirestoreservice",{"_index":1437,"title":{"injectables/FirebaseFirestoreService.html":{}},"body":{"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["firebasemodule",{"_index":1450,"title":{"modules/FirebaseModule.html":{}},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["firebasemodule.forrootasync",{"_index":1649,"title":{},"body":{"modules/InfraModule.html":{}}}],["firebasemoduleoptions",{"_index":1290,"title":{"interfaces/FirebaseModuleOptions.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasestorageservice",{"_index":1461,"title":{"injectables/FirebaseStorageService.html":{}},"body":{"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["firebaseuploader",{"_index":1483,"title":{"injectables/FirebaseUploader.html":{}},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"coverage.html":{}}}],["firestore",{"_index":1280,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firestore.service.ts",{"_index":1438,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"coverage.html":{}}}],["firestore.service.ts:14",{"_index":1442,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firestore.service.ts:8",{"_index":1440,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["fk_1d110bd5138b275a2ea2944e290",{"_index":541,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_20bfb4e7c97aa20956be86c6beb",{"_index":895,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["fk_26862c959c4ecfc8f1b4a1a055c",{"_index":571,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_3b2789ae1c494ff1bf8dd4d4607",{"_index":537,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["fk_4a22969058fa5105ad6bee583f1",{"_index":1141,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["fk_7540599d89cb2b6e17cc56d5170",{"_index":570,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_7bdc7fbb138980e5471e2a19366",{"_index":896,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["fk_814144bcce3b80921f41f15b823",{"_index":150,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_971014f1fb44be716098484bb5a",{"_index":157,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_af1604ea5493f65a6c8d70d98ed",{"_index":1142,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["fk_b472107b61171823120f069fd50",{"_index":547,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_b9db72ddc93f196bf9d79132171",{"_index":545,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_ba483ad17eb41fb181aa3a77d4f",{"_index":543,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/PeriodIndex1624547816204.html":{}}}],["fk_ba86f32978b67a878005c5af78a",{"_index":565,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_c3d19a89541e4f0813f2fe09194",{"_index":155,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_d35fb46683694975ba85bcd804e",{"_index":549,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_df58a2a413f5647f6411002cb28",{"_index":569,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_f2d35d0b9823628374f51931ddd",{"_index":566,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["flags",{"_index":1894,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["fns",{"_index":1620,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"dependencies.html":{}}}],["following",{"_index":2446,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":1666,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["foreign",{"_index":151,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["form",{"_index":2416,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fornecida",{"_index":769,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["forroot",{"_index":1353,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forroot(options",{"_index":1354,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync",{"_index":1357,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync(options",{"_index":1358,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forwardref",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/QuestionService.html":{},"modules/UserModule.html":{}}}],["found",{"_index":330,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/PeriodService.html":{},"miscellaneous/variables.html":{}}}],["fullfil",{"_index":2437,"title":{},"body":{"index.html":{}}}],["function",{"_index":1374,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":2398,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":1191,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{}}}],["generate(schema",{"_index":1192,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["generated",{"_index":880,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["generated('uuid",{"_index":884,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["generated('uuid')@column({unique",{"_index":877,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["gerado",{"_index":1624,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["get(':id",{"_index":994,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get(':id')@apiokresponse({type",{"_index":1838,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get('health",{"_index":350,"title":{},"body":{"controllers/AppController.html":{}}}],["get('me",{"_index":1012,"title":{},"body":{"controllers/ExamController.html":{}}}],["get('me')@apiokresponse({type",{"_index":997,"title":{},"body":{"controllers/ExamController.html":{}}}],["get('me/:examid",{"_index":1938,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["get('me/:examid')@apiokresponse({type",{"_index":1923,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["get('user",{"_index":1166,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["get('user')@apiexcludeendpoint",{"_index":1157,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["get()@apiokresponse({type",{"_index":992,"title":{},"body":{"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get()@useguards(jwtguard",{"_index":2187,"title":{},"body":{"controllers/UserController.html":{}}}],["getbyuser",{"_index":941,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["getbyuser(user",{"_index":956,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["getcollection",{"_index":1439,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getcollection(collection",{"_index":1441,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getend",{"_index":841,"title":{},"body":{"classes/Exam.html":{}}}],["getforuser",{"_index":1154,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getforuser(@getuser",{"_index":1167,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getforuser(user",{"_index":1156,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getgrades",{"_index":1794,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["getisleaf",{"_index":1180,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["getlastperiod",{"_index":1729,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getname",{"_index":1317,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["getnextposition",{"_index":2056,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getnextposition(groupid",{"_index":2067,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getoptions",{"_index":1319,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["getperiodbyinterval",{"_index":1730,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getperiodbyinterval(undefined",{"_index":1735,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getpersonal",{"_index":1759,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["getpersonal(user",{"_index":1762,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["getstart",{"_index":839,"title":{},"body":{"classes/Exam.html":{}}}],["gettargetmap",{"_index":1205,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["gettargets",{"_index":1155,"title":{},"body":{"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{}}}],["gettargetsforuser",{"_index":1206,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["gettargetsforuser(target",{"_index":1212,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["getting",{"_index":2414,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":200,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"injectables/FirebaseAuthService.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuser(@getuser",{"_index":2196,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(uid",{"_index":1399,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["getuser(user",{"_index":2186,"title":{},"body":{"controllers/UserController.html":{}}}],["given",{"_index":1753,"title":{},"body":{"injectables/PeriodService.html":{}}}],["global",{"_index":658,"title":{},"body":{"modules/CoreModule.html":{},"modules/FirebaseModule.html":{}}}],["grade",{"_index":228,"title":{"classes/Grade.html":{}},"body":{"classes/AnswerGrade.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/QuestionGroupGrade.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["grade.entity",{"_index":248,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{}}}],["grade.entity.ts",{"_index":227,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["grade.entity.ts:5",{"_index":1945,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["grade.entity.ts:8",{"_index":229,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["grade.id",{"_index":1640,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["grade.repository",{"_index":275,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["grade.repository.ts",{"_index":241,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["grade.subject",{"_index":2130,"title":{},"body":{"classes/Subject.html":{}}}],["grade_id",{"_index":142,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["grade`(`id",{"_index":158,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{}}}],["gradeid",{"_index":673,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["gradeindex.ts",{"_index":1522,"title":{},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["gradeindex.ts:10",{"_index":1524,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex.ts:4",{"_index":1523,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex.ts:6",{"_index":1525,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex1624560625346",{"_index":1520,"title":{"classes/GradeIndex1624560625346.html":{}},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["graderepository",{"_index":580,"title":{"classes/GradeRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"coverage.html":{}}}],["grades",{"_index":1770,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{}}}],["grades.length",{"_index":1772,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["grades.map((grade",{"_index":1775,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["gradeservice",{"_index":575,"title":{"injectables/GradeService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/GradeService.html":{},"classes/PersonalQuestionGroup.html":{},"coverage.html":{},"overview.html":{}}}],["group",{"_index":849,"title":{},"body":{"classes/Exam.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["group.constants",{"_index":1990,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.constants.ts",{"_index":2328,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group.controller",{"_index":1960,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.controller.ts",{"_index":1912,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group.controller.ts:40",{"_index":1919,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:48",{"_index":1920,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:54",{"_index":1924,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:64",{"_index":1921,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:71",{"_index":1930,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:81",{"_index":1917,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:89",{"_index":1928,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:98",{"_index":1925,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.dto",{"_index":1931,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["group.dto.ts",{"_index":647,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:12",{"_index":781,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:16",{"_index":778,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:20",{"_index":780,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:24",{"_index":779,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:5",{"_index":651,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["group.dto.ts:8",{"_index":650,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{}}}],["group.dto.ts:9",{"_index":2102,"title":{},"body":{"classes/ReorderQuestionGroupDto.html":{}}}],["group.entity",{"_index":618,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["group.entity.ts",{"_index":1878,"title":{},"body":{"classes/QuestionGroup.html":{},"coverage.html":{}}}],["group.entity.ts:18",{"_index":1886,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:22",{"_index":1879,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:25",{"_index":1882,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:29",{"_index":1884,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:32",{"_index":1881,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:35",{"_index":1885,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:38",{"_index":1880,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:41",{"_index":1887,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.exam",{"_index":850,"title":{},"body":{"classes/Exam.html":{}}}],["group.module",{"_index":277,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{}}}],["group.module.ts",{"_index":1958,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.position",{"_index":2019,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.provider",{"_index":1965,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["group.provider.ts",{"_index":1758,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"coverage.html":{}}}],["group.provider.ts:10",{"_index":1761,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["group.provider.ts:17",{"_index":1763,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["group.questions",{"_index":2011,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.repository",{"_index":1768,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["group.repository.ts",{"_index":1968,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group.service",{"_index":1860,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionService.html":{}}}],["group.service.ts",{"_index":1971,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group.service.ts:101",{"_index":1975,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:125",{"_index":1983,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:148",{"_index":1980,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:168",{"_index":1981,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:23",{"_index":1974,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:32",{"_index":1987,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:34",{"_index":1985,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:45",{"_index":1976,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:58",{"_index":1977,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:62",{"_index":1978,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:76",{"_index":1986,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group/controllers/question",{"_index":1911,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts",{"_index":1826,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts:34",{"_index":1831,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:42",{"_index":1834,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:51",{"_index":1837,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:58",{"_index":1840,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:65",{"_index":1850,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:74",{"_index":1846,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:83",{"_index":1842,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/dtos/copy",{"_index":646,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dtos/create",{"_index":735,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"coverage.html":{}}}],["group/dtos/find",{"_index":1267,"title":{},"body":{"classes/FindPersonalDto.html":{},"coverage.html":{}}}],["group/dtos/question",{"_index":1874,"title":{},"body":{"classes/QuestionFindDto.html":{},"coverage.html":{}}}],["group/dtos/reorder",{"_index":2097,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dtos/update",{"_index":2150,"title":{},"body":{"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group/entities/question",{"_index":617,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["group/entities/question.entity",{"_index":110,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{}}}],["group/entities/question.entity.ts",{"_index":1812,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["group/entities/question.entity.ts:12",{"_index":1817,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:15",{"_index":1816,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:18",{"_index":1820,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:21",{"_index":1815,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:25",{"_index":1819,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:28",{"_index":1814,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:31",{"_index":1813,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:9",{"_index":1821,"title":{},"body":{"classes/Question.html":{}}}],["group/interfaces/question",{"_index":2031,"title":{},"body":{"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["group/providers/personal",{"_index":1757,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"coverage.html":{}}}],["group/question",{"_index":276,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/question.constants.ts",{"_index":2329,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/repositories/question",{"_index":1967,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group/repositories/question.repository.ts",{"_index":2051,"title":{},"body":{"classes/QuestionRepository.html":{},"coverage.html":{}}}],["group/services/question",{"_index":1970,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group/services/question.service",{"_index":309,"title":{},"body":{"injectables/AnswerService.html":{}}}],["group/services/question.service.ts",{"_index":2053,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["group/services/question.service.ts:102",{"_index":2060,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:114",{"_index":2070,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:135",{"_index":2069,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:24",{"_index":2058,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:32",{"_index":2068,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:39",{"_index":2061,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:51",{"_index":2062,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:64",{"_index":2063,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:75",{"_index":2065,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:79",{"_index":2066,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:89",{"_index":2071,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group_id",{"_index":539,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["groupgrade",{"_index":1776,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["groupgrade.grade",{"_index":1778,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["groupgrades",{"_index":1773,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["groupid",{"_index":648,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["groupidpositionmap",{"_index":2016,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupidpositionmap.get(group.id",{"_index":2020,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupids",{"_index":2014,"title":{},"body":{"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["groupids.map((id",{"_index":2017,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groups",{"_index":811,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["groups.map(async",{"_index":2018,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupservice",{"_index":2057,"title":{},"body":{"injectables/QuestionService.html":{}}}],["guards/jwt.guard",{"_index":445,"title":{},"body":{"modules/AuthModule.html":{}}}],["gzip",{"_index":1478,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["hasfinishedexam",{"_index":868,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["hasgrade",{"_index":984,"title":{},"body":{"interfaces/ExamAgreementUser.html":{}}}],["healthy",{"_index":355,"title":{},"body":{"controllers/AppController.html":{}}}],["helmet",{"_index":2359,"title":{},"body":{"dependencies.html":{}}}],["helpers/create",{"_index":2238,"title":{},"body":{"injectables/UserService.html":{}}}],["hooked",{"_index":246,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["host",{"_index":1561,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":1578,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["http:\\/\\/localhost:(3000|5000",{"_index":2487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":354,"title":{},"body":{"controllers/AppController.html":{}}}],["httpcode(200",{"_index":357,"title":{},"body":{"controllers/AppController.html":{}}}],["httpexception",{"_index":1560,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["httpexceptionfilter",{"_index":655,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{},"overview.html":{}}}],["https:\\/\\/(.*\\.|)herokuapp.com",{"_index":2486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iclassvalidatorexception",{"_index":1574,"title":{"interfaces/IClassValidatorException.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["id",{"_index":40,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":2267,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1064,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/QuestionService.html":{}}}],["idx_26862c959c4ecfc8f1b4a1a055",{"_index":562,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_2b38bb607ef3e86920e9bd0163",{"_index":532,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_31ef2b4d30675d0c15056b7f6e",{"_index":411,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["idx_4a22969058fa5105ad6bee583f",{"_index":1139,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_5cf4963ae12285cda6432d5a3a",{"_index":522,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_7540599d89cb2b6e17cc56d517",{"_index":561,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_914f18c8fbe52b10a6b276bc0c",{"_index":409,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_92374adc6b583e8cf659977e48",{"_index":526,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_952e252e7470ff78b18a9ec786",{"_index":406,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_988f784cc581e38b7ed4943006",{"_index":1135,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_a6235b5ef0939d8deaad755fc8",{"_index":410,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_af1604ea5493f65a6c8d70d98e",{"_index":1140,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_df58a2a413f5647f6411002cb2",{"_index":559,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_ec3a69def9f89a993b8f75ee4d",{"_index":143,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["idx_f2d35d0b9823628374f51931dd",{"_index":558,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["ientity",{"_index":1614,"title":{"interfaces/IEntity.html":{}},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["iexception",{"_index":1570,"title":{"interfaces/IException.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["ignoreexams",{"_index":1071,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"interfaces/FindExamByUserDto.html":{}}}],["ignoreexams.length",{"_index":1079,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ignoreexams.map((el",{"_index":1081,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ignoreexpiration",{"_index":1679,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image_alt",{"_index":1908,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["image_url",{"_index":1907,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["imagealt",{"_index":751,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["imageurl",{"_index":752,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["import",{"_index":29,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":268,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["in(groupids",{"_index":2015,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["in(questionids",{"_index":2092,"title":{},"body":{"injectables/QuestionService.html":{}}}],["inactive",{"_index":515,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index('ix_period_started_at_ended_at",{"_index":1718,"title":{},"body":{"classes/Period.html":{}}}],["index('ix_question_group_class_examid",{"_index":1890,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["index('ix_question_group_position",{"_index":1897,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["index('ix_question_group_position')@column({type",{"_index":1883,"title":{},"body":{"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["index('ix_question_position",{"_index":1823,"title":{},"body":{"classes/Question.html":{}}}],["index('ix_question_position')@column({type",{"_index":1818,"title":{},"body":{"classes/Question.html":{}}}],["infersubjects",{"_index":607,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["infra.constants",{"_index":2163,"title":{},"body":{"controllers/UploadController.html":{}}}],["infra/infra.module",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["inframodule",{"_index":365,"title":{"modules/InfraModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["inherited",{"_index":97,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["initialize",{"_index":2444,"title":{},"body":{"index.html":{}}}],["inject",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{},"injectables/QuestionService.html":{}}}],["inject(forwardref",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/QuestionService.html":{}}}],["injectable",{"_index":282,"title":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":283,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":303,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["injectrepository(answergraderepository",{"_index":313,"title":{},"body":{"injectables/AnswerService.html":{}}}],["injectrepository(answerrepository",{"_index":311,"title":{},"body":{"injectables/AnswerService.html":{}}}],["injectrepository(authrepository",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(examagreementrepository",{"_index":969,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["injectrepository(examrepository",{"_index":1103,"title":{},"body":{"injectables/ExamService.html":{}}}],["injectrepository(examtargetrepository",{"_index":1217,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["injectrepository(graderepository",{"_index":1550,"title":{},"body":{"injectables/GradeService.html":{}}}],["injectrepository(periodrepository",{"_index":1741,"title":{},"body":{"injectables/PeriodService.html":{}}}],["injectrepository(professorrepository",{"_index":1809,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["injectrepository(questiongrouprepository",{"_index":1769,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["injectrepository(questionrepository",{"_index":2074,"title":{},"body":{"injectables/QuestionService.html":{}}}],["injectrepository(studentrepository",{"_index":2119,"title":{},"body":{"injectables/StudentService.html":{}}}],["injectrepository(userrepository",{"_index":2241,"title":{},"body":{"injectables/UserService.html":{}}}],["inner",{"_index":1059,"title":{},"body":{"classes/ExamRepository.html":{}}}],["innerjoinandselect('grade.subject",{"_index":1541,"title":{},"body":{"classes/GradeRepository.html":{}}}],["insert",{"_index":59,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["instalação",{"_index":2425,"title":{},"body":{"index.html":{}}}],["instanceid",{"_index":1281,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["instanceof",{"_index":1538,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/QuestionGroupService.html":{}}}],["int",{"_index":86,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Grade.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Subject.html":{}}}],["intercept",{"_index":1698,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["intercept(context",{"_index":1699,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["interceptors/payload.interceptor",{"_index":661,"title":{},"body":{"modules/CoreModule.html":{}}}],["interface",{"_index":593,"title":{"interfaces/BatchUser.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{}},"body":{"interfaces/BatchUser.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["interfaces",{"_index":594,"title":{},"body":{"interfaces/BatchUser.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"overview.html":{}}}],["interfaces/batch",{"_index":310,"title":{},"body":{"injectables/AnswerService.html":{}}}],["interfaces/exam",{"_index":918,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"interfaces/FindExamByUserDto.html":{}}}],["interfaces/firebase",{"_index":1408,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{}}}],["interfaces/jwt",{"_index":1673,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["interfaces/question",{"_index":1934,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["interfaces/user",{"_index":2240,"title":{},"body":{"injectables/UserService.html":{}}}],["interval",{"_index":1736,"title":{},"body":{"injectables/PeriodService.html":{}}}],["isarray",{"_index":729,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isarray()@ispositive({each",{"_index":2099,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isarray()@validatenested({each",{"_index":782,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["isboolean",{"_index":708,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["iscpf",{"_index":789,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdate",{"_index":730,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdate()@type(undefined",{"_index":721,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdefined",{"_index":742,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["isemail",{"_index":1692,"title":{},"body":{"classes/LoginDto.html":{}}}],["isenrollment",{"_index":791,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isenum",{"_index":682,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateUserDto.html":{}}}],["isenum(answertype",{"_index":689,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["isenum(examtargettype",{"_index":733,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isenum(userrole",{"_index":793,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(usertype",{"_index":796,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isleaf",{"_index":1174,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["isnotempty",{"_index":429,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UserDto.html":{}}}],["isoptional",{"_index":683,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/QuestionFindDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["isoptional()@isarray()@isenum(examtargettype",{"_index":725,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isoptional()@isboolean",{"_index":718,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@isboolean()@type(undefined",{"_index":704,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["isoptional()@isenum(answertype",{"_index":680,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["isoptional()@ispositive",{"_index":737,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@isstring()@isnotempty",{"_index":756,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["isoptional()@isurl",{"_index":758,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["isoptional()@min(0)@max(5",{"_index":677,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["ispositive",{"_index":649,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreementDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["ispositive()@isoptional",{"_index":1876,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["ispositive()@validateif(undefined",{"_index":674,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["ispositive({each",{"_index":2101,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["isprod",{"_index":2288,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":430,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/LoginDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UserDto.html":{}}}],["isstring()@isnotempty",{"_index":427,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["isstring()@length(password_min",{"_index":694,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["issuer",{"_index":2540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isurl",{"_index":743,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{}}}],["item",{"_index":637,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":638,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["items",{"_index":217,"title":{},"body":{"controllers/AnswerController.html":{}}}],["ix_period_started_at_ended_at",{"_index":1725,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["ix_question_group_class_examid",{"_index":1526,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["ix_question_group_position",{"_index":556,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["ix_question_group_target",{"_index":1134,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["ix_question_position",{"_index":2050,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["join",{"_index":1054,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTargetAdd1622378888497.html":{}}}],["jointable",{"_index":844,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["json",{"_index":2527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.parse(process.env.firebase_admin",{"_index":2532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["juntar",{"_index":1892,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["jwt",{"_index":1672,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":2295,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfigkey",{"_index":441,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":1677,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":196,"title":{"injectables/JwtGuard.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AuthModule.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"injectables/JwtGuard.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtmodule",{"_index":439,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":449,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmoduleoptions",{"_index":1667,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwtpayload",{"_index":1656,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":437,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":145,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["last",{"_index":1992,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["last(arr",{"_index":2409,"title":{},"body":{"miscellaneous/functions.html":{}}}],["last(questiongroup.exam.groups)?.position",{"_index":1998,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["last(questions)?.position",{"_index":2076,"title":{},"body":{"injectables/QuestionService.html":{}}}],["lazy",{"_index":1787,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["left",{"_index":1053,"title":{},"body":{"classes/ExamRepository.html":{}}}],["leftjoin",{"_index":1076,"title":{},"body":{"classes/ExamRepository.html":{}}}],["leftjoin('exam_targets_exam_target",{"_index":1075,"title":{},"body":{"classes/ExamRepository.html":{}}}],["legend",{"_index":254,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1693,"title":{},"body":{"classes/LoginDto.html":{}}}],["length(password_min",{"_index":1696,"title":{},"body":{"classes/LoginDto.html":{}}}],["lessthan",{"_index":1738,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthan(end",{"_index":1754,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthanorequal",{"_index":1739,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthanorequal(new",{"_index":1751,"title":{},"body":{"injectables/PeriodService.html":{}}}],["limit",{"_index":2355,"title":{},"body":{"dependencies.html":{}}}],["limit.config.ts",{"_index":2297,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["literal",{"_index":951,"title":{},"body":{"injectables/ExamAgreementService.html":{},"interfaces/SoftDeleteResult.html":{}}}],["load",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["loadtargetmap",{"_index":1207,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["localmente",{"_index":2427,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":2361,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":806,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('bootstrap",{"_index":2522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('httpexceptionfilter",{"_index":1558,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["logger.service",{"_index":1689,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger/logger.module",{"_index":375,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":366,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["logging",{"_index":2514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":61,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{}}}],["login(@body",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto",{"_index":698,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["logindto",{"_index":416,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.login",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto:8",{"_index":696,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["lógica",{"_index":2420,"title":{},"body":{"index.html":{}}}],["machinelearning",{"_index":1282,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["manage",{"_index":2395,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manager",{"_index":407,"title":{},"body":{"classes/Auth1619445806509.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/enumerations.html":{}}}],["manager.dto.ts",{"_index":1169,"title":{},"body":{"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["manytomany",{"_index":845,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["manytomany(undefined",{"_index":1786,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["manytomany(undefined)@jointable",{"_index":830,"title":{},"body":{"classes/Exam.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":1510,"title":{},"body":{"classes/Grade.html":{}}}],["manytoone",{"_index":113,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{}}}],["manytoone(undefined",{"_index":83,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Subject.html":{}}}],["map",{"_index":1220,"title":{},"body":{"injectables/ExamTargetService.html":{},"injectables/PayloadInterceptor.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["map((_",{"_index":1152,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["map(questions.map((question",{"_index":322,"title":{},"body":{"injectables/AnswerService.html":{}}}],["match",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":684,"title":{},"body":{"classes/CreateAnswerDto.html":{},"injectables/FirebaseStorageService.html":{},"miscellaneous/variables.html":{}}}],["max(5",{"_index":688,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["maxqueryexecutiontime",{"_index":2503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":1430,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["messaging",{"_index":1283,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["messaging.service",{"_index":1458,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["messaging.service.ts",{"_index":1425,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"coverage.html":{}}}],["messaging.service.ts:12",{"_index":1433,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["messaging.service.ts:7",{"_index":1428,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["metadata",{"_index":1479,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["migrations",{"_index":2509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":2517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mimetype",{"_index":1262,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["min",{"_index":685,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["min(0",{"_index":687,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["miscellaneous",{"_index":2382,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2429,"title":{},"body":{"index.html":{}}}],["models/exam",{"_index":1006,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["module",{"_index":250,"title":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["modulemetadata",{"_index":1375,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["modules",{"_index":252,"title":{"modules.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["morethanorequal",{"_index":1740,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morethanorequal(new",{"_index":1750,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morethanorequal(start",{"_index":1755,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morgan",{"_index":2363,"title":{},"body":{"dependencies.html":{}}}],["mustfindauth",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindauth(authdto",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindspecializeduser",{"_index":2217,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfindspecializeduser(userdto",{"_index":2228,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser",{"_index":2218,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser(userdto",{"_index":2230,"title":{},"body":{"injectables/UserService.html":{}}}],["mysql",{"_index":2495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":2365,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":22,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["naming",{"_index":2378,"title":{},"body":{"dependencies.html":{}}}],["namingstrategy",{"_index":2519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessário",{"_index":2430,"title":{},"body":{"index.html":{}}}],["needed",{"_index":2438,"title":{},"body":{"index.html":{}}}],["needs",{"_index":2526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["negócio",{"_index":2422,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1706,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["nestjs/common",{"_index":191,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"injectables/CustomLogger.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":371,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2339,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":440,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2143,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["nestjs/passport",{"_index":1654,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2161,"title":{},"body":{"controllers/UploadController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":195,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"classes/UpdateQuestionDto.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":271,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":50,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newexam",{"_index":1087,"title":{},"body":{"injectables/ExamService.html":{}}}],["newexam(dto",{"_index":1095,"title":{},"body":{"injectables/ExamService.html":{}}}],["next",{"_index":1701,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1709,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["node",{"_index":1185,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node.childs",{"_index":1198,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node.dfs(type",{"_index":1188,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.factory",{"_index":1040,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetTree.html":{}}}],["node.factory.ts",{"_index":1190,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["node.factory.ts:12",{"_index":1194,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{}}}],["node.model",{"_index":1195,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["node.model.ts",{"_index":1171,"title":{},"body":{"classes/ExamTargetNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["node.model.ts:13",{"_index":1178,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:6",{"_index":1175,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:7",{"_index":1176,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:9",{"_index":1181,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.type",{"_index":1196,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node_env",{"_index":1587,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["notfoundexception",{"_index":302,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetTree.html":{},"injectables/PeriodService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["notfoundexception('period",{"_index":1752,"title":{},"body":{"injectables/PeriodService.html":{}}}],["notfoundexception(answerdto",{"_index":329,"title":{},"body":{"injectables/AnswerService.html":{}}}],["notfoundexception(authdto",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(finddto",{"_index":982,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["notfoundexception(this.root",{"_index":1246,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["null",{"_index":133,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAuthService.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["nullable",{"_index":90,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/ExamAgreement.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["number",{"_index":41,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"classes/FindPersonalDto.html":{},"classes/Grade.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"miscellaneous/variables.html":{}}}],["não",{"_index":763,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["o.type",{"_index":691,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["object",{"_index":2523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(new",{"_index":1777,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["object.values(examtargettype",{"_index":1164,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["obrigatória",{"_index":765,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["observable",{"_index":1705,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["observation",{"_index":867,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["omittype",{"_index":706,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["omittype(createquestiondto",{"_index":747,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["omittype(examagreementdto",{"_index":711,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["onetomany",{"_index":114,"title":{},"body":{"classes/Answer.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":665,"title":{},"body":{"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["optional",{"_index":24,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1288,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{}}}],["options.databaseurl",{"_index":1328,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.imports",{"_index":1367,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.inject",{"_index":1369,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.interface",{"_index":1459,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["options.interface.ts",{"_index":1372,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["options.storagebucket",{"_index":1330,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.usefactory",{"_index":1368,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["optionssuccessstatus",{"_index":2490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["origin",{"_index":2284,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["origin(origin",{"_index":2412,"title":{},"body":{"miscellaneous/functions.html":{}}}],["originalname",{"_index":1263,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["out",{"_index":266,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":2453,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.type",{"_index":1229,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["package",{"_index":2335,"title":{"dependencies.html":{}},"body":{}}],["padrão",{"_index":776,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["padrão'})@isboolean()@isoptional",{"_index":773,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["para",{"_index":2418,"title":{},"body":{"index.html":{}}}],["param",{"_index":186,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["param('examid",{"_index":215,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/QuestionGroupController.html":{}}}],["param('groupid",{"_index":1866,"title":{},"body":{"controllers/QuestionController.html":{}}}],["param('id",{"_index":222,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parsearraypipe",{"_index":187,"title":{},"body":{"controllers/AnswerController.html":{}}}],["parseint(process.env.db_port",{"_index":2502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.db_query_timeout",{"_index":2504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_max",{"_index":2550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_window_ms",{"_index":2548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseintpipe",{"_index":189,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["partialpath",{"_index":1187,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["partialtype",{"_index":2142,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["partialtype(createanswerdto",{"_index":2145,"title":{},"body":{"classes/UpdateAnswerDto.html":{}}}],["partialtype(createexamdto",{"_index":2149,"title":{},"body":{"classes/UpdateExamDto.html":{}}}],["partialtype(createquestiondto",{"_index":2151,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["partialtype(createquestiongroupdto",{"_index":2152,"title":{},"body":{"classes/UpdateQuestionGroupDto.html":{}}}],["partialuser",{"_index":2260,"title":{},"body":{"injectables/UserService.html":{}}}],["partialuser.type",{"_index":2261,"title":{},"body":{"injectables/UserService.html":{}}}],["passport",{"_index":1671,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":1668,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1675,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":57,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/LoginDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["password_max",{"_index":695,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_min",{"_index":1694,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":185,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["patch()@apiokresponse({type",{"_index":1845,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["path",{"_index":1179,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"classes/UploaderService.html":{},"miscellaneous/typealiases.html":{}}}],["path}/${randombytes(32).tostring('hex",{"_index":1500,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["payload",{"_index":1665,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":1674,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":1658,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payload.uid",{"_index":1683,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payloadinterceptor",{"_index":656,"title":{"injectables/PayloadInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"injectables/PayloadInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["period",{"_index":517,"title":{"classes/Period.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"injectables/ExamService.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["period.entity",{"_index":1515,"title":{},"body":{"classes/Grade.html":{}}}],["period.id",{"_index":1543,"title":{},"body":{"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["period_id",{"_index":516,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["period`(`id",{"_index":544,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/PeriodIndex1624547816204.html":{}}}],["periodid",{"_index":812,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{}}}],["periodindex.ts",{"_index":1721,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["periodindex.ts:13",{"_index":1723,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex.ts:4",{"_index":1722,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex.ts:6",{"_index":1724,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex1624547816204",{"_index":1719,"title":{"classes/PeriodIndex1624547816204.html":{}},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["periodrepository",{"_index":582,"title":{"classes/PeriodRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"coverage.html":{}}}],["periodservice",{"_index":576,"title":{"injectables/PeriodService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/ExamService.html":{},"injectables/PeriodService.html":{},"coverage.html":{},"overview.html":{}}}],["personal",{"_index":535,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CreateQuestionGroupDto.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["personal.dto",{"_index":1994,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personal.dto.ts",{"_index":1268,"title":{},"body":{"classes/FindPersonalDto.html":{},"coverage.html":{}}}],["personal.dto.ts:5",{"_index":1269,"title":{},"body":{"classes/FindPersonalDto.html":{}}}],["personal.dto.ts:6",{"_index":1271,"title":{},"body":{"classes/FindPersonalDto.html":{}}}],["personalgroup",{"_index":1973,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personalgroups",{"_index":2022,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personalquestiongroup",{"_index":1756,"title":{"classes/PersonalQuestionGroup.html":{}},"body":{"classes/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["pick",{"_index":1373,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["picktype",{"_index":740,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{}}}],["picktype(createauthdto",{"_index":803,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ping",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["pode",{"_index":762,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["pong",{"_index":349,"title":{},"body":{"controllers/AppController.html":{}}}],["por",{"_index":772,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["port",{"_index":2501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["position",{"_index":555,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{}}}],["post",{"_index":183,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["post(':groupid",{"_index":1865,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post(':groupid')@apiokresponse({type",{"_index":1833,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post('batch/:examid",{"_index":214,"title":{},"body":{"controllers/AnswerController.html":{}}}],["post('batch/:examid')@apiokresponse({type",{"_index":173,"title":{},"body":{"controllers/AnswerController.html":{}}}],["post('health",{"_index":356,"title":{},"body":{"controllers/AppController.html":{}}}],["post('health')@httpcode(200",{"_index":352,"title":{},"body":{"controllers/AppController.html":{}}}],["post()@apiokresponse({type",{"_index":990,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["post()@useinterceptors(undefined",{"_index":2156,"title":{},"body":{"controllers/UploadController.html":{}}}],["prefix",{"_index":165,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":144,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["primarygeneratedcolumn",{"_index":96,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["private",{"_index":312,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["process.env.admin_password",{"_index":48,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["process.env.db_database",{"_index":2500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":2496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_logging",{"_index":2515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":2498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.firebase_admin",{"_index":2525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.firebase_bucket",{"_index":2529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":2538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":2493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.sentry_dsn",{"_index":2554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1589,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["professor",{"_index":961,"title":{"classes/Professor.html":{}},"body":{"injectables/ExamAgreementService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["professor.entity",{"_index":1516,"title":{},"body":{"classes/Grade.html":{}}}],["professor_grade",{"_index":557,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Grade.html":{}}}],["professorgrades",{"_index":1784,"title":{},"body":{"classes/Professor.html":{}}}],["professorrepository",{"_index":584,"title":{"classes/ProfessorRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"coverage.html":{}}}],["professors",{"_index":1504,"title":{},"body":{"classes/Grade.html":{}}}],["professorservice",{"_index":577,"title":{"injectables/ProfessorService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["programas",{"_index":2432,"title":{},"body":{"index.html":{}}}],["projectmanagement",{"_index":1284,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["promise",{"_index":26,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/UploaderService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":1221,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["promise.all",{"_index":325,"title":{},"body":{"injectables/AnswerService.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/QuestionGroupService.html":{}}}],["promise.all(targets.map(target",{"_index":1136,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["properties",{"_index":73,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{}}}],["propriedade",{"_index":768,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["provide",{"_index":1364,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/InfraModule.html":{}}}],["provider",{"_index":1361,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["providers",{"_index":257,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/exam",{"_index":1037,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["providers/firebase",{"_index":1362,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["providers/personal",{"_index":1964,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["public",{"_index":12,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseStorageService.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["publicfile",{"_index":1471,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["put",{"_index":188,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":181,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put(':id')@apiokresponse({type",{"_index":1849,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put()@apiokresponse({type",{"_index":1915,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["qb",{"_index":2081,"title":{},"body":{"injectables/QuestionService.html":{}}}],["qb.where(`${qb.alias}.groupid",{"_index":2083,"title":{},"body":{"injectables/QuestionService.html":{}}}],["query",{"_index":1072,"title":{},"body":{"classes/ExamRepository.html":{},"classes/GradeRepository.html":{},"controllers/QuestionController.html":{}}}],["query.andwhere('exam.id",{"_index":1080,"title":{},"body":{"classes/ExamRepository.html":{}}}],["query.getmany",{"_index":1084,"title":{},"body":{"classes/ExamRepository.html":{},"classes/GradeRepository.html":{}}}],["query.innerjoin('grade.professors",{"_index":1540,"title":{},"body":{"classes/GradeRepository.html":{}}}],["query.innerjoin('grade.students",{"_index":1539,"title":{},"body":{"classes/GradeRepository.html":{}}}],["queryrunner",{"_index":17,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["queryrunner.manager.query",{"_index":44,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.manager.query('delete",{"_index":65,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.query",{"_index":404,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/IEntity.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["queryrunner.query(\"alter",{"_index":147,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query(\"create",{"_index":129,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query(\"drop",{"_index":160,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query('alter",{"_index":550,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["queryrunner.query('delete",{"_index":1641,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["queryrunner.query('drop",{"_index":412,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{}}}],["queryrunner.query('insert",{"_index":1137,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{}}}],["querytarget",{"_index":1233,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["querytarget(target",{"_index":1237,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["question",{"_index":76,"title":{"classes/Question.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["question.constants",{"_index":2073,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.dto",{"_index":746,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{}}}],["question.dto.ts",{"_index":750,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:14",{"_index":775,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:18",{"_index":759,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:23",{"_index":757,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:32",{"_index":774,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:35",{"_index":755,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:5",{"_index":2098,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.dto.ts:9",{"_index":2100,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.entity",{"_index":1889,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["question.group",{"_index":1898,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["question.groupid",{"_index":2086,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.id",{"_index":323,"title":{},"body":{"injectables/AnswerService.html":{}}}],["question.position",{"_index":2087,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.service",{"_index":1991,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["question_group",{"_index":534,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/GradeIndex1624560625346.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["question_group_grade",{"_index":554,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["question_group`(`id",{"_index":540,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["question_id",{"_index":141,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["question`(`id",{"_index":156,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["questioncontroller",{"_index":1825,"title":{"controllers/QuestionController.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questionfinddto",{"_index":1836,"title":{"classes/QuestionFindDto.html":{}},"body":{"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questiongroup",{"_index":616,"title":{"classes/QuestionGroup.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongroup.exam",{"_index":1995,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.examid",{"_index":2005,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.position",{"_index":1997,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.ts",{"_index":1903,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroup.ts:12",{"_index":1905,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:4",{"_index":1904,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:6",{"_index":1906,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup1620179231630",{"_index":1901,"title":{"classes/QuestionGroup1620179231630.html":{}},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroup:18",{"_index":1952,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:22",{"_index":1946,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:25",{"_index":1949,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:29",{"_index":1950,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:32",{"_index":1948,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:35",{"_index":1951,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:38",{"_index":1947,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:41",{"_index":1953,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroupcontroller",{"_index":1910,"title":{"controllers/QuestionGroupController.html":{}},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questiongroupgrade",{"_index":1765,"title":{"classes/QuestionGroupGrade.html":{}},"body":{"classes/PersonalQuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["questiongroupmodule",{"_index":263,"title":{"modules/QuestionGroupModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["questiongroupnotfound",{"_index":1989,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongrouprepository",{"_index":1760,"title":{"classes/QuestionGroupRepository.html":{}},"body":{"classes/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["questiongroupservice",{"_index":1858,"title":{"injectables/QuestionGroupService.html":{}},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["questiongroupservice.relations",{"_index":2003,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongrouptarget.ts",{"_index":2027,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["questiongrouptarget.ts:25",{"_index":2029,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget.ts:4",{"_index":2028,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget.ts:6",{"_index":2030,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget1621992475274",{"_index":2025,"title":{"classes/QuestionGroupTarget1621992475274.html":{}},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["questiongroupuser",{"_index":1933,"title":{"interfaces/QuestionGroupUser.html":{}},"body":{"controllers/QuestionGroupController.html":{},"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["questiongroup})@apinotfoundresponse",{"_index":1916,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["questionid",{"_index":77,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/CreateAnswerDto.html":{}}}],["questionids",{"_index":2091,"title":{},"body":{"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["questionids.map((id",{"_index":2094,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionimage.ts",{"_index":2034,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionimage.ts:14",{"_index":2036,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:4",{"_index":2035,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:6",{"_index":2037,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage1620477869366",{"_index":2032,"title":{"classes/QuestionImage1620477869366.html":{}},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionmap",{"_index":320,"title":{},"body":{"injectables/AnswerService.html":{}}}],["questionmap.get(answerdto.questionid",{"_index":328,"title":{},"body":{"injectables/AnswerService.html":{}}}],["questionnotfound",{"_index":2072,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionposition.ts",{"_index":2040,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionposition.ts:11",{"_index":2042,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:4",{"_index":2041,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:6",{"_index":2043,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition1620488935141",{"_index":2038,"title":{"classes/QuestionPosition1620488935141.html":{}},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionpositionidx.ts",{"_index":2046,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["questionpositionidx.ts:14",{"_index":2048,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx.ts:4",{"_index":2047,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx.ts:6",{"_index":2049,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx1620563708532",{"_index":2044,"title":{"classes/QuestionPositionIdx1620563708532.html":{}},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["questionpositionmap",{"_index":2093,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionpositionmap.get(question.id",{"_index":2095,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionrepository",{"_index":1962,"title":{"classes/QuestionRepository.html":{}},"body":{"modules/QuestionGroupModule.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questions",{"_index":316,"title":{},"body":{"injectables/AnswerService.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["questions.dto",{"_index":1861,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["questions.dto.ts",{"_index":736,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"coverage.html":{}}}],["questions.dto.ts:20",{"_index":738,"title":{},"body":{"classes/CreateQuestion.html":{}}}],["questions.dto.ts:29",{"_index":785,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["questions.map((question",{"_index":2090,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionservice",{"_index":290,"title":{"injectables/QuestionService.html":{}},"body":{"injectables/AnswerService.html":{},"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["question})@apinotfoundresponse",{"_index":1839,"title":{},"body":{"controllers/QuestionController.html":{}}}],["questão",{"_index":761,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["randombytes",{"_index":1492,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["rate",{"_index":2354,"title":{},"body":{"dependencies.html":{}}}],["ratelimit",{"_index":2551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ratelimitconfig",{"_index":2298,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ratelimitconfigkey",{"_index":2299,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["raw",{"_index":2106,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["read",{"_index":2396,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":213,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["readonlymap",{"_index":321,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamTargetService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["record",{"_index":2135,"title":{},"body":{"interfaces/SwaggerOptions.html":{}}}],["reduce",{"_index":1774,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["references",{"_index":152,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["reflect",{"_index":2369,"title":{},"body":{"dependencies.html":{}}}],["regexp",{"_index":2485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras",{"_index":2488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('sentry",{"_index":2552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(ratelimitconfigkey",{"_index":2546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regular",{"_index":408,"title":{},"body":{"classes/Auth1619445806509.html":{},"miscellaneous/enumerations.html":{}}}],["reject",{"_index":1222,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["reject(e",{"_index":1225,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["relations",{"_index":981,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["remoteconfig",{"_index":1285,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["remove",{"_index":167,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["remove(@param('id",{"_index":224,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["remove(id",{"_index":176,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorder",{"_index":1829,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorder(reorderquesitondto",{"_index":1843,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorder(reorderquestiongroupdto",{"_index":1926,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["reorder(undefined",{"_index":1982,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorderquesitondto",{"_index":1847,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorderquestiondto",{"_index":1844,"title":{"classes/ReorderQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"coverage.html":{}}}],["reorderquestiongroupdto",{"_index":1927,"title":{"classes/ReorderQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["repositories/answer",{"_index":274,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["repositories/answer.repository",{"_index":273,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["repositories/auth.repository",{"_index":444,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["repositories/exam",{"_index":966,"title":{},"body":{"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["repositories/exam.repository",{"_index":1030,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{}}}],["repositories/grade.repository",{"_index":581,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/GradeService.html":{}}}],["repositories/period.repository",{"_index":583,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/PeriodService.html":{}}}],["repositories/professor.repository",{"_index":585,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{}}}],["repositories/question",{"_index":1767,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["repositories/question.repository",{"_index":1963,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionService.html":{}}}],["repositories/student.repository",{"_index":587,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{}}}],["repositories/user.repository",{"_index":2206,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":946,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["request",{"_index":1565,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["request.body",{"_index":1612,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["request.url",{"_index":1585,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["request.user",{"_index":2536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('bcryptjs",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["require('faker",{"_index":1622,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["require('lodash",{"_index":1216,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["required",{"_index":753,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["reset",{"_index":265,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve(_.clonedeep(this._targetmap",{"_index":1223,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["response",{"_index":1566,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["response.status(status).send(ex",{"_index":1613,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["result",{"_index":39,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.interface",{"_index":306,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{}}}],["result.interface.ts",{"_index":2105,"title":{},"body":{"interfaces/SoftDeleteResult.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["result.model",{"_index":1007,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["result.model.ts",{"_index":1043,"title":{},"body":{"classes/ExamPersonalResult.html":{},"coverage.html":{}}}],["result.model.ts:4",{"_index":1045,"title":{},"body":{"classes/ExamPersonalResult.html":{}}}],["result.model.ts:5",{"_index":1046,"title":{},"body":{"classes/ExamPersonalResult.html":{}}}],["result.push(...personalgroups",{"_index":2024,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["result.raw.affectedrows",{"_index":1124,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["result?.length",{"_index":47,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["results",{"_index":68,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":218,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/StudentService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":2371,"title":{},"body":{"dependencies.html":{}}}],["rodar",{"_index":2426,"title":{},"body":{"index.html":{}}}],["role",{"_index":63,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["role.enum",{"_index":621,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["role.enum.ts",{"_index":2391,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["root",{"_index":1232,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["runontransactioncomplete",{"_index":2236,"title":{},"body":{"injectables/UserService.html":{}}}],["runontransactioncomplete((e",{"_index":2246,"title":{},"body":{"injectables/UserService.html":{}}}],["rxjs",{"_index":1707,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1708,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["salt",{"_index":55,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["schema",{"_index":1159,"title":{},"body":{"controllers/ExamTargetController.html":{},"injectables/ExamTargetNodeFactory.html":{}}}],["schema.childs?.map((node",{"_index":1199,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["schema.type",{"_index":1197,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["scope",{"_index":807,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["scope.transient",{"_index":808,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["score",{"_index":78,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/CreateAnswerDto.html":{}}}],["se",{"_index":766,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["secret",{"_index":2537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1680,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["securityrules",{"_index":1286,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["seedauxiliary1.ts",{"_index":1616,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seedauxiliary1.ts:17",{"_index":2104,"title":{},"body":{"classes/SeedAuxiliary1624412129413.html":{}}}],["seedauxiliary1.ts:90",{"_index":2103,"title":{},"body":{"classes/SeedAuxiliary1624412129413.html":{}}}],["seedauxiliary1624412129413",{"_index":1627,"title":{"classes/SeedAuxiliary1624412129413.html":{}},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["select",{"_index":45,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/ExamRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{}}}],["send.dto",{"_index":1496,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["send.dto.ts",{"_index":1259,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["sendtodevice",{"_index":1427,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["sendtodevice(token",{"_index":1429,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["sendtosentry",{"_index":1598,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["senhaforte",{"_index":2556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sentry",{"_index":1568,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["sentry.captureexception(exception",{"_index":1602,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["sentry/node",{"_index":1569,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"dependencies.html":{}}}],["sentry/tracing",{"_index":2344,"title":{},"body":{"dependencies.html":{}}}],["sentryconfig",{"_index":2301,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sentryinit",{"_index":2325,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sentryinit(config",{"_index":2408,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ser",{"_index":764,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["service",{"_index":2166,"title":{},"body":{"controllers/UploadController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["services",{"_index":1462,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["services/exam",{"_index":919,"title":{},"body":{"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{}}}],["services/exam.service",{"_index":1003,"title":{},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{}}}],["services/firebase",{"_index":1457,"title":{},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{}}}],["services/grade.service",{"_index":588,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/period.service",{"_index":589,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/professor.service",{"_index":590,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/question",{"_index":1859,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{}}}],["services/question.service",{"_index":1857,"title":{},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{}}}],["services/student.service",{"_index":591,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/uploader.service",{"_index":1648,"title":{},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{}}}],["set",{"_index":54,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["setexamandposition",{"_index":1972,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["setexamandposition(questiongroup",{"_index":1984,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["seu",{"_index":2433,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":2539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sistema",{"_index":2423,"title":{},"body":{"index.html":{}}}],["size",{"_index":1264,"title":{},"body":{"interfaces/FileSendDto.html":{}}}],["snakenamingstrategy",{"_index":2520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["softdeleteresult",{"_index":304,"title":{"interfaces/SoftDeleteResult.html":{}},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["sort((a",{"_index":1780,"title":{},"body":{"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["sortitems",{"_index":813,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["specialized",{"_index":2212,"title":{},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/.../1620299822480",{"_index":2468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1622326106015",{"_index":2483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1622378888497",{"_index":2466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1624416663575",{"_index":2470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../answer",{"_index":2384,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":2477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../casl",{"_index":2386,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../core.constants.ts",{"_index":2471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":2403,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":2400,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../database.config.ts",{"_index":2469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exam",{"_index":2388,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../exam.constants.ts",{"_index":2472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase",{"_index":2461,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../firebase.config.ts",{"_index":2474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase.constants.ts",{"_index":2473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":2467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../infra.constants.ts",{"_index":2484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":2401,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.config.ts",{"_index":2476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../last.util.ts",{"_index":2402,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2399,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../question",{"_index":2478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../question.constants.ts",{"_index":2479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rate",{"_index":2480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sentry.config.ts",{"_index":2481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":2482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":2390,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/answer/answer.controller.ts",{"_index":164,"title":{},"body":{"controllers/AnswerController.html":{},"coverage.html":{}}}],["src/answer/answer.controller.ts:32",{"_index":174,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:45",{"_index":182,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:53",{"_index":178,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.module.ts",{"_index":267,"title":{},"body":{"modules/AnswerModule.html":{}}}],["src/answer/answer.service.ts",{"_index":284,"title":{},"body":{"injectables/AnswerService.html":{},"coverage.html":{}}}],["src/answer/answer.service.ts:17",{"_index":292,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:28",{"_index":295,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:66",{"_index":296,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:70",{"_index":298,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:79",{"_index":301,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:87",{"_index":299,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/dto/create",{"_index":671,"title":{},"body":{"classes/CreateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/dto/update",{"_index":2141,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/entities/answer",{"_index":226,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Grade.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity",{"_index":1822,"title":{},"body":{"classes/Question.html":{}}}],["src/answer/entities/answer.entity.ts",{"_index":70,"title":{},"body":{"classes/Answer.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity.ts:17",{"_index":92,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:20",{"_index":95,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:23",{"_index":87,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:26",{"_index":89,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:29",{"_index":84,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:32",{"_index":88,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/enums/answer",{"_index":2392,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/answer/interfaces/batch",{"_index":595,"title":{},"body":{"interfaces/BatchUser.html":{},"coverage.html":{}}}],["src/answer/repositories/answer",{"_index":240,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["src/answer/repositories/answer.repository.ts",{"_index":280,"title":{},"body":{"classes/AnswerRepository.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.constants.ts",{"_index":2276,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.module.ts",{"_index":438,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":2233,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:23",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/casl/casl.module.ts",{"_index":642,"title":{},"body":{"modules/CaslModule.html":{}}}],["src/auth/casl/enums/casl",{"_index":2394,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/casl/factories/casl",{"_index":598,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/controllers/auth.controller.ts",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/controllers/auth.controller.ts:12",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/dtos/auth.dto.ts",{"_index":426,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/auth.dto.ts:6",{"_index":428,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dtos/create",{"_index":692,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts",{"_index":1690,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts:8",{"_index":1691,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":390,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts:10",{"_index":394,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:13",{"_index":395,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:7",{"_index":393,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/guards/jwt.guard",{"_index":197,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/UploadController.html":{}}}],["src/auth/guards/jwt.guard.ts",{"_index":1652,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/interfaces/jwt",{"_index":1657,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/repositories/auth.repository.ts",{"_index":451,"title":{},"body":{"classes/AuthRepository.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1659,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:19",{"_index":1662,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:32",{"_index":1664,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auxiliary/auxiliary.module",{"_index":1041,"title":{},"body":{"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["src/auxiliary/auxiliary.module.ts",{"_index":579,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["src/auxiliary/entities/course.entity.ts",{"_index":662,"title":{},"body":{"classes/Course.html":{},"coverage.html":{}}}],["src/auxiliary/entities/course.entity.ts:11",{"_index":667,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:14",{"_index":666,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:8",{"_index":664,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/grade.entity",{"_index":236,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/QuestionGroupGrade.html":{}}}],["src/auxiliary/entities/grade.entity.ts",{"_index":1503,"title":{},"body":{"classes/Grade.html":{},"coverage.html":{}}}],["src/auxiliary/entities/grade.entity.ts:20",{"_index":1514,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:23",{"_index":1509,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:26",{"_index":1513,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:29",{"_index":1508,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:32",{"_index":1507,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:36",{"_index":1512,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:40",{"_index":1511,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/period.entity",{"_index":843,"title":{},"body":{"classes/Exam.html":{}}}],["src/auxiliary/entities/period.entity.ts",{"_index":1710,"title":{},"body":{"classes/Period.html":{},"coverage.html":{}}}],["src/auxiliary/entities/period.entity.ts:12",{"_index":1715,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:15",{"_index":1712,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:18",{"_index":1713,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:9",{"_index":1714,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/professor.entity",{"_index":962,"title":{},"body":{"injectables/ExamAgreementService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["src/auxiliary/entities/professor.entity.ts",{"_index":1783,"title":{},"body":{"classes/Professor.html":{},"coverage.html":{}}}],["src/auxiliary/entities/professor.entity.ts:10",{"_index":1795,"title":{},"body":{"classes/Professor.html":{}}}],["src/auxiliary/entities/professor.entity.ts:8",{"_index":1788,"title":{},"body":{"classes/Professor.html":{}}}],["src/auxiliary/entities/student.entity",{"_index":964,"title":{},"body":{"injectables/ExamAgreementService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["src/auxiliary/entities/student.entity.ts",{"_index":2108,"title":{},"body":{"classes/Student.html":{},"coverage.html":{}}}],["src/auxiliary/entities/student.entity.ts:10",{"_index":2111,"title":{},"body":{"classes/Student.html":{}}}],["src/auxiliary/entities/student.entity.ts:8",{"_index":2110,"title":{},"body":{"classes/Student.html":{}}}],["src/auxiliary/entities/subject.entity.ts",{"_index":2121,"title":{},"body":{"classes/Subject.html":{},"coverage.html":{}}}],["src/auxiliary/entities/subject.entity.ts:10",{"_index":2123,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:13",{"_index":2127,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:16",{"_index":2125,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:19",{"_index":2124,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:22",{"_index":2126,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/repositories/grade.repository.ts",{"_index":1527,"title":{},"body":{"classes/GradeRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/grade.repository.ts:11",{"_index":1530,"title":{},"body":{"classes/GradeRepository.html":{}}}],["src/auxiliary/repositories/period.repository.ts",{"_index":1726,"title":{},"body":{"classes/PeriodRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/professor.repository.ts",{"_index":1797,"title":{},"body":{"classes/ProfessorRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/student.repository.ts",{"_index":2113,"title":{},"body":{"classes/StudentRepository.html":{},"coverage.html":{}}}],["src/auxiliary/services/grade.service",{"_index":1764,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["src/auxiliary/services/grade.service.ts",{"_index":1545,"title":{},"body":{"injectables/GradeService.html":{},"coverage.html":{}}}],["src/auxiliary/services/grade.service.ts:15",{"_index":1548,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/grade.service.ts:19",{"_index":1549,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/grade.service.ts:9",{"_index":1547,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/period.service",{"_index":1100,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/auxiliary/services/period.service.ts",{"_index":1728,"title":{},"body":{"injectables/PeriodService.html":{},"coverage.html":{}}}],["src/auxiliary/services/period.service.ts:14",{"_index":1733,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:27",{"_index":1734,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:42",{"_index":1737,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:8",{"_index":1732,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/professor.service",{"_index":2234,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/professor.service.ts",{"_index":1799,"title":{},"body":{"injectables/ProfessorService.html":{},"coverage.html":{}}}],["src/auxiliary/services/professor.service.ts:11",{"_index":1801,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:18",{"_index":1803,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:24",{"_index":1806,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/student.service",{"_index":2235,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/student.service.ts",{"_index":2115,"title":{},"body":{"injectables/StudentService.html":{},"coverage.html":{}}}],["src/auxiliary/services/student.service.ts:11",{"_index":2116,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:18",{"_index":2117,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:24",{"_index":2118,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/types/user",{"_index":1272,"title":{},"body":{"classes/FindPersonalDto.html":{},"miscellaneous/typealiases.html":{}}}],["src/config/cors.config.ts",{"_index":2283,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/config/database.config.ts",{"_index":2289,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/firebase.config.ts",{"_index":2291,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/index.ts",{"_index":2293,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/interfaces/swagger.interface.ts",{"_index":2132,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{}}}],["src/config/jwt.config.ts",{"_index":2294,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/rate",{"_index":2296,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/sentry.config.ts",{"_index":2300,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.config.ts",{"_index":2302,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controllers/app.controller.ts",{"_index":347,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/controllers/app.controller.ts:12",{"_index":353,"title":{},"body":{"controllers/AppController.html":{}}}],["src/controllers/app.controller.ts:6",{"_index":351,"title":{},"body":{"controllers/AppController.html":{}}}],["src/core/core.constants.ts",{"_index":2305,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":657,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/decorators/is",{"_index":2307,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/entities/ff.entity",{"_index":396,"title":{},"body":{"classes/Auth.html":{},"classes/ExamTarget.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["src/core/entities/ff.entity.ts",{"_index":1254,"title":{},"body":{"classes/FFEntity.html":{},"coverage.html":{}}}],["src/core/entities/ff.entity.ts:6",{"_index":1255,"title":{},"body":{"classes/FFEntity.html":{}}}],["src/core/entities/timestamp.entity.ts",{"_index":2136,"title":{},"body":{"classes/TimestampEntity.html":{},"coverage.html":{}}}],["src/core/entities/timestamp.entity.ts:10",{"_index":2138,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:13",{"_index":2140,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:16",{"_index":2139,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/filters/http",{"_index":1553,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["src/core/interceptors/payload.interceptor.ts",{"_index":1697,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/payload.interceptor.ts:12",{"_index":1703,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["src/core/interfaces/soft",{"_index":305,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["src/core/utils/last.util",{"_index":1993,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["src/core/utils/last.util.ts",{"_index":2309,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/migrations",{"_index":2518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/migrations/1619445806509",{"_index":399,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["src/database/migrations/1620179231630",{"_index":1902,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["src/database/migrations/1620299822480",{"_index":6,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1620477175799",{"_index":499,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["src/database/migrations/1620477869366",{"_index":2033,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["src/database/migrations/1620478273991",{"_index":861,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["src/database/migrations/1620488935141",{"_index":2039,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["src/database/migrations/1620563708532",{"_index":2045,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["src/database/migrations/1621036457247",{"_index":1248,"title":{},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["src/database/migrations/1621992475274",{"_index":2026,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["src/database/migrations/1622326106015",{"_index":1129,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1622332886234",{"_index":889,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["src/database/migrations/1622334780336",{"_index":898,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["src/database/migrations/1622378888497",{"_index":1145,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1622417032753",{"_index":929,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["src/database/migrations/1622421768424",{"_index":121,"title":{},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["src/database/migrations/1624416663574",{"_index":552,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["src/database/migrations/1624416663575",{"_index":1615,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1624547816204",{"_index":1720,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["src/database/migrations/1624560625346",{"_index":1521,"title":{},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["src/exam/controllers/exam",{"_index":904,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["src/exam/controllers/exam.controller.ts",{"_index":987,"title":{},"body":{"controllers/ExamController.html":{},"coverage.html":{}}}],["src/exam/controllers/exam.controller.ts:31",{"_index":991,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:37",{"_index":993,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:43",{"_index":999,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:48",{"_index":995,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:53",{"_index":1002,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:61",{"_index":1000,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/dtos/create",{"_index":700,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"coverage.html":{}}}],["src/exam/dtos/exam",{"_index":924,"title":{},"body":{"classes/ExamAgreementDto.html":{},"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["src/exam/dtos/find",{"_index":1265,"title":{},"body":{"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["src/exam/dtos/update",{"_index":2146,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["src/exam/entities/exam",{"_index":107,"title":{},"body":{"classes/Answer.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/User.html":{},"coverage.html":{}}}],["src/exam/entities/exam.entity",{"_index":1716,"title":{},"body":{"classes/Period.html":{},"classes/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{}}}],["src/exam/entities/exam.entity.ts",{"_index":809,"title":{},"body":{"classes/Exam.html":{},"coverage.html":{}}}],["src/exam/entities/exam.entity.ts:20",{"_index":832,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:23",{"_index":821,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:26",{"_index":826,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:29",{"_index":822,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:32",{"_index":820,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:35",{"_index":828,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:38",{"_index":825,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:42",{"_index":831,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:45",{"_index":824,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:48",{"_index":823,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:51",{"_index":817,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:54",{"_index":837,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:58",{"_index":840,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:62",{"_index":842,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/enums/exam",{"_index":2397,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/exam/exam.constants.ts",{"_index":2312,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/exam/exam.module",{"_index":278,"title":{},"body":{"modules/AnswerModule.html":{}}}],["src/exam/exam.module.ts",{"_index":1026,"title":{},"body":{"modules/ExamModule.html":{}}}],["src/exam/factories/exam",{"_index":1189,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["src/exam/interfaces/exam",{"_index":198,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamUser.html":{},"coverage.html":{}}}],["src/exam/models/exam",{"_index":1042,"title":{},"body":{"classes/ExamPersonalResult.html":{},"classes/ExamTargetNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/exam/providers/exam",{"_index":1230,"title":{},"body":{"injectables/ExamTargetTree.html":{},"coverage.html":{}}}],["src/exam/repositories/exam",{"_index":935,"title":{},"body":{"classes/ExamAgreementRepository.html":{},"classes/ExamTargetRepository.html":{},"coverage.html":{}}}],["src/exam/repositories/exam.repository.ts",{"_index":1047,"title":{},"body":{"classes/ExamRepository.html":{},"coverage.html":{}}}],["src/exam/repositories/exam.repository.ts:23",{"_index":1051,"title":{},"body":{"classes/ExamRepository.html":{}}}],["src/exam/services/exam",{"_index":307,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["src/exam/services/exam.service",{"_index":1988,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["src/exam/services/exam.service.ts",{"_index":1085,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{}}}],["src/exam/services/exam.service.ts:18",{"_index":1090,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:28",{"_index":1096,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:41",{"_index":1091,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:48",{"_index":1092,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:52",{"_index":1093,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:64",{"_index":1094,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:81",{"_index":1099,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:90",{"_index":1098,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/firebase",{"_index":1494,"title":{},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["src/firebase/firebase",{"_index":1275,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.constants.ts",{"_index":2317,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.module.ts",{"_index":1454,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:31",{"_index":1455,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:41",{"_index":1456,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/interfaces/firebase",{"_index":1371,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["src/firebase/services/firebase",{"_index":1385,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["src/firebase/types/firebase",{"_index":2464,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/infra/controllers/upload.controller.ts",{"_index":2153,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{}}}],["src/infra/controllers/upload.controller.ts:23",{"_index":2157,"title":{},"body":{"controllers/UploadController.html":{}}}],["src/infra/dtos/file",{"_index":1258,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["src/infra/infra.constants.ts",{"_index":2319,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infra/infra.module.ts",{"_index":1645,"title":{},"body":{"modules/InfraModule.html":{}}}],["src/infra/services/firebase",{"_index":1484,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["src/infra/services/uploader.service.ts",{"_index":2170,"title":{},"body":{"classes/UploaderService.html":{},"coverage.html":{}}}],["src/infra/services/uploader.service.ts:4",{"_index":2172,"title":{},"body":{"classes/UploaderService.html":{}}}],["src/logger/logger.module.ts",{"_index":1688,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logger.service.ts",{"_index":805,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":2320,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/question",{"_index":109,"title":{},"body":{"classes/Answer.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/FindPersonalDto.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/controllers/user.controller.ts",{"_index":2183,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/controllers/user.controller.ts:15",{"_index":2185,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controllers/user.controller.ts:21",{"_index":2188,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/decoratos/get",{"_index":201,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionGroupController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dtos/create",{"_index":787,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto",{"_index":1807,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["src/user/dtos/user.dto.ts",{"_index":2198,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto.ts:6",{"_index":2199,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/entities/user.entity",{"_index":881,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/FindPersonalDto.html":{},"controllers/QuestionGroupController.html":{}}}],["src/user/entities/user.entity.ts",{"_index":2173,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:11",{"_index":2175,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:14",{"_index":2174,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":2178,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:20",{"_index":2177,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:23",{"_index":2176,"title":{},"body":{"classes/User.html":{}}}],["src/user/enum/user",{"_index":620,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/helpers/create",{"_index":2332,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/user/interfaces/user",{"_index":2211,"title":{},"body":{"interfaces/UserResult.html":{},"coverage.html":{}}}],["src/user/repositories/user.repository.ts",{"_index":2208,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/user/user.module.ts",{"_index":2203,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":2213,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:24",{"_index":2220,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":2221,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:47",{"_index":2223,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:58",{"_index":2227,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":2231,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:70",{"_index":2225,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:98",{"_index":2229,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":1573,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["start",{"_index":815,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/PeriodService.html":{}}}],["starta",{"_index":1745,"title":{},"body":{"injectables/PeriodService.html":{}}}],["startb",{"_index":1747,"title":{},"body":{"injectables/PeriodService.html":{}}}],["started",{"_index":563,"title":{"index.html":{}},"body":{"classes/Auxiliary1624416663574.html":{},"miscellaneous/enumerations.html":{}}}],["started_at",{"_index":507,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["startedat",{"_index":716,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{}}}],["startofmonth",{"_index":1619,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["startofmonth(new",{"_index":1628,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["stated_at",{"_index":518,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["statement",{"_index":754,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["statements",{"_index":2268,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1086,"title":{},"body":{"injectables/ExamService.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"injectables/QuestionGroupService.html":{}}}],["status",{"_index":513,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["status.enum",{"_index":846,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{}}}],["status.enum.ts",{"_index":2389,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":1571,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["storage",{"_index":1287,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts",{"_index":1465,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["storage.service.ts:14",{"_index":1473,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:8",{"_index":1467,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storagebucket",{"_index":1329,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["storageservice",{"_index":1488,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["strategies",{"_index":2379,"title":{},"body":{"dependencies.html":{}}}],["strategies/jwt.strategy",{"_index":447,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1670,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":123,"title":{},"body":{"classes/Answer1622421768424.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["student",{"_index":963,"title":{"classes/Student.html":{}},"body":{"injectables/ExamAgreementService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["student.cpf",{"_index":1639,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["student.enrollment",{"_index":1638,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["student.entity",{"_index":1517,"title":{},"body":{"classes/Grade.html":{}}}],["student_grade",{"_index":560,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["studentgrades",{"_index":2109,"title":{},"body":{"classes/Student.html":{}}}],["studentrepository",{"_index":586,"title":{"classes/StudentRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{}}}],["students",{"_index":1505,"title":{},"body":{"classes/Grade.html":{}}}],["studentservice",{"_index":578,"title":{"injectables/StudentService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["subject",{"_index":523,"title":{"classes/Subject.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{},"coverage.html":{}}}],["subject.course",{"_index":670,"title":{},"body":{"classes/Course.html":{}}}],["subject.entity",{"_index":668,"title":{},"body":{"classes/Course.html":{},"classes/Grade.html":{}}}],["subject.id",{"_index":1637,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["subject_id",{"_index":527,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["subject`(`id",{"_index":548,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["subjectid",{"_index":1506,"title":{},"body":{"classes/Grade.html":{}}}],["subjects",{"_index":663,"title":{},"body":{"classes/Course.html":{}}}],["subscriber.{js,ts",{"_index":2512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscribers",{"_index":2511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sudo",{"_index":2448,"title":{},"body":{"index.html":{}}}],["super",{"_index":1676,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":2450,"title":{},"body":{"modules.html":{}}}],["suprir",{"_index":2419,"title":{},"body":{"index.html":{}}}],["svg",{"_index":2451,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2374,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":2303,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfigkey",{"_index":2304,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2131,"title":{"interfaces/SwaggerOptions.html":{}},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":625,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["synchronize",{"_index":2513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":2411,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":130,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["tableinheritance",{"_index":115,"title":{},"body":{"classes/Answer.html":{},"classes/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2334,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":732,"title":{},"body":{"classes/CreateExamDto.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["target.controller",{"_index":1035,"title":{},"body":{"modules/ExamModule.html":{}}}],["target.controller.ts",{"_index":1153,"title":{},"body":{"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["target.controller.ts:20",{"_index":1160,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["target.controller.ts:26",{"_index":1158,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["target.entity",{"_index":847,"title":{},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{}}}],["target.entity.ts",{"_index":1125,"title":{},"body":{"classes/ExamTarget.html":{},"coverage.html":{}}}],["target.entity.ts:8",{"_index":1126,"title":{},"body":{"classes/ExamTarget.html":{}}}],["target.id",{"_index":1062,"title":{},"body":{"classes/ExamRepository.html":{}}}],["target.repository",{"_index":1032,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["target.repository.ts",{"_index":1201,"title":{},"body":{"classes/ExamTargetRepository.html":{},"coverage.html":{}}}],["target.service",{"_index":1033,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["target.service.ts",{"_index":1203,"title":{},"body":{"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["target.service.ts:12",{"_index":1209,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:22",{"_index":1214,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:30",{"_index":1210,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:42",{"_index":1211,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:48",{"_index":1213,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.type",{"_index":1063,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExamTargetService.html":{}}}],["targetmap",{"_index":1106,"title":{},"body":{"injectables/ExamService.html":{}}}],["targetmap.get(target",{"_index":1110,"title":{},"body":{"injectables/ExamService.html":{}}}],["targetnodefactory",{"_index":1236,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["targetnodefactory.generate",{"_index":1240,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["targets",{"_index":717,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targets.map((target",{"_index":1109,"title":{},"body":{"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{}}}],["targetservice",{"_index":1088,"title":{},"body":{"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["testing",{"_index":1600,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["text",{"_index":505,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTitle1621036457247.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["this._targetmap",{"_index":1219,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.agreementservice.getbyuser(user)).map",{"_index":1116,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.answergraderepository.create(createdto",{"_index":334,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answergraderepository.save(answer",{"_index":335,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.create(createdto",{"_index":336,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.delete",{"_index":315,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.find",{"_index":339,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.findone(id",{"_index":340,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.merge(answer",{"_index":342,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.save(answer",{"_index":337,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.softdelete",{"_index":344,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerservice.createbatch(createanswerdtos",{"_index":219,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.remove(id",{"_index":225,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.update(id",{"_index":223,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.app",{"_index":1325,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.auth",{"_index":1336,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.database(url",{"_index":1337,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.delete",{"_index":1346,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.firestore",{"_index":1338,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.instanceid",{"_index":1339,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.machinelearning",{"_index":1340,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.messaging",{"_index":1341,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.name",{"_index":1333,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.options",{"_index":1335,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.projectmanagement",{"_index":1342,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.remoteconfig",{"_index":1343,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.securityrules",{"_index":1344,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.storage",{"_index":1345,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.authrepository.findone",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authrepository.save",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.createauth",{"_index":2243,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.findauth",{"_index":1682,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.login(logindto",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.childs",{"_index":1186,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.childs.length",{"_index":1182,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.configservice.get('node_env",{"_index":1588,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.configservice.get('skip_sentry",{"_index":1599,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.createquerybuilder('exam",{"_index":1073,"title":{},"body":{"classes/ExamRepository.html":{}}}],["this.createquerybuilder('grade",{"_index":1537,"title":{},"body":{"classes/GradeRepository.html":{}}}],["this.createuserbytype(createuserdto",{"_index":2242,"title":{},"body":{"injectables/UserService.html":{}}}],["this.endedat",{"_index":859,"title":{},"body":{"classes/Exam.html":{}}}],["this.examagreementservice.createagreement",{"_index":922,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["this.examagreementservice.findone(user",{"_index":314,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.examagreementservice.finishexam(examagreement",{"_index":338,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.examagreementservice.updateagreement",{"_index":923,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["this.examservice.create(createexamdto",{"_index":1010,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findall",{"_index":1011,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findone(copyquestiongroupdto.examid",{"_index":2009,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(createagreementdto.examid",{"_index":970,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.examservice.findone(examid",{"_index":1996,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(id",{"_index":1016,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findpersonal(user",{"_index":1014,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.remove(id",{"_index":1018,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.update(id",{"_index":1017,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.exports",{"_index":1370,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.fcm",{"_index":1434,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.fcm.sendtodevice(token",{"_index":1436,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.findauth",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findone(copyquestiongroupdto.groupid",{"_index":2008,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.findone(id",{"_index":341,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.findspecializeduser(userdto",{"_index":2264,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduser(userdto",{"_index":2258,"title":{},"body":{"injectables/UserService.html":{}}}],["this.firebaseauth",{"_index":1410,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.createuser(createdto",{"_index":1420,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.deleteuser(uid",{"_index":1422,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.getuser(uid",{"_index":1419,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.updateuser(uid",{"_index":1421,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.verifyidtoken(token",{"_index":1413,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firestore",{"_index":1447,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.firestore.collection(collection",{"_index":1449,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.generate(node",{"_index":1200,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["this.getnextposition(createquestiondto.groupid",{"_index":2077,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.getnextposition(updatedto.groupid",{"_index":2088,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.gettargetmap",{"_index":1226,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.graderepository.find",{"_index":1551,"title":{},"body":{"injectables/GradeService.html":{}}}],["this.graderepository.findbyuserandperiod(user",{"_index":1552,"title":{},"body":{"injectables/GradeService.html":{}}}],["this.gradeservice.findbyuserandperiod",{"_index":1771,"title":{},"body":{"classes/PersonalQuestionGroup.html":{}}}],["this.groups",{"_index":853,"title":{},"body":{"classes/Exam.html":{}}}],["this.groups?.sort((a",{"_index":854,"title":{},"body":{"classes/Exam.html":{}}}],["this.groupservice.findone(groupid",{"_index":2075,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.isleaf",{"_index":1184,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.jwtservice.signasync",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loadtargetmap",{"_index":1218,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.logger.error('catched",{"_index":1603,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.mustfindauth(logindto",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.newexam(createexamdto",{"_index":1111,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.newexam(updateexamdto",{"_index":1122,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.periodrepository.find",{"_index":1742,"title":{},"body":{"injectables/PeriodService.html":{}}}],["this.periodrepository.findone",{"_index":1749,"title":{},"body":{"injectables/PeriodService.html":{}}}],["this.periodservice.getperiodbyinterval(exam",{"_index":1113,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.personalgroup.getpersonal(user",{"_index":2023,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.professorgrades",{"_index":1796,"title":{},"body":{"classes/Professor.html":{}}}],["this.professorservice.createstudent(createuserdto",{"_index":2254,"title":{},"body":{"injectables/UserService.html":{}}}],["this.professorservice.findone(userdto",{"_index":2262,"title":{},"body":{"injectables/UserService.html":{}}}],["this.providers",{"_index":1366,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.questiongroupservice.copy(copyquestiongroupdto",{"_index":1942,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.create(createquestiongroupdto",{"_index":1936,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findall",{"_index":1937,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findone(id",{"_index":1940,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findpersonal",{"_index":1939,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.remove(id",{"_index":1944,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.reorder(reorderquestiongroupdto",{"_index":1943,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.update(id",{"_index":1941,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questions",{"_index":1899,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questions?.sort((a",{"_index":1900,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questionservice.copytogroup",{"_index":2012,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.questionservice.createquestion(createquestiondto",{"_index":1864,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.createquestions(groupid",{"_index":1867,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.find(finddto",{"_index":1869,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findbyids",{"_index":317,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.questionservice.findone(id",{"_index":1870,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.remove(id",{"_index":1873,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.reorder(reorderquesitondto",{"_index":1872,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.update(id",{"_index":1871,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.repository.create",{"_index":975,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.create(createdto",{"_index":1810,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["this.repository.create(createquestiongroupdto",{"_index":1999,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.create(entitylike",{"_index":1105,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.find",{"_index":979,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"classes/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.findbyids(ids",{"_index":2084,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.findbyuser",{"_index":1120,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.findone",{"_index":972,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["this.repository.findone(id",{"_index":977,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{}}}],["this.repository.merge",{"_index":2006,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.merge(agreement",{"_index":978,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.repository.merge(exam",{"_index":1121,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.merge(question",{"_index":2089,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save",{"_index":2010,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.save(agreement",{"_index":976,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.repository.save(exam",{"_index":1114,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.save(professor",{"_index":1811,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["this.repository.save(question",{"_index":2078,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save(questiongroup",{"_index":2002,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.save(questions",{"_index":2080,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save(student",{"_index":2120,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.repository.softdelete",{"_index":2096,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.softdelete(id",{"_index":1123,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["this.repository.update(group.id",{"_index":2021,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.root",{"_index":1239,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["this.root.dfs(target",{"_index":1245,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["this.service.upload(file",{"_index":2169,"title":{},"body":{"controllers/UploadController.html":{}}}],["this.setexamandposition",{"_index":2001,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.startedat",{"_index":858,"title":{},"body":{"classes/Exam.html":{}}}],["this.status",{"_index":886,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["this.storage",{"_index":1474,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storage.bucket(bucket).file(path",{"_index":1476,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storageservice.upload",{"_index":1499,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["this.studentgrades",{"_index":2112,"title":{},"body":{"classes/Student.html":{}}}],["this.studentservice.createstudent(createuserdto",{"_index":2256,"title":{},"body":{"injectables/UserService.html":{}}}],["this.studentservice.findone(userdto",{"_index":2263,"title":{},"body":{"injectables/UserService.html":{}}}],["this.targetservice.gettargetmap",{"_index":1107,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.targetservice.gettargets",{"_index":1165,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["this.targetservice.gettargetsforuser(user.type",{"_index":1119,"title":{},"body":{"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["this.tree.querytarget(target).map((p",{"_index":1228,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.type",{"_index":1183,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.userrepository.findone",{"_index":2257,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":2195,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findspecializeduser",{"_index":1684,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.mustfinduser",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateuser",{"_index":2197,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":49,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetTree.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["timestamp",{"_index":1572,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["timestamp.entity",{"_index":1256,"title":{},"body":{"classes/FFEntity.html":{}}}],["timestampentity",{"_index":101,"title":{"classes/TimestampEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"coverage.html":{}}}],["timestampentity:10",{"_index":102,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:13",{"_index":106,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:16",{"_index":104,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timewindow",{"_index":2547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tinyint",{"_index":511,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["title",{"_index":521,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/IEntity.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["tocopy",{"_index":2007,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["tocopy.questions",{"_index":2013,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["todo",{"_index":1891,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["token",{"_index":1407,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["token.interface",{"_index":1409,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["token.interface.ts",{"_index":1381,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"coverage.html":{}}}],["transaction",{"_index":2250,"title":{},"body":{"injectables/UserService.html":{}}}],["transactional",{"_index":244,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["transformer",{"_index":707,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/UpdateExamAgreementDto.html":{},"dependencies.html":{}}}],["tree",{"_index":1208,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["tree.provider",{"_index":1038,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["tree.provider.ts",{"_index":1231,"title":{},"body":{"injectables/ExamTargetTree.html":{},"coverage.html":{}}}],["tree.provider.ts:26",{"_index":1238,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["tree.provider.ts:9",{"_index":1235,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["true",{"_index":91,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"classes/Period.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["true})@arrayminsize(1",{"_index":784,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["true})@type(undefined)@isdefined({each",{"_index":783,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["try",{"_index":1412,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":118,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateUserDto.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/ExamUser.html":{},"interfaces/FindExamByUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/QuestionGroup.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["type.enum.ts",{"_index":2385,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":2459,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":30,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":270,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":592,"title":{},"body":{"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{}}}],["typeormmodule.forfeature([answerrepository",{"_index":279,"title":{},"body":{"modules/AnswerModule.html":{}}}],["typeormmodule.forfeature([authrepository",{"_index":448,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([questiongrouprepository",{"_index":1966,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":2207,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":2144,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["types/firebase",{"_index":1445,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["types/user",{"_index":1535,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["uh",{"_index":358,"title":{},"body":{"controllers/AppController.html":{}}}],["ui",{"_index":2375,"title":{},"body":{"dependencies.html":{}}}],["uid",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/JwtPayload.html":{}}}],["um",{"_index":1896,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["unauthorizedexception",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception(logindto",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(userdto",{"_index":2259,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":42,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":392,"title":{},"body":{"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["unknown",{"_index":2534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unprocessableentityexception",{"_index":2232,"title":{},"body":{"injectables/UserService.html":{}}}],["up",{"_index":15,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{},"index.html":{}}}],["up(queryrunner",{"_index":27,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["upcase",{"_index":1635,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["update",{"_index":136,"title":{},"body":{"classes/Answer1622421768424.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"miscellaneous/enumerations.html":{}}}],["update(id",{"_index":300,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["updateagreement",{"_index":942,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["updateagreement(id",{"_index":958,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["updateagreementdto",{"_index":913,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["updateagreemment",{"_index":907,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["updateagreemment(id",{"_index":912,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["updateanswerdto",{"_index":180,"title":{"classes/UpdateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["updated_at",{"_index":135,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["updatedat",{"_index":81,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedatecolumn",{"_index":105,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedto",{"_index":1402,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/QuestionService.html":{}}}],["updatedto.groupid",{"_index":2085,"title":{},"body":{"injectables/QuestionService.html":{}}}],["updateexamagreementdto",{"_index":914,"title":{"classes/UpdateExamAgreementDto.html":{}},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"classes/UpdateExamAgreementDto.html":{},"coverage.html":{}}}],["updateexamdto",{"_index":1001,"title":{"classes/UpdateExamDto.html":{}},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["updateone",{"_index":168,"title":{},"body":{"controllers/AnswerController.html":{}}}],["updateone(id",{"_index":179,"title":{},"body":{"controllers/AnswerController.html":{}}}],["updatequestiondto",{"_index":1848,"title":{"classes/UpdateQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["updatequestiongroupdto",{"_index":1929,"title":{"classes/UpdateQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["updatequestiongroupdto.examid",{"_index":2004,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["updateuser",{"_index":1390,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{}}}],["updateuser(uid",{"_index":1401,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["upload",{"_index":1466,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{}}}],["upload(@uploadedfile",{"_index":2168,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(file",{"_index":2154,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(filedto",{"_index":1489,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["upload(path",{"_index":1468,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["upload_path",{"_index":2162,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadcontroller",{"_index":1646,"title":{"controllers/UploadController.html":{}},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":2158,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploader.service",{"_index":1498,"title":{},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["uploader.service.ts",{"_index":1485,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["uploader.service.ts:11",{"_index":1490,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploader.service.ts:8",{"_index":1487,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploaderservice",{"_index":1497,"title":{"classes/UploaderService.html":{}},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":1296,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["useclass",{"_index":1651,"title":{},"body":{"modules/InfraModule.html":{}}}],["usefactory",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{}}}],["useguards",{"_index":190,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtguard",{"_index":211,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useinterceptors",{"_index":2159,"title":{},"body":{"controllers/UploadController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2167,"title":{},"body":{"controllers/UploadController.html":{}}}],["user",{"_index":46,"title":{"classes/User.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["user.decorator",{"_index":202,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["user.decorator.ts",{"_index":2330,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1069,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":788,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":790,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":792,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":797,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":794,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.enrollment",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.helper",{"_index":2239,"title":{},"body":{"injectables/UserService.html":{}}}],["user.helper.ts",{"_index":2333,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["user.id",{"_index":221,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["user.interface",{"_index":199,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"interfaces/FindExamByUserDto.html":{},"controllers/QuestionGroupController.html":{}}}],["user.interface.ts",{"_index":596,"title":{},"body":{"interfaces/BatchUser.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamUser.html":{},"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["user.interface.ts:3",{"_index":985,"title":{},"body":{"interfaces/ExamAgreementUser.html":{}}}],["user.role",{"_index":626,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.service",{"_index":2191,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.type",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/dtos/create",{"_index":1808,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["user/entities/user.entity",{"_index":612,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["user/enum/user",{"_index":1253,"title":{},"body":{"interfaces/ExamUser.html":{}}}],["user/user.module",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user:11",{"_index":1790,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:14",{"_index":1789,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:17",{"_index":1793,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:20",{"_index":1792,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:23",{"_index":1791,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user_id",{"_index":531,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["user`(`id",{"_index":567,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{}}}],["usercontroller",{"_index":2182,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":1805,"title":{"classes/UserDto.html":{}},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":220,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"classes/GradeRepository.html":{}}}],["usermodule",{"_index":367,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":2497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":2205,"title":{"classes/UserRepository.html":{}},"body":{"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userresult",{"_index":2210,"title":{"interfaces/UserResult.html":{}},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userrole",{"_index":619,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":628,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.manager",{"_index":631,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.regular",{"_index":2180,"title":{},"body":{"classes/User.html":{}}}],["users",{"_index":2133,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":460,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertofind",{"_index":1270,"title":{},"body":{"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"miscellaneous/typealiases.html":{}}}],["usertype",{"_index":795,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ExamUser.html":{},"injectables/JwtStrategy.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["usertype.professor",{"_index":2253,"title":{},"body":{"injectables/UserService.html":{}}}],["usertype.student",{"_index":2255,"title":{},"body":{"injectables/UserService.html":{}}}],["usevalue",{"_index":1365,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["using",{"_index":2445,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":529,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{}}}],["v0.0.1",{"_index":2555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":1660,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":1663,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":686,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["validateif((o",{"_index":690,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["validatenested",{"_index":744,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["validator",{"_index":431,"title":{},"body":{"classes/AuthDto.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/ExamAgreementDto.html":{},"classes/LoginDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["value",{"_index":125,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CreateAnswerDto.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":62,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["var",{"_index":53,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":391,"title":{},"body":{"classes/Auth.html":{},"classes/Course.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["varchar(255",{"_index":405,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{}}}],["varchar(36",{"_index":894,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["variable",{"_index":2277,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2440,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verdadeira",{"_index":771,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["verifytoken",{"_index":1391,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["verifytoken(token",{"_index":1405,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["version",{"_index":2134,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":838,"title":{},"body":{"classes/Exam.html":{},"classes/HttpExceptionFilter.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"miscellaneous/functions.html":{}}}],["where('exam.status",{"_index":1077,"title":{},"body":{"classes/ExamRepository.html":{}}}],["where('grade.periodid",{"_index":1542,"title":{},"body":{"classes/GradeRepository.html":{}}}],["yes",{"_index":1297,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseStorageService.html":{},"classes/UploaderService.html":{}}}],["zoom",{"_index":264,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUser1620299822480.html":{"url":"classes/AdminUser1620299822480.html","title":"class - AdminUser1620299822480","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUser1620299822480\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620299822480-AdminUser.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\n\nconst cpf = '29997856155';\nconst enrollment = '999999';\n\nexport class AdminUser1620299822480 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    const result:\n      | {\n          id: number;\n        }[]\n      | undefined = await queryRunner.manager.query(\n      'SELECT id FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n\n    if (!result?.length) {\n      if (!process.env.ADMIN_PASSWORD) {\n        throw new Error('ADMIN_PASSWORD env var not set');\n      }\n\n      const salt = await bcrypt.genSalt();\n      const password = await bcrypt.hash(process.env.ADMIN_PASSWORD, salt);\n\n      await queryRunner.manager.query(\n        'INSERT INTO auth (login, password, salt) VALUES (?, ?, ?)',\n        [enrollment, password, salt],\n      );\n      await queryRunner.manager.query(\n        'INSERT INTO user (enrollment, cpf, type, role) VALUES (?, ?, ?, ?)',\n        [enrollment, cpf, 'User', 'admin'],\n      );\n    }\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.manager.query('DELETE FROM auth WHERE login = ?', [\n      enrollment,\n    ]);\n    await queryRunner.manager.query(\n      'DELETE FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Answer.html":{"url":"classes/Answer.html","title":"class - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examAgreement\n                            \n                            \n                                examAgreementId\n                            \n                            \n                                question\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreementId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/exam-agreement.entity';\nimport { Question } from 'src/question-group/entities/question.entity';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  TableInheritance,\n} from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { AnswerType } from '../enums/answer-type.enum';\n\n@Entity('answer')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: AnswerType } })\nexport class Answer extends FFEntity {\n  @Column({ type: 'int', nullable: true })\n  score?: number;\n\n  @Column({ type: 'enum', enum: AnswerType })\n  type: AnswerType;\n\n  @Column({ type: 'int' })\n  examAgreementId: number;\n\n  @Column({ type: 'int' })\n  questionId: number;\n\n  @ManyToOne(() => ExamAgreement)\n  examAgreement: ExamAgreement;\n\n  @ManyToOne(() => Question)\n  question: Question;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Answer1622421768424.html":{"url":"classes/Answer1622421768424.html","title":"class - Answer1622421768424","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer1622421768424\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622421768424-Answer.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Answer1622421768424'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622421768424-Answer.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622421768424-Answer.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622421768424-Answer.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Answer1622421768424 implements MigrationInterface {\n    name = 'Answer1622421768424'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `answer` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `score` int NULL, `type` enum ('Answer', 'AnswerGrade') NOT NULL, `exam_agreement_id` int NOT NULL, `question_id` int NOT NULL, `grade_id` int NULL, INDEX `IDX_ec3a69def9f89a993b8f75ee4d` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_814144bcce3b80921f41f15b823` FOREIGN KEY (`exam_agreement_id`) REFERENCES `exam_agreement`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_c3d19a89541e4f0813f2fe09194` FOREIGN KEY (`question_id`) REFERENCES `question`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_971014f1fb44be716098484bb5a` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_971014f1fb44be716098484bb5a`\");\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_c3d19a89541e4f0813f2fe09194`\");\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_814144bcce3b80921f41f15b823`\");\n        await queryRunner.query(\"DROP INDEX `IDX_ec3a69def9f89a993b8f75ee4d` ON `answer`\");\n        await queryRunner.query(\"DROP TABLE `answer`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnswerController.html":{"url":"controllers/AnswerController.html","title":"controller - AnswerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnswerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                answer\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(examId: number, user: ExamUser, createAnswerDtos: CreateAnswerDto[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('batch/:examId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createAnswerDtos\n                                    \n                                            CreateAnswerDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(id: number, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseArrayPipe,\n  Put,\n  ParseIntPipe,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ExamUser } from 'src/exam/interfaces/exam-user.interface';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { AnswerService } from './answer.service';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\nimport { Answer } from './entities/answer.entity';\n\n@Controller('answer')\n@ApiTags('Answer')\n@ApiBearerAuth()\n@UseGuards(JwtGuard)\nexport class AnswerController {\n  constructor(private readonly answerService: AnswerService) {}\n\n  @Post('batch/:examId')\n  @ApiOkResponse({ type: [CreateAnswerDto] })\n  async create(\n    @Param('examId', ParseIntPipe) examId: number,\n    @GetUser() user: ExamUser,\n    @Body(new ParseArrayPipe({ items: CreateAnswerDto }))\n    createAnswerDtos: CreateAnswerDto[],\n  ) {\n    return this.answerService.createBatch(createAnswerDtos, {\n      userId: user.id,\n      examId,\n    });\n  }\n\n  @Put(':id')\n  async updateOne(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAnswerDto: UpdateAnswerDto,\n  ): Promise {\n    return this.answerService.update(id, updateAnswerDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number) {\n    return this.answerService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGrade.html":{"url":"classes/AnswerGrade.html","title":"class - AnswerGrade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGrade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer-grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Answer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                grade\n                            \n                            \n                                examAgreement\n                            \n                            \n                                examAgreementId\n                            \n                            \n                                question\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grade\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer-grade.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:29\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreementId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:26\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Grade } from 'src/auxiliary/entities/grade.entity';\nimport { ChildEntity, ManyToOne } from 'typeorm';\nimport { Answer } from './answer.entity';\n\n@ChildEntity()\nexport class AnswerGrade extends Answer {\n  @ManyToOne(() => Grade)\n  grade: Grade;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGradeRepository.html":{"url":"classes/AnswerGradeRepository.html","title":"class - AnswerGradeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGradeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer-grade.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { AnswerGrade } from '../entities/answer-grade.entity';\n\n@EntityRepository(AnswerGrade)\nexport class AnswerGradeRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnswerModule.html":{"url":"modules/AnswerModule.html","title":"module - AnswerModule","body":"\n                   \n\n\n\n\n    Modules\n    AnswerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_imports\n\n\n\ncluster_AnswerModule_providers\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nExamModule->AnswerModule\n\n\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nAnswerModule -->\n\nQuestionGroupModule->AnswerModule\n\n\n\n\n\nAnswerService\n\nAnswerService\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/answer/answer.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnswerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnswerController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ExamModule\n                        \n                        \n                            QuestionGroupModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AnswerService } from './answer.service';\nimport { AnswerController } from './answer.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnswerRepository } from './repositories/answer.repository';\nimport { AnswerGradeRepository } from './repositories/answer-grade.repository';\nimport { QuestionGroupModule } from 'src/question-group/question-group.module';\nimport { ExamModule } from 'src/exam/exam.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AnswerRepository, AnswerGradeRepository]),\n    QuestionGroupModule,\n    ExamModule,\n  ],\n  controllers: [AnswerController],\n  providers: [AnswerService],\n})\nexport class AnswerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerRepository.html":{"url":"classes/AnswerRepository.html","title":"class - AnswerRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Answer } from '../entities/answer.entity';\n\n@EntityRepository(Answer)\nexport class AnswerRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnswerService.html":{"url":"injectables/AnswerService.html","title":"injectable - AnswerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AnswerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createBatch\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(answerRepository: AnswerRepository, answerGradeRepository: AnswerGradeRepository, questionService: QuestionService, examAgreementService: ExamAgreementService)\n                    \n                \n                        \n                            \n                                Defined in src/answer/answer.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        answerRepository\n                                                  \n                                                        \n                                                                        AnswerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        answerGradeRepository\n                                                  \n                                                        \n                                                                        AnswerGradeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examAgreementService\n                                                  \n                                                        \n                                                                        ExamAgreementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createBatch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createBatch(createAnswerDtos: CreateAnswerDto[], user: BatchUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAnswerDtos\n                                    \n                                            CreateAnswerDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                BatchUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { ExamAgreementService } from 'src/exam/services/exam-agreement.service';\nimport { Question } from 'src/question-group/entities/question.entity';\nimport { QuestionService } from 'src/question-group/services/question.service';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\nimport { Answer } from './entities/answer.entity';\nimport { AnswerType } from './enums/answer-type.enum';\nimport { BatchUser } from './interfaces/batch-user.interface';\nimport { AnswerGradeRepository } from './repositories/answer-grade.repository';\nimport { AnswerRepository } from './repositories/answer.repository';\n\n@Injectable()\nexport class AnswerService {\n  constructor(\n    @InjectRepository(AnswerRepository)\n    private readonly answerRepository: AnswerRepository,\n    @InjectRepository(AnswerGradeRepository)\n    private readonly answerGradeRepository: AnswerGradeRepository,\n    private readonly questionService: QuestionService,\n    private readonly examAgreementService: ExamAgreementService,\n  ) {}\n\n  @Transactional()\n  async createBatch(\n    createAnswerDtos: CreateAnswerDto[],\n    user: BatchUser,\n  ): Promise {\n    const examAgreement = await this.examAgreementService.findOne(user);\n    await this.answerRepository.delete({ examAgreement });\n    const questions = await this.questionService.findByIds(\n      createAnswerDtos.map((dto) => dto.questionId),\n    );\n    const questionMap: ReadonlyMap = new Map(questions.map((question) => [question.id, question]));\n\n    const answers = await Promise.all(\n      createAnswerDtos.map(async (answerDto) => {\n        const question = questionMap.get(answerDto.questionId);\n        if (!question) {\n          throw new NotFoundException(answerDto, 'Question not found');\n        }\n\n        const createDto = { ...answerDto, examAgreement };\n\n        if (answerDto.type === AnswerType.ANSWER_GRADE) {\n          const answer = this.answerGradeRepository.create(createDto);\n          return this.answerGradeRepository.save(answer);\n        }\n\n        const answer = this.answerRepository.create(createDto);\n        return this.answerRepository.save(answer);\n      }),\n    );\n\n    await this.examAgreementService.finishExam(examAgreement);\n\n    return answers;\n  }\n\n  findAll() {\n    return this.answerRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const answer = await this.answerRepository.findOne(id);\n    if (!answer) {\n      throw new NotFoundException({ id });\n    }\n    return answer;\n  }\n\n  @Transactional()\n  async update(id: number, updateAnswerDto: UpdateAnswerDto): Promise {\n    let answer = await this.findOne(id);\n    answer = this.answerRepository.merge(answer, updateAnswerDto);\n\n    return this.answerRepository.save(answer);\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const affected: SoftDeleteResult = await this.answerRepository.softDelete(\n      id,\n    );\n\n    if (!affected.raw.affectedRows) {\n      throw new NotFoundException({ id });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ping\n                            \n                            \n                                pong\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ping\n                        \n                        \n                    \n                \n            \n            \n                \nping()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in src/controllers/app.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pong\n                        \n                        \n                    \n                \n            \n            \n                \npong()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('health')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/controllers/app.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, Post } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get('health')\n  ping(): string {\n    return 'Healthy';\n  }\n\n  @Post('health')\n  @HttpCode(200)\n  pong() {\n    return \"Uh\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnswerModule\n\nAnswerModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnswerModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nInfraModule\n\nInfraModule\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnswerModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            AuxiliaryModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            ExamModule\n                        \n                        \n                            InfraModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            QuestionGroupModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { configs, databaseConfigKey } from './config';\n\nimport { LoggerModule } from './logger/logger.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './user/user.module';\nimport { ExamModule } from './exam/exam.module';\nimport { QuestionGroupModule } from './question-group/question-group.module';\nimport { AnswerModule } from './answer/answer.module';\nimport { CoreModule } from './core/core.module';\nimport { AuxiliaryModule } from './auxiliary/auxiliary.module';\nimport { InfraModule } from './infra/infra.module';\nimport { AppController } from './controllers/app.controller';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ load: configs }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(databaseConfigKey)!,\n      inject: [ConfigService],\n    }),\n    CoreModule,\n    LoggerModule,\n    AuthModule,\n    UserModule,\n    ExamModule,\n    QuestionGroupModule,\n    AnswerModule,\n    AuxiliaryModule,\n    InfraModule,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity } from 'typeorm';\n\n@Entity('auth')\nexport class Auth extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  login: string;\n\n  @Column({ type: 'varchar' })\n  password: string;\n\n  @Column({ type: 'varchar' })\n  salt: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth1619445806509.html":{"url":"classes/Auth1619445806509.html","title":"class - Auth1619445806509","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth1619445806509\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1619445806509-Auth.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auth1619445806509'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1619445806509-Auth.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Auth1619445806509 implements MigrationInterface {\n  name = 'Auth1619445806509';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'CREATE TABLE `auth` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `login` varchar(255) NOT NULL, `password` varchar(255) NOT NULL, `salt` varchar(255) NOT NULL, UNIQUE INDEX `IDX_952e252e7470ff78b18a9ec786` (`login`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      \"CREATE TABLE `user` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `enrollment` varchar(255) NOT NULL, `cpf` varchar(255) NOT NULL, `type` varchar(255) NOT NULL, `role` enum ('manager', 'admin', 'regular') NOT NULL DEFAULT 'regular', UNIQUE INDEX `IDX_914f18c8fbe52b10a6b276bc0c` (`enrollment`), UNIQUE INDEX `IDX_a6235b5ef0939d8deaad755fc8` (`cpf`), INDEX `IDX_31ef2b4d30675d0c15056b7f6e` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_a6235b5ef0939d8deaad755fc8` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_914f18c8fbe52b10a6b276bc0c` ON `user`',\n    );\n    await queryRunner.query('DROP TABLE `user`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_952e252e7470ff78b18a9ec786` ON `auth`',\n    );\n    await queryRunner.query('DROP TABLE `auth`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/auth/controllers/auth.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthService } from '../auth.service';\nimport { LoginDto } from '../dtos/login.dto';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  login(@Body() loginDto: LoginDto): Promise {\n    return this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/auth.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  login: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtGuard\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            CaslModule\n                        \n                        \n                            JwtGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserModule } from '../user/user.module';\nimport { jwtConfigKey } from '../config';\n\nimport { CaslModule } from './casl/casl.module';\n\nimport { AuthService } from './auth.service';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { JwtGuard } from './guards/jwt.guard';\nimport { AuthController } from './controllers/auth.controller';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AuthRepository]),\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(jwtConfigKey)!,\n      inject: [ConfigService],\n    }),\n    UserModule,\n    CaslModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtGuard, JwtStrategy],\n  exports: [AuthService, JwtGuard, CaslModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthRepository.html":{"url":"classes/AuthRepository.html","title":"class - AuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/repositories/auth.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Auth } from '../entities/auth.entity';\n\n@EntityRepository(Auth)\nexport class AuthRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuth\n                            \n                            \n                                findAuth\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                mustFindAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authRepository: AuthRepository, jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        AuthRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAuth(createAuthDto: CreateAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAuthDto\n                                    \n                                                CreateAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAuth\n                        \n                        \n                    \n                \n            \n            \n                \nfindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport bcrypt = require('bcryptjs');\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { UserService } from '../user/user.service';\n\nimport { LoginDto } from './dtos/login.dto';\nimport { Auth } from './entities/auth.entity';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { CreateAuthDto } from './dtos/create-auth.dto';\nimport { AuthDto } from './dtos/auth.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(AuthRepository)\n    private readonly authRepository: AuthRepository,\n    private readonly jwtService: JwtService,\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  findAuth(authDto: AuthDto): Promise {\n    return this.authRepository.findOne({ ...authDto });\n  }\n\n  async mustFindAuth(authDto: AuthDto): Promise {\n    const auth = await this.findAuth({ login: authDto.login });\n    if (!auth) {\n      throw new NotFoundException(authDto);\n    }\n\n    return auth;\n  }\n\n  async login(loginDto: LoginDto): Promise {\n    const auth = await this.mustFindAuth(loginDto);\n\n    const match = await bcrypt.compare(loginDto.password, auth.password);\n    if (!match) {\n      throw new UnauthorizedException(loginDto);\n    }\n\n    const user = await this.userService.mustFindUser({\n      enrollment: loginDto.login,\n    });\n    const accessToken = await this.jwtService.signAsync({\n      uid: user.enrollment,\n      type: user.type,\n    });\n\n    return accessToken;\n  }\n\n  @Transactional()\n  async createAuth(createAuthDto: CreateAuthDto): Promise {\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(createAuthDto.password, salt);\n\n    await this.authRepository.save({\n      login: createAuthDto.login,\n      salt,\n      password,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auxiliary1620477175799.html":{"url":"classes/Auxiliary1620477175799.html","title":"class - Auxiliary1620477175799","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auxiliary1620477175799\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477175799-Auxiliary.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auxiliary1620477175799'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Auxiliary1620477175799 implements MigrationInterface {\n  name = 'Auxiliary1620477175799';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"CREATE TABLE `exam` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `text` text NOT NULL, `description` text NOT NULL, `started_at` datetime NOT NULL, `ended_at` datetime NOT NULL, `allow_anonymous` tinyint NOT NULL DEFAULT 0, `status` enum ('active', 'inactive') NOT NULL, `period_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n    await queryRunner.query(\n      'CREATE TABLE `period` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) NULL, `stated_at` datetime NOT NULL, `ended_at` datetime NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `course` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, UNIQUE INDEX `IDX_5cf4963ae12285cda6432d5a3a` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `subject` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, `code_id` int NOT NULL, `course_id` int NULL, UNIQUE INDEX `IDX_92374adc6b583e8cf659977e48` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `subject_id` int NULL, `period_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `exam_agreement` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `uuid` varchar(255) NOT NULL, `anonymous` tinyint NOT NULL, `user_id` int NOT NULL, UNIQUE INDEX `IDX_2b38bb607ef3e86920e9bd0163` (`uuid`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD `personal` tinyint NOT NULL DEFAULT 0',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD `exam_id` int NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL DEFAULT 0',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD CONSTRAINT `FK_1d110bd5138b275a2ea2944e290` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP FOREIGN KEY `FK_1d110bd5138b275a2ea2944e290`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `period_id`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `status`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `allow_anonymous`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `ended_at`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `started_at`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `description`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `text`');\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `exam_id`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `personal`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_2b38bb607ef3e86920e9bd0163` ON `exam_agreement`',\n    );\n    await queryRunner.query('DROP TABLE `exam_agreement`');\n    await queryRunner.query('DROP TABLE `grade`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_92374adc6b583e8cf659977e48` ON `subject`',\n    );\n    await queryRunner.query('DROP TABLE `subject`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_5cf4963ae12285cda6432d5a3a` ON `course`',\n    );\n    await queryRunner.query('DROP TABLE `course`');\n    await queryRunner.query('DROP TABLE `period`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auxiliary1624416663574.html":{"url":"classes/Auxiliary1624416663574.html","title":"class - Auxiliary1624416663574","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auxiliary1624416663574\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663574-Auxiliary.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auxiliary1624416663574'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Auxiliary1624416663574 implements MigrationInterface {\n    name = 'Auxiliary1624416663574'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `period` CHANGE `stated_at` `started_at` datetime NOT NULL\");\n        await queryRunner.query(\"CREATE TABLE `question_group_grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL DEFAULT 0, `personal` tinyint NOT NULL DEFAULT 0, `position` int NOT NULL DEFAULT '0', `exam_id` int NULL, INDEX `IX_question_group_position` (`position`), PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `professor_grade` (`user_id` int NOT NULL, `grade_id` int NOT NULL, INDEX `IDX_f2d35d0b9823628374f51931dd` (`user_id`), INDEX `IDX_df58a2a413f5647f6411002cb2` (`grade_id`), PRIMARY KEY (`user_id`, `grade_id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `student_grade` (`user_id` int NOT NULL, `grade_id` int NOT NULL, INDEX `IDX_7540599d89cb2b6e17cc56d517` (`user_id`), INDEX `IDX_26862c959c4ecfc8f1b4a1a055` (`grade_id`), PRIMARY KEY (`user_id`, `grade_id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP COLUMN `code_id`\");\n        await queryRunner.query(\"ALTER TABLE `exam_agreement` ADD `status` enum ('started', 'finished') NOT NULL DEFAULT 'started'\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`\");\n        await queryRunner.query(\"ALTER TABLE `subject` CHANGE `course_id` `course_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `subject_id` `subject_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `period_id` `period_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `question_group_grade` ADD CONSTRAINT `FK_ba86f32978b67a878005c5af78a` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` ADD CONSTRAINT `FK_f2d35d0b9823628374f51931ddd` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` ADD CONSTRAINT `FK_df58a2a413f5647f6411002cb28` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` ADD CONSTRAINT `FK_7540599d89cb2b6e17cc56d5170` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` ADD CONSTRAINT `FK_26862c959c4ecfc8f1b4a1a055c` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `student_grade` DROP FOREIGN KEY `FK_26862c959c4ecfc8f1b4a1a055c`\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` DROP FOREIGN KEY `FK_7540599d89cb2b6e17cc56d5170`\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` DROP FOREIGN KEY `FK_df58a2a413f5647f6411002cb28`\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` DROP FOREIGN KEY `FK_f2d35d0b9823628374f51931ddd`\");\n        await queryRunner.query(\"ALTER TABLE `question_group_grade` DROP FOREIGN KEY `FK_ba86f32978b67a878005c5af78a`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `period_id` `period_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `subject_id` `subject_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `subject` CHANGE `course_id` `course_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `exam_agreement` DROP COLUMN `status`\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD `code_id` int NOT NULL\");\n        await queryRunner.query(\"DROP INDEX `IDX_26862c959c4ecfc8f1b4a1a055` ON `student_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_7540599d89cb2b6e17cc56d517` ON `student_grade`\");\n        await queryRunner.query(\"DROP TABLE `student_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_df58a2a413f5647f6411002cb2` ON `professor_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_f2d35d0b9823628374f51931dd` ON `professor_grade`\");\n        await queryRunner.query(\"DROP TABLE `professor_grade`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_group_position` ON `question_group_grade`\");\n        await queryRunner.query(\"DROP TABLE `question_group_grade`\");\n        await queryRunner.query(\"ALTER TABLE `period` CHANGE `started_at` `stated_at` datetime NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuxiliaryModule.html":{"url":"modules/AuxiliaryModule.html","title":"module - AuxiliaryModule","body":"\n                   \n\n\n\n\n    Modules\n    AuxiliaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\n\nGradeService \n\nGradeService \n\n\n\nPeriodService \n\nPeriodService \n\n\n\nProfessorService \n\nProfessorService \n\n\n\nStudentService \n\nStudentService \n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nGradeService  -->\n\nAuxiliaryModule->GradeService \n\n\n\nPeriodService  -->\n\nAuxiliaryModule->PeriodService \n\n\n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nGradeService\n\nGradeService\n\nAuxiliaryModule -->\n\nGradeService->AuxiliaryModule\n\n\n\n\n\nPeriodService\n\nPeriodService\n\nAuxiliaryModule -->\n\nPeriodService->AuxiliaryModule\n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auxiliary/auxiliary.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GradeService\n                        \n                        \n                            PeriodService\n                        \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GradeService\n                        \n                        \n                            PeriodService\n                        \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { GradeRepository } from './repositories/grade.repository';\nimport { PeriodRepository } from './repositories/period.repository';\nimport { ProfessorRepository } from './repositories/professor.repository';\nimport { StudentRepository } from './repositories/student.repository';\n\nimport { GradeService } from './services/grade.service';\nimport { PeriodService } from './services/period.service';\nimport { ProfessorService } from './services/professor.service';\nimport { StudentService } from './services/student.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      StudentRepository,\n      ProfessorRepository,\n      GradeRepository,\n      PeriodRepository,\n    ]),\n  ],\n  providers: [StudentService, ProfessorService, GradeService, PeriodService],\n  exports: [StudentService, ProfessorService, GradeService, PeriodService],\n})\nexport class AuxiliaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BatchUser.html":{"url":"interfaces/BatchUser.html","title":"interface - BatchUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BatchUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/interfaces/batch-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        examId\n                                \n                                \n                                        userId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        examId\n                                    \n                                \n                                \n                                    \n                                        examId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BatchUser {\n  userId: number;\n  examId: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/casl/factories/casl-ability.factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createForUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/casl/factories/casl-ability.factory.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { Answer } from '../../../answer/entities/answer.entity';\nimport { Exam } from '../../../exam/entities/exam.entity';\nimport { ExamAgreement } from '../../../exam/entities/exam-agreement.entity';\nimport { User } from '../../../user/entities/user.entity';\nimport { CaslAction as Action } from '../enums/casl-action.enum';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { UserRole } from 'src/user/enum/user-role.enum';\n\ntype CaslSubjects =\n  | InferSubjects\n  | 'all';\n\ntype AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder(\n      Ability as AbilityClass,\n    );\n\n    switch (user.role) {\n      case UserRole.ADMIN:\n        can(Action.MANAGE, 'all');\n        break;\n      case UserRole.MANAGER:\n        can(Action.READ, 'all');\n        can(Action.MANAGE, QuestionGroup);\n        break;\n      default:\n        can(Action.READ, User);\n        can(Action.READ, ExamAgreement, { userId: user.id });\n    }\n\n    // User\n    can(Action.UPDATE, User, { id: user.id });\n\n    can(Action.MANAGE, Answer, {});\n\n    // ExamAgreement\n    cannot(Action.DELETE, ExamAgreement, { uuid: undefined });\n\n    const examAgreementNotFinished = {\n      userId: user.id,\n      uuid: undefined,\n    };\n\n    can(Action.MANAGE, ExamAgreement, examAgreementNotFinished);\n\n    // Answer\n    can(Action.MANAGE, Answer, {\n      examAgreement: examAgreementNotFinished,\n    });\n\n    // Answer Grade\n\n    return build({\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/casl/casl.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './factories/casl-ability.factory';\n\n@Module({ providers: [CaslAbilityFactory], exports: [CaslAbilityFactory] })\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CopyQuestionGroupDto.html":{"url":"classes/CopyQuestionGroupDto.html","title":"class - CopyQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CopyQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/copy-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/copy-question-group.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/copy-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPositive } from 'class-validator';\n\nexport class CopyQuestionGroupDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsPositive()\n  examId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_providers\n\n\n\n\nHttpExceptionFilter \n\nHttpExceptionFilter \n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\n\n\nCoreModule\n\nCoreModule\n\nHttpExceptionFilter  -->\n\nCoreModule->HttpExceptionFilter \n\n\n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HttpExceptionFilter\n                        \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { HttpExceptionFilter } from './filters/http-exception.filter';\nimport { PayloadInterceptor } from './interceptors/payload.interceptor';\n\n@Global()\n@Module({\n  imports: [ConfigModule],\n  providers: [PayloadInterceptor, HttpExceptionFilter],\n  exports: [PayloadInterceptor, HttpExceptionFilter],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Course.html":{"url":"classes/Course.html","title":"class - Course","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Course\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/course.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                subjects\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subjects\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('course')\nexport class Course extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @OneToMany(() => Subject, (subject) => subject.course)\n  subjects: Subject[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnswerDto.html":{"url":"classes/CreateAnswerDto.html","title":"class - CreateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/create-answer.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                gradeId\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            gradeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()@ValidateIf(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Min(0)@Max(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Default value : AnswerType.ANSWER\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsEnum(AnswerType)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEnum,\n  IsOptional,\n  IsPositive,\n  Max,\n  Min,\n  ValidateIf,\n} from 'class-validator';\nimport { AnswerType } from '../enums/answer-type.enum';\n\nexport class CreateAnswerDto {\n  @IsOptional()\n  @Min(0)\n  @Max(5)\n  score?: number;\n\n  @IsPositive()\n  questionId: number;\n\n  @IsOptional()\n  @IsEnum(AnswerType)\n  type: AnswerType = AnswerType.ANSWER;\n\n  @IsPositive()\n  @ValidateIf((o: CreateAnswerDto) => o.type === AnswerType.ANSWER_GRADE)\n  gradeId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/create-auth.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        LoginDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         LoginDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         LoginDto:8\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { LoginDto } from './login.dto';\n\nexport class CreateAuthDto extends LoginDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamAgreementDto.html":{"url":"classes/CreateExamAgreementDto.html","title":"class - CreateExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                anonymouns\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            anonymouns\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam-agreement.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsBoolean, IsOptional } from 'class-validator';\nimport { ExamAgreementDto } from './exam-agreement.dto';\n\nexport class CreateExamAgreementDto extends OmitType(ExamAgreementDto, [\n  'userId',\n]) {\n  @IsOptional()\n  @IsBoolean()\n  @Type(() => Boolean)\n  anonymouns?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamDto.html":{"url":"classes/CreateExamDto.html","title":"class - CreateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                startedAt\n                            \n                            \n                                    Optional\n                                targets\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsArray()@IsEnum(ExamTargetType, {each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\n\nexport class CreateExamDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsDate()\n  @Type(() => Date)\n  startedAt: Date;\n\n  @IsDate()\n  @Type(() => Date)\n  endedAt: Date;\n\n  @IsOptional()\n  @IsBoolean()\n  allowAnonymous?: boolean;\n\n  @IsOptional()\n  @IsArray()\n  @IsEnum(ExamTargetType, {each: true})\n  targets?: ExamTargetType[];\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestion.html":{"url":"classes/CreateQuestion.html","title":"class - CreateQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-questions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-questions.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsBoolean,\n  IsDefined,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n  ValidateNested,\n} from 'class-validator';\nimport { CreateQuestionDto } from './create-question.dto';\n\nclass CreateQuestion extends OmitType(CreateQuestionDto, ['groupId']) {\n  @IsOptional()\n  @IsPositive()\n  id?: number\n}\n\nexport class CreateQuestionsDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateQuestion)\n  @IsDefined({ each: true })\n  @ArrayMinSize(1)\n  questions: CreateQuestion[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionDto.html":{"url":"classes/CreateQuestionDto.html","title":"class - CreateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    Optional\n                                required\n                            \n                            \n                                statement\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsUrl()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Boolean, title: 'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão'})@IsBoolean()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class CreateQuestionDto {\n  @IsString()\n  @IsNotEmpty()\n  statement: string;\n\n  @IsOptional()\n  @IsUrl()\n  imageUrl?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  imageAlt?: string;\n\n  @ApiProperty({\n    type: Boolean,\n    title:\n      'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão',\n  })\n  @IsBoolean()\n  @IsOptional()\n  required?: boolean;\n\n  @IsPositive()\n  groupId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionGroupDto.html":{"url":"classes/CreateQuestionGroupDto.html","title":"class - CreateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                class\n                            \n                            \n                                    Optional\n                                examId\n                            \n                            \n                                    Optional\n                                personal\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n} from 'class-validator';\n\nexport class CreateQuestionGroupDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsOptional()\n  @IsBoolean()\n  class?: boolean;\n\n  @IsOptional()\n  @IsBoolean()\n  personal?: boolean;\n\n  @IsOptional()\n  @IsPositive()\n  examId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionsDto.html":{"url":"classes/CreateQuestionsDto.html","title":"class - CreateQuestionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-questions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                questions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CreateQuestion[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ValidateNested({each: true})@Type(undefined)@IsDefined({each: true})@ArrayMinSize(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-questions.dto.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, OmitType, PickType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsBoolean,\n  IsDefined,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n  ValidateNested,\n} from 'class-validator';\nimport { CreateQuestionDto } from './create-question.dto';\n\nclass CreateQuestion extends OmitType(CreateQuestionDto, ['groupId']) {\n  @IsOptional()\n  @IsPositive()\n  id?: number\n}\n\nexport class CreateQuestionsDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateQuestion)\n  @IsDefined({ each: true })\n  @ArrayMinSize(1)\n  questions: CreateQuestion[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsCPF()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnrollment()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserRole)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserType)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum } from 'class-validator';\nimport { IsCPF } from 'brazilian-class-validator';\nimport { PickType } from '@nestjs/swagger';\n\nimport { IsEnrollment } from '../../core/decorators/is-enrollment.decorator';\nimport { UserType } from '../enum/user-type.enum';\nimport { CreateAuthDto } from '../../auth/dtos/create-auth.dto';\nimport { UserRole } from '../enum/user-role.enum';\n\nexport class CreateUserDto extends PickType(CreateAuthDto, ['password']) {\n  @IsCPF()\n  cpf: string;\n\n  @IsEnrollment()\n  enrollment: string;\n\n  @IsEnum(UserType)\n  type: UserType;\n\n  @IsEnum(UserRole)\n  role: UserRole;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger, Injectable, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class CustomLogger extends Logger {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam.html":{"url":"classes/Exam.html","title":"class - Exam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                agreements\n                            \n                            \n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                groups\n                            \n                            \n                                period\n                            \n                            \n                                periodId\n                            \n                            \n                                startedAt\n                            \n                            \n                                status\n                            \n                            \n                                    Optional\n                                targets\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    start\n                                \n                                \n                                    end\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            agreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groups\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QuestionGroup[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            periodId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamStatus})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamTarget[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/exam/entities/exam.entity.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        start\n                    \n                \n\n                \n                    \n                        getstart()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/entities/exam.entity.ts:58\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        end\n                    \n                \n\n                \n                    \n                        getend()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/entities/exam.entity.ts:62\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Period } from 'src/auxiliary/entities/period.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport {\n  AfterLoad,\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { ExamStatus } from '../enums/exam-status.enum';\nimport { ExamAgreement } from './exam-agreement.entity';\nimport { ExamTarget } from './exam-target.entity';\n\n@Entity('exam')\nexport class Exam extends FFEntity {\n  @Column({ type: 'text' })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'datetime' })\n  startedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @Column({ type: 'bool', default: false })\n  allowAnonymous: boolean;\n\n  @Column({ type: 'enum', enum: ExamStatus })\n  status: ExamStatus;\n\n  @Column({ type: 'int' })\n  periodId: number;\n\n  @ManyToMany(() => ExamTarget)\n  @JoinTable()\n  targets?: ExamTarget[];\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => QuestionGroup, (group) => group.exam)\n  groups: QuestionGroup[];\n\n  @OneToMany(() => ExamAgreement, (agreement) => agreement.exam)\n  agreements: ExamAgreement[];\n\n  @AfterLoad()\n  sortItems() {\n    this.groups = this.groups?.sort((a, b) => a.position - b.position) ?? [];\n  }\n\n  get start(): Date {\n    return this.startedAt;\n  }\n\n  get end(): Date {\n    return this.endedAt;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam1620478273991.html":{"url":"classes/Exam1620478273991.html","title":"class - Exam1620478273991","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam1620478273991\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620478273991-Exam.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam1620478273991'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620478273991-Exam.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Exam1620478273991 implements MigrationInterface {\n    name = 'Exam1620478273991'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL DEFAULT 0\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreement.html":{"url":"classes/ExamAgreement.html","title":"class - ExamAgreement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam-agreement.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anonymous\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                    Optional\n                                observation\n                            \n                            \n                                status\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                uuid\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasFinishedExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'boolean', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            observation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreementStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamAgreementStatus, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uuid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Generated('uuid')@Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasFinishedExam\n                        \n                        \n                    \n                \n            \n            \n                \nhasFinishedExam()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/entities/exam-agreement.entity.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from '../../core/entities/ff.entity';\nimport { Column, Entity, Generated, ManyToOne } from 'typeorm';\nimport { User } from 'src/user/entities/user.entity';\nimport { Exam } from './exam.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\n\n@Entity('exam_agreement')\nexport class ExamAgreement extends FFEntity {\n  @Generated('uuid')\n  @Column({ unique: true })\n  uuid: string;\n\n  @Column({ type: 'boolean', default: false })\n  anonymous: boolean;\n\n  @Column({ type: 'text', nullable: true })\n  observation?: string;\n\n  @Column({\n    type: 'enum',\n    enum: ExamAgreementStatus,\n    default: ExamAgreementStatus.STARTED,\n  })\n  status: ExamAgreementStatus;\n\n  @Column({ type: 'int' })\n  userId: number;\n\n  @Column({ type: 'int' })\n  examId: number;\n\n  @ManyToOne(() => User)\n  user: User;\n\n  @ManyToOne(() => Exam)\n  exam: Exam;\n\n  hasFinishedExam(): boolean {\n    return this.status === ExamAgreementStatus.FINISHED;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreement1622332886234.html":{"url":"classes/ExamAgreement1622332886234.html","title":"class - ExamAgreement1622332886234","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreement1622332886234\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622332886234-ExamAgreement.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreement1622332886234'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreement1622332886234 implements MigrationInterface {\n  name = 'ExamAgreement1622332886234';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD `exam_id` int NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `uuid` `uuid` varchar(36) NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD CONSTRAINT `FK_20bfb4e7c97aa20956be86c6beb` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD CONSTRAINT `FK_7bdc7fbb138980e5471e2a19366` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP FOREIGN KEY `FK_7bdc7fbb138980e5471e2a19366`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP FOREIGN KEY `FK_20bfb4e7c97aa20956be86c6beb`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `uuid` `uuid` varchar(255) NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP COLUMN `exam_id`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementAnonymousDefault1622334780336.html":{"url":"classes/ExamAgreementAnonymousDefault1622334780336.html","title":"class - ExamAgreementAnonymousDefault1622334780336","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementAnonymousDefault1622334780336\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreementAnonymousDefault1622334780336'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreementAnonymousDefault1622334780336\n  implements MigrationInterface {\n  name = 'ExamAgreementAnonymousDefault1622334780336';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `anonymous` `anonymous` tinyint NOT NULL DEFAULT 0',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `anonymous` `anonymous` tinyint NOT NULL',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamAgreementController.html":{"url":"controllers/ExamAgreementController.html","title":"controller - ExamAgreementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamAgreementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam-agreement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam-agreement\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAgreement\n                            \n                            \n                                    Async\n                                updateAgreemment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAgreement(createAgreementDto: CreateExamAgreementDto, user: ExamAgreementUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-agreement.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAgreementDto\n                                    \n                                                CreateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamAgreementUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAgreemment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAgreemment(id: number, updateAgreementDto: UpdateExamAgreementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-agreement.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAgreementDto\n                                    \n                                                UpdateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { CreateExamAgreementDto } from '../dtos/create-exam-agreement.dto';\nimport { UpdateExamAgreementDto } from '../dtos/update-exam-agreement.dto';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\nimport { ExamAgreementUser } from '../interfaces/exam-agreement-user.interface';\nimport { ExamAgreementService } from '../services/exam-agreement.service';\n\n@Controller('exam-agreement')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\n@ApiTags('ExamAgreement')\nexport class ExamAgreementController {\n  constructor(private readonly examAgreementService: ExamAgreementService) {}\n\n  @Post()\n  async createAgreement(\n    @Body() createAgreementDto: CreateExamAgreementDto,\n    @GetUser() user: ExamAgreementUser,\n  ): Promise {\n    return this.examAgreementService.createAgreement(\n      createAgreementDto,\n      user,\n    );\n  }\n\n  @Put(':id')\n  async updateAgreemment(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAgreementDto: UpdateExamAgreementDto,\n  ): Promise {\n    return this.examAgreementService.updateAgreement(\n      id,\n      updateAgreementDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementDto.html":{"url":"classes/ExamAgreementDto.html","title":"class - ExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/exam-agreement.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/exam-agreement.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from '@nestjs/swagger';\nimport { IsPositive } from 'class-validator';\n\nexport class ExamAgreementDto {\n  @ApiHideProperty()\n  userId: number;\n\n  @IsPositive()\n  examId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementObservation1622417032753.html":{"url":"classes/ExamAgreementObservation1622417032753.html","title":"class - ExamAgreementObservation1622417032753","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementObservation1622417032753\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622417032753-ExamAgreementObservation.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreementObservation1622417032753'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreementObservation1622417032753\n  implements MigrationInterface {\n  name = 'ExamAgreementObservation1622417032753';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD `observation` text NULL',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP COLUMN `observation`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementRepository.html":{"url":"classes/ExamAgreementRepository.html","title":"class - ExamAgreementRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam-agreement.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\n\n@EntityRepository(ExamAgreement)\nexport class ExamAgreementRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamAgreementService.html":{"url":"injectables/ExamAgreementService.html","title":"injectable - ExamAgreementService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamAgreementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam-agreement.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                agreementsByDateInterval\n                            \n                            \n                                    Async\n                                createAgreement\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                finishExam\n                            \n                            \n                                getByUser\n                            \n                            \n                                    Async\n                                updateAgreement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamAgreementRepository, examService: ExamService)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam-agreement.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamAgreementRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examService\n                                                  \n                                                        \n                                                                        ExamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            agreementsByDateInterval\n                        \n                        \n                    \n                \n            \n            \n                \nagreementsByDateInterval(start: Date, end: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAgreement(createAgreementDto: CreateExamAgreementDto, user: ExamAgreementUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAgreementDto\n                                    \n                                                CreateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamAgreementUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(findDto: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            finishExam\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    finishExam(agreement: ExamAgreement)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    agreement\n                                    \n                                                ExamAgreement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetByUser(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAgreement(id: number, updateAgreementDto: UpdateExamAgreementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAgreementDto\n                                    \n                                                UpdateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport { Professor } from 'src/auxiliary/entities/professor.entity';\nimport { Student } from 'src/auxiliary/entities/student.entity';\nimport { Between } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateExamAgreementDto } from '../dtos/create-exam-agreement.dto';\nimport { UpdateExamAgreementDto } from '../dtos/update-exam-agreement.dto';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { ExamAgreementUser } from '../interfaces/exam-agreement-user.interface';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamAgreementRepository } from '../repositories/exam-agreement.repository';\nimport { ExamService } from './exam.service';\n\n@Injectable()\nexport class ExamAgreementService {\n  constructor(\n    @InjectRepository(ExamAgreementRepository)\n    private readonly repository: ExamAgreementRepository,\n    @Inject(forwardRef(() => ExamService))\n    private readonly examService: ExamService,\n  ) {}\n\n  @Transactional()\n  async createAgreement(\n    createAgreementDto: CreateExamAgreementDto,\n    user: ExamAgreementUser,\n  ): Promise {\n    const exam = await this.examService.findOne(createAgreementDto.examId);\n    const alreadyAgreed = await this.repository.findOne({\n      where: { exam, user },\n    });\n\n    if (alreadyAgreed) {\n      throw new ConflictException('already agreed');\n    }\n\n    const agreement = this.repository.create({\n      ...createAgreementDto,\n      userId: user.id,\n    });\n\n    return this.repository.save(agreement);\n  }\n\n  @Transactional()\n  async updateAgreement(\n    id: number,\n    updateAgreementDto: UpdateExamAgreementDto,\n  ): Promise {\n    let agreement = await this.repository.findOne(id);\n\n    if (!agreement) {\n      throw new NotFoundException({ id });\n    }\n\n    agreement = this.repository.merge(agreement, updateAgreementDto);\n\n    return this.repository.save(agreement);\n  }\n\n  agreementsByDateInterval(start: Date, end: Date): Promise {\n    return this.repository.find({ where: { createdAt: Between(start, end) } });\n  }\n\n  @Transactional()\n  getByUser(user: ExamUser): Promise {\n    return this.repository.find({\n      where: { userId: user.id },\n      relations: ['exam'],\n    });\n  }\n\n  async findOne(findDto: {\n    userId: number;\n    examId: number;\n  }): Promise {\n    const agreement = await this.repository.findOne({\n      where: findDto,\n      relations: ['exam'],\n    });\n\n    if (!agreement) {\n      throw new NotFoundException(findDto);\n    }\n\n    return agreement;\n  }\n\n  async finishExam(agreement: ExamAgreement): Promise {\n    agreement.status = ExamAgreementStatus.FINISHED;\n\n    return this.repository.save(agreement);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamAgreementUser.html":{"url":"interfaces/ExamAgreementUser.html","title":"interface - ExamAgreementUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamAgreementUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/interfaces/exam-agreement-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasGrade\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasGrade\n                        \n                        \n                    \n                \n            \n            \n                \nhasGrade()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/interfaces/exam-agreement-user.interface.ts:3\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ExamAgreementUser {\n  id: number;\n  hasGrade(): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamController.html":{"url":"controllers/ExamController.html","title":"controller - ExamController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Exam})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@ApiOkResponse({type: ExamPersonalResult})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n} from '@nestjs/common';\nimport { ExamService } from '../services/exam.service';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { UpdateExamDto } from '../dtos/update-exam.dto';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { Exam } from '../entities/exam.entity';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamPersonalResult } from '../models/exam-personal-result.model';\n\n@Controller('exam')\n@ApiTags('Exam')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class ExamController {\n  constructor(private readonly examService: ExamService) {}\n\n  @Post()\n  @ApiOkResponse({ type: Exam })\n  async create(@Body() createExamDto: CreateExamDto): Promise {\n    return this.examService.create(createExamDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Exam] })\n  async findAll(): Promise {\n    return this.examService.findAll();\n  }\n\n  @Get('me')\n  @ApiOkResponse({ type: ExamPersonalResult })\n  async findPersonal(@GetUser() user: ExamUser): Promise {\n    return this.examService.findPersonal(user);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.examService.findOne(id);\n  }\n\n  @Put(':id')\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateExamDto: UpdateExamDto,\n  ): Promise {\n    return this.examService.update(id, updateExamDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.examService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExamModule.html":{"url":"modules/ExamModule.html","title":"module - ExamModule","body":"\n                   \n\n\n\n\n    Modules\n    ExamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_imports\n\n\n\ncluster_ExamModule_providers\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\n\n\nExamModule\n\nExamModule\n\nExamModule -->\n\nAuxiliaryModule->ExamModule\n\n\n\n\n\nExamAgreementService \n\nExamAgreementService \n\nExamAgreementService  -->\n\nExamModule->ExamAgreementService \n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\n\n\nExamAgreementService\n\nExamAgreementService\n\nExamModule -->\n\nExamAgreementService->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nExamTargetNodeFactory\n\nExamTargetNodeFactory\n\nExamModule -->\n\nExamTargetNodeFactory->ExamModule\n\n\n\n\n\nExamTargetService\n\nExamTargetService\n\nExamModule -->\n\nExamTargetService->ExamModule\n\n\n\n\n\nExamTargetTree\n\nExamTargetTree\n\nExamModule -->\n\nExamTargetTree->ExamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exam/exam.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExamAgreementService\n                        \n                        \n                            ExamService\n                        \n                        \n                            ExamTargetNodeFactory\n                        \n                        \n                            ExamTargetService\n                        \n                        \n                            ExamTargetTree\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExamController\n                        \n                        \n                            ExamTargetController\n                        \n                        \n                            ExamAgreementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuxiliaryModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExamAgreementService\n                        \n                        \n                            ExamService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { ExamService } from './services/exam.service';\nimport { ExamController } from './controllers/exam.controller';\nimport { ExamRepository } from './repositories/exam.repository';\nimport { ExamTargetRepository } from './repositories/exam-target.repository';\nimport { ExamTargetService } from './services/exam-target.service';\nimport { ExamTargetController } from './controllers/exam-target.controller';\nimport { ExamAgreementService } from './services/exam-agreement.service';\nimport { ExamAgreementRepository } from './repositories/exam-agreement.repository';\nimport { ExamAgreementController } from './controllers/exam-agreement.controller';\nimport { ExamTargetTree } from './providers/exam-target-tree.provider';\nimport { ExamTargetNodeFactory } from './factories/exam-target-node.factory';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      ExamRepository,\n      ExamTargetRepository,\n      ExamAgreementRepository,\n    ]),\n    AuxiliaryModule,\n  ],\n  controllers: [ExamController, ExamTargetController, ExamAgreementController],\n  providers: [\n    ExamService,\n    ExamTargetService,\n    ExamAgreementService,\n    ExamTargetTree,\n    ExamTargetNodeFactory,\n  ],\n  exports: [ExamService, ExamAgreementService],\n})\nexport class ExamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamPersonalResult.html":{"url":"classes/ExamPersonalResult.html","title":"class - ExamPersonalResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamPersonalResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/models/exam-personal-result.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alreadyAgreed\n                            \n                            \n                                canAgree\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alreadyAgreed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-personal-result.model.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            canAgree\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-personal-result.model.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exam } from '../entities/exam.entity';\n\nexport class ExamPersonalResult {\n  alreadyAgreed: Exam[];\n  canAgree: Exam[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamRepository.html":{"url":"classes/ExamRepository.html","title":"class - ExamRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findByUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUser(undefined: FindExamByUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/repositories/exam.repository.ts:23\n                \n            \n\n\n            \n                \n                    SELECT DISTINCT exam.*\nFROM exam\nLEFT JOIN exam_targets_exam_target et\n  ON exam.id = et.exam_id\nINNER JOIN exam_target target\n  on et.exam_target_id = target.id AND target.type IN :targets\nWHERE\n  (exam.id NOT IN :ids)\n  (exam.status = \"ACTIVE\") AND\n  (exam.created_at BETWEEN :start AND :end) AND\n  (exam.deleted_at IS NULL)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindExamByUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { FindExamByUserDto } from '../dtos/find-exam-by-user.dto';\nimport { ExamTarget } from '../entities/exam-target.entity';\nimport { Exam } from '../entities/exam.entity';\nimport { ExamStatus } from '../enums/exam-status.enum';\n\n@EntityRepository(Exam)\nexport class ExamRepository extends BaseRepository {\n  /**\n   * SELECT DISTINCT exam.*\n   * FROM exam\n   * LEFT JOIN exam_targets_exam_target et\n   *  ON exam.id = et.exam_id\n   * INNER JOIN exam_target target\n   *  on et.exam_target_id = target.id AND target.type IN :targets\n   * WHERE\n   *  (exam.id NOT IN :ids)\n   *  (exam.status = \"ACTIVE\") AND\n   *  (exam.created_at BETWEEN :start AND :end) AND\n   *  (exam.deleted_at IS NULL)\n   */\n  async findByUser({\n    ignoreExams,\n    targets,\n    user,\n  }: FindExamByUserDto): Promise {\n    const query = this.createQueryBuilder('exam');\n\n    query\n      .distinct(true)\n      .leftJoin('exam_targets_exam_target', 'et', 'exam.id = et.exam_id')\n      .leftJoin(\n        ExamTarget,\n        'target',\n        'et.exam_target_id = target.id AND target.type IN (:...targets)',\n        { targets },\n      )\n      .where('exam.status = :status', { status: ExamStatus.ACTIVE });\n\n    if (ignoreExams.length) {\n      query.andWhere('exam.id NOT IN (:...ids)', {\n        ids: ignoreExams.map((el) => el.id),\n      });\n    }\n    // .andWhere('exam.created_at BETWEEN :start AND :end', {start})\n\n    return query.getMany();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamService.html":{"url":"injectables/ExamService.html","title":"injectable - ExamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                relations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Private\n                                    Async\n                                newExam\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamRepository, targetService: ExamTargetService, agreementService: ExamAgreementService, periodService: PeriodService)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetService\n                                                  \n                                                        \n                                                                        ExamTargetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        agreementService\n                                                  \n                                                        \n                                                                        ExamAgreementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        periodService\n                                                  \n                                                        \n                                                                        PeriodService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            newExam\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newExam(dto: CreateExamDto | UpdateExamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateExamDto | UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                                Readonly\n                            relations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['groups', 'period', 'agreements']\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/services/exam.service.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PeriodService } from 'src/auxiliary/services/period.service';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { UpdateExamDto } from '../dtos/update-exam.dto';\nimport { Exam } from '../entities/exam.entity';\nimport { EXAM_NOT_FOUND } from '../exam.constants';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamPersonalResult } from '../models/exam-personal-result.model';\nimport { ExamRepository } from '../repositories/exam.repository';\nimport { ExamAgreementService } from './exam-agreement.service';\nimport { ExamTargetService } from './exam-target.service';\n\n@Injectable()\nexport class ExamService {\n  private static readonly relations = ['groups', 'period', 'agreements'];\n\n  constructor(\n    @InjectRepository(ExamRepository)\n    private readonly repository: ExamRepository,\n    private readonly targetService: ExamTargetService,\n    private readonly agreementService: ExamAgreementService,\n    private readonly periodService: PeriodService,\n  ) {}\n\n  private async newExam(dto: CreateExamDto | UpdateExamDto): Promise {\n    const { targets, ...entityLike } = dto;\n    const exam = this.repository.create(entityLike);\n\n    if (targets) {\n      const targetMap = await this.targetService.getTargetMap();\n      exam.targets = targets.map((target) => targetMap.get(target)!);\n    }\n\n    return exam;\n  }\n\n  @Transactional()\n  async create(createExamDto: CreateExamDto): Promise {\n    const exam = await this.newExam(createExamDto);\n    exam.period = await this.periodService.getPeriodByInterval(exam);\n\n    return this.repository.save(exam);\n  }\n\n  findAll(): Promise {\n    return this.repository.find({ relations: ExamService.relations });\n  }\n\n  async findOne(id: number): Promise {\n    const exam = await this.repository.findOne(id, {\n      relations: ExamService.relations,\n    });\n    if (!exam) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n\n    return exam;\n  }\n\n  @Transactional()\n  async findPersonal(user: ExamUser): Promise {\n    const alreadyAgreed = (await this.agreementService.getByUser(user)).map(\n      (agree) => agree.exam,\n    );\n\n    const targets = this.targetService.getTargetsForUser(user.type);\n\n    const canAgree = await this.repository.findByUser({\n      ignoreExams: alreadyAgreed,\n      user,\n      targets,\n    });\n\n    return { alreadyAgreed, canAgree };\n  }\n\n  @Transactional()\n  async update(id: number, updateExamDto: UpdateExamDto) {\n    let exam = await this.findOne(id);\n\n    exam = this.repository.merge(exam, await this.newExam(updateExamDto));\n\n    return this.repository.save(exam);\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTarget.html":{"url":"classes/ExamTarget.html","title":"class - ExamTarget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTarget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam-target.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamTargetType, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-target.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity, Unique } from 'typeorm';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\n\n@Entity('exam_target')\nexport class ExamTarget extends FFEntity {\n  @Column({ type: 'enum', enum: ExamTargetType, unique: true })\n  type: ExamTargetType;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTarget1622326106015.html":{"url":"classes/ExamTarget1622326106015.html","title":"class - ExamTarget1622326106015","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTarget1622326106015\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622326106015-ExamTarget.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTarget1622326106015'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nconst targets = [\"Student\", \"Professor\"];\n\nexport class ExamTarget1622326106015 implements MigrationInterface {\n  name = 'ExamTarget1622326106015';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IX_question_group_target` ON `question_group`',\n    );\n    await queryRunner.query(\n      \"CREATE TABLE `exam_target` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `type` enum ('Student', 'Professor') NOT NULL, UNIQUE INDEX `IDX_988f784cc581e38b7ed4943006` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n    await Promise.all(targets.map(target => queryRunner.query('INSERT INTO `exam_target` (`type`) VALUES (?)', [target])));\n    await queryRunner.query(\n      'CREATE TABLE `exam_targets_exam_target` (`exam_id` int NOT NULL, `exam_target_id` int NOT NULL, INDEX `IDX_4a22969058fa5105ad6bee583f` (`exam_id`), INDEX `IDX_af1604ea5493f65a6c8d70d98e` (`exam_target_id`), PRIMARY KEY (`exam_id`, `exam_target_id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `target`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` ADD CONSTRAINT `FK_4a22969058fa5105ad6bee583f1` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` ADD CONSTRAINT `FK_af1604ea5493f65a6c8d70d98ed` FOREIGN KEY (`exam_target_id`) REFERENCES `exam_target`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` DROP FOREIGN KEY `FK_af1604ea5493f65a6c8d70d98ed`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` DROP FOREIGN KEY `FK_4a22969058fa5105ad6bee583f1`',\n    );\n    await queryRunner.query(\n      \"ALTER TABLE `question_group` ADD `target` enum ('Student', 'Professor') NULL\",\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_af1604ea5493f65a6c8d70d98e` ON `exam_targets_exam_target`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_4a22969058fa5105ad6bee583f` ON `exam_targets_exam_target`',\n    );\n    await queryRunner.query('DROP TABLE `exam_targets_exam_target`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_988f784cc581e38b7ed4943006` ON `exam_target`',\n    );\n    await queryRunner.query('DROP TABLE `exam_target`');\n    await queryRunner.query(\n      'CREATE INDEX `IX_question_group_target` ON `question_group` (`target`)',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetAdd1622378888497.html":{"url":"classes/ExamTargetAdd1622378888497.html","title":"class - ExamTargetAdd1622378888497","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetAdd1622378888497\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622378888497-ExamTargetAdd.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTargetAdd1622378888497'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nconst addTargets = ['Course', 'Grade'];\n\nexport class ExamTargetAdd1622378888497 implements MigrationInterface {\n  name = 'ExamTargetAdd1622378888497';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"ALTER TABLE `exam_target` CHANGE `type` `type` enum ('Student', 'Professor', 'Course', 'Grade') NOT NULL\",\n    );\n    await Promise.all(\n      addTargets.map((target) =>\n        queryRunner.query('INSERT INTO exam_target (`type`) VALUES (?)', [\n          target,\n        ]),\n      ),\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `DELETE FROM exam_target WHERE type IN (${addTargets\n        .map((_) => '?')\n        .join(', ')})`,\n      [...addTargets],\n    );\n    await queryRunner.query(\n      \"ALTER TABLE `exam_target` CHANGE `type` `type` enum ('Student', 'Professor') NOT NULL\",\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamTargetController.html":{"url":"controllers/ExamTargetController.html","title":"controller - ExamTargetController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamTargetController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam-target.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam-target\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getForUser\n                            \n                            \n                                    Async\n                                getTargets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getForUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetForUser(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user')@ApiExcludeEndpoint()\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-target.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTargets()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined, schema: undefined})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-target.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { ApiExcludeEndpoint, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamTargetService } from '../services/exam-target.service';\n\n@Controller('exam-target')\n@ApiTags('ExamTarget')\n@UseGuards(JwtGuard)\nexport class ExamTargetController {\n  constructor(private readonly targetService: ExamTargetService) {}\n\n  @Get()\n  @ApiOkResponse({\n    type: [String],\n    schema: { examples: Object.values(ExamTargetType) },\n  })\n  async getTargets(): Promise {\n    return this.targetService.getTargets();\n  }\n\n  @Get('user')\n  @ApiExcludeEndpoint()\n  getForUser(@GetUser() user: ExamUser) {\n    return this.targetService.getTargetsForUser(user.type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamTargetManagerDto.html":{"url":"interfaces/ExamTargetManagerDto.html","title":"interface - ExamTargetManagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamTargetManagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/exam-target-manager.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        targets\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        targets\n                                    \n                                \n                                \n                                    \n                                        targets:         ExamTargetType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ExamTargetType } from '../enums/exam-target-type.enum';\n\nexport interface ExamTargetManagerDto {\n  targets?: ExamTargetType[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetNode.html":{"url":"classes/ExamTargetNode.html","title":"class - ExamTargetNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/models/exam-target-node.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                childs\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dfs\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isLeaf\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamTargetNode[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-target-node.model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-target-node.model.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dfs\n                        \n                        \n                    \n                \n            \n            \n                \ndfs(type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/models/exam-target-node.model.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Path\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isLeaf\n                    \n                \n\n                \n                    \n                        getisLeaf()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/models/exam-target-node.model.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ExamTargetType } from '../enums/exam-target-type.enum';\n\ntype Path = ExamTargetNode[] | undefined;\n\nexport class ExamTargetNode {\n  childs: ExamTargetNode[];\n  type: ExamTargetType;\n\n  get isLeaf(): boolean {\n    return !this.childs.length;\n  }\n\n  dfs(type: string): Path {\n    if (this.type === type) {\n      return [this];\n    }\n    if (this.isLeaf) return;\n    for (const node of this.childs) {\n      const partialPath = node.dfs(type);\n      if (partialPath) {\n        return [this, ...partialPath];\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetNodeFactory.html":{"url":"injectables/ExamTargetNodeFactory.html","title":"injectable - ExamTargetNodeFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetNodeFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/factories/exam-target-node.factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generate\n                        \n                        \n                    \n                \n            \n            \n                \ngenerate(schema: ExamTargetNodeSchema)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/factories/exam-target-node.factory.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ExamTargetNodeSchema\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExamTargetNode\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\ninterface ExamTargetNodeSchema {\n  type: ExamTargetType;\n  childs?: ExamTargetNodeSchema[];\n}\n\n@Injectable()\nexport class ExamTargetNodeFactory {\n  generate(schema: ExamTargetNodeSchema): ExamTargetNode {\n    const node = new ExamTargetNode();\n    node.type = schema.type;\n\n    node.childs = schema.childs?.map((node) => this.generate(node)) ?? [];\n\n    return node;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamTargetNodeSchema.html":{"url":"interfaces/ExamTargetNodeSchema.html","title":"interface - ExamTargetNodeSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamTargetNodeSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/factories/exam-target-node.factory.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        childs\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        childs\n                                    \n                                \n                                \n                                    \n                                        childs:         ExamTargetNodeSchema[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetNodeSchema[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ExamTargetType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\ninterface ExamTargetNodeSchema {\n  type: ExamTargetType;\n  childs?: ExamTargetNodeSchema[];\n}\n\n@Injectable()\nexport class ExamTargetNodeFactory {\n  generate(schema: ExamTargetNodeSchema): ExamTargetNode {\n    const node = new ExamTargetNode();\n    node.type = schema.type;\n\n    node.childs = schema.childs?.map((node) => this.generate(node)) ?? [];\n\n    return node;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetRepository.html":{"url":"classes/ExamTargetRepository.html","title":"class - ExamTargetRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam-target.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { ExamTarget } from '../entities/exam-target.entity';\n\n@EntityRepository(ExamTarget)\nexport class ExamTargetRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetService.html":{"url":"injectables/ExamTargetService.html","title":"injectable - ExamTargetService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam-target.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _targetMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTargetMap\n                            \n                            \n                                    Async\n                                getTargets\n                            \n                            \n                                getTargetsForUser\n                            \n                            \n                                    Private\n                                    Async\n                                loadTargetMap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamTargetRepository, tree: ExamTargetTree)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam-target.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamTargetRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        ExamTargetTree\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTargetMap\n                        \n                        \n                    \n                \n            \n            \n                \ngetTargetMap()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTargets()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTargetsForUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetTargetsForUser(target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExamTargetType[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            loadTargetMap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadTargetMap()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Optional\n                            _targetMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReadonlyMap\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/services/exam-target.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport _ = require('lodash');\n\nimport { ExamTarget } from '../entities/exam-target.entity';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetTree } from '../providers/exam-target-tree.provider';\nimport { ExamTargetRepository } from '../repositories/exam-target.repository';\n\n@Injectable()\nexport class ExamTargetService {\n  private _targetMap?: ReadonlyMap;\n\n  constructor(\n    @InjectRepository(ExamTargetRepository)\n    private readonly repository: ExamTargetRepository,\n    private readonly tree: ExamTargetTree,\n  ) {\n    this.loadTargetMap();\n  }\n\n  private async loadTargetMap(): Promise {\n    const targets = await this.repository.find();\n\n    this._targetMap = new Map(\n      targets.map((target) => [target.type, target]),\n    );\n  }\n\n  getTargetMap(): Promise> {\n    return new Promise((resolve, reject) => {\n      if (!this._targetMap) {\n        return this.loadTargetMap()\n          .then(() => resolve(_.cloneDeep(this._targetMap!)))\n          .catch((e) => reject(e));\n      }\n\n      resolve(_.cloneDeep(this._targetMap));\n    });\n  }\n\n  async getTargets(): Promise {\n    const map = await this.getTargetMap();\n\n    return Array.from(map.values()).map((target) => target.type);\n  }\n\n  getTargetsForUser(target: string): ExamTargetType[] {\n    return this.tree.queryTarget(target).map((p) => p.type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetTree.html":{"url":"injectables/ExamTargetTree.html","title":"injectable - ExamTargetTree","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetTree\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/exam-target-tree.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                root\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                queryTarget\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(targetNodeFactory: ExamTargetNodeFactory)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/exam-target-tree.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        targetNodeFactory\n                                                  \n                                                        \n                                                                        ExamTargetNodeFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            queryTarget\n                        \n                        \n                    \n                \n            \n            \n                \nqueryTarget(target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/providers/exam-target-tree.provider.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ExamTargetNode[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            root\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/providers/exam-target-tree.provider.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Exam } from '../entities/exam.entity';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNodeFactory } from '../factories/exam-target-node.factory';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\n@Injectable()\nexport class ExamTargetTree {\n  private readonly root: ExamTargetNode;\n\n  constructor(targetNodeFactory: ExamTargetNodeFactory) {\n    this.root = targetNodeFactory.generate({\n      type: ExamTargetType.COURSE,\n      childs: [\n        {\n          type: ExamTargetType.GRADE,\n          childs: [\n            { type: ExamTargetType.PROFESSOR },\n            { type: ExamTargetType.STUDENT },\n          ],\n        },\n      ],\n    });\n  }\n\n  queryTarget(target: string): ExamTargetNode[] {\n    const path = this.root.dfs(target);\n\n    if (!path) {\n      throw new NotFoundException(this.root, target);\n    }\n\n    return path;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTitle1621036457247.html":{"url":"classes/ExamTitle1621036457247.html","title":"class - ExamTitle1621036457247","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTitle1621036457247\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621036457247-ExamTitle.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTitle1621036457247'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class ExamTitle1621036457247 implements MigrationInterface {\n    name = 'ExamTitle1621036457247'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `text` `title` text NOT NULL\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `title` `text` text NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamUser.html":{"url":"interfaces/ExamUser.html","title":"interface - ExamUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/interfaces/exam-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         UserType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserType } from '../../user/enum/user-type.enum';\n\nexport interface ExamUser {\n  id: number;\n  type: UserType;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FFEntity.html":{"url":"classes/FFEntity.html","title":"class - FFEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FFEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/ff.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        TimestampEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/ff.entity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PrimaryGeneratedColumn } from 'typeorm';\nimport { TimestampEntity } from './timestamp.entity';\n\nexport class FFEntity extends TimestampEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileSendDto.html":{"url":"interfaces/FileSendDto.html","title":"interface - FileSendDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileSendDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/dtos/file-send.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        buffer\n                                \n                                \n                                        encoding\n                                \n                                \n                                        mimetype\n                                \n                                \n                                        originalname\n                                \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalname\n                                    \n                                \n                                \n                                    \n                                        originalname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FileSendDto {\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n  buffer: Buffer;\n  size: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindExamByUserDto.html":{"url":"interfaces/FindExamByUserDto.html","title":"interface - FindExamByUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindExamByUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/find-exam-by-user.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ignoreExams\n                                \n                                \n                                        targets\n                                \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreExams\n                                    \n                                \n                                \n                                    \n                                        ignoreExams:         Exam[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Exam[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targets\n                                    \n                                \n                                \n                                    \n                                        targets:         ExamTargetType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:         ExamUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Exam } from '../entities/exam.entity';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamUser } from '../interfaces/exam-user.interface';\n\nexport interface FindExamByUserDto {\n  user: ExamUser;\n  ignoreExams: Exam[];\n  targets: ExamTargetType[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindPersonalDto.html":{"url":"classes/FindPersonalDto.html","title":"class - FindPersonalDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindPersonalDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/find-personal.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/find-personal.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserToFind | User\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/find-personal.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserToFind } from 'src/auxiliary/types/user-to-find.type';\nimport { User } from 'src/user/entities/user.entity';\n\nexport class FindPersonalDto {\n  examId: number;\n  user: UserToFind | User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAdmin.html":{"url":"injectables/FirebaseAdmin.html","title":"injectable - FirebaseAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                app\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                auth\n                            \n                            \n                                database\n                            \n                            \n                                delete\n                            \n                            \n                                firestore\n                            \n                            \n                                instanceId\n                            \n                            \n                                machineLearning\n                            \n                            \n                                messaging\n                            \n                            \n                                projectManagement\n                            \n                            \n                                remoteConfig\n                            \n                            \n                                securityRules\n                            \n                            \n                                storage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    options\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: FirebaseModuleOptions)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        FirebaseModuleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            auth\n                        \n                        \n                    \n                \n            \n            \n                \nauth()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         firebase.auth.Auth\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            database\n                        \n                        \n                    \n                \n            \n            \n                \ndatabase(url?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     firebase.database.Database\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            firestore\n                        \n                        \n                    \n                \n            \n            \n                \nfirestore()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.firestore.Firestore\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            instanceId\n                        \n                        \n                    \n                \n            \n            \n                \ninstanceId()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.instanceId.InstanceId\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            machineLearning\n                        \n                        \n                    \n                \n            \n            \n                \nmachineLearning()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.machineLearning.MachineLearning\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            messaging\n                        \n                        \n                    \n                \n            \n            \n                \nmessaging()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.messaging.Messaging\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            projectManagement\n                        \n                        \n                    \n                \n            \n            \n                \nprojectManagement()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.projectManagement.ProjectManagement\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remoteConfig\n                        \n                        \n                    \n                \n            \n            \n                \nremoteConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.remoteConfig.RemoteConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            securityRules\n                        \n                        \n                    \n                \n            \n            \n                \nsecurityRules()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.securityRules.SecurityRules\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            storage\n                        \n                        \n                    \n                \n            \n            \n                \nstorage()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.storage.Storage\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.app.App\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:18\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FIREBASE_OPTIONS } from '../firebase-admin.constants';\nimport { FirebaseModuleOptions } from '../../interfaces';\n\n@Injectable()\nexport class FirebaseAdmin implements firebase.app.App {\n  private readonly app: firebase.app.App;\n\n  constructor(@Inject(FIREBASE_OPTIONS) options: FirebaseModuleOptions) {\n    this.app = firebase.initializeApp({\n      databaseURL: options.databaseURL,\n      storageBucket: options.storageBucket,\n      credential: firebase.credential.cert(options.cert),\n    });\n  }\n\n  get name(): string {\n    return this.app.name;\n  }\n\n  get options(): firebase.AppOptions {\n    return this.app.options;\n  }\n\n  auth(): firebase.auth.Auth {\n    return this.app.auth();\n  }\n\n  database(url?: string): firebase.database.Database {\n    return this.app.database(url);\n  }\n\n  firestore(): firebase.firestore.Firestore {\n    return this.app.firestore();\n  }\n\n  instanceId(): firebase.instanceId.InstanceId {\n    return this.app.instanceId();\n  }\n\n  machineLearning(): firebase.machineLearning.MachineLearning {\n    return this.app.machineLearning();\n  }\n\n  messaging(): firebase.messaging.Messaging {\n    return this.app.messaging();\n  }\n\n  projectManagement(): firebase.projectManagement.ProjectManagement {\n    return this.app.projectManagement();\n  }\n\n  remoteConfig(): firebase.remoteConfig.RemoteConfig {\n    return this.app.remoteConfig();\n  }\n\n  securityRules(): firebase.securityRules.SecurityRules {\n    return this.app.securityRules();\n  }\n\n  storage(): firebase.storage.Storage {\n    return this.app.storage();\n  }\n\n  delete(): Promise {\n    return this.app.delete();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseAdminModule.html":{"url":"modules/FirebaseAdminModule.html","title":"module - FirebaseAdminModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseAdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FirebaseAdminModule\n\n\n\ncluster_FirebaseAdminModule_exports\n\n\n\ncluster_FirebaseAdminModule_providers\n\n\n\n\nFirebaseAdmin \n\nFirebaseAdmin \n\n\n\nFirebaseAdminModule\n\nFirebaseAdminModule\n\nFirebaseAdmin  -->\n\nFirebaseAdminModule->FirebaseAdmin \n\n\n\n\n\nFirebaseAdmin\n\nFirebaseAdmin\n\nFirebaseAdminModule -->\n\nFirebaseAdmin->FirebaseAdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase-admin/firebase-admin.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseAdmin\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseAdmin\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from '../interfaces';\nimport { FirebaseAdmin } from './providers/firebase-admin.provider';\nimport { FIREBASE_OPTIONS } from './firebase-admin.constants';\n\n@Module({ providers: [FirebaseAdmin], exports: [FirebaseAdmin] })\nexport class FirebaseAdminModule {\n  private static readonly exports = [FirebaseAdmin];\n  private static readonly providers: Provider[] = [FirebaseAdmin];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useValue: options,\n        },\n        ...this.providers,\n      ],\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      imports: options.imports ?? [],\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useFactory: options.useFactory,\n          inject: options.inject ?? [],\n        },\n        ...this.providers,\n      ],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAsyncModuleOptions.html":{"url":"interfaces/FirebaseAsyncModuleOptions.html","title":"interface - FirebaseAsyncModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAsyncModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        inject\n                                \n                                \n                                        useFactory\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAuthDecodedToken.html":{"url":"interfaces/FirebaseAuthDecodedToken.html","title":"interface - FirebaseAuthDecodedToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAuthDecodedToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        emailVerified\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailVerified\n                                    \n                                \n                                \n                                    \n                                        emailVerified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FirebaseAuthDecodedToken {\n  emailVerified?: boolean;\n  email?: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAuthService.html":{"url":"injectables/FirebaseAuthService.html","title":"injectable - FirebaseAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firebaseAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                deleteUser\n                            \n                            \n                                getUser\n                            \n                            \n                                updateUser\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createDto: firebase.auth.CreateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            firebase.auth.CreateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \nupdateUser(uid: string, updateDto: firebase.auth.UpdateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            firebase.auth.UpdateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firebaseAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         firebase.auth.Auth\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\n\nimport { FirebaseAuthDecodedToken } from '../interfaces/firebase-auth-decoded-token.interface';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseAuthService {\n  private readonly firebaseAuth: firebase.auth.Auth;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firebaseAuth = firebaseAdmin.auth();\n  }\n\n  async verifyToken(token: string): Promise {\n    try {\n      const decoded = await this.firebaseAuth.verifyIdToken(token);\n      return {\n        uid: decoded.uid,\n        email: decoded.email,\n        emailVerified: decoded.email_verified,\n      };\n    } catch (err) {\n      return null;\n    }\n  }\n\n  getUser(uid: string): Promise {\n    return this.firebaseAuth.getUser(uid);\n  }\n\n  createUser(\n    createDto: firebase.auth.CreateRequest,\n  ): Promise {\n    return this.firebaseAuth.createUser(createDto);\n  }\n\n  updateUser(\n    uid: string,\n    updateDto: firebase.auth.UpdateRequest,\n  ): Promise {\n    return this.firebaseAuth.updateUser(uid, updateDto);\n  }\n\n  deleteUser(uid: string): Promise {\n    return this.firebaseAuth.deleteUser(uid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseCloudMessagingService.html":{"url":"injectables/FirebaseCloudMessagingService.html","title":"injectable - FirebaseCloudMessagingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseCloudMessagingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-cloud-messaging.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                fcm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendToDevice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendToDevice\n                        \n                        \n                    \n                \n            \n            \n                \nsendToDevice(token: string, message: firebase.messaging.MessagingPayload, options?: firebase.messaging.MessagingOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            firebase.messaging.MessagingPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            firebase.messaging.MessagingOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            fcm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.messaging.Messaging\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseCloudMessagingService {\n  private readonly fcm: firebase.messaging.Messaging;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.fcm = firebaseAdmin.messaging();\n  }\n\n  sendToDevice(\n    token: string,\n    message: firebase.messaging.MessagingPayload,\n    options?: firebase.messaging.MessagingOptions,\n  ): Promise {\n    return this.fcm.sendToDevice(token, message, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseFirestoreService.html":{"url":"injectables/FirebaseFirestoreService.html","title":"injectable - FirebaseFirestoreService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseFirestoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-firestore.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firestore\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collection: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-firestore.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FirebaseFirestoreCollection\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firestore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.firestore.Firestore\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\nimport { FirebaseFirestoreCollection } from '../types/firebase-firestore-collection.type';\n\n@Injectable()\nexport class FirebaseFirestoreService {\n  private readonly firestore: firebase.firestore.Firestore;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firestore = firebaseAdmin.firestore();\n  }\n\n  getCollection(collection: string): FirebaseFirestoreCollection {\n    return this.firestore.collection(collection);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseModule.html":{"url":"modules/FirebaseModule.html","title":"module - FirebaseModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_FirebaseModule_exports\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module, Provider } from '@nestjs/common';\n\nimport { FirebaseAuthService } from './services/firebase-auth.service';\nimport { FirebaseCloudMessagingService } from './services/firebase-cloud-messaging.service';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from './interfaces/firebase-async-module-options.interface';\nimport { FirebaseAdminModule } from './firebase-admin/firebase-admin.module';\nimport { FirebaseStorageService, FirebaseFirestoreService } from './services';\n\n@Module({\n  providers: [FirebaseAuthService, FirebaseCloudMessagingService],\n  exports: [FirebaseAuthService, FirebaseCloudMessagingService],\n})\nexport class FirebaseModule {\n  private static readonly providers: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  private static readonly exports: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRoot(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRootAsync(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseModuleOptions.html":{"url":"interfaces/FirebaseModuleOptions.html","title":"interface - FirebaseModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cert\n                                \n                                \n                                            Optional\n                                        databaseURL\n                                \n                                \n                                            Optional\n                                        storageBucket\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cert\n                                    \n                                \n                                \n                                    \n                                        cert:     firebase.ServiceAccount\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     firebase.ServiceAccount\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        databaseURL\n                                    \n                                \n                                \n                                    \n                                        databaseURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storageBucket\n                                    \n                                \n                                \n                                    \n                                        storageBucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseStorageService.html":{"url":"injectables/FirebaseStorageService.html","title":"injectable - FirebaseStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-storage.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                storage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-storage.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(path: string, data: Buffer, contentType: string, publicFile, bucket?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-storage.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    data\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    contentType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    publicFile\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    bucket\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            storage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.storage.Storage\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-storage.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { Injectable } from '@nestjs/common';\n\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseStorageService {\n  private readonly storage: firebase.storage.Storage;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.storage = firebaseAdmin.storage();\n  }\n\n  async upload(\n    path: string,\n    data: Buffer,\n    contentType: string,\n    publicFile = false,\n    bucket?: string,\n  ): Promise {\n    const file = this.storage.bucket(bucket).file(path);\n    await file.save(data, {\n      gzip: true,\n      contentType,\n      public: publicFile,\n      metadata: {\n        cacheControl: 'public, max-age=31536000',\n      },\n    });\n    return file.publicUrl();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseUploader.html":{"url":"injectables/FirebaseUploader.html","title":"injectable - FirebaseUploader","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseUploader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/firebase-uploader.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: FirebaseStorageService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/services/firebase-uploader.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        FirebaseStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/firebase-uploader.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { randomBytes } from 'crypto';\nimport { FirebaseStorageService } from 'src/firebase';\nimport { FileSendDto } from '../dtos/file-send.dto';\nimport { UploaderService } from './uploader.service';\n\n@Injectable()\nexport class FirebaseUploader implements UploaderService {\n  constructor(private readonly storageService: FirebaseStorageService) {}\n\n  async upload(fileDto: FileSendDto, path = ''): Promise {\n    return this.storageService.upload(\n      `${path}/${randomBytes(32).toString('hex')}`,\n      fileDto.buffer,\n      fileDto.mimetype,\n      true,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grade.html":{"url":"classes/Grade.html","title":"class - Grade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                period\n                            \n                            \n                                periodId\n                            \n                            \n                                professors\n                            \n                            \n                                students\n                            \n                            \n                                subject\n                            \n                            \n                                subjectId\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AnswerGrade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            periodId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            professors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Professor[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable({name: 'professor_grade'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            students\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Student[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable({name: 'student_grade'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subjectId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnswerGrade } from 'src/answer/entities/answer-grade.entity';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Period } from './period.entity';\nimport { Professor } from './professor.entity';\nimport { Student } from './student.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('grade')\nexport class Grade extends FFEntity {\n  @Column({ type: 'int' })\n  subjectId: number;\n\n  @Column({ type: 'int' })\n  periodId: number;\n\n  @ManyToOne(() => Subject)\n  subject: Subject;\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => AnswerGrade, (answer) => answer.grade)\n  answers: AnswerGrade[];\n\n  @ManyToMany(() => Student)\n  @JoinTable({ name: 'student_grade' })\n  students: Student[];\n\n  @ManyToMany(() => Professor)\n  @JoinTable({ name: 'professor_grade' })\n  professors: Professor[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GradeIndex1624560625346.html":{"url":"classes/GradeIndex1624560625346.html","title":"class - GradeIndex1624560625346","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GradeIndex1624560625346\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624560625346-GradeIndex.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'GradeIndex1624560625346'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class GradeIndex1624560625346 implements MigrationInterface {\n    name = 'GradeIndex1624560625346'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE INDEX `IX_question_group_class_examId` ON `question_group` (`class`, `exam_id`)\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"DROP INDEX `IX_question_group_class_examId` ON `question_group`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GradeRepository.html":{"url":"classes/GradeRepository.html","title":"class - GradeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GradeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/grade.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findByUserAndPeriod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByUserAndPeriod\n                        \n                        \n                    \n                \n            \n            \n                \nfindByUserAndPeriod(user: UserToFind, period: Period)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/repositories/grade.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserToFind\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    period\n                                    \n                                                Period\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Grade } from '../entities/grade.entity';\nimport { Period } from '../entities/period.entity';\nimport { Professor } from '../entities/professor.entity';\nimport { Student } from '../entities/student.entity';\nimport { UserToFind } from '../types/user-to-find.type';\n\n@EntityRepository(Grade)\nexport class GradeRepository extends BaseRepository {\n  findByUserAndPeriod(user: UserToFind, period: Period): Promise {\n    const query = this.createQueryBuilder('grade');\n\n    if (user instanceof Student) {\n      query.innerJoin('grade.students', 'user');\n    }\n\n    if (user instanceof Professor) {\n      query.innerJoin('grade.professors', 'user');\n    }\n\n    query\n      .innerJoinAndSelect('grade.subject', 'subject')\n      .where('grade.periodId = :periodId', { periodId: period.id })\n      .andWhere('user.id = :userId', { userId: user.id });\n\n    return query.getMany();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GradeService.html":{"url":"injectables/GradeService.html","title":"injectable - GradeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GradeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/grade.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                findByUserAndPeriod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gradeRepository: GradeRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/grade.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gradeRepository\n                                                  \n                                                        \n                                                                        GradeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/grade.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByUserAndPeriod\n                        \n                        \n                    \n                \n            \n            \n                \nfindByUserAndPeriod(user: UserToFind, period: Period)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/grade.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserToFind\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    period\n                                    \n                                                Period\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Grade } from '../entities/grade.entity';\nimport { Period } from '../entities/period.entity';\nimport { GradeRepository } from '../repositories/grade.repository';\nimport type { UserToFind } from '../types/user-to-find.type';\n\n@Injectable()\nexport class GradeService {\n  constructor(\n    @InjectRepository(GradeRepository)\n    private readonly gradeRepository: GradeRepository,\n  ) {}\n\n  findAll(): Promise {\n    return this.gradeRepository.find();\n  }\n\n  findByUserAndPeriod(user: UserToFind, period: Period): Promise {\n    return this.gradeRepository.findByUserAndPeriod(user, period);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/http-exception.filter.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('HttpExceptionFilter')\n                        \n                    \n                        \n                            \n                                    Defined in src/core/filters/http-exception.filter.ts:31\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http-exception.filter.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IClassValidatorException.html":{"url":"interfaces/IClassValidatorException.html","title":"interface - IClassValidatorException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IClassValidatorException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        message\n                                \n                                \n                                        statusCode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IEntity.html":{"url":"interfaces/IEntity.html","title":"interface - IEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663575-SeedAuxiliary1.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { addMonths, endOfMonth, startOfMonth } from 'date-fns';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\nimport faker = require('faker');\nimport bcrypt = require('bcryptjs');\n\ninterface IEntity {\n  id: number;\n}\n\nconst defaultName = 'Gerado';\nconst student = {\n  cpf: '50172241065',\n  enrollment: '989898',\n};\n\nexport class SeedAuxiliary1624412129413 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'INSERT INTO `period` (`name`, `started_at`, `ended_at`) VALUES (?, ?, ?)',\n      [\n        defaultName,\n        startOfMonth(new Date()),\n        endOfMonth(addMonths(new Date(), 5)),\n      ],\n    );\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `course` (`code`, `title`) VALUES (?, ?)',\n      [defaultName, faker.random.alphaNumeric(20)],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `subject` (`code`, `title`, `course_id`) VALUES (?, ?, ?)',\n      [defaultName, faker.random.alpha({ count: 20, upcase: true }), course.id],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `grade` (`subject_id`, `period_id`) VALUES (?, ?)',\n      [subject.id, period.id],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(process.env.ADMIN_PASSWORD!, salt);\n\n    await queryRunner.query(\n      'INSERT INTO `auth` (`login`, `password`, `salt`) VALUES (?, ?, ?)',\n      [student.enrollment, password, salt],\n    );\n    await queryRunner.query(\n      'INSERT INTO `user` (`enrollment`, `cpf`, `type`, `role`) VALUES (?, ?, ?, ?)',\n      [student.enrollment, student.cpf, 'Student', 'manager'],\n    );\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `student_grade` (`user_id`, `grade_id`) VALUES (?, ?)',\n      [user.id, grade.id],\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n    await queryRunner.query('DELETE FROM `student_grade` WHERE `user_id` = ?', [\n      user.id,\n    ]);\n    await queryRunner.query('DELETE FROM `user` WHERE `enrollment` = ?', [\n      student.enrollment,\n    ]);\n    await queryRunner.query('DELETE FROM `auth` WHERE `login` = ?', [\n      student.enrollment,\n    ]);\n\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    await queryRunner.query('DELETE FROM `subject` WHERE `id` = ?', [\n      subject.id,\n    ]);\n    await queryRunner.query('DELETE FROM `course` WHERE `id` = ?', [course.id]);\n    await queryRunner.query('DELETE FROM `grade` WHERE `id` = ?', [grade.id]);\n    await queryRunner.query('DELETE FROM `period` WHERE `id` = ?', [period.id]);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IException.html":{"url":"interfaces/IException.html","title":"interface - IException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        body\n                                \n                                \n                                        message\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                        path\n                                \n                                \n                                            Optional\n                                        stack\n                                \n                                \n                                        statusCode\n                                \n                                \n                                        timestamp\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stack\n                                    \n                                \n                                \n                                    \n                                        stack:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InfraModule.html":{"url":"modules/InfraModule.html","title":"module - InfraModule","body":"\n                   \n\n\n\n\n    Modules\n    InfraModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_exports\n\n\n\ncluster_InfraModule_imports\n\n\n\n\nFirebaseModule\n\nFirebaseModule\n\n\n\nInfraModule\n\nInfraModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/infra.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UploadController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FirebaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UploaderService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { FirebaseModule } from 'src/firebase';\nimport { UploadController } from './controllers/upload.controller';\nimport { FirebaseUploader } from './services/firebase-uploader.service';\nimport { UploaderService } from './services/uploader.service';\n\n@Module({\n  imports: [\n    FirebaseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get('firebase')!,\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [{ provide: UploaderService, useClass: FirebaseUploader }],\n  controllers: [UploadController],\n  exports: [UploaderService],\n})\nexport class InfraModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        type\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  type: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userService: UserService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModuleOptions } from '@nestjs/jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UserType } from 'src/user/enum/user-type.enum';\n\nimport { jwtConfigKey } from '../../config';\n\nimport { UserService } from '../../user/user.service';\nimport { AuthService } from '../auth.service';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n    configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true,\n      secretOrKey: configService.get(jwtConfigKey)!.secret,\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const auth = await this.authService.findAuth({ login: payload.uid });\n    if (!auth) {\n      throw new UnauthorizedException();\n    }\n\n    const user = await this.userService.findSpecializedUser({\n      enrollment: payload.uid,\n    });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CustomLogger } from './logger.service';\n\n@Module({\n  providers: [CustomLogger],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/login.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        AuthDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/login.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Length } from 'class-validator';\nimport { PASSWORD_MAX, PASSWORD_MIN } from '../auth.constants';\nimport { AuthDto } from './auth.dto';\n\nexport class LoginDto extends AuthDto {\n  @IsString()\n  @Length(PASSWORD_MIN, PASSWORD_MAX)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PayloadInterceptor.html":{"url":"injectables/PayloadInterceptor.html","title":"injectable - PayloadInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PayloadInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/payload.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/payload.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class PayloadInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Period.html":{"url":"classes/Period.html","title":"class - Period","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Period\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/period.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                endedAt\n                            \n                            \n                                exams\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                startedAt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exams\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport { Column, Entity, Index, OneToMany } from 'typeorm';\n\n@Entity('period')\n@Index('IX_period_started_at_ended_at', ['startedAt', 'endedAt'])\nexport class Period extends FFEntity {\n  @Column({ type: 'varchar', nullable: true })\n  name?: string;\n\n  @Column({ type: 'datetime' })\n  startedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @OneToMany(() => Exam, (exam) => exam.period)\n  exams: Exam[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PeriodIndex1624547816204.html":{"url":"classes/PeriodIndex1624547816204.html","title":"class - PeriodIndex1624547816204","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PeriodIndex1624547816204\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624547816204-PeriodIndex.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'PeriodIndex1624547816204'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class PeriodIndex1624547816204 implements MigrationInterface {\n    name = 'PeriodIndex1624547816204'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`\");\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `period_id` `period_id` int NOT NULL\");\n        await queryRunner.query(\"CREATE INDEX `IX_period_started_at_ended_at` ON `period` (`started_at`, `ended_at`)\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`\");\n        await queryRunner.query(\"DROP INDEX `IX_period_started_at_ended_at` ON `period`\");\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `period_id` `period_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PeriodRepository.html":{"url":"classes/PeriodRepository.html","title":"class - PeriodRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PeriodRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/period.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Period } from '../entities/period.entity';\n\n@EntityRepository(Period)\nexport class PeriodRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PeriodService.html":{"url":"injectables/PeriodService.html","title":"injectable - PeriodService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PeriodService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/period.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                getLastPeriod\n                            \n                            \n                                    Async\n                                getPeriodByInterval\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(periodRepository: PeriodRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/period.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        periodRepository\n                                                  \n                                                        \n                                                                        PeriodRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLastPeriod\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLastPeriod()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPeriodByInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPeriodByInterval(undefined: Interval)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Interval\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { LessThan, LessThanOrEqual, MoreThanOrEqual } from 'typeorm';\nimport { Period } from '../entities/period.entity';\nimport { PeriodRepository } from '../repositories/period.repository';\n\n@Injectable()\nexport class PeriodService {\n  constructor(\n    @InjectRepository(PeriodRepository)\n    private readonly periodRepository: PeriodRepository,\n  ) {}\n\n  findAll(): Promise {\n    return this.periodRepository.find();\n  }\n\n  // bool _rangeOverlapping(\n  //   Duration startA,\n  //   Duration endA,\n  //   Duration startB,\n  //   Duration endB,\n  // ) {\n  //   return (startA = startB);\n  // }\n\n  async getLastPeriod(): Promise {\n    const period = await this.periodRepository.findOne({\n      where: {\n        startedAt: MoreThanOrEqual(new Date()),\n        endedAt: LessThanOrEqual(new Date()),\n      },\n    });\n\n    if (!period) {\n      throw new NotFoundException('period not found for given date');\n    }\n\n    return period;\n  }\n\n  async getPeriodByInterval({ start, end }: Interval): Promise {\n    const period = await this.periodRepository.findOne({\n      where: {\n        startedAt: LessThan(end),\n        endedAt: MoreThanOrEqual(start),\n      },\n    });\n\n    if (!period) {\n      throw new NotFoundException('period not found for given date');\n    }\n\n    return period;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PersonalQuestionGroup.html":{"url":"classes/PersonalQuestionGroup.html","title":"class - PersonalQuestionGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PersonalQuestionGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/providers/personal-group.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPersonal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionGroupRepository, gradeService: GradeService)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/providers/personal-group.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionGroupRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gradeService\n                                                  \n                                                        \n                                                                        GradeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPersonal(user: Student | Professor, exam: Exam)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/providers/personal-group.provider.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            Student | Professor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exam\n                                    \n                                                Exam\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm';\nimport { Professor } from 'src/auxiliary/entities/professor.entity';\nimport { Student } from 'src/auxiliary/entities/student.entity';\nimport { GradeService } from 'src/auxiliary/services/grade.service';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport { QuestionGroupGrade } from '../entities/question-group-grade.entity';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { QuestionGroupRepository } from '../repositories/question-group.repository';\n\nexport class PersonalQuestionGroup {\n  constructor(\n    @InjectRepository(QuestionGroupRepository)\n    private readonly repository: QuestionGroupRepository,\n    private readonly gradeService: GradeService,\n  ) {}\n\n  async getPersonal(\n    user: Student | Professor,\n    exam: Exam,\n  ): Promise {\n    const grades = await this.gradeService.findByUserAndPeriod(\n      user,\n      exam.period,\n    );\n    if (!grades.length) {\n      return [];\n    }\n\n    const groupGrades = await this.repository.find({\n      where: { class: true, exam },\n    });\n\n    return groupGrades\n      .reduce(\n        (result, group) => [\n          ...result,\n          ...grades.map((grade) => {\n            const groupGrade = Object.assign(new QuestionGroupGrade(), group);\n            groupGrade.grade = grade;\n            return groupGrade;\n          }),\n        ],\n        new Array(),\n      )\n      .sort((a, b) => a.id - b.id);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Professor.html":{"url":"classes/Professor.html","title":"class - Professor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Professor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/professor.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                professorGrades\n                            \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    grades\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            professorGrades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, {lazy: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/professor.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        grades\n                    \n                \n\n                \n                    \n                        getgrades()\n                    \n                \n                            \n                                \n                                    Defined in src/auxiliary/entities/professor.entity.ts:10\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ChildEntity, JoinTable, ManyToMany } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Grade } from './grade.entity';\n\n@ChildEntity()\nexport class Professor extends User {\n  @ManyToMany(() => Grade, { lazy: true })\n  professorGrades: Promise;\n\n  get grades(): Promise {\n    return this.professorGrades;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfessorRepository.html":{"url":"classes/ProfessorRepository.html","title":"class - ProfessorRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfessorRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/professor.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Professor } from '../entities/professor.entity';\n\n@EntityRepository(Professor)\nexport class ProfessorRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfessorService.html":{"url":"injectables/ProfessorService.html","title":"injectable - ProfessorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfessorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/professor.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ProfessorRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/professor.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ProfessorRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Professor } from '../entities/professor.entity';\nimport { ProfessorRepository } from '../repositories/professor.repository';\n\n@Injectable()\nexport class ProfessorService {\n  constructor(\n    @InjectRepository(ProfessorRepository)\n    private readonly repository: ProfessorRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const professor = this.repository.create(createDto);\n\n    return this.repository.save(professor);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                group\n                            \n                            \n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                position\n                            \n                            \n                                required\n                            \n                            \n                                statement\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Answer[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuestionGroup\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Answer } from 'src/answer/entities/answer.entity';\nimport { FFEntity } from 'src/core/entities/ff.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { Column, Entity, Index, ManyToOne, OneToMany } from 'typeorm';\n\n@Entity()\nexport class Question extends FFEntity {\n  @Column({ type: 'text' })\n  statement: string;\n\n  @Column({ type: 'text', nullable: true })\n  imageUrl?: string;\n\n  @Column({ type: 'varchar', nullable: true })\n  imageAlt?: string;\n\n  @Column({ type: 'bool', default: true })\n  required: boolean;\n\n  @Column({ type: 'int' })\n  groupId: number;\n\n  @Index('IX_question_position')\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @ManyToOne(() => QuestionGroup)\n  group: QuestionGroup;\n\n  @OneToMany(() => Answer, (answer) => answer.question)\n  answers: Answer[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createQuestion\n                            \n                            \n                                    Async\n                                createQuestions\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Question})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestions(groupId: number, createQuestionsDto: CreateQuestionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':groupId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createQuestionsDto\n                                    \n                                                CreateQuestionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(findDto: QuestionFindDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuesitonDto: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuesitonDto\n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiNotFoundResponse, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { CreateQuestionDto } from '../dtos/create-question.dto';\nimport { QuestionFindDto } from '../dtos/question-find.dto';\nimport { ReorderQuestionDto } from '../dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from '../dtos/update-question.dto';\nimport { Question } from '../entities/question.entity';\nimport { QuestionService } from '../services/question.service';\nimport { QuestionGroupService } from '../services/question-group.service';\nimport { CreateQuestionsDto } from '../dtos/create-questions.dto';\n\n@Controller('question')\n@ApiTags('Question')\n@UseGuards(JwtGuard)\nexport class QuestionController {\n  constructor(private readonly questionService: QuestionService) {}\n\n  @Post()\n  @ApiOkResponse({ type: Question })\n  async createQuestion(\n    @Body() createQuestionDto: CreateQuestionDto,\n  ): Promise {\n    return this.questionService.createQuestion(createQuestionDto);\n  }\n\n  @Post(':groupId')\n  @ApiOkResponse({ type: [Question] })\n  async createQuestions(\n    @Param('groupId', ParseIntPipe) groupId: number,\n    @Body() createQuestionsDto: CreateQuestionsDto,\n  ): Promise {\n    return this.questionService.createQuestions(groupId, createQuestionsDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Question] })\n  async find(@Query() findDto: QuestionFindDto) {\n    return this.questionService.find(findDto);\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionDto: UpdateQuestionDto,\n  ): Promise {\n    return this.questionService.update(id, updateQuestionDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({ type: [Question] })\n  async reorder(\n    @Body() reorderQuesitonDto: ReorderQuestionDto,\n  ): Promise {\n    return this.questionService.reorder(reorderQuesitonDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionFindDto.html":{"url":"classes/QuestionFindDto.html","title":"class - QuestionFindDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionFindDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/question-find.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/question-find.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class QuestionFindDto {\n  @IsPositive()\n  @IsOptional()\n  groupId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup.html":{"url":"classes/QuestionGroup.html","title":"class - QuestionGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question-group.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                personal\n                            \n                            \n                                position\n                            \n                            \n                                questions\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_group_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/question-group/entities/question-group.entity.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport {\n  AfterLoad,\n  Column,\n  Entity,\n  Index,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { ExamTargetType } from '../../exam/enums/exam-target-type.enum';\nimport { Question } from './question.entity';\n\n@Entity()\n@Index('IX_question_group_class_examId', ['class', 'examId'])\nexport class QuestionGroup extends FFEntity {\n  @Column({ type: 'varchar' })\n  title: string;\n\n  // TODO: juntar essas flags em um enum\n  @Column({ type: 'bool', default: false })\n  class: boolean;\n\n  @Column({ type: 'bool', default: false })\n  personal: boolean;\n\n  @Index('IX_question_group_position')\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @Column({ type: 'int', nullable: true })\n  examId: number;\n\n  @OneToMany(() => Question, (question) => question.group)\n  questions: Question[];\n\n  @ManyToOne(() => Exam)\n  exam: Exam;\n\n  @AfterLoad()\n  sortItems() {\n    this.questions =\n      this.questions?.sort((a, b) => a.position - b.position) ?? [];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup1620179231630.html":{"url":"classes/QuestionGroup1620179231630.html","title":"class - QuestionGroup1620179231630","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup1620179231630\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620179231630-QuestionGroup.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup1620179231630'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionGroup1620179231630 implements MigrationInterface {\n    name = 'QuestionGroup1620179231630'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `question` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `statement` text NOT NULL, `image_url` text NOT NULL, `image_alt` varchar(255) NOT NULL DEFAULT '', `required` tinyint NOT NULL DEFAULT 1, `group_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `question_group` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"DROP TABLE `question_group`\");\n        await queryRunner.query(\"DROP TABLE `question`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionGroupController.html":{"url":"controllers/QuestionGroupController.html","title":"controller - QuestionGroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionGroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question-group.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question-group\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: QuestionGroup})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(examId: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me/:examId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuestionGroupDto: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuestionGroupDto\n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n  Patch,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { QuestionGroupService } from '../services/question-group.service';\nimport { CreateQuestionGroupDto } from '../dtos/create-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dtos/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CopyQuestionGroupDto } from '../dtos/copy-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dtos/reorder-question-group.dto';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { QuestionGroupUser } from '../interfaces/question-group-user.interface';\nimport { User } from 'src/user/entities/user.entity';\n\n@Controller('question-group')\n@ApiTags('QuestionGroup')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class QuestionGroupController {\n  constructor(private readonly questionGroupService: QuestionGroupService) {}\n\n  @Post()\n  @ApiOkResponse({ type: QuestionGroup })\n  async create(\n    @Body() createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.create(createQuestionGroupDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async findAll(): Promise {\n    return this.questionGroupService.findAll();\n  }\n\n  @Get('me/:examId')\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async findPersonal(\n    @Param('examId', ParseIntPipe) examId: number,\n    @GetUser() user: User,\n  ): Promise {\n    return this.questionGroupService.findPersonal({ examId, user });\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionGroupService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.update(id, updateQuestionGroupDto);\n  }\n\n  @Put()\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async copy(\n    @Body() copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.copy(copyQuestionGroupDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async reorder(\n    @Body() reorderQuestionGroupDto: ReorderQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.reorder(reorderQuestionGroupDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionGroupService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupGrade.html":{"url":"classes/QuestionGroupGrade.html","title":"class - QuestionGroupGrade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupGrade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question-group-grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        QuestionGroup\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                grade\n                            \n                            \n                                class\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                personal\n                            \n                            \n                                position\n                            \n                            \n                                questions\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grade\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group-grade.entity.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:38\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:25\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_group_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:29\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:18\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Inherited from         QuestionGroup\n\n                \n            \n            \n                \n                        Defined in         QuestionGroup:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Grade } from 'src/auxiliary/entities/grade.entity';\nimport { QuestionGroup } from './question-group.entity';\n\nexport class QuestionGroupGrade extends QuestionGroup {\n  grade: Grade;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionGroupModule.html":{"url":"modules/QuestionGroupModule.html","title":"module - QuestionGroupModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionGroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_imports\n\n\n\ncluster_QuestionGroupModule_exports\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nAuxiliaryModule->QuestionGroupModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionGroupModule->QuestionService \n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionGroupModule -->\n\nQuestionService->QuestionGroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question-group/question-group.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestionGroupService\n                        \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionGroupController\n                        \n                        \n                            QuestionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuxiliaryModule\n                        \n                        \n                            ExamModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuestionGroupService } from './services/question-group.service';\nimport { QuestionGroupController } from './controllers/question-group.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QuestionGroupRepository } from './repositories/question-group.repository';\nimport { QuestionController } from './controllers/question.controller';\nimport { ExamModule } from '../exam/exam.module';\nimport { QuestionService } from './services/question.service';\nimport { QuestionRepository } from './repositories/question.repository';\nimport { PersonalQuestionGroup } from './providers/personal-group.provider';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([QuestionGroupRepository, QuestionRepository]),\n    ExamModule,\n    AuxiliaryModule,\n  ],\n  controllers: [QuestionGroupController, QuestionController],\n  providers: [QuestionGroupService, PersonalQuestionGroup, QuestionService],\n  exports: [QuestionService],\n})\nexport class QuestionGroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupRepository.html":{"url":"classes/QuestionGroupRepository.html","title":"class - QuestionGroupRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/repositories/question-group.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from \"typeorm\";\nimport { BaseRepository } from \"typeorm-transactional-cls-hooked\";\nimport { QuestionGroup } from \"../entities/question-group.entity\";\n\n@EntityRepository(QuestionGroup)\nexport class QuestionGroupRepository extends BaseRepository {}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionGroupService.html":{"url":"injectables/QuestionGroupService.html","title":"injectable - QuestionGroupService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionGroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/services/question-group.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                relations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Private\n                                    Async\n                                setExamAndPosition\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionGroupRepository, examService: ExamService, questionService: QuestionService, personalGroup: PersonalQuestionGroup)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/services/question-group.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionGroupRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examService\n                                                  \n                                                        \n                                                                        ExamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        personalGroup\n                                                  \n                                                        \n                                                                        PersonalQuestionGroup\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(undefined: FindPersonalDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindPersonalDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            setExamAndPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setExamAndPosition(questionGroup: QuestionGroup, examId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questionGroup\n                                    \n                                                QuestionGroup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                                Readonly\n                            relations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['questions']\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/services/question-group.service.ts:32\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { In } from 'typeorm';\n\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { ExamService } from 'src/exam/services/exam.service';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CopyQuestionGroupDto } from '../dtos/copy-question-group.dto';\nimport { CreateQuestionGroupDto } from '../dtos/create-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dtos/reorder-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dtos/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { questionGroupNotFound } from '../question-group.constants';\nimport { QuestionService } from './question.service';\nimport { QuestionGroupRepository } from '../repositories/question-group.repository';\nimport { last } from 'src/core/utils/last.util';\nimport { FindPersonalDto } from '../dtos/find-personal.dto';\nimport { PersonalQuestionGroup } from '../providers/personal-group.provider';\nimport { Student } from 'src/auxiliary/entities/student.entity';\nimport { Professor } from 'src/auxiliary/entities/professor.entity';\n\n@Injectable()\nexport class QuestionGroupService {\n  constructor(\n    @InjectRepository(QuestionGroupRepository)\n    private readonly repository: QuestionGroupRepository,\n    private readonly examService: ExamService,\n    private readonly questionService: QuestionService,\n    private readonly personalGroup: PersonalQuestionGroup,\n  ) {}\n\n  private static readonly relations = ['questions'];\n\n  private async setExamAndPosition(\n    questionGroup: QuestionGroup,\n    examId: number,\n  ) {\n    questionGroup.exam = await this.examService.findOne(examId);\n\n    questionGroup.position =\n      (last(questionGroup.exam.groups)?.position ?? -1) + 1;\n  }\n\n  @Transactional()\n  async create(\n    createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    const questionGroup = this.repository.create(createQuestionGroupDto);\n    if (createQuestionGroupDto.examId) {\n      await this.setExamAndPosition(\n        questionGroup,\n        createQuestionGroupDto.examId,\n      );\n    }\n    return this.repository.save(questionGroup);\n  }\n\n  findAll(): Promise {\n    return this.repository.find({ relations: QuestionGroupService.relations });\n  }\n\n  async findOne(id: number): Promise {\n    const questionGroup = await this.repository.findOne({\n      where: { id },\n      relations: QuestionGroupService.relations,\n    });\n\n    if (!questionGroup) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n\n    return questionGroup;\n  }\n\n  @Transactional()\n  async update(\n    id: number,\n    updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    let questionGroup = await this.findOne(id);\n\n    if (\n      updateQuestionGroupDto.examId &&\n      updateQuestionGroupDto.examId !== questionGroup.examId\n    ) {\n      await this.setExamAndPosition(\n        questionGroup,\n        updateQuestionGroupDto.examId,\n      );\n    }\n\n    questionGroup = this.repository.merge(\n      questionGroup,\n      updateQuestionGroupDto,\n    );\n\n    return this.repository.save(questionGroup);\n  }\n\n  @Transactional()\n  async copy(\n    copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    const toCopy = await this.findOne(copyQuestionGroupDto.groupId);\n    const exam = await this.examService.findOne(copyQuestionGroupDto.examId);\n\n    const group = await this.repository.save(\n      this.repository.create({\n        ...toCopy,\n        questions: [],\n        exam,\n        id: undefined,\n      }),\n    );\n\n    group.questions = await this.questionService.copyToGroup(\n      group,\n      toCopy.questions,\n    );\n\n    return group;\n  }\n\n  @Transactional()\n  async reorder({\n    examId,\n    groupIds,\n  }: ReorderQuestionGroupDto): Promise {\n    const groups = await this.repository.find({\n      where: { examId, id: In(groupIds) },\n    });\n\n    const groupIdPositionMap: ReadonlyMap = new Map(\n      groupIds.map((id, position) => [id, position]),\n    );\n\n    return (\n      await Promise.all(\n        groups.map(async (group) => {\n          group.position = groupIdPositionMap.get(group.id) ?? 0;\n          await this.repository.update(group.id, { position: group.position });\n          return group;\n        }),\n      )\n    ).sort((a, b) => a.position - b.position);\n  }\n\n  async findPersonal({\n    examId,\n    user,\n  }: FindPersonalDto): Promise {\n    const exam = await this.examService.findOne(examId);\n\n    const result = await this.repository.find({\n      where: { exam, class: false },\n      relations: QuestionGroupService.relations,\n    });\n\n    if (user instanceof Student || user instanceof Professor) {\n      const personalGroups = await this.personalGroup.getPersonal(user, exam);\n      result.push(...personalGroups);\n    }\n\n    return result;\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupTarget1621992475274.html":{"url":"classes/QuestionGroupTarget1621992475274.html","title":"class - QuestionGroupTarget1621992475274","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupTarget1621992475274\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621992475274-QuestionGroupTarget.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroupTarget1621992475274'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class QuestionGroupTarget1621992475274 implements MigrationInterface {\n  name = 'QuestionGroupTarget1621992475274';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"ALTER TABLE `question_group` ADD `target` enum ('Student', 'Professor') NULL\",\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query('ALTER TABLE `user` DROP COLUMN `type`');\n    await queryRunner.query(\n      \"ALTER TABLE `user` ADD `type` enum ('Professor', 'Student', 'User') NOT NULL\",\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IX_question_group_target` ON `question_group` (`target`)',\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user` (`type`)',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IX_question_group_target` ON `question_group`',\n    );\n    await queryRunner.query('ALTER TABLE `user` DROP COLUMN `type`');\n    await queryRunner.query(\n      'ALTER TABLE `user` ADD `type` varchar(255) NOT NULL',\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user` (`type`)',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `target`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuestionGroupUser.html":{"url":"interfaces/QuestionGroupUser.html","title":"interface - QuestionGroupUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  QuestionGroupUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/interfaces/question-group-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface QuestionGroupUser {\n  id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionImage1620477869366.html":{"url":"classes/QuestionImage1620477869366.html","title":"class - QuestionImage1620477869366","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionImage1620477869366\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477869366-QuestionImage.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionImage1620477869366'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionImage1620477869366 implements MigrationInterface {\n    name = 'QuestionImage1620477869366'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NOT NULL DEFAULT ''\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPosition1620488935141.html":{"url":"classes/QuestionPosition1620488935141.html","title":"class - QuestionPosition1620488935141","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPosition1620488935141\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620488935141-QuestionPosition.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionPosition1620488935141'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionPosition1620488935141 implements MigrationInterface {\n    name = 'QuestionPosition1620488935141'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` ADD `position` int NOT NULL DEFAULT '0'\");\n        await queryRunner.query(\"ALTER TABLE `question_group` ADD `position` int NOT NULL DEFAULT '0'\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question_group` DROP COLUMN `position`\");\n        await queryRunner.query(\"ALTER TABLE `question` DROP COLUMN `position`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPositionIdx1620563708532.html":{"url":"classes/QuestionPositionIdx1620563708532.html","title":"class - QuestionPositionIdx1620563708532","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPositionIdx1620563708532\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620563708532-QuestionPositionIdx.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionPositionIdx1620563708532'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionPositionIdx1620563708532 implements MigrationInterface {\n    name = 'QuestionPositionIdx1620563708532'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"CREATE INDEX `IX_question_position` ON `question` (`position`)\");\n        await queryRunner.query(\"CREATE INDEX `IX_question_group_position` ON `question_group` (`position`)\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_group_position` ON `question_group`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_position` ON `question`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionRepository.html":{"url":"classes/QuestionRepository.html","title":"class - QuestionRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/repositories/question.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Question } from '../entities/question.entity';\n\n@EntityRepository(Question)\nexport class QuestionRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/services/question.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copyToGroup\n                            \n                            \n                                    Async\n                                createQuestion\n                            \n                            \n                                    Async\n                                createQuestions\n                            \n                            \n                                find\n                            \n                            \n                                findByIds\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                    Async\n                                getNextPosition\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionRepository, groupService: QuestionGroupService)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/services/question.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        groupService\n                                                  \n                                                        \n                                                                        QuestionGroupService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copyToGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copyToGroup(group: QuestionGroup, questions: Question[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                QuestionGroup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questions\n                                    \n                                                Question[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestions(groupId: number, createQuestionsDto: CreateQuestionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createQuestionsDto\n                                    \n                                                CreateQuestionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(findDto: QuestionFindDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByIds\n                        \n                        \n                    \n                \n            \n            \n                \nfindByIds(ids: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getNextPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNextPosition(groupId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { In } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CreateQuestionDto } from '../dtos/create-question.dto';\nimport { QuestionFindDto } from '../dtos/question-find.dto';\nimport { ReorderQuestionDto } from '../dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from '../dtos/update-question.dto';\nimport { Question } from '../entities/question.entity';\nimport { questionNotFound } from '../question.constants';\nimport { QuestionRepository } from '../repositories/question.repository';\nimport { QuestionGroupService } from './question-group.service';\nimport { last } from 'src/core/utils/last.util';\nimport { CreateQuestionsDto } from '../dtos/create-questions.dto';\n\n@Injectable()\nexport class QuestionService {\n  constructor(\n    @InjectRepository(QuestionRepository)\n    private readonly repository: QuestionRepository,\n    @Inject(forwardRef(() => QuestionGroupService))\n    private readonly groupService: QuestionGroupService,\n  ) {}\n\n  private async getNextPosition(groupId: number): Promise {\n    const { questions } = await this.groupService.findOne(groupId);\n\n    return (last(questions)?.position ?? -1) + 1;\n  }\n\n  @Transactional()\n  async createQuestion(\n    createQuestionDto: CreateQuestionDto,\n  ): Promise {\n    const question = this.repository.create({\n      ...createQuestionDto,\n      position: await this.getNextPosition(createQuestionDto.groupId),\n    });\n\n    return this.repository.save(question);\n  }\n\n  @Transactional()\n  async createQuestions(\n    groupId: number,\n    createQuestionsDto: CreateQuestionsDto,\n  ): Promise {\n    const questions = this.repository.create(\n      createQuestionsDto.questions.map((dto, position) =>\n        this.repository.create({ ...dto, position, groupId }),\n      ),\n    );\n\n    return this.repository.save(questions);\n  }\n\n  find(findDto: QuestionFindDto): Promise {\n    return this.repository.find({\n      where: (qb) => {\n        if (findDto.groupId) {\n          qb.where(`${qb.alias}.groupId = :groupId`, findDto);\n        }\n        return qb;\n      },\n    });\n  }\n\n  findByIds(ids: number[]): Promise {\n    return this.repository.findByIds(ids);\n  }\n\n  async findOne(id: number): Promise {\n    const question = await this.repository.findOne({ id });\n    if (!question) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n\n    return question;\n  }\n\n  @Transactional()\n  async update(id: number, updateDto: UpdateQuestionDto): Promise {\n    let question = await this.findOne(id);\n\n    if (updateDto.groupId && question.groupId !== updateDto.groupId) {\n      question.position = await this.getNextPosition(updateDto.groupId);\n    }\n\n    question = this.repository.merge(question, updateDto);\n\n    return this.repository.save(question);\n  }\n\n  @Transactional()\n  async copyToGroup(\n    group: QuestionGroup,\n    questions: Question[],\n  ): Promise {\n    return this.repository.save(\n      questions.map((question) =>\n        this.repository.create({ ...question, group, id: undefined }),\n      ),\n    );\n  }\n\n  @Transactional()\n  async reorder({\n    groupId,\n    questionIds,\n  }: ReorderQuestionDto): Promise {\n    const questions = await this.repository.find({\n      where: { groupId, id: In(questionIds) },\n    });\n\n    const questionPositionMap: ReadonlyMap = new Map(\n      questionIds.map((id, position) => [id, position]),\n    );\n\n    return this.repository.save(\n      questions.map((question) => {\n        question.position = questionPositionMap.get(question.id) ?? 0;\n        return question;\n      }),\n    );\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete({ id });\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionDto.html":{"url":"classes/ReorderQuestionDto.html","title":"class - ReorderQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/reorder-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupId\n                            \n                            \n                                questionIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from \"class-validator\";\n\nexport class ReorderQuestionDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsArray()\n  @IsPositive({each: true})\n  questionIds: number[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionGroupDto.html":{"url":"classes/ReorderQuestionGroupDto.html","title":"class - ReorderQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/reorder-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question-group.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from 'class-validator';\n\nexport class ReorderQuestionGroupDto {\n  @IsPositive()\n  examId: number;\n\n  @IsArray()\n  @IsPositive({ each: true })\n  groupIds: number[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SeedAuxiliary1624412129413.html":{"url":"classes/SeedAuxiliary1624412129413.html","title":"class - SeedAuxiliary1624412129413","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SeedAuxiliary1624412129413\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663575-SeedAuxiliary1.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663575-SeedAuxiliary1.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663575-SeedAuxiliary1.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { addMonths, endOfMonth, startOfMonth } from 'date-fns';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\nimport faker = require('faker');\nimport bcrypt = require('bcryptjs');\n\ninterface IEntity {\n  id: number;\n}\n\nconst defaultName = 'Gerado';\nconst student = {\n  cpf: '50172241065',\n  enrollment: '989898',\n};\n\nexport class SeedAuxiliary1624412129413 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'INSERT INTO `period` (`name`, `started_at`, `ended_at`) VALUES (?, ?, ?)',\n      [\n        defaultName,\n        startOfMonth(new Date()),\n        endOfMonth(addMonths(new Date(), 5)),\n      ],\n    );\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `course` (`code`, `title`) VALUES (?, ?)',\n      [defaultName, faker.random.alphaNumeric(20)],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `subject` (`code`, `title`, `course_id`) VALUES (?, ?, ?)',\n      [defaultName, faker.random.alpha({ count: 20, upcase: true }), course.id],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `grade` (`subject_id`, `period_id`) VALUES (?, ?)',\n      [subject.id, period.id],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(process.env.ADMIN_PASSWORD!, salt);\n\n    await queryRunner.query(\n      'INSERT INTO `auth` (`login`, `password`, `salt`) VALUES (?, ?, ?)',\n      [student.enrollment, password, salt],\n    );\n    await queryRunner.query(\n      'INSERT INTO `user` (`enrollment`, `cpf`, `type`, `role`) VALUES (?, ?, ?, ?)',\n      [student.enrollment, student.cpf, 'Student', 'manager'],\n    );\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `student_grade` (`user_id`, `grade_id`) VALUES (?, ?)',\n      [user.id, grade.id],\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n    await queryRunner.query('DELETE FROM `student_grade` WHERE `user_id` = ?', [\n      user.id,\n    ]);\n    await queryRunner.query('DELETE FROM `user` WHERE `enrollment` = ?', [\n      student.enrollment,\n    ]);\n    await queryRunner.query('DELETE FROM `auth` WHERE `login` = ?', [\n      student.enrollment,\n    ]);\n\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    await queryRunner.query('DELETE FROM `subject` WHERE `id` = ?', [\n      subject.id,\n    ]);\n    await queryRunner.query('DELETE FROM `course` WHERE `id` = ?', [course.id]);\n    await queryRunner.query('DELETE FROM `grade` WHERE `id` = ?', [grade.id]);\n    await queryRunner.query('DELETE FROM `period` WHERE `id` = ?', [period.id]);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SoftDeleteResult.html":{"url":"interfaces/SoftDeleteResult.html","title":"interface - SoftDeleteResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SoftDeleteResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/soft-delete-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        raw\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        raw\n                                    \n                                \n                                \n                                    \n                                        raw:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SoftDeleteResult {\n  raw: {\n    affectedRows: number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Student.html":{"url":"classes/Student.html","title":"class - Student","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Student\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/student.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                studentGrades\n                            \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    grades\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            studentGrades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, {lazy: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/student.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        grades\n                    \n                \n\n                \n                    \n                        getgrades()\n                    \n                \n                            \n                                \n                                    Defined in src/auxiliary/entities/student.entity.ts:10\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ChildEntity, Column, JoinTable, ManyToMany } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Grade } from './grade.entity';\n\n@ChildEntity()\nexport class Student extends User {\n  @ManyToMany(() => Grade, { lazy: true })\n  studentGrades: Promise;\n\n  get grades(): Promise {\n    return this.studentGrades;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StudentRepository.html":{"url":"classes/StudentRepository.html","title":"class - StudentRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StudentRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/student.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Student } from '../entities/student.entity';\n\n@EntityRepository(Student)\nexport class StudentRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StudentService.html":{"url":"injectables/StudentService.html","title":"injectable - StudentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StudentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/student.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: StudentRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/student.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        StudentRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Student } from '../entities/student.entity';\nimport { StudentRepository } from '../repositories/student.repository';\n\n@Injectable()\nexport class StudentService {\n  constructor(\n    @InjectRepository(StudentRepository)\n    private readonly repository: StudentRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const student = this.repository.create(createDto);\n\n    return this.repository.save(student);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Subject.html":{"url":"classes/Subject.html","title":"class - Subject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/subject.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                course\n                            \n                            \n                                courseId\n                            \n                            \n                                grades\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Course\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            courseId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, OneToMany } from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Course } from './course.entity';\nimport { Grade } from './grade.entity';\n\n@Entity('subject')\nexport class Subject extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @Column({ type: 'int' })\n  courseId: number;\n\n  @ManyToOne(() => Course)\n  course: Course;\n\n  @OneToMany(() => Grade, (grade) => grade.subject)\n  grades: Grade[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerOptions.html":{"url":"interfaces/SwaggerOptions.html","title":"interface - SwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/interfaces/swagger.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        title\n                                \n                                \n                                        users\n                                \n                                \n                                        version\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        users\n                                    \n                                \n                                \n                                    \n                                        users:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerOptions {\n  title: string;\n  description: string;\n  version: string;\n  users: Record;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimestampEntity.html":{"url":"classes/TimestampEntity.html","title":"class - TimestampEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimestampEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/timestamp.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport class TimestampEntity extends BaseEntity {\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnswerDto.html":{"url":"classes/UpdateAnswerDto.html","title":"class - UpdateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/update-answer.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnswerDto } from './create-answer.dto';\n\nexport class UpdateAnswerDto extends PartialType(CreateAnswerDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamAgreementDto.html":{"url":"classes/UpdateExamAgreementDto.html","title":"class - UpdateExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                anonymous\n                            \n                            \n                                    Optional\n                                observation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/update-exam-agreement.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            observation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/update-exam-agreement.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsBoolean, IsNotEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class UpdateExamAgreementDto {\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  observation?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Type(() => Boolean)\n  anonymous?: boolean;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamDto.html":{"url":"classes/UpdateExamDto.html","title":"class - UpdateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateExamDto } from './create-exam.dto';\n\nexport class UpdateExamDto extends PartialType(CreateExamDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionDto.html":{"url":"classes/UpdateQuestionDto.html","title":"class - UpdateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/update-question.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateQuestionDto } from './create-question.dto';\n\nexport class UpdateQuestionDto extends PartialType(CreateQuestionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionGroupDto.html":{"url":"classes/UpdateQuestionGroupDto.html","title":"class - UpdateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/update-question-group.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateQuestionGroupDto } from './create-question-group.dto';\n\nexport class UpdateQuestionGroupDto extends PartialType(CreateQuestionGroupDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadController.html":{"url":"controllers/UploadController.html","title":"controller - UploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/controllers/upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                upload\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/infra/controllers/upload.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { UPLOAD_PATH } from '../infra.constants';\nimport { UploaderService } from '../services/uploader.service';\n\n@Controller('upload')\n@ApiTags('Upload')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class UploadController {\n  constructor(private readonly service: UploaderService) {}\n\n  @Post()\n  @UseInterceptors(FileInterceptor('file'))\n  async upload(@UploadedFile() file: Express.Multer.File) {\n    return this.service.upload(file, UPLOAD_PATH);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploaderService.html":{"url":"classes/UploaderService.html","title":"class - UploaderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploaderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/uploader.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/uploader.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileSendDto } from '../dtos/file-send.dto';\n\nexport abstract class UploaderService {\n  abstract upload(fileDto: FileSendDto, path?: string): Promise;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/exam-agreement.entity';\nimport { Column, Entity, OneToMany, TableInheritance } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { UserRole } from '../enum/user-role.enum';\nimport { UserType } from '../enum/user-type.enum';\n\n@Entity('user')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: UserType } })\nexport class User extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  enrollment: string;\n\n  @Column({ type: 'varchar', unique: true })\n  cpf: string;\n\n  @Column({ type: 'enum', enum: UserType })\n  type: UserType;\n\n  @Column({ type: 'enum', default: UserRole.REGULAR, enum: UserRole })\n  role: UserRole;\n\n  @OneToMany(() => ExamAgreement, (agreement) => agreement.user)\n  examAgreements: ExamAgreement[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\nimport { GetUser } from '../decoratos/get-user.decorator';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../entities/user.entity';\nimport { UserService } from '../user.service';\n\n@Controller('user')\n@ApiTags('User')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  createUser(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUser(createUserDto);\n  }\n\n  @Get()\n  @UseGuards(JwtGuard)\n  getUser(@GetUser() user: User) {\n    return user;\n  }\n\n  // @Put()\n  // @UseGuards(JwtGuard)\n  // updateUser() {\n  //   return this.userService.updateUser();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                enrollment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class UserDto {\n  @IsString()\n  @IsNotEmpty()\n  enrollment: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { UserController } from './controllers/user.controller';\nimport { UserRepository } from './repositories/user.repository';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    forwardRef(() => AuthModule),\n    forwardRef(() => AuxiliaryModule),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/repositories/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../entities/user.entity';\n\n@EntityRepository(User)\nexport class UserRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserResult.html":{"url":"interfaces/UserResult.html","title":"interface - UserResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/interfaces/user-specialized-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         UserType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserType } from '../enum/user-type.enum';\n\nexport interface UserResult {\n  readonly type: UserType;\n  readonly id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Private\n                                    Async\n                                createUserByType\n                            \n                            \n                                    Async\n                                findSpecializedUser\n                            \n                            \n                                findUser\n                            \n                            \n                                    Async\n                                mustFindSpecializedUser\n                            \n                            \n                                    Async\n                                mustFindUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, authService: AuthService, studentService: StudentService, professorService: ProfessorService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        studentService\n                                                  \n                                                        \n                                                                        StudentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        professorService\n                                                  \n                                                        \n                                                                        ProfessorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/user/user.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createUserByType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserByType(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findUser\n                        \n                        \n                    \n                \n            \n            \n                \nfindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthService } from 'src/auth/auth.service';\nimport { ProfessorService } from 'src/auxiliary/services/professor.service';\nimport { StudentService } from 'src/auxiliary/services/student.service';\nimport {\n  runOnTransactionComplete,\n  Transactional,\n} from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { UserDto } from './dtos/user.dto';\nimport { User } from './entities/user.entity';\nimport { UserType } from './enum/user-type.enum';\nimport { createUser } from './helpers/create-user.helper';\nimport { UserResult } from './interfaces/user-specialized-result.interface';\nimport { UserRepository } from './repositories/user.repository';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private readonly userRepository: UserRepository,\n    private readonly authService: AuthService,\n    private readonly studentService: StudentService,\n    private readonly professorService: ProfessorService,\n  ) {}\n\n  @Transactional()\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const user = await this.createUserByType(createUserDto);\n    await this.authService.createAuth({\n      login: createUserDto.enrollment,\n      password: createUserDto.password,\n    });\n    runOnTransactionComplete((e) => {\n      e && console.error(e);\n      console.log('create auth transaction completed');\n    });\n    return user;\n  }\n\n  private async createUserByType(createUserDto: CreateUserDto): Promise {\n    switch (createUserDto.type) {\n      case UserType.PROFESSOR:\n        return this.professorService.createStudent(createUserDto);\n      case UserType.STUDENT:\n        return this.studentService.createStudent(createUserDto);\n      default:\n        throw new UnprocessableEntityException();\n    }\n  }\n\n  findUser(userDto: UserDto): Promise {\n    return this.userRepository.findOne({ ...userDto });\n  }\n\n  async mustFindUser(userDto: UserDto): Promise {\n    const user = await this.findUser(userDto);\n    if (!user) {\n      throw new UnauthorizedException(userDto);\n    }\n    return user;\n  }\n\n  async findSpecializedUser(userDto: UserDto): Promise {\n    const partialUser:\n      | UserResult\n      | undefined = await this.userRepository.findOne({\n      select: ['type', 'id'],\n      where: { ...userDto },\n    });\n\n    if (!partialUser) {\n      throw new UnauthorizedException(userDto);\n    }\n\n    let user: User | undefined;\n\n    switch (partialUser.type) {\n      case UserType.PROFESSOR:\n        user = await this.professorService.findOne(userDto);\n        break;\n      case UserType.STUDENT:\n        user = await this.studentService.findOne(userDto);\n        break;\n      default:\n        user = await this.userRepository.findOne({ ...userDto });\n    }\n\n    return user!;\n  }\n\n  async mustFindSpecializedUser(userDto: UserDto): Promise {\n    const user = await this.findSpecializedUser(userDto);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/answer/answer.controller.ts\n            \n            controller\n            AnswerController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/answer/answer.service.ts\n            \n            injectable\n            AnswerService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/answer/dto/create-answer.dto.ts\n            \n            class\n            CreateAnswerDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/answer/dto/update-answer.dto.ts\n            \n            class\n            UpdateAnswerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/entities/answer-grade.entity.ts\n            \n            class\n            AnswerGrade\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/answer/entities/answer.entity.ts\n            \n            class\n            Answer\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/answer/interfaces/batch-user.interface.ts\n            \n            interface\n            BatchUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer-grade.repository.ts\n            \n            class\n            AnswerGradeRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer.repository.ts\n            \n            class\n            AnswerRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MAX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/casl/factories/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/repositories/auth.repository.ts\n            \n            class\n            AuthRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/course.entity.ts\n            \n            class\n            Course\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/grade.entity.ts\n            \n            class\n            Grade\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/period.entity.ts\n            \n            class\n            Period\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/professor.entity.ts\n            \n            class\n            Professor\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/student.entity.ts\n            \n            class\n            Student\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/subject.entity.ts\n            \n            class\n            Subject\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/grade.repository.ts\n            \n            class\n            GradeRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/period.repository.ts\n            \n            class\n            PeriodRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/professor.repository.ts\n            \n            class\n            ProfessorRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/student.repository.ts\n            \n            class\n            StudentRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/services/grade.service.ts\n            \n            injectable\n            GradeService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auxiliary/services/period.service.ts\n            \n            injectable\n            PeriodService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auxiliary/services/professor.service.ts\n            \n            injectable\n            ProfessorService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auxiliary/services/student.service.ts\n            \n            injectable\n            StudentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            function\n            origin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            allowedOrigins\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            isProd\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/firebase.config.ts\n            \n            variable\n            firebaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            configs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/interfaces/swagger.interface.ts\n            \n            interface\n            SwaggerOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/sentry.config.ts\n            \n            variable\n            sentryConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controllers/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/core.constants.ts\n            \n            variable\n            enrollmentLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/decorators/is-enrollment.decorator.ts\n            \n            function\n            IsEnrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/entities/ff.entity.ts\n            \n            class\n            FFEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/entities/timestamp.entity.ts\n            \n            class\n            TimestampEntity\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            interface\n            IClassValidatorException\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            interface\n            IException\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/interceptors/payload.interceptor.ts\n            \n            injectable\n            PayloadInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/soft-delete-result.interface.ts\n            \n            interface\n            SoftDeleteResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/utils/last.util.ts\n            \n            function\n            last\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1619445806509-Auth.ts\n            \n            class\n            Auth1619445806509\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620179231630-QuestionGroup.ts\n            \n            class\n            QuestionGroup1620179231630\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            class\n            AdminUser1620299822480\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            cpf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            enrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477175799-Auxiliary.ts\n            \n            class\n            Auxiliary1620477175799\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477869366-QuestionImage.ts\n            \n            class\n            QuestionImage1620477869366\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620478273991-Exam.ts\n            \n            class\n            Exam1620478273991\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620488935141-QuestionPosition.ts\n            \n            class\n            QuestionPosition1620488935141\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620563708532-QuestionPositionIdx.ts\n            \n            class\n            QuestionPositionIdx1620563708532\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1621036457247-ExamTitle.ts\n            \n            class\n            ExamTitle1621036457247\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1621992475274-QuestionGroupTarget.ts\n            \n            class\n            QuestionGroupTarget1621992475274\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622326106015-ExamTarget.ts\n            \n            class\n            ExamTarget1622326106015\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622326106015-ExamTarget.ts\n            \n            variable\n            targets\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1622332886234-ExamAgreement.ts\n            \n            class\n            ExamAgreement1622332886234\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts\n            \n            class\n            ExamAgreementAnonymousDefault1622334780336\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622378888497-ExamTargetAdd.ts\n            \n            class\n            ExamTargetAdd1622378888497\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622378888497-ExamTargetAdd.ts\n            \n            variable\n            addTargets\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1622417032753-ExamAgreementObservation.ts\n            \n            class\n            ExamAgreementObservation1622417032753\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622421768424-Answer.ts\n            \n            class\n            Answer1622421768424\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663574-Auxiliary.ts\n            \n            class\n            Auxiliary1624416663574\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            class\n            SeedAuxiliary1624412129413\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            interface\n            IEntity\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            variable\n            defaultName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            variable\n            student\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1624547816204-PeriodIndex.ts\n            \n            class\n            PeriodIndex1624547816204\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624560625346-GradeIndex.ts\n            \n            class\n            GradeIndex1624560625346\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam-agreement.controller.ts\n            \n            controller\n            ExamAgreementController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam-target.controller.ts\n            \n            controller\n            ExamTargetController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam.controller.ts\n            \n            controller\n            ExamController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam-agreement.dto.ts\n            \n            class\n            CreateExamAgreementDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam.dto.ts\n            \n            class\n            CreateExamDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/dtos/exam-agreement.dto.ts\n            \n            class\n            ExamAgreementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/exam-target-manager.dto.ts\n            \n            interface\n            ExamTargetManagerDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/find-exam-by-user.dto.ts\n            \n            interface\n            FindExamByUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam-agreement.dto.ts\n            \n            class\n            UpdateExamAgreementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam.dto.ts\n            \n            class\n            UpdateExamDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/entities/exam-agreement.entity.ts\n            \n            class\n            ExamAgreement\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/exam/entities/exam-target.entity.ts\n            \n            class\n            ExamTarget\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/exam/entities/exam.entity.ts\n            \n            class\n            Exam\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/exam/exam.constants.ts\n            \n            variable\n            EXAM_NOT_FOUND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/factories/exam-target-node.factory.ts\n            \n            injectable\n            ExamTargetNodeFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/factories/exam-target-node.factory.ts\n            \n            interface\n            ExamTargetNodeSchema\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/interfaces/exam-agreement-user.interface.ts\n            \n            interface\n            ExamAgreementUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/interfaces/exam-user.interface.ts\n            \n            interface\n            ExamUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/models/exam-personal-result.model.ts\n            \n            class\n            ExamPersonalResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/models/exam-target-node.model.ts\n            \n            class\n            ExamTargetNode\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/providers/exam-target-tree.provider.ts\n            \n            injectable\n            ExamTargetTree\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam-agreement.repository.ts\n            \n            class\n            ExamAgreementRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam-target.repository.ts\n            \n            class\n            ExamTargetRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam.repository.ts\n            \n            class\n            ExamRepository\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/exam/services/exam-agreement.service.ts\n            \n            injectable\n            ExamAgreementService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/exam/services/exam-target.service.ts\n            \n            injectable\n            ExamTargetService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/services/exam.service.ts\n            \n            injectable\n            ExamService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/firebase-admin.constants.ts\n            \n            variable\n            FIREBASE_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n            \n            injectable\n            FirebaseAdmin\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/firebase/firebase.constants.ts\n            \n            variable\n            FIREBASE_ADMIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseAsyncModuleOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseModuleOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n            \n            interface\n            FirebaseAuthDecodedToken\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-auth.service.ts\n            \n            injectable\n            FirebaseAuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-cloud-messaging.service.ts\n            \n            injectable\n            FirebaseCloudMessagingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-firestore.service.ts\n            \n            injectable\n            FirebaseFirestoreService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-storage.service.ts\n            \n            injectable\n            FirebaseStorageService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/controllers/upload.controller.ts\n            \n            controller\n            UploadController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/dtos/file-send.dto.ts\n            \n            interface\n            FileSendDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infra/infra.constants.ts\n            \n            variable\n            UPLOAD_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/services/firebase-uploader.service.ts\n            \n            injectable\n            FirebaseUploader\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/services/uploader.service.ts\n            \n            class\n            UploaderService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyGlobals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyPerfLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applySecurityLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            buildSwaggerDoc\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            sentryInit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            DEFAULT_PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question-group.controller.ts\n            \n            controller\n            QuestionGroupController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/question-group/dtos/copy-question-group.dto.ts\n            \n            class\n            CopyQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-question-group.dto.ts\n            \n            class\n            CreateQuestionGroupDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-question.dto.ts\n            \n            class\n            CreateQuestionDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-questions.dto.ts\n            \n            class\n            CreateQuestion\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-questions.dto.ts\n            \n            class\n            CreateQuestionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/find-personal.dto.ts\n            \n            class\n            FindPersonalDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/question-find.dto.ts\n            \n            class\n            QuestionFindDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/reorder-question-group.dto.ts\n            \n            class\n            ReorderQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/reorder-question.dto.ts\n            \n            class\n            ReorderQuestionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/update-question-group.dto.ts\n            \n            class\n            UpdateQuestionGroupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/dtos/update-question.dto.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/entities/question-group-grade.entity.ts\n            \n            class\n            QuestionGroupGrade\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/question-group/entities/question-group.entity.ts\n            \n            class\n            QuestionGroup\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/question-group/entities/question.entity.ts\n            \n            class\n            Question\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/question-group/interfaces/question-group-user.interface.ts\n            \n            interface\n            QuestionGroupUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/providers/personal-group.provider.ts\n            \n            class\n            PersonalQuestionGroup\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/question-group.constants.ts\n            \n            variable\n            questionGroupNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/question.constants.ts\n            \n            variable\n            questionNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/repositories/question-group.repository.ts\n            \n            class\n            QuestionGroupRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/repositories/question.repository.ts\n            \n            class\n            QuestionRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/services/question-group.service.ts\n            \n            injectable\n            QuestionGroupService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/question-group/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/decoratos/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/user/helpers/create-user.helper.ts\n            \n            function\n            createUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/interfaces/user-specialized-result.interface.ts\n            \n            interface\n            UserResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/repositories/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.2.2\n        \n            @nestjs/common : ^7.6.13\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.13\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.13\n        \n            @nestjs/swagger : ^4.7.15\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @sentry/node : ^6.5.1\n        \n            @sentry/tracing : ^6.5.1\n        \n            bcryptjs : ^2.4.3\n        \n            brazilian-class-validator : ^0.1.6\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            date-fns : ^2.22.1\n        \n            express-basic-auth : ^1.2.0\n        \n            express-rate-limit : ^5.2.6\n        \n            faker : ^5.5.3\n        \n            firebase-admin : ^9.7.0\n        \n            helmet : ^4.4.1\n        \n            lodash : ^4.17.21\n        \n            morgan : ^1.10.0\n        \n            mysql2 : ^2.2.5\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.31\n        \n            typeorm-naming-strategies : ^2.0.0\n        \n            typeorm-transactional-cls-hooked : ^0.1.20\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnswerType   (src/.../answer-type.enum.ts)\n                        \n                        \n                            CaslAction   (src/.../casl-action.enum.ts)\n                        \n                        \n                            ExamAgreementStatus   (src/.../exam-agreement-status.enum.ts)\n                        \n                        \n                            ExamStatus   (src/.../exam-status.enum.ts)\n                        \n                        \n                            ExamTargetType   (src/.../exam-target-type.enum.ts)\n                        \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserType   (src/.../user-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/answer/enums/answer-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AnswerType\n                    \n                \n                        \n                            \n                                 ANSWER\n                            \n                        \n                        \n                            \n                                Value : Answer\n                            \n                        \n                        \n                            \n                                 ANSWER_GRADE\n                            \n                        \n                        \n                            \n                                Value : AnswerGrade\n                            \n                        \n            \n        \n\n    src/auth/casl/enums/casl-action.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CaslAction\n                    \n                \n                        \n                            \n                                 MANAGE\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 CREATE\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 READ\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 UPDATE\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-agreement-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamAgreementStatus\n                    \n                \n                        \n                            \n                                 STARTED\n                            \n                        \n                        \n                            \n                                Value : started\n                            \n                        \n                        \n                            \n                                 FINISHED\n                            \n                        \n                        \n                            \n                                Value : finished\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-target-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamTargetType\n                    \n                \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : Student\n                            \n                        \n                        \n                            \n                                 PROFESSOR\n                            \n                        \n                        \n                            \n                                Value : Professor\n                            \n                        \n                        \n                            \n                                 COURSE\n                            \n                        \n                        \n                            \n                                Value : Course\n                            \n                        \n                        \n                            \n                                 GRADE\n                            \n                        \n                        \n                            \n                                Value : Grade\n                            \n                        \n            \n        \n\n    src/user/enum/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 MANAGER\n                            \n                        \n                        \n                            \n                                Value : manager\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 REGULAR\n                            \n                        \n                        \n                            \n                                Value : regular\n                            \n                        \n            \n        \n\n    src/user/enum/user-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserType\n                    \n                \n                        \n                            \n                                 PROFESSOR\n                            \n                        \n                        \n                            \n                                Value : Professor\n                            \n                        \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : Student\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            applyGlobals   (src/.../main.ts)\n                        \n                        \n                            applyPerfLayer   (src/.../main.ts)\n                        \n                        \n                            applySecurityLayer   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            buildSwaggerDoc   (src/.../main.ts)\n                        \n                        \n                            createUser   (src/.../create-user.helper.ts)\n                        \n                        \n                            IsEnrollment   (src/.../is-enrollment.decorator.ts)\n                        \n                        \n                            last   (src/.../last.util.ts)\n                        \n                        \n                            origin   (src/.../cors.config.ts)\n                        \n                        \n                            sentryInit   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            applyGlobals\n                        \n                        \n                    \n                \n            \n            \n                \napplyGlobals(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyPerfLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplyPerfLayer(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applySecurityLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplySecurityLayer(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildSwaggerDoc\n                        \n                        \n                    \n                \n            \n            \n                \nbuildSwaggerDoc(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sentryInit\n                        \n                        \n                    \n                \n            \n            \n                \nsentryInit(config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/user/helpers/create-user.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/decorators/is-enrollment.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            IsEnrollment\n                        \n                        \n                    \n                \n            \n            \n                \nIsEnrollment()\n                \n            \n\n\n\n\n        \n    \n    src/core/utils/last.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            last\n                        \n                        \n                    \n                \n            \n            \n                \nlast(arr)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/config/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            origin\n                        \n                        \n                    \n                \n            \n            \n                \norigin(origin, callback)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    origin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nFast Form API\nAPI para suprir a lógica de negócio do sistema Fast Form (FF)\nInstalação\nPara rodar a API localmente (em development mode) é necessário esses programas no seu computador:\n\ndocker\ndocker-compose\n\n# fullfil all needed environment variables copying .env.example to .env\n$ cp .env.example .env\n# initialize api service and its dependencies using following command\n$ sudo docker-compose up --build\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnswerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuxiliaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseAdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InfraModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionGroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_imports\n\n\n\ncluster_AnswerModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_FirebaseAdminModule\n\n\n\ncluster_FirebaseAdminModule_exports\n\n\n\ncluster_FirebaseAdminModule_providers\n\n\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_exports\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_exports\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_exports\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nExamModule->AnswerModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nExamAgreementService \n\nExamAgreementService \n\nExamAgreementService  -->\n\nExamModule->ExamAgreementService \n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\nAnswerModule -->\n\nQuestionGroupModule->AnswerModule\n\n\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionGroupModule->QuestionService \n\n\n\nAppModule -->\n\nAnswerModule->AppModule\n\n\n\n\n\nAnswerService\n\nAnswerService\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nExamModule -->\n\nAuxiliaryModule->ExamModule\n\n\n\nQuestionGroupModule -->\n\nAuxiliaryModule->QuestionGroupModule\n\n\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nGradeService \n\nGradeService \n\nGradeService  -->\n\nAuxiliaryModule->GradeService \n\n\n\n\n\nPeriodService \n\nPeriodService \n\nPeriodService  -->\n\nAuxiliaryModule->PeriodService \n\n\n\n\n\nProfessorService \n\nProfessorService \n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\n\n\nStudentService \n\nStudentService \n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nHttpExceptionFilter \n\nHttpExceptionFilter \n\nHttpExceptionFilter  -->\n\nCoreModule->HttpExceptionFilter \n\n\n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nInfraModule\n\nInfraModule\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nGradeService\n\nGradeService\n\nAuxiliaryModule -->\n\nGradeService->AuxiliaryModule\n\n\n\n\n\nPeriodService\n\nPeriodService\n\nAuxiliaryModule -->\n\nPeriodService->AuxiliaryModule\n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\nExamAgreementService\n\nExamAgreementService\n\nExamModule -->\n\nExamAgreementService->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nExamTargetNodeFactory\n\nExamTargetNodeFactory\n\nExamModule -->\n\nExamTargetNodeFactory->ExamModule\n\n\n\n\n\nExamTargetService\n\nExamTargetService\n\nExamModule -->\n\nExamTargetService->ExamModule\n\n\n\n\n\nExamTargetTree\n\nExamTargetTree\n\nExamModule -->\n\nExamTargetTree->ExamModule\n\n\n\n\n\nFirebaseAdmin \n\nFirebaseAdmin \n\n\n\nFirebaseAdminModule\n\nFirebaseAdminModule\n\nFirebaseAdmin  -->\n\nFirebaseAdminModule->FirebaseAdmin \n\n\n\n\n\nFirebaseAdmin\n\nFirebaseAdmin\n\nFirebaseAdminModule -->\n\nFirebaseAdmin->FirebaseAdminModule\n\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionGroupModule -->\n\nQuestionService->QuestionGroupModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    25 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    79 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    18 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            Callback   (src/.../cors.config.ts)\n                        \n                        \n                            CaslSubjects   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            FirebaseFirestoreCollection   (src/.../firebase-firestore-collection.type.ts)\n                        \n                        \n                            Path   (src/.../exam-target-node.model.ts)\n                        \n                        \n                            UserToFind   (src/.../user-to-find.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/casl/factories/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CaslSubjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    src/config/cors.config.ts\n    \n    \n        \n            \n                \n                    \n                    Callback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/firebase/types/firebase-firestore-collection.type.ts\n    \n    \n        \n            \n                \n                    \n                    FirebaseFirestoreCollection\n                \n            \n            \n                \n                        firebase.firestore.CollectionReference\n\n                \n            \n        \n    \n    src/exam/models/exam-target-node.model.ts\n    \n    \n        \n            \n                \n                    \n                    Path\n                \n            \n            \n                \n                        ExamTargetNode[] | undefined\n\n                \n            \n        \n    \n    src/auxiliary/types/user-to-find.type.ts\n    \n    \n        \n            \n                \n                    \n                    UserToFind\n                \n            \n            \n                \n                        Student | Professor\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addTargets   (src/.../1622378888497-ExamTargetAdd.ts)\n                        \n                        \n                            allowedOrigins   (src/.../cors.config.ts)\n                        \n                        \n                            configs   (src/.../index.ts)\n                        \n                        \n                            corsConfig   (src/.../cors.config.ts)\n                        \n                        \n                            corsConfigKey   (src/.../cors.config.ts)\n                        \n                        \n                            cpf   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            databaseConfigKey   (src/.../database.config.ts)\n                        \n                        \n                            DEFAULT_PORT   (src/.../main.ts)\n                        \n                        \n                            defaultName   (src/.../1624416663575-SeedAuxiliary1.ts)\n                        \n                        \n                            enrollment   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            enrollmentLength   (src/.../core.constants.ts)\n                        \n                        \n                            EXAM_NOT_FOUND   (src/.../exam.constants.ts)\n                        \n                        \n                            FIREBASE_ADMIN   (src/.../firebase.constants.ts)\n                        \n                        \n                            FIREBASE_OPTIONS   (src/.../firebase-admin.constants.ts)\n                        \n                        \n                            firebaseConfig   (src/.../firebase.config.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            isProd   (src/.../cors.config.ts)\n                        \n                        \n                            jwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            jwtConfigKey   (src/.../jwt.config.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            PASSWORD_MAX   (src/.../auth.constants.ts)\n                        \n                        \n                            PASSWORD_MIN   (src/.../auth.constants.ts)\n                        \n                        \n                            questionGroupNotFound   (src/.../question-group.constants.ts)\n                        \n                        \n                            questionNotFound   (src/.../question.constants.ts)\n                        \n                        \n                            rateLimitConfig   (src/.../rate-limit.config.ts)\n                        \n                        \n                            rateLimitConfigKey   (src/.../rate-limit.config.ts)\n                        \n                        \n                            sentryConfig   (src/.../sentry.config.ts)\n                        \n                        \n                            student   (src/.../1624416663575-SeedAuxiliary1.ts)\n                        \n                        \n                            swaggerConfig   (src/.../swagger.config.ts)\n                        \n                        \n                            swaggerConfigKey   (src/.../swagger.config.ts)\n                        \n                        \n                            targets   (src/.../1622326106015-ExamTarget.ts)\n                        \n                        \n                            UPLOAD_PATH   (src/.../infra.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/migrations/1622378888497-ExamTargetAdd.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            addTargets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['Course', 'Grade']\n                        \n                    \n\n\n            \n        \n\n    src/config/cors.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            allowedOrigins\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp[]\n\n                        \n                    \n                    \n                        \n                            Default value : isProd\n  ? [/^https:\\/\\/(.*\\.|)herokuapp.com/]\n  : [/^http:\\/\\/localhost:(3000|5000)$/, /^https:\\/\\/(.*\\.|)herokuapp.com/]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  corsConfigKey,\n  (): CorsOptions => ({\n    origin,\n    optionsSuccessStatus: 200,\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cors'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isProd\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.NODE_ENV === 'production'\n                        \n                    \n\n\n            \n        \n\n    src/config/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  swaggerConfig,\n  databaseConfig,\n  rateLimitConfig,\n  corsConfig,\n  jwtConfig,\n  firebaseConfig,\n  sentryConfig,\n]\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1620299822480-AdminUser.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '29997856155'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '999999'\n                        \n                    \n\n\n            \n        \n\n    src/config/database.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  databaseConfigKey,\n  (): TypeOrmModuleOptions => ({\n    type: 'mysql',\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_DATABASE,\n    port: parseInt(process.env.DB_PORT!),\n    maxQueryExecutionTime: parseInt(process.env.DB_QUERY_TIMEOUT ?? '5000'),\n    entities: [__dirname + '/../**/*.entity.{js,ts}'],\n    migrations: [__dirname + '/../database/migrations/*.{js,ts}'],\n    subscribers: [__dirname + '/../**/*.subscriber.{js,ts}'],\n    synchronize: false,\n    logging:\n      process.env.DB_LOGGING === 'true' ||\n      process.env.NODE_ENV === 'development',\n    cli: {\n      migrationsDir: 'src/database/migrations',\n    },\n    namingStrategy: new SnakeNamingStrategy(),\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'database'\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_PORT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3000\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('bootstrap')\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1624416663575-SeedAuxiliary1.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Gerado'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            student\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  cpf: '50172241065',\n  enrollment: '989898',\n}\n                        \n                    \n\n\n            \n        \n\n    src/core/core.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            enrollmentLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : [1, 9]\n                        \n                    \n\n\n            \n        \n\n    src/exam/exam.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EXAM_NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam not found'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_ADMIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_ADMIN'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase-admin/firebase-admin.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_OPTIONS'\n                        \n                    \n\n\n            \n        \n\n    src/config/firebase.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            firebaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  'firebase',\n  (): FirebaseModuleOptions => {\n    if (!process.env.FIREBASE_ADMIN) {\n      throw new Error(\n        'Needs FIREBASE_ADMIN env (JSON Service Account as string)',\n      );\n    }\n\n    if (!process.env.FIREBASE_BUCKET) {\n      throw new Error('Needs FIREBASE_BUCKET env var');\n    }\n\n    return {\n      cert: JSON.parse(process.env.FIREBASE_ADMIN),\n      storageBucket: process.env.FIREBASE_BUCKET,\n    };\n    //return JSON.parse(process.env.FIREBASE_ADMIN);\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/user/decoratos/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/config/jwt.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  jwtConfigKey,\n  (): JwtModuleOptions => ({\n    secret: process.env.JWT_SECRET,\n    signOptions: { issuer: 'ff.uneb.br', expiresIn: '10h' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'jwt'\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MAX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 100\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 6\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question-group.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionGroupNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup not found'\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Question not found'\n                        \n                    \n\n\n            \n        \n\n    src/config/rate-limit.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(rateLimitConfigKey, () => ({\n  timeWindow: parseInt(process.env.RATE_LIMIT_WINDOW_MS ?? '60000'),\n  max: parseInt(process.env.RATE_LIMIT_MAX ?? '20'),\n}))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'rateLimit'\n                        \n                    \n\n\n            \n        \n\n    src/config/sentry.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sentryConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs('sentry', () => ({\n  dsn: process.env.SENTRY_DSN,\n}))\n                        \n                    \n\n\n            \n        \n\n    src/config/swagger.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  swaggerConfigKey,\n  (): SwaggerOptions => ({\n    title: 'Fast Form',\n    description: 'Fast Form API',\n    version: 'v0.0.1',\n    users: { ff: 'senhaforte' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'swagger'\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1622326106015-ExamTarget.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\"Student\", \"Professor\"]\n                        \n                    \n\n\n            \n        \n\n    src/infra/infra.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UPLOAD_PATH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/questions'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
