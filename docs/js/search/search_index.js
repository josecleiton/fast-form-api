var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUser1620299822480.html",[0,0.234,1,3.945]],["body/classes/AdminUser1620299822480.html",[0,0.216,1,5.117,2,0.628,3,0.052,4,0.052,5,0.046,6,5.918,7,3.638,8,2.128,9,2.804,10,0.209,11,1.038,12,3.261,13,1.973,14,2.473,15,2.424,16,2.424,17,3.476,18,0.539,19,4.425,20,1.123,21,0.006,22,1.005,23,0.351,24,0.681,25,1.022,26,1.595,27,2.424,28,4.425,29,0.17,30,0.863,31,3.405,32,3.951,33,2.717,34,5.187,35,3.951,36,4.767,37,3.951,38,0.052,39,0.004,40,1.825,41,1.039,42,1.758,43,2.572,44,7.81,45,3.063,46,2.408,47,4.425,48,4.425,49,2.256,50,1.794,51,4.425,52,3.638,53,3.951,54,3.951,55,5.407,56,3.405,57,4.121,58,3.638,59,5.117,60,3.015,61,3.454,62,4.526,63,2.814,64,2.533,65,4.425,66,1.831,67,0.004,68,0.003]],["title/classes/Answer.html",[0,0.234,69,2.514]],["body/classes/Answer.html",[0,0.203,2,0.59,3,0.048,4,0.048,5,0.043,10,0.196,18,0.788,21,0.006,22,0.671,23,0.473,24,0.651,29,0.22,30,0.81,38,0.048,39,0.002,40,1.746,41,2.021,67,0.004,68,0.002,69,3.118,70,3.709,71,1.662,72,3.505,73,0.738,74,4.39,75,6.207,76,3.49,77,5.716,78,5.028,79,2.748,80,2.813,81,2.813,82,2.103,83,3.646,84,4.155,85,3.771,86,3.277,87,4.155,88,4.155,89,4.155,90,3.646,91,3.521,92,2.149,93,4.155,94,6.081,95,4.153,96,4.155,97,2.013,98,3.505,99,2.064,100,2.763,101,1.964,102,3.137,103,2.013,104,1.964,105,2.013,106,1.964,107,2.013,108,2.876,109,2.642,110,1.528,111,3.709,112,3.709,113,3.533,114,2.306,115,4.422,116,5.313,117,2.751,118,3.416,119,1.918,120,4.155,121,4.155,122,1.651,123,3.197,124,2.876,125,3.197]],["title/classes/Answer1622421768424.html",[0,0.234,126,3.945]],["body/classes/Answer1622421768424.html",[0,0.203,2,0.59,3,0.048,4,0.048,5,0.043,8,2.035,9,2.709,10,0.329,11,0.992,12,3.194,13,1.933,14,2.364,15,2.318,16,2.318,17,3.425,18,0.602,20,1.074,21,0.006,22,1.298,23,0.392,24,0.651,25,0.977,26,1.551,27,2.318,29,0.114,30,0.81,38,0.048,39,0.002,40,1.746,43,2.63,66,2.877,67,0.004,68,0.002,69,4.766,73,0.738,78,2.751,86,3.469,95,2.064,122,3.562,126,6.242,127,6.778,128,3.709,129,0.704,130,2.218,131,1.557,132,4.155,133,4.155,134,4.155,135,2.876,136,3.721,137,2.751,138,4.604,139,4.604,140,2.751,141,3.426,142,2.751,143,2.751,144,2.751,145,5.313,146,4.893,147,4.579,148,5.951,149,2.751,150,4.929,151,2.751,152,5.122,153,3.454,154,4.259,155,5.951,156,5.122,157,4.259,158,4.155,159,4.946,160,5.951,161,4.155,162,5.951,163,3.709,164,3.368,165,4.12]],["title/controllers/AnswerController.html",[166,2.027,167,3.692]],["body/controllers/AnswerController.html",[0,0.206,3,0.049,4,0.049,5,0.044,10,0.199,11,1.002,13,2.079,18,0.606,20,1.263,21,0.006,22,1.131,23,0.372,24,0.766,25,1.149,26,1.227,29,0.246,38,0.049,39,0.003,40,2.24,41,2.111,42,1.672,46,2.159,66,1.741,67,0.004,68,0.003,69,3.146,82,1.619,166,1.778,167,4.621,168,1.899,169,3.757,170,2.489,171,3.31,172,3.819,173,7.002,174,4.208,175,4.238,176,6.251,177,5.812,178,4.208,179,4.208,180,3.31,181,2.676,182,4.621,183,4.208,184,4.208,185,6.427,186,4.621,187,4.208,188,2.489,189,3.553,190,3.06,191,6.005,192,2.913,193,5.554,194,2.578,195,0.9,196,4.157,197,4.157,198,2.489,199,1.943,200,2.204,201,2.913,202,3.238,203,2.489,204,3.679,205,2.787,206,2.913,207,4.847,208,3.757,209,3.757,210,4.937,211,3.757,212,3.46,213,4.208,214,4.208,215,2.578,216,2.204,217,1.255,218,4.208,219,3.757,220,4.208,221,4.208,222,1.864,223,4.208,224,2.578,225,2.787,226,3.238,227,4.208,228,3.238,229,4.208]],["title/classes/AnswerGrade.html",[0,0.234,144,3.177]],["body/classes/AnswerGrade.html",[0,0.213,2,0.62,3,0.051,4,0.051,5,0.045,10,0.206,18,0.813,21,0.006,23,0.468,24,0.674,29,0.195,30,0.851,38,0.051,39,0.003,40,1.808,41,1.995,67,0.004,68,0.003,69,4.752,71,1.722,72,2.016,73,0.764,74,3.644,75,5.504,76,2.897,77,5.069,78,4.083,79,2.846,80,2.914,81,2.914,82,2.17,83,4.378,85,4.068,86,3.352,90,2.675,91,2.583,92,1.576,94,4.484,95,3.062,97,2.115,98,4.245,99,2.169,100,2.839,101,2.064,102,3.224,103,2.115,104,2.064,105,2.115,106,2.064,107,2.115,113,2.605,115,3.921,144,4.083,230,5.875,231,3.898,232,3.941,233,6.38,234,4.366,235,4.366,236,4.366,237,4.366,238,4.366,239,4.366,240,4.366,241,4.366,242,3.898,243,5.069,244,4.366]],["title/classes/AnswerGradeRepository.html",[0,0.234,245,3.49]],["body/classes/AnswerGradeRepository.html",[0,0.337,2,0.98,3,0.08,4,0.08,5,0.072,21,0.006,29,0.244,30,1.624,38,0.08,39,0.004,67,0.005,68,0.004,71,2.326,144,4.573,245,6.056,246,6.165,247,6.165,248,4.817,249,3.721,250,2.918,251,2.918,252,2.918,253,6.906,254,5.023,255,6.906]],["title/modules/AnswerModule.html",[256,1.701,257,3.49]],["body/modules/AnswerModule.html",[0,0.269,3,0.064,4,0.064,5,0.057,21,0.006,29,0.258,38,0.064,39,0.003,67,0.004,68,0.003,110,2.028,167,6.203,168,3.261,195,1.18,207,6.31,208,4.923,245,5.257,256,2.858,257,6.994,258,2.671,259,2.607,260,2.812,261,2.812,262,2.671,263,4.111,264,2.739,265,4.923,266,4.923,267,4.923,268,6.036,269,6.31,270,3.685,271,2.812,272,2.812,273,5.514,274,4.011,275,5.514,276,3.507,277,2.33,278,4.011,279,4.923,280,4.923,281,4.923,282,4.011,283,4.923,284,5.514,285,5.514]],["title/classes/AnswerRepository.html",[0,0.234,278,3.49]],["body/classes/AnswerRepository.html",[0,0.34,2,0.987,3,0.081,4,0.081,5,0.072,21,0.006,29,0.245,30,1.63,38,0.081,39,0.004,67,0.005,68,0.004,69,3.643,71,2.336,212,5.718,248,4.832,249,3.748,250,2.939,251,2.939,252,2.939,278,6.082,286,6.209,287,6.954]],["title/classes/AnswerScoreCheck1624750140568.html",[0,0.234,288,3.945]],["body/classes/AnswerScoreCheck1624750140568.html",[0,0.248,2,0.722,3,0.059,4,0.059,5,0.053,8,2.343,9,3.017,10,0.241,11,1.143,12,3.404,13,2.059,14,2.722,15,2.669,16,2.669,17,3.583,18,0.671,20,1.236,21,0.006,22,1.397,23,0.378,24,0.749,25,1.125,26,1.692,27,2.669,29,0.139,30,0.992,38,0.059,39,0.003,43,2.431,67,0.004,68,0.003,69,4.341,73,0.849,78,5.899,86,2.196,90,3.117,112,4.542,113,2.895,122,3.077,123,3.915,124,3.522,125,3.915,129,0.862,130,1.623,131,1.907,136,3.501,153,3.403,164,3.318,288,6.813,289,7.398,290,4.542,291,5.087,292,5.087,293,5.087,294,5.959,295,2.464,296,2.913]],["title/injectables/AnswerService.html",[207,3.322,297,1.011]],["body/injectables/AnswerService.html",[0,0.15,3,0.036,4,0.036,5,0.032,10,0.145,11,0.793,13,2.018,18,0.647,20,1.276,21,0.006,22,1.143,23,0.345,24,0.774,25,1.161,26,1.645,29,0.245,30,0.599,33,2.574,38,0.036,39,0.002,40,2.193,41,1.941,43,2.363,46,1.792,49,2.963,50,2.651,66,1.272,67,0.003,68,0.002,69,3.917,74,2.963,76,2.356,82,1.343,94,2.235,110,1.748,111,2.743,118,2.526,119,1.419,141,2.144,172,3.023,176,4.243,177,4.528,181,3.023,185,5.859,195,0.657,203,1.818,207,3.29,209,2.743,210,3.908,211,2.743,212,2.526,217,1.95,222,1.991,245,5.671,250,3.404,251,1.298,252,1.298,277,1.298,278,5.439,279,2.743,280,2.743,281,2.743,297,1.001,298,1.089,299,2.743,300,5.812,301,4.331,302,2.812,303,1.851,304,3.073,305,4.959,306,5.163,307,3.073,308,3.073,309,5.032,310,3.073,311,3.073,312,3.147,313,3.073,314,3.073,315,3.147,316,3.073,317,3.56,318,1.656,319,3.147,320,2.127,321,2.235,322,2.364,323,2.526,324,3.073,325,3.073,326,3.073,327,2.319,328,3.073,329,3.073,330,1.954,331,3.073,332,3.073,333,3.073,334,3.073,335,2.127,336,2.035,337,2.743,338,3.073,339,3.073,340,3.908,341,2.526,342,3.073,343,4.753,344,3.073,345,3.073,346,2.526,347,2.364,348,3.073,349,2.743,350,3.073,351,3.073,352,3.073,353,3.073,354,3.073,355,3.073,356,3.073,357,2.364,358,3.073,359,3.073,360,3.073,361,3.073,362,3.073]],["title/controllers/AppController.html",[166,2.027,363,3.692]],["body/controllers/AppController.html",[0,0.312,3,0.074,4,0.074,5,0.066,10,0.302,11,1.324,18,0.688,21,0.006,25,1.304,29,0.175,38,0.074,39,0.004,67,0.005,68,0.004,82,1.835,129,1.464,166,3.355,168,2.884,188,3.781,195,1.367,222,2.114,363,6.11,364,5.705,365,9.036,366,9.036,367,7.941,368,6.391,369,6.391,370,6.391,371,6.391,372,6.391,373,6.391,374,6.391,375,6.391]],["title/modules/AppModule.html",[256,1.701,376,3.692]],["body/modules/AppModule.html",[0,0.21,3,0.05,4,0.05,5,0.045,21,0.006,29,0.261,38,0.05,39,0.003,67,0.004,68,0.003,76,1.739,168,2.747,195,0.918,256,2.509,257,6.146,258,2.078,259,2.028,260,2.188,261,2.188,262,2.078,263,2.188,264,2.131,268,5.596,269,5.85,270,3.105,271,2.188,272,2.188,274,3.928,276,2.728,277,1.813,282,3.12,283,3.83,363,5.446,376,7.608,377,3.83,378,3.83,379,5.85,380,5.374,381,6.146,382,6.146,383,5.596,384,6.146,385,5.85,386,4.29,387,4.685,388,4.899,389,2.538,390,5.006,391,3.527,392,3.301,393,4.29,394,3.83,395,3.83,396,3.83,397,4.29,398,4.29,399,4.29,400,4.29,401,4.29,402,4.29,403,4.29,404,4.29,405,4.29,406,2.97,407,4.29,408,2.456]],["title/classes/Auth.html",[0,0.234,60,2.324]],["body/classes/Auth.html",[0,0.251,2,0.73,3,0.06,4,0.06,5,0.053,10,0.243,18,0.79,21,0.006,23,0.463,29,0.189,30,1.002,38,0.06,39,0.003,40,2.023,41,1.207,55,5.39,57,4.458,60,3.342,61,4.321,67,0.004,68,0.003,71,1.927,72,3.842,73,0.855,79,3.185,80,3.261,81,3.261,82,2.11,85,3.868,92,2.491,97,2.49,98,3.842,99,2.554,100,3.094,101,2.43,102,3.513,103,2.49,104,2.43,105,2.49,106,2.43,107,2.49,113,3.516,114,2.853,129,1.514,409,4.589,410,5.286,411,3.717,412,5.141,413,5.141,414,5.141,415,3.739,416,5.141]],["title/classes/Auth1619445806509.html",[0,0.234,417,3.945]],["body/classes/Auth1619445806509.html",[0,0.199,2,0.579,3,0.047,4,0.047,5,0.042,8,2.008,9,2.68,10,0.422,11,0.979,12,3.174,13,1.92,14,2.333,15,2.287,16,2.287,17,3.41,18,0.596,20,1.059,21,0.006,22,1.289,23,0.389,24,0.642,25,0.964,26,1.537,27,2.287,29,0.111,30,0.795,34,3.473,36,3.076,38,0.047,39,0.002,40,2.208,43,2.57,46,2.459,55,2.823,57,2.334,60,3.333,61,3.259,63,2.593,64,2.334,67,0.004,68,0.002,73,0.728,86,2.534,95,2.025,122,3.77,129,0.691,130,2.65,131,1.528,136,3.18,137,3.888,138,5.502,139,5.502,140,3.888,141,2.649,142,3.888,143,3.888,149,3.888,150,3.361,151,3.888,164,3.646,171,2.776,295,4.024,411,3.707,417,6.188,418,6.72,419,3.64,420,4.077,421,4.077,422,4.077,423,5.089,424,5.871,425,3.137,426,5.242,427,5.871,428,5.871,429,5.242,430,4.517]],["title/controllers/AuthController.html",[166,2.027,431,3.692]],["body/controllers/AuthController.html",[0,0.298,3,0.071,4,0.071,5,0.063,10,0.288,11,1.286,18,0.528,20,1.099,21,0.006,22,0.985,23,0.297,24,0.667,25,1,26,1.574,29,0.243,38,0.071,39,0.004,60,2.952,61,4.278,67,0.005,68,0.004,82,1.409,166,2.575,168,2.75,170,3.605,188,5.001,189,3.605,195,1.304,198,3.605,199,2.814,216,3.193,217,1.817,222,1.622,431,5.931,432,5.441,433,5.441,434,6.479,435,6.094,436,5.376,437,4.689,438,5.441,439,6.094,440,6.094,441,6.094,442,6.094]],["title/classes/AuthDto.html",[0,0.234,443,3.322]],["body/classes/AuthDto.html",[0,0.407,2,0.98,3,0.08,4,0.08,5,0.072,10,0.326,18,0.598,21,0.006,23,0.337,29,0.189,38,0.08,39,0.004,61,4.962,67,0.005,68,0.004,73,1.032,82,1.596,129,1.411,443,5.764,444,6.165,445,4.573,446,6.906,447,5.514,448,5.295,449,3.116]],["title/modules/AuthModule.html",[256,1.701,379,3.322]],["body/modules/AuthModule.html",[0,0.224,3,0.053,4,0.053,5,0.048,21,0.006,29,0.259,38,0.053,39,0.003,67,0.004,68,0.003,168,2.881,195,0.982,200,4.961,256,2.603,258,2.223,259,2.17,260,2.34,261,2.34,262,2.223,263,3.743,264,3.647,270,3.255,271,2.34,272,2.34,274,4.075,276,2.919,277,1.939,379,6.747,385,5.978,387,5.649,388,5.047,389,2.715,392,3.532,395,4.098,406,3.177,408,2.628,431,5.649,436,6.023,437,3.532,450,4.098,451,4.098,452,4.098,453,4.098,454,6.888,455,6.281,456,4.59,457,4.59,458,3.532,459,3.532,460,4.59,461,3.338,462,4.098,463,4.59,464,4.59,465,4.59,466,4.59,467,4.59,468,4.59]],["title/classes/AuthRepository.html",[0,0.234,461,3.49]],["body/classes/AuthRepository.html",[0,0.34,2,0.987,3,0.081,4,0.081,5,0.072,21,0.006,29,0.245,30,1.63,38,0.081,39,0.004,60,3.369,67,0.005,68,0.004,71,2.336,248,4.832,249,3.748,250,2.939,251,2.939,252,2.939,461,6.082,469,6.209,470,6.209,471,6.954]],["title/injectables/AuthService.html",[297,1.011,436,3.051]],["body/injectables/AuthService.html",[0,0.179,3,0.043,4,0.043,5,0.038,10,0.173,11,0.905,13,2.008,18,0.661,20,1.378,21,0.006,22,1.234,23,0.39,24,0.835,25,1.174,26,1.737,29,0.245,30,0.714,31,2.817,33,2.733,36,1.918,38,0.043,39,0.002,43,2.494,46,1.129,49,2.767,50,2.2,55,4.476,56,2.817,57,3.107,60,3.699,61,3.969,67,0.003,68,0.002,82,0.846,195,0.783,217,1.928,222,1.721,250,3.022,251,1.547,252,1.547,277,1.547,297,1.143,298,1.298,303,2.114,317,2.243,318,1.973,327,2.292,408,2.096,433,4.845,434,5.287,436,3.451,438,3.268,443,6.117,458,2.817,461,5.818,462,3.268,470,3.268,472,3.268,473,5.426,474,5.426,475,5.426,476,3.661,477,8.279,478,5.407,479,3.661,480,5.426,481,5.554,482,3.661,483,5.426,484,3.661,485,3.661,486,5.426,487,3.661,488,2.817,489,3.01,490,3.01,491,3.268,492,2.096,493,3.01,494,3.661,495,3.661,496,3.01,497,3.661,498,3.661,499,3.661,500,3.661,501,3.661,502,5.426,503,3.661,504,3.661,505,3.661,506,3.661,507,3.661,508,5.426,509,3.661,510,2.817,511,3.661,512,3.661,513,3.661,514,3.661,515,3.661]],["title/classes/Auxiliary1620477175799.html",[0,0.234,516,3.945]],["body/classes/Auxiliary1620477175799.html",[0,0.279,2,0.287,3,0.024,4,0.024,5,0.021,8,1.161,9,1.707,10,0.31,11,0.566,12,2.361,13,1.429,14,1.349,15,1.322,16,1.322,17,2.736,18,0.379,20,0.612,21,0.006,22,0.999,23,0.214,24,0.371,25,0.557,26,1.047,27,1.322,29,0.055,30,0.395,38,0.024,39,0.001,40,2.281,43,2.803,66,2.717,67,0.002,68,0.001,73,0.421,76,2.506,86,3.54,90,3.499,95,1.006,113,3.025,122,3.85,129,0.343,130,2.651,131,0.759,136,4.011,137,4.093,138,5.635,139,5.635,140,4.093,141,3.58,142,4.093,143,4.093,149,4.093,150,4.965,151,4.093,153,3.557,154,4.022,156,4.946,157,4.022,159,4.777,164,4.163,171,2.922,232,2.789,294,5.052,295,4.475,296,5.044,411,2.361,423,3.786,430,4.395,516,4.216,517,4.578,518,1.665,519,1.808,520,2.025,521,1.808,522,2.938,523,3.034,524,2.469,525,2.469,526,3.55,527,3.372,528,3.03,529,2.296,530,2.159,531,1.665,532,1.808,533,4.154,534,1.731,535,1.808,536,2.592,537,3.261,538,1.644,539,3.394,540,3.078,541,1.808,542,2.612,543,3.394,544,2.612,545,2.684,546,2.469,547,1.288,548,1.473,549,3.03,550,4.38,551,2.008,552,2.902,553,3.946,554,2.936,555,4.278,556,2.612,557,3.394,558,1.558,559,3.03,560,2.791,561,3.03,562,1.808,563,3.03,564,1.808,565,3.03]],["title/classes/Auxiliary1624416663574.html",[0,0.234,566,3.945]],["body/classes/Auxiliary1624416663574.html",[0,0.186,2,0.33,3,0.027,4,0.027,5,0.024,8,1.303,9,1.884,10,0.376,11,0.636,12,2.529,13,1.53,14,1.514,15,1.485,16,1.485,17,2.883,18,0.419,20,0.688,21,0.005,22,0.996,23,0.236,24,0.417,25,0.626,26,1.142,27,1.485,29,0.064,30,0.454,38,0.027,39,0.001,40,1.118,43,2.853,66,3.29,67,0.002,68,0.001,73,0.472,86,3.62,90,2.335,95,1.157,113,1.61,122,3.615,129,0.395,130,2.229,131,0.873,135,3.349,136,4.073,137,1.542,138,3.203,139,3.203,140,1.542,141,3.662,142,1.542,143,1.542,147,5.61,149,3.203,150,5.264,151,3.203,152,5.823,153,4.103,154,4.871,156,5.54,157,4.871,159,5.192,163,3.402,164,4.001,165,5.048,232,3.662,423,1.427,518,1.915,519,2.079,521,2.079,525,2.772,526,2.638,529,2.534,530,2.424,533,4.815,534,1.943,535,3.402,538,1.128,540,3.929,541,3.402,542,5.093,544,5.093,545,2.335,548,5.303,551,1.378,552,2.524,554,4.175,558,1.792,560,3.133,561,4.99,562,3.402,563,4.99,564,3.402,565,4.99,566,4.596,567,4.99,568,2.329,569,5.504,570,2.335,571,3.133,572,6.51,573,3.811,574,3.811,575,5.61,576,3.811,577,3.811,578,3.133,579,2.079,580,3.811,581,3.811,582,3.402,583,4.99,584,3.811,585,3.811,586,3.811]],["title/modules/AuxiliaryModule.html",[256,1.701,380,3.051]],["body/modules/AuxiliaryModule.html",[0,0.237,3,0.057,4,0.057,5,0.051,21,0.006,29,0.257,38,0.057,39,0.003,67,0.004,68,0.003,195,1.04,256,2.682,258,2.355,259,2.298,260,2.479,261,2.479,262,2.355,263,3.858,264,3.759,270,3.387,271,2.479,272,2.479,274,2.698,276,3.092,277,2.054,380,6.218,587,4.34,588,4.34,589,4.34,590,6.619,591,6.619,592,6.619,593,6.619,594,4.862,595,4.831,596,4.34,597,4.831,598,4.34,599,4.831,600,4.34,601,4.831,602,4.34,603,4.862,604,4.862,605,4.862,606,4.862,607,3.997]],["title/interfaces/BatchUser.html",[309,3.692,608,1.298]],["body/interfaces/BatchUser.html",[3,0.081,4,0.081,5,0.072,10,0.329,21,0.006,23,0.408,38,0.081,39,0.004,41,2.269,67,0.005,68,0.004,73,1.036,180,4.398,224,5.699,309,6.434,608,1.881,609,2.819,610,6.209,611,5.058]],["title/injectables/CaslAbilityFactory.html",[297,1.011,612,3.49]],["body/injectables/CaslAbilityFactory.html",[0,0.222,3,0.053,4,0.053,5,0.047,10,0.214,11,1.056,18,0.393,20,0.819,21,0.006,22,0.733,23,0.356,24,0.496,25,0.745,29,0.25,33,2.091,38,0.053,39,0.003,40,1.331,42,2.516,46,2.777,50,1.839,67,0.004,68,0.003,69,4.351,74,4.387,109,2.885,110,1.669,130,1.447,159,2.684,195,0.971,222,1.208,224,3.88,225,4.832,232,2.047,297,1.334,298,1.608,522,1.803,546,3.3,612,4.606,613,5.207,614,3.73,615,6.333,616,6.333,617,4.537,618,6.514,619,6.333,620,6.333,621,6.333,622,5.654,623,4.051,624,4.537,625,4.537,626,4.537,627,3.73,628,4.051,629,4.537,630,4.537,631,3.413,632,3.3,633,2.78,634,3.141,635,4.051,636,3.73,637,4.051,638,4.051,639,5.654,640,4.051,641,4.537,642,5.654,643,4.537,644,8.306,645,5.654,646,4.537,647,7.296,648,4.537,649,4.537,650,4.051,651,7.296,652,4.537,653,4.537,654,4.537]],["title/modules/CaslModule.html",[256,1.701,454,3.49]],["body/modules/CaslModule.html",[0,0.311,3,0.074,4,0.074,5,0.066,21,0.006,29,0.217,38,0.074,39,0.004,67,0.005,68,0.004,195,1.363,256,3.058,258,3.086,259,3.011,260,3.248,261,3.248,262,3.086,263,4.398,264,4.285,270,4.041,271,3.248,272,3.248,454,6.981,612,7.235,655,5.687,656,5.687,657,5.687,658,6.37,659,6.37,660,6.37]],["title/classes/CopyQuestionGroupDto.html",[0,0.234,661,3.49]],["body/classes/CopyQuestionGroupDto.html",[0,0.39,2,0.916,3,0.075,4,0.075,5,0.067,10,0.305,18,0.692,21,0.006,23,0.39,29,0.176,38,0.075,39,0.004,41,2.129,67,0.005,68,0.004,73,0.99,76,3.518,82,1.847,110,3.192,180,4.102,449,2.912,661,5.81,662,7.747,663,4.694,664,5.316,665,5.172,666,6.453,667,5.762]],["title/modules/CoreModule.html",[256,1.701,381,3.49]],["body/modules/CoreModule.html",[0,0.29,3,0.069,4,0.069,5,0.062,21,0.006,29,0.24,38,0.069,39,0.004,67,0.005,68,0.004,195,1.269,256,2.959,258,2.872,259,2.803,260,3.023,261,3.023,262,2.872,263,4.256,264,4.146,270,3.862,271,3.023,272,3.023,274,3.291,381,6.957,387,5.828,389,3.508,668,5.294,669,5.294,670,5.294,671,6.334,672,7.166,673,5.929,674,6.228,675,5.929,676,5.929,677,5.929]],["title/classes/Course.html",[0,0.234,536,2.839]],["body/classes/Course.html",[0,0.246,2,0.715,3,0.059,4,0.059,5,0.052,10,0.238,18,0.786,21,0.006,23,0.456,29,0.211,30,0.982,38,0.059,39,0.003,40,1.996,41,1.182,42,2.001,67,0.004,68,0.003,71,1.9,72,3.81,73,0.843,79,3.141,80,3.216,81,3.216,82,2.099,85,3.38,92,2.456,97,2.439,98,3.81,99,2.501,100,3.061,101,2.381,102,3.476,103,2.439,104,2.381,105,2.439,106,2.381,107,2.439,113,3.256,114,2.795,117,3.335,129,1.398,410,4.882,411,3.666,536,4.025,537,4.9,538,3.732,540,4.644,678,4.496,679,7.705,680,5.035,681,2.883,682,5.035,683,5.035,684,4.327,685,4.496,686,5.035,687,5.035]],["title/classes/CreateAnswerDto.html",[0,0.234,177,3.322]],["body/classes/CreateAnswerDto.html",[0,0.353,2,0.783,3,0.064,4,0.064,5,0.057,10,0.261,18,0.741,21,0.006,23,0.453,24,0.936,29,0.198,38,0.064,39,0.003,41,2.14,67,0.004,68,0.003,73,0.896,77,6.628,78,5.339,82,1.978,94,5.864,118,4.534,119,2.546,130,1.759,131,2.067,177,5.581,233,7.198,349,4.923,449,2.488,665,4.749,688,7.93,689,4.534,690,5.514,691,5.514,692,5.514,693,5.514,694,5.514,695,7.227,696,5.514,697,5.514,698,4.534,699,4.475,700,4.534,701,5.514,702,5.514,703,5.514,704,5.514,705,5.514,706,5.514,707,5.514]],["title/classes/CreateAuthDto.html",[0,0.234,481,3.49]],["body/classes/CreateAuthDto.html",[0,0.323,2,0.937,3,0.077,4,0.077,5,0.069,10,0.312,18,0.702,21,0.006,23,0.395,29,0.181,38,0.077,39,0.004,57,4.64,61,4.498,67,0.005,68,0.004,71,2.264,73,1.004,82,1.873,98,3.742,129,1.373,434,6.328,443,4.572,445,4.374,481,5.894,708,5.897,709,5.897,710,5.897,711,5.082,712,6.605,713,5.897,714,6.605]],["title/classes/CreateExamAgreementDto.html",[0,0.234,715,3.49]],["body/classes/CreateExamAgreementDto.html",[0,0.417,2,0.884,3,0.073,4,0.073,5,0.065,10,0.294,18,0.539,21,0.006,23,0.417,24,0.855,29,0.245,38,0.073,39,0.004,67,0.005,68,0.004,71,1.74,73,0.969,82,1.44,199,2.876,224,3.816,449,2.811,522,3.393,547,5.431,699,4.337,715,5.684,716,6.425,717,4.531,718,4.137,719,5.561,720,6.229,721,5.121,722,3.961,723,5.41,724,4.793,725,5.121,726,6.229]],["title/classes/CreateExamDto.html",[0,0.234,727,3.322]],["body/classes/CreateExamDto.html",[0,0.375,2,0.711,3,0.058,4,0.058,5,0.052,10,0.237,18,0.768,21,0.006,23,0.456,24,0.901,29,0.21,38,0.058,39,0.003,67,0.004,68,0.003,73,0.84,82,2.05,92,2.448,100,3.524,119,2.313,129,1.395,445,4.49,447,5.089,448,4.887,449,2.261,524,5.589,538,3.723,698,4.119,699,4.265,716,7.455,718,3.284,722,3.186,723,4.693,727,4.693,728,4.119,729,6.861,730,5.913,731,5.913,732,4.546,733,4.473,734,5.01,735,5.01,736,6.78,737,5.01,738,5.01,739,4.4,740,5.01,741,5.217,742,5.01,743,5.01,744,4.931,745,7.685,746,2.554,747,2.368,748,5.01]],["title/classes/CreateQuestion.html",[0,0.234,749,3.322]],["body/classes/CreateQuestion.html",[0,0.429,2,0.836,3,0.069,4,0.069,5,0.061,10,0.279,18,0.51,21,0.006,23,0.406,24,0.825,29,0.24,38,0.069,39,0.004,40,2.441,41,1.771,67,0.005,68,0.004,71,1.646,73,0.935,82,1.362,92,2.724,110,2.775,171,2.786,199,2.721,330,3.748,449,2.659,664,3.611,665,4.188,699,4.188,721,4.846,722,3.748,741,5.806,744,5.488,749,6.075,750,5.488,751,4.846,752,5.262,753,5.894,754,5.262,755,6.736,756,6.736,757,3.748,758,4.287,759,5.262,760,4.08,761,5.262]],["title/classes/CreateQuestionDto.html",[0,0.234,757,3.051]],["body/classes/CreateQuestionDto.html",[0,0.324,2,0.69,3,0.057,4,0.057,5,0.051,10,0.23,18,0.737,21,0.006,23,0.429,24,0.962,29,0.182,38,0.057,39,0.003,41,1.56,67,0.004,68,0.003,73,0.823,82,1.968,110,3.233,129,1.489,199,2.245,445,3.22,447,5.011,448,4.812,449,2.194,538,3.218,664,4.636,665,4.2,699,4.514,718,3.939,723,4.598,750,6.393,757,4.225,762,3.741,763,6.755,764,6.755,765,6.221,766,6.221,767,4.862,768,4.34,769,4.862,770,4.862,771,4.862,772,4.862,773,5.461,774,6.643,775,7.26,776,6.643,777,6.643,778,5.931,779,6.643,780,6.643,781,6.643,782,6.643,783,6.643,784,6.643,785,4.862,786,4.862,787,4.862,788,6.643,789,6.643,790,4.862]],["title/classes/CreateQuestionGroupDto.html",[0,0.234,791,3.322]],["body/classes/CreateQuestionGroupDto.html",[0,0.436,2,0.796,3,0.065,4,0.065,5,0.058,10,0.265,18,0.746,21,0.006,23,0.42,24,1.002,29,0.153,38,0.065,39,0.003,41,1.716,67,0.004,68,0.003,73,0.906,76,3.621,82,1.991,110,3.285,129,1.238,180,3.843,445,3.714,447,4.839,448,4.647,449,2.531,538,3.938,551,4.809,663,4.079,665,4.056,699,4.78,718,4.172,723,5.627,733,6.524,750,6.496,752,5.007,791,5.059,792,5.609,793,5.609,794,5.609,795,5.609]],["title/classes/CreateQuestionsDto.html",[0,0.234,760,3.322]],["body/classes/CreateQuestionsDto.html",[0,0.429,2,0.836,3,0.069,4,0.069,5,0.061,10,0.279,18,0.51,21,0.006,23,0.406,29,0.24,38,0.069,39,0.004,40,1.729,41,1.384,67,0.005,68,0.004,71,1.646,73,0.935,82,1.362,92,2.724,110,2.775,171,2.786,199,2.721,330,5.293,449,2.659,664,3.611,665,4.188,699,4.188,721,4.846,722,3.748,741,5.806,744,5.488,749,6.075,750,5.488,751,4.846,754,5.262,755,6.736,756,6.736,757,3.748,758,4.287,759,5.262,760,5.223,761,5.262,796,5.894,797,5.894,798,5.894,799,5.894]],["title/classes/CreateUserDto.html",[0,0.234,800,3.051]],["body/classes/CreateUserDto.html",[0,0.379,2,0.726,3,0.06,4,0.06,5,0.053,10,0.242,18,0.75,21,0.006,23,0.452,24,0.752,29,0.249,34,4.594,36,4.068,38,0.06,39,0.003,57,2.928,63,4.939,67,0.004,68,0.003,71,1.428,73,0.852,82,2.003,119,2.361,129,1.512,199,2.361,449,3.102,481,3.719,493,4.205,634,5.376,636,4.205,698,4.205,699,3.815,800,4.372,801,7.965,802,3.935,803,4.446,804,7.765,805,5.114,806,5.114,807,5.114,808,6.385,809,5.114,810,6.874,811,5.114,812,4.939,813,6.874,814,5.114,815,6.137,816,4.566,817,5.114,818,5.114,819,5.114,820,5.289,821,5.114,822,5.114]],["title/interfaces/CsvLine.html",[608,1.298,823,3.49]],["body/interfaces/CsvLine.html",[3,0.062,4,0.062,5,0.055,10,0.252,21,0.006,23,0.462,24,0.923,38,0.062,39,0.003,67,0.004,68,0.003,73,0.875,129,1.715,608,1.439,609,2.157,773,6.937,823,5.134,824,4.375,825,4.751,826,6.937,827,7.532,828,7.532,829,6.937,830,7.194,831,7.532,832,7.532,833,7.532,834,7.532,835,6.937,836,7.532,837,6.937]],["title/interfaces/CsvLineRow.html",[608,1.298,838,3.692]],["body/interfaces/CsvLineRow.html",[3,0.057,4,0.057,5,0.051,10,0.232,21,0.006,23,0.47,24,0.964,38,0.057,39,0.003,41,2.07,46,2.345,67,0.004,68,0.003,73,0.829,78,5.408,129,1.685,146,6.714,547,5.193,555,5.653,608,1.328,609,1.991,718,4.51,824,4.037,838,5.146,839,4.037,840,4.384,841,7.291,842,7.291,843,7.291,844,5.653,845,7.291,846,7.291,847,6.283,848,7.291,849,7.291,850,3.778,851,3.596]],["title/injectables/CustomLogger.html",[297,1.011,852,3.177]],["body/injectables/CustomLogger.html",[0,0.35,3,0.083,4,0.083,5,0.074,21,0.006,29,0.196,38,0.083,39,0.004,67,0.005,68,0.004,71,2.376,195,1.531,297,1.792,298,2.537,852,5.633,853,6.389,854,5.772,855,8.506,856,7.156]],["title/classes/Exam.html",[0,0.234,522,1.906]],["body/classes/Exam.html",[0,0.149,2,0.432,3,0.035,4,0.035,5,0.032,10,0.144,11,0.787,18,0.813,21,0.006,23,0.466,24,0.516,25,0.5,29,0.212,30,0.594,38,0.035,39,0.002,40,1.384,41,1.356,42,1.875,67,0.003,68,0.002,71,1.318,72,3.588,73,0.585,74,3.318,79,3.005,80,3.077,81,3.077,82,2.147,83,1.865,85,3.86,86,2.037,95,3.233,97,1.475,98,3.588,99,1.512,100,3.461,101,2.231,102,2.607,103,1.475,104,2.231,105,1.475,106,2.231,107,1.475,109,1.936,110,1.12,113,3.393,114,1.69,115,3.001,117,2.016,129,1.103,130,1.505,222,1.256,522,2.586,523,3.85,524,4.202,526,4.505,530,3.674,534,3.962,538,2.799,631,3.507,632,2.214,633,1.865,681,2.701,684,3.674,718,2.286,729,5.158,730,4.445,731,4.445,732,3.418,746,1.552,857,2.718,858,5.158,859,4.75,860,4.75,861,5.351,862,3.266,863,4.445,864,4.445,865,3.044,866,3.432,867,3.266,868,3.044,869,3.044,870,3.044,871,3.044,872,3.044,873,3.044,874,3.044,875,5.79,876,3.044,877,4.31,878,3.044,879,3.044,880,3.044,881,2.016,882,2.016,883,2.016,884,4.75,885,3.044,886,2.108,887,3.044,888,3.044,889,3.044,890,3.044,891,3.044,892,4.213,893,3.631,894,2.214,895,2.342,896,3.044,897,1.865,898,3.044,899,1.69,900,3.044,901,3.044,902,3.044,903,2.342,904,2.503,905,2.503,906,3.044,907,3.044]],["title/classes/Exam1620478273991.html",[0,0.234,908,3.945]],["body/classes/Exam1620478273991.html",[0,0.263,2,0.763,3,0.063,4,0.063,5,0.056,8,2.431,9,3.103,10,0.254,11,1.186,12,3.458,13,2.092,14,2.825,15,2.77,16,2.77,17,3.623,18,0.69,20,1.283,21,0.006,22,1.424,23,0.388,24,0.778,25,1.167,26,1.731,27,2.77,29,0.147,30,1.049,38,0.063,39,0.003,43,2.086,67,0.004,68,0.003,73,0.881,90,4.356,122,2.825,129,0.911,130,2.268,131,2.016,136,3.004,152,4.356,522,2.825,528,7.565,529,2.818,554,4.071,908,6.966,909,7.565,910,4.802,911,5.379,912,5.379,913,5.379]],["title/classes/ExamAgreement.html",[0,0.234,74,2.447]],["body/classes/ExamAgreement.html",[0,0.235,2,0.443,3,0.036,4,0.036,5,0.032,10,0.148,11,0.802,18,0.803,21,0.006,23,0.462,24,0.721,25,0.512,29,0.221,30,0.609,38,0.036,39,0.002,40,1.411,41,1.672,42,1.24,46,2.418,67,0.003,68,0.002,71,1.344,72,3.62,73,0.596,74,2.453,79,3.045,80,3.118,81,3.118,82,2.128,83,2.947,85,3.738,86,2.847,91,3.902,92,2.572,95,3.276,97,1.512,98,3.62,99,1.551,100,3.217,101,2.274,102,2.648,103,1.512,104,2.274,105,1.512,106,2.274,107,1.512,108,6.065,113,3.421,114,1.733,115,3.733,117,2.067,129,1.117,130,2.103,180,2.775,199,1.441,222,0.831,224,3.596,411,1.682,522,3.116,523,2.846,526,3.33,529,1.635,530,3.733,547,3.733,650,5.24,718,3.451,722,1.985,746,1.592,844,4.063,862,3.33,867,3.33,881,2.067,882,2.067,883,2.067,886,2.161,894,2.27,899,1.733,914,2.787,915,5.869,916,6.595,917,5.869,918,3.122,919,3.122,920,3.122,921,3.122,922,5.181,923,3.122,924,3.122,925,4.295,926,4.811,927,3.122,928,3.122,929,3.122,930,3.122,931,3.122,932,5.869,933,3.122,934,3.122,935,3.122,936,2.566,937,3.122,938,4.811,939,4.811,940,4.295,941,3.122,942,2.566,943,3.122,944,2.566,945,3.122,946,2.402,947,3.122,948,3.122,949,2.787,950,2.566]],["title/classes/ExamAgreement1622332886234.html",[0,0.234,951,3.945]],["body/classes/ExamAgreement1622332886234.html",[0,0.216,2,0.628,3,0.052,4,0.052,5,0.046,8,2.128,9,2.804,10,0.209,11,1.038,12,3.261,13,1.973,14,2.473,15,2.424,16,2.424,17,3.476,18,0.623,20,1.123,21,0.006,22,1.33,23,0.351,24,0.681,25,1.022,26,1.595,27,2.424,29,0.121,30,0.863,38,0.052,39,0.003,43,2.626,66,2.575,67,0.004,68,0.003,73,0.771,86,1.91,113,1.87,122,2.86,129,0.75,130,1.411,131,1.659,136,3.782,141,2.808,150,4.471,153,3.576,154,3.812,156,4.785,157,3.812,159,4.621,164,3.487,295,4.336,296,5.125,423,2.711,545,5.484,546,5.68,548,3.218,552,4.767,554,3.563,558,3.405,582,3.951,951,6.421,952,6.973,953,3.951,954,4.425,955,4.425,956,4.425,957,3.951,958,6.223,959,6.223]],["title/classes/ExamAgreementAnonymousDefault1622334780336.html",[0,0.234,960,3.945]],["body/classes/ExamAgreementAnonymousDefault1622334780336.html",[0,0.258,2,0.751,3,0.062,4,0.062,5,0.055,8,2.405,9,3.078,10,0.25,11,1.173,12,3.443,13,2.083,14,2.795,15,2.74,16,2.74,17,3.612,18,0.684,20,1.269,21,0.006,22,1.416,23,0.385,24,0.769,25,1.155,26,1.72,27,2.74,29,0.145,30,1.032,38,0.062,39,0.003,43,2.063,67,0.004,68,0.003,73,0.872,90,4.309,122,2.795,129,0.897,130,2.243,131,1.984,136,2.972,295,3.407,296,4.027,529,2.773,545,4.309,547,5.354,554,4.027,960,6.922,961,7.516,962,4.725,963,5.292,964,5.292,965,5.292]],["title/controllers/ExamAgreementController.html",[166,2.027,966,3.692]],["body/controllers/ExamAgreementController.html",[0,0.215,3,0.051,4,0.051,5,0.046,10,0.208,11,1.035,13,1.97,18,0.537,20,1.119,21,0.006,22,1.002,23,0.35,24,0.679,25,1.018,26,1.592,29,0.252,38,0.051,39,0.003,46,2.7,67,0.004,68,0.003,74,3.661,82,1.434,109,2.802,166,1.861,168,1.988,170,2.606,175,4.326,188,4.248,189,4.248,192,4.295,194,2.699,195,0.942,196,4.295,197,4.295,198,2.606,199,2.034,200,2.308,201,3.05,203,3.67,204,4.399,205,2.917,206,3.05,215,2.699,216,2.308,217,1.314,222,1.651,306,4.755,323,3.622,492,2.522,522,2.853,715,5.669,725,5.1,899,3.986,966,4.773,967,5.904,968,3.933,969,6.411,970,7.181,971,3.933,972,5.669,973,4.405,974,5.539,975,4.405,976,6.959,977,5.396,978,6.959,979,5.396,980,3.933,981,4.405,982,4.773,983,2.606,984,3.05,985,3.945,986,3.622,987,3.622,988,4.405,989,4.405,990,4.405]],["title/classes/ExamAgreementDto.html",[0,0.234,724,3.692]],["body/classes/ExamAgreementDto.html",[0,0.391,2,0.919,3,0.075,4,0.075,5,0.067,10,0.306,18,0.693,21,0.006,23,0.39,29,0.219,38,0.075,39,0.004,41,2.131,67,0.005,68,0.004,73,0.992,82,1.85,180,4.108,199,2.989,224,5.324,449,2.921,665,4.823,717,4.709,724,6.159,940,7.758,991,7.145,992,6.475,993,6.475]],["title/classes/ExamAgreementObservation1622417032753.html",[0,0.234,994,3.945]],["body/classes/ExamAgreementObservation1622417032753.html",[0,0.262,2,0.761,3,0.062,4,0.062,5,0.056,8,2.427,9,3.098,10,0.254,11,1.184,12,3.456,13,2.091,14,2.82,15,2.765,16,2.765,17,3.621,18,0.689,20,1.28,21,0.006,22,1.422,23,0.388,24,0.776,25,1.165,26,1.729,27,2.765,29,0.147,30,1.046,38,0.062,39,0.003,43,2.082,67,0.004,68,0.003,73,0.88,113,2.267,122,2.131,129,0.909,130,1.711,131,2.011,136,2.999,153,2.665,164,2.599,295,3.438,296,4.063,523,3.174,545,4.348,844,4.913,994,6.959,995,7.557,996,4.789,997,5.364,998,5.364,999,5.364]],["title/classes/ExamAgreementRepository.html",[0,0.234,1000,3.49]],["body/classes/ExamAgreementRepository.html",[0,0.337,2,0.98,3,0.08,4,0.08,5,0.072,21,0.006,29,0.244,30,1.624,38,0.08,39,0.004,67,0.005,68,0.004,71,2.326,74,3.521,109,4.392,248,4.817,249,3.721,250,2.918,251,2.918,252,2.918,984,4.78,1000,6.056,1001,5.678,1002,6.165,1003,6.906]],["title/injectables/ExamAgreementService.html",[297,1.011,306,3.177]],["body/injectables/ExamAgreementService.html",[0,0.127,3,0.03,4,0.03,5,0.027,10,0.123,11,0.695,13,2.016,18,0.658,20,1.372,21,0.006,22,1.229,23,0.392,24,0.832,25,1.201,26,1.76,29,0.236,30,0.813,33,2.155,38,0.03,39,0.002,41,0.979,43,2.146,46,2.148,49,2.66,50,2.419,66,1.077,67,0.002,68,0.002,74,3.731,79,1.201,82,1.379,100,2.907,109,1.655,123,2.002,129,0.884,175,3.311,180,1.971,195,0.557,203,2.467,217,1.779,222,1.855,224,3.655,225,2.761,250,3.4,251,1.1,252,1.1,277,1.1,297,0.878,298,0.923,302,2.467,303,1.624,306,2.761,317,1.594,318,1.402,322,6.035,327,2.594,408,1.49,488,2.002,492,1.49,496,2.14,522,2.768,715,4.339,725,3.428,746,1.327,803,2.987,852,3.951,854,3.318,863,2.002,864,4.591,894,1.893,899,4.784,922,1.893,946,2.002,969,4.658,971,2.323,972,4.339,974,4.658,976,3.723,977,4.13,978,5.326,979,4.13,983,1.54,984,1.801,985,2.652,1000,4.339,1004,2.323,1005,4.169,1006,4.169,1007,4.169,1008,4.658,1009,5.217,1010,1.594,1011,4.836,1012,5.066,1013,2.602,1014,2.554,1015,4.169,1016,2.602,1017,2.602,1018,4.169,1019,3.428,1020,2.602,1021,3.428,1022,4.169,1023,2.602,1024,4.169,1025,2.602,1026,2.602,1027,2.602,1028,2.602,1029,2.602,1030,2.602,1031,2.14,1032,2.323,1033,2.323,1034,2.14,1035,2.323,1036,2.602,1037,2.602,1038,2.602,1039,3.428,1040,3.794,1041,2.602,1042,2.323,1043,3.428,1044,2.14,1045,2.602,1046,2.602,1047,4.169,1048,2.323,1049,2.602,1050,2.602,1051,1.893,1052,2.323,1053,2.602,1054,2.602,1055,2.602,1056,2.602,1057,2.602,1058,2.602,1059,2.602,1060,2.886,1061,2.602,1062,3.208,1063,2.602,1064,2.323]],["title/classes/ExamAgreementUniqueCode1625001091462.html",[0,0.234,1065,3.945]],["body/classes/ExamAgreementUniqueCode1625001091462.html",[0,0.237,2,0.688,3,0.056,4,0.056,5,0.05,8,2.268,9,2.944,10,0.402,11,1.106,12,3.356,13,2.03,14,2.635,15,2.583,16,2.583,17,3.547,18,0.654,20,1.196,21,0.006,22,1.374,23,0.369,24,0.725,25,1.089,26,1.659,27,2.583,29,0.133,30,0.946,38,0.056,39,0.003,43,2.576,67,0.004,68,0.003,73,0.822,122,2.635,129,0.822,130,1.547,131,1.818,136,3.433,153,2.409,164,3.212,171,2.293,295,4.255,296,4.651,411,3.574,545,5.381,546,5.496,549,5.921,554,3.797,847,5.815,957,5.921,1065,5.452,1066,7.253,1067,4.33,1068,6.631,1069,4.85,1070,4.85,1071,4.85,1072,6.631]],["title/classes/ExamAgreementUniqueCodeSendedAt1625002603968.html",[0,0.234,1073,3.945]],["body/classes/ExamAgreementUniqueCodeSendedAt1625002603968.html",[0,0.262,2,0.761,3,0.062,4,0.062,5,0.056,8,2.427,9,3.098,10,0.254,11,1.184,12,3.456,13,2.091,14,2.82,15,2.765,16,2.765,17,3.621,18,0.689,20,1.28,21,0.006,22,1.422,23,0.388,24,0.776,25,1.165,26,1.729,27,2.765,29,0.147,30,1.046,38,0.062,39,0.003,43,2.082,67,0.004,68,0.003,73,0.88,113,2.267,122,2.131,129,0.909,130,1.711,131,2.011,136,2.999,153,2.665,164,2.599,295,3.438,296,4.063,526,3.714,545,4.348,1073,6.959,1074,7.557,1075,4.789,1076,5.364,1077,5.364,1078,5.364,1079,7.097]],["title/interfaces/ExamAgreementUser.html",[608,1.298,972,3.49]],["body/interfaces/ExamAgreementUser.html",[3,0.076,4,0.076,5,0.068,10,0.31,11,1.346,18,0.568,21,0.006,23,0.394,24,0.883,25,1.077,38,0.076,39,0.004,40,2.675,41,2.052,67,0.005,68,0.004,73,1,129,1.481,202,6.21,608,1.775,609,2.66,611,4.772,718,3.91,803,5.221,899,4.479,972,5.87,1080,9.12,1081,6.561]],["title/controllers/ExamController.html",[166,2.027,1082,3.692]],["body/controllers/ExamController.html",[0,0.177,3,0.042,4,0.042,5,0.038,10,0.171,11,0.899,13,2.193,18,0.69,20,1.372,21,0.006,22,1.229,23,0.414,24,0.832,25,1.309,26,1.85,29,0.241,38,0.042,39,0.002,40,2.338,41,2.034,42,1.441,46,1.662,66,1.501,67,0.003,68,0.002,82,1.843,141,2.902,166,1.533,168,1.637,170,2.146,171,2.548,172,3.427,175,3.951,181,2.307,182,4.147,186,4.147,188,3.188,189,3.188,190,2.638,192,2.511,193,5.178,194,2.222,195,0.776,196,3.731,197,4.928,198,2.146,199,1.675,200,1.9,201,2.511,203,2.146,204,2.222,205,2.402,206,2.511,215,2.222,216,1.9,217,1.082,222,2.122,226,2.791,228,2.791,301,4.714,302,3.188,312,2.402,315,2.402,492,2.077,522,3.023,551,2.146,727,5.519,983,2.146,985,2.307,987,2.982,1011,4.09,1082,4.147,1083,3.238,1084,4.147,1085,3.238,1086,2.982,1087,3.627,1088,2.791,1089,3.627,1090,4.431,1091,3.627,1092,3.238,1093,3.627,1094,4.677,1095,3.627,1096,3.627,1097,6.167,1098,3.627,1099,3.238,1100,4.431,1101,2.638,1102,2.638,1103,3.238,1104,3.627,1105,3.627,1106,3.627,1107,3.627,1108,3.627,1109,3.627,1110,3.627,1111,2.982,1112,3.627,1113,3.627,1114,3.627]],["title/modules/ExamModule.html",[256,1.701,268,3.177]],["body/modules/ExamModule.html",[0,0.21,3,0.05,4,0.05,5,0.045,21,0.006,29,0.261,38,0.05,39,0.003,67,0.004,68,0.003,168,2.747,195,0.918,256,2.509,258,2.078,259,2.028,260,2.188,261,2.188,262,2.078,263,3.609,264,3.516,268,6.475,270,3.105,271,2.188,272,2.188,274,3.379,276,2.728,277,1.813,306,6.197,323,3.527,380,5.374,383,5.596,607,3.527,747,2.878,966,5.446,986,5.006,1000,4.428,1011,5.951,1034,5.006,1035,3.83,1082,5.446,1099,3.83,1115,3.83,1116,4.29,1117,3.83,1118,3.83,1119,5.596,1120,5.596,1121,5.85,1122,4.29,1123,5.446,1124,4.29,1125,4.428,1126,3.83,1127,4.428,1128,3.83,1129,3.527,1130,6.089,1131,4.29,1132,4.29,1133,3.83,1134,3.83,1135,3.83,1136,3.83,1137,3.527,1138,3.83]],["title/classes/ExamPersonalResult.html",[0,0.234,1094,3.49]],["body/classes/ExamPersonalResult.html",[0,0.316,2,0.919,3,0.075,4,0.075,5,0.067,10,0.306,18,0.752,21,0.006,23,0.424,29,0.177,38,0.075,39,0.004,67,0.005,68,0.004,73,0.992,522,3.827,551,5.371,1039,7.145,1094,5.822,1101,4.709,1139,6.985,1140,5.78,1141,7.145,1142,7.758,1143,6.475,1144,6.475,1145,6.475]],["title/classes/ExamRepository.html",[0,0.234,1125,3.49]],["body/classes/ExamRepository.html",[0,0.168,2,0.489,3,0.04,4,0.04,5,0.036,10,0.163,11,0.865,13,1.807,18,0.54,20,1.125,21,0.006,22,1.007,23,0.304,24,0.682,25,1.023,26,1.417,29,0.228,30,1.011,33,1.711,38,0.04,39,0.002,45,3.589,46,1.062,50,2.102,67,0.003,68,0.002,71,1.448,100,2.956,122,2.06,123,5.725,175,3.85,203,2.037,222,1.66,224,3.176,225,2.28,248,3.36,249,1.856,250,1.455,251,1.455,252,1.455,327,2.21,522,3.107,530,3.297,531,4.262,732,4.402,746,2.643,747,2.947,863,5.338,864,4.797,875,2.831,877,3.433,894,3.77,895,2.649,899,2.877,922,2.504,944,2.831,946,2.649,982,6.243,984,2.384,985,2.19,1064,4.628,1101,2.504,1125,3.77,1141,4.262,1146,3.074,1147,6.234,1148,5.184,1149,6.234,1150,3.443,1151,5.338,1152,3.443,1153,4.628,1154,4.628,1155,5.338,1156,4.628,1157,6.234,1158,7.441,1159,6.234,1160,4.628,1161,5.126,1162,6.234,1163,6.234,1164,5.566,1165,6.194,1166,5.184,1167,5.184,1168,5.184,1169,5.184,1170,3.443,1171,3.443,1172,7.819,1173,3.443,1174,3.074,1175,2.504,1176,3.443,1177,2.831,1178,5.184,1179,3.443,1180,3.443,1181,3.443,1182,3.443,1183,3.443,1184,3.443,1185,5.184,1186,5.184,1187,3.443,1188,3.443,1189,3.443,1190,3.443,1191,3.443,1192,5.184,1193,3.443,1194,3.443,1195,3.443,1196,5.184,1197,3.443,1198,3.443,1199,3.443]],["title/injectables/ExamService.html",[297,1.011,1011,3.051]],["body/injectables/ExamService.html",[0,0.13,3,0.031,4,0.031,5,0.028,10,0.126,11,0.708,13,2.083,18,0.684,20,1.332,21,0.006,22,1.193,23,0.374,24,0.808,25,1.212,26,1.72,29,0.24,30,0.519,33,2.675,38,0.031,39,0.003,40,1.937,41,1.855,43,2.318,46,0.821,49,2.165,50,1.721,66,1.102,67,0.003,68,0.002,73,0.526,82,1.397,130,0.849,131,0.998,141,1.916,171,2.007,172,2.7,175,3.355,181,2.7,195,0.57,203,1.575,217,2.099,222,1.873,250,3.424,251,1.125,252,1.125,277,1.125,297,0.894,298,0.944,301,4.002,302,2.512,303,1.654,312,2.812,315,2.812,317,3.245,318,1.435,319,2.812,320,1.843,321,1.936,327,2.802,357,2.048,492,1.524,522,3.287,534,2.165,551,1.575,591,5.112,727,5.308,732,4.163,746,1.357,858,3.791,859,3.491,894,1.936,899,1.478,922,1.936,942,2.189,944,2.189,946,2.048,983,1.575,985,1.693,1010,1.631,1011,2.7,1014,2.601,1039,3.491,1042,3.791,1060,1.843,1062,5.081,1084,3.267,1085,3.791,1092,3.791,1094,1.936,1097,5.893,1100,3.491,1101,1.936,1102,1.936,1103,2.377,1120,4.002,1125,4.396,1126,2.377,1129,2.189,1141,3.491,1142,3.791,1177,2.189,1200,2.377,1201,4.354,1202,4.246,1203,4.728,1204,2.662,1205,2.662,1206,2.662,1207,2.662,1208,2.662,1209,4.246,1210,2.662,1211,3.491,1212,2.662,1213,2.662,1214,2.662,1215,2.662,1216,2.662,1217,2.662,1218,4.354,1219,2.662,1220,2.662,1221,2.662,1222,2.662,1223,2.662,1224,2.662,1225,2.662,1226,2.377,1227,2.662,1228,2.662,1229,2.189,1230,2.662,1231,4.246,1232,4.246,1233,2.662,1234,2.662,1235,2.377,1236,2.662,1237,2.662,1238,2.662,1239,2.662,1240,2.662,1241,2.377,1242,2.189]],["title/classes/ExamTarget.html",[0,0.234,877,3.177]],["body/classes/ExamTarget.html",[0,0.242,2,0.702,3,0.058,4,0.058,5,0.051,10,0.234,18,0.796,21,0.006,23,0.468,29,0.209,30,0.965,38,0.058,39,0.003,40,1.972,41,1.161,67,0.004,68,0.003,71,1.878,72,4.173,73,0.833,79,3.782,80,3.873,81,3.873,82,2.126,85,2.458,92,2.427,95,4.069,97,2.396,98,4.173,99,2.458,100,3.511,101,3.178,102,3.445,103,2.396,104,3.178,105,2.396,106,3.178,107,2.396,108,4.653,113,2.84,114,2.746,119,2.284,411,3.622,415,3.598,739,4.904,746,2.522,747,2.339,877,4.452,881,3.276,882,3.276,883,3.276,1243,4.417,1244,4.947,1245,4.947]],["title/classes/ExamTarget1622326106015.html",[0,0.234,1246,3.945]],["body/classes/ExamTarget1622326106015.html",[0,0.177,2,0.514,3,0.042,4,0.042,5,0.038,8,1.841,9,2.503,10,0.409,11,0.898,12,3.044,13,1.841,14,2.138,15,2.097,16,2.097,17,3.308,18,0.556,20,0.971,21,0.006,22,1.228,23,0.389,24,0.589,25,0.884,26,1.453,27,2.097,29,0.099,30,0.706,33,1.195,38,0.042,39,0.002,40,1.579,43,2.749,62,2.633,66,2.227,67,0.003,68,0.002,73,0.667,86,2.773,95,2.674,113,1.53,122,3.367,129,0.613,130,2.049,131,1.357,136,3.724,137,2.398,138,4.254,139,4.254,140,2.398,141,2.899,142,2.398,143,2.398,149,3.564,150,4.561,151,3.564,153,3.191,154,3.297,156,4.357,157,3.297,159,3.184,164,3.996,171,3.037,295,4.432,296,4.561,411,1.951,430,4.141,550,4.523,552,4.71,558,2.786,583,4.805,732,2.142,747,3.362,850,3.191,851,3.037,1156,7.566,1161,5.848,1246,5.848,1247,5.848,1248,2.977,1249,3.62,1250,3.62,1251,3.62,1252,4.805,1253,5.382,1254,3.62,1255,3.232,1256,7.112,1257,5.382,1258,5.382,1259,5.382,1260,5.382,1261,3.62]],["title/classes/ExamTargetAdd1622378888497.html",[0,0.234,1262,3.945]],["body/classes/ExamTargetAdd1622378888497.html",[0,0.236,2,0.685,3,0.056,4,0.056,5,0.05,8,2.26,9,2.936,10,0.228,11,1.102,12,3.351,13,2.027,14,2.626,15,2.575,16,2.575,17,3.544,18,0.653,20,1.192,21,0.006,22,1.372,23,0.452,24,0.723,25,1.085,26,1.656,27,2.575,29,0.132,30,0.941,33,1.593,38,0.056,39,0.003,43,2.378,62,3.51,66,1.997,67,0.004,68,0.003,73,0.819,95,3.283,122,2.626,129,0.818,130,1.539,131,1.809,136,2.793,232,2.982,295,3.651,296,3.784,341,3.968,536,3.91,554,3.784,747,2.281,850,3.283,851,3.125,1155,3.713,1161,6.666,1255,4.309,1262,6.666,1263,6.666,1264,3.968,1265,4.826,1266,4.826,1267,4.826,1268,6.197,1269,4.826,1270,4.826]],["title/controllers/ExamTargetController.html",[166,2.027,1123,3.692]],["body/controllers/ExamTargetController.html",[0,0.252,3,0.06,4,0.06,5,0.054,10,0.244,11,1.155,13,1.804,18,0.599,20,0.932,21,0.006,22,0.835,23,0.338,24,0.565,25,1.136,26,1.414,29,0.25,38,0.06,39,0.003,42,2.751,46,2.134,67,0.004,68,0.003,82,1.6,119,2.386,129,0.876,166,2.184,168,2.332,170,3.057,175,4.628,194,3.166,195,1.106,197,4.792,198,3.057,199,2.386,200,2.707,201,3.577,203,3.057,204,3.166,205,3.422,206,3.577,215,3.166,216,2.707,217,1.541,222,1.843,522,2.053,739,2.959,746,2.635,747,3.691,967,6.418,985,3.286,986,4.249,987,4.249,1088,3.976,1120,4.584,1123,5.327,1129,4.249,1203,4.614,1235,4.614,1271,4.614,1272,6.923,1273,7.445,1274,5.167,1275,5.167,1276,5.167,1277,6.18,1278,5.167,1279,6.923,1280,5.167,1281,5.167,1282,5.167,1283,5.167,1284,5.167,1285,5.167]],["title/interfaces/ExamTargetManagerDto.html",[608,1.298,1286,3.945]],["body/interfaces/ExamTargetManagerDto.html",[3,0.081,4,0.081,5,0.072,10,0.328,21,0.006,23,0.338,24,0.913,29,0.189,38,0.081,39,0.004,67,0.005,68,0.004,73,1.034,119,3.2,608,1.874,609,2.809,732,5.497,739,5.32,746,3.533,747,3.945,991,5.698,1286,6.86,1287,6.187]],["title/classes/ExamTargetNode.html",[0,0.234,1288,3.177]],["body/classes/ExamTargetNode.html",[0,0.265,2,0.77,3,0.063,4,0.063,5,0.056,10,0.256,11,1.192,18,0.736,20,0.978,21,0.006,22,0.876,23,0.463,24,0.593,25,0.89,29,0.148,33,2.36,38,0.063,39,0.003,42,2.155,67,0.004,68,0.003,73,0.886,119,2.504,129,1.355,222,2.263,718,2.627,739,4.578,746,2.765,747,4.289,862,4.949,1139,6.798,1288,5.851,1289,4.459,1290,6.153,1291,7.149,1292,7.996,1293,5.423,1294,5.423,1295,7.149,1296,5.423,1297,4.731,1298,5.423,1299,5.423,1300,5.423,1301,5.423,1302,5.423,1303,4.459,1304,5.423,1305,7.996,1306,5.423]],["title/injectables/ExamTargetNodeFactory.html",[297,1.011,1119,3.177]],["body/injectables/ExamTargetNodeFactory.html",[0,0.288,3,0.069,4,0.069,5,0.061,10,0.279,11,1.258,18,0.51,20,1.063,21,0.006,22,0.952,23,0.368,24,0.645,25,0.968,29,0.228,33,1.946,38,0.069,39,0.004,50,2.389,67,0.005,68,0.004,119,2.721,195,1.261,222,1.569,297,1.59,298,2.089,608,1.594,739,4.32,746,3.005,747,4.148,1102,4.287,1119,4.997,1277,5.262,1288,5.811,1290,4.535,1303,6.204,1307,6.204,1308,4.846,1309,7.545,1310,6.736,1311,6.979,1312,5.894,1313,4.846,1314,5.262,1315,5.262,1316,5.262,1317,5.262,1318,5.262]],["title/interfaces/ExamTargetNodeSchema.html",[608,1.298,1311,3.692]],["body/interfaces/ExamTargetNodeSchema.html",[0,0.29,3,0.069,4,0.069,5,0.062,10,0.28,21,0.006,23,0.453,24,0.829,29,0.228,33,1.958,38,0.069,39,0.004,50,2.404,67,0.005,68,0.004,73,0.939,119,2.738,195,1.269,222,1.578,297,1.596,608,1.604,609,2.404,739,5.035,746,3.023,747,3.946,1102,4.312,1119,3.927,1288,5.527,1290,6.767,1303,6.228,1307,4.875,1308,4.875,1310,5.294,1311,7.151,1313,4.875,1314,5.294,1315,5.294,1316,5.294,1317,5.294,1318,5.294]],["title/classes/ExamTargetRepository.html",[0,0.234,1127,3.49]],["body/classes/ExamTargetRepository.html",[0,0.337,2,0.98,3,0.08,4,0.08,5,0.072,21,0.006,29,0.244,30,1.624,38,0.08,39,0.004,67,0.005,68,0.004,71,2.326,248,4.817,249,3.721,250,2.918,251,2.918,252,2.918,877,4.573,895,5.313,984,4.78,1001,5.678,1127,6.056,1319,6.165,1320,6.906]],["title/injectables/ExamTargetService.html",[297,1.011,1120,3.177]],["body/injectables/ExamTargetService.html",[0,0.205,3,0.049,4,0.049,5,0.044,10,0.199,11,1,13,1.939,18,0.726,20,1.082,21,0.006,22,0.969,23,0.341,24,0.835,25,1.252,26,1.714,29,0.236,33,1.98,38,0.049,39,0.003,43,1.759,50,2.431,67,0.004,68,0.003,73,0.743,119,1.939,129,1.185,195,0.898,217,1.788,222,2.031,277,1.774,297,1.263,298,1.489,303,2.336,318,2.263,322,6.645,327,3.131,335,4.151,336,3.971,732,2.484,739,4.004,746,2.141,747,3.607,877,2.781,895,3.231,984,2.907,1010,2.572,1014,3.673,1034,3.452,1060,2.907,1120,3.971,1121,5.281,1127,5.549,1128,3.749,1133,3.749,1134,3.749,1164,5.353,1226,3.749,1273,6.811,1321,3.749,1322,6.994,1323,7.629,1324,5.996,1325,7.629,1326,6.994,1327,5.996,1328,4.199,1329,4.199,1330,5.996,1331,4.199,1332,4.199,1333,3.452,1334,4.199,1335,4.199,1336,5.996,1337,5.996,1338,4.199,1339,4.199,1340,5.996,1341,4.199,1342,4.199,1343,4.199,1344,4.199,1345,4.199,1346,4.199]],["title/injectables/ExamTargetTree.html",[297,1.011,1121,3.322]],["body/injectables/ExamTargetTree.html",[0,0.246,3,0.059,4,0.059,5,0.052,10,0.238,11,1.135,18,0.667,20,1.227,21,0.006,22,1.099,23,0.443,24,0.744,25,0.827,29,0.226,33,1.662,38,0.059,39,0.003,49,2.568,50,2.041,67,0.004,68,0.003,73,0.843,119,2.325,129,1.305,195,1.077,217,2.298,222,1.341,297,1.433,298,1.785,303,1.962,317,3.085,327,2.731,739,2.883,746,2.568,747,4.424,1102,3.662,1119,5.464,1121,4.71,1135,4.496,1136,4.496,1288,5.707,1290,5.235,1297,4.558,1313,4.14,1347,7.367,1348,4.496,1349,7.705,1350,6.803,1351,6.803,1352,6.803,1353,5.035,1354,6.803,1355,5.035,1356,5.035,1357,5.035,1358,5.035,1359,5.035,1360,5.035,1361,5.035,1362,5.035,1363,5.035]],["title/classes/ExamTitle1621036457247.html",[0,0.234,1364,3.945]],["body/classes/ExamTitle1621036457247.html",[0,0.264,2,0.768,3,0.063,4,0.063,5,0.056,8,2.44,9,3.111,10,0.256,11,1.19,12,3.464,13,2.096,14,2.835,15,2.78,16,2.78,17,3.627,18,0.691,20,1.287,21,0.006,22,1.426,23,0.39,24,0.781,25,1.171,26,1.734,27,2.78,29,0.148,30,1.055,38,0.063,39,0.003,43,2.093,67,0.004,68,0.003,73,0.884,122,2.835,129,0.916,130,1.725,131,2.027,136,3.015,152,4.371,522,2.835,523,5.024,538,3.457,554,4.085,1364,6.981,1365,7.581,1366,4.829,1367,5.409,1368,5.409,1369,5.409]],["title/interfaces/ExamUser.html",[175,2.663,608,1.298]],["body/interfaces/ExamUser.html",[3,0.079,4,0.079,5,0.071,10,0.322,21,0.006,23,0.469,29,0.186,38,0.079,39,0.004,40,2.71,41,2.086,67,0.005,68,0.004,73,1.023,119,3.144,175,4.583,202,5.24,608,1.842,609,2.761,611,4.953,812,5.875,1370,6.81]],["title/controllers/ExportationController.html",[166,2.027,1371,3.692]],["body/controllers/ExportationController.html",[0,0.29,3,0.069,4,0.069,5,0.062,10,0.281,11,1.266,13,1.932,18,0.515,20,1.073,21,0.006,22,0.961,23,0.29,24,0.651,25,0.976,29,0.241,38,0.088,39,0.004,41,1.962,67,0.005,68,0.004,82,1.375,166,2.513,168,2.683,170,3.518,180,3.588,188,3.518,190,4.325,193,5.52,194,3.643,195,1.272,196,5.254,198,3.518,199,2.746,200,3.116,201,4.117,215,3.643,216,3.116,217,1.773,222,1.583,1371,5.839,1372,5.31,1373,6.775,1374,5.31,1375,7.589,1376,5.947,1377,5.254,1378,5.31,1379,5.947,1380,5.947,1381,4.576,1382,5.947,1383,5.947]],["title/modules/ExportationModule.html",[256,1.701,382,3.49]],["body/modules/ExportationModule.html",[0,0.273,3,0.065,4,0.065,5,0.058,21,0.006,29,0.25,38,0.065,39,0.003,67,0.004,68,0.003,168,3.291,195,1.197,256,2.878,258,2.709,259,2.644,260,2.852,261,2.852,262,2.709,263,4.139,264,4.032,270,3.719,271,2.852,272,2.852,274,4.048,276,3.557,277,2.363,382,7.063,383,6.059,607,4.598,1138,4.993,1371,6.246,1377,6.764,1378,4.993,1384,4.993,1385,4.993,1386,5.593,1387,4.993,1388,6.334,1389,5.593,1390,5.593,1391,4.993]],["title/injectables/ExportationRepository.html",[297,1.011,1388,3.322]],["body/injectables/ExportationRepository.html",[0,0.198,3,0.047,4,0.047,5,0.042,10,0.191,11,0.973,13,1.583,17,1.545,18,0.505,20,1.053,21,0.006,22,0.943,23,0.285,24,0.638,25,0.664,26,1.192,29,0.227,30,0.789,33,1.927,38,0.047,39,0.002,41,1.608,43,1.186,45,2.799,46,1.247,67,0.003,68,0.002,69,2.118,76,1.639,78,2.678,122,1.607,145,3.61,146,3.325,180,2.759,195,0.865,217,1.206,222,1.554,232,1.825,277,1.709,295,1.959,297,1.229,298,1.434,303,1.575,327,1.434,540,2.179,545,2.477,547,2.572,550,2.572,552,2.678,555,2.799,773,3.325,775,5.211,778,3.61,823,2.941,826,3.325,827,3.61,828,3.61,829,3.325,830,4.491,831,3.61,832,3.61,833,3.61,834,3.61,835,3.325,836,3.61,837,3.325,838,4.491,839,3.325,841,3.61,842,3.61,843,3.61,844,2.799,845,3.61,846,3.61,847,3.111,848,3.61,849,3.61,1153,3.61,1154,5.211,1155,6.374,1160,6.694,1388,4.04,1392,3.61,1393,5.836,1394,4.044,1395,8.284,1396,4.044,1397,5.836,1398,4.044,1399,5.211,1400,3.61,1401,4.044,1402,4.044,1403,3.325,1404,4.044,1405,4.044,1406,4.044,1407,4.044,1408,3.61,1409,5.836,1410,6.848,1411,4.044,1412,4.044,1413,4.044,1414,4.044,1415,4.044,1416,4.044,1417,6.848,1418,6.848,1419,4.044,1420,3.61,1421,4.044,1422,4.044,1423,4.044,1424,4.044,1425,4.044,1426,4.044,1427,4.044,1428,4.044,1429,4.044,1430,4.044,1431,4.044,1432,4.044,1433,4.044,1434,4.044,1435,4.044,1436,4.044,1437,4.044,1438,4.044,1439,4.044,1440,4.044,1441,4.044,1442,4.044,1443,6.848,1444,4.044,1445,4.044,1446,4.044,1447,4.044,1448,4.044,1449,4.044,1450,4.044,1451,4.044,1452,4.044,1453,4.044,1454,4.044,1455,4.044,1456,4.044,1457,4.044]],["title/injectables/ExportationService.html",[297,1.011,1377,3.322]],["body/injectables/ExportationService.html",[0,0.203,3,0.048,4,0.048,5,0.043,10,0.196,11,0.992,13,1.933,18,0.657,20,1.37,21,0.006,22,1.227,23,0.37,24,0.831,25,1.141,26,1.551,29,0.229,33,2.76,38,0.069,39,0.002,41,1.963,43,1.746,49,2.118,50,2.819,67,0.004,68,0.002,92,1.5,100,1.651,119,1.918,129,1.008,180,3.287,195,0.889,217,1.775,222,1.851,264,2.064,297,1.254,298,1.473,303,2.318,317,2.545,327,3.122,823,5.844,1010,2.545,1014,3.646,1373,5.313,1374,5.313,1377,4.12,1388,5.256,1391,3.709,1399,3.709,1400,3.709,1408,5.313,1458,3.709,1459,5.951,1460,6.953,1461,6.953,1462,4.828,1463,4.155,1464,5.951,1465,4.155,1466,4.155,1467,4.155,1468,7.687,1469,4.155,1470,4.155,1471,3.709,1472,3.709,1473,4.155,1474,4.155,1475,4.155,1476,4.155,1477,4.155,1478,4.155,1479,4.155,1480,4.155,1481,4.155,1482,4.155,1483,4.155,1484,4.155,1485,4.155,1486,4.155,1487,4.155,1488,4.155,1489,4.155,1490,5.951,1491,4.155,1492,4.155,1493,4.328,1494,4.155,1495,4.155,1496,3.416,1497,3.709,1498,3.709,1499,4.155,1500,3.709,1501,4.155,1502,3.709,1503,4.155,1504,3.709]],["title/classes/FFEntity.html",[0,0.234,72,2.215]],["body/classes/FFEntity.html",[0,0.294,2,0.854,3,0.07,4,0.07,5,0.063,10,0.285,18,0.766,21,0.006,23,0.431,29,0.209,30,1.174,38,0.07,39,0.004,40,2.466,41,1.796,67,0.005,68,0.004,71,2.136,72,3.531,73,0.948,79,3.531,80,3.616,81,3.616,82,2.044,97,4.072,98,3.881,100,3.34,101,2.846,102,4.21,103,2.916,104,2.846,105,2.916,106,2.846,107,2.916,1505,5.374,1506,6.02,1507,6.02]],["title/interfaces/FileSendDto.html",[608,1.298,1508,3.49]],["body/interfaces/FileSendDto.html",[3,0.071,4,0.071,5,0.064,10,0.29,21,0.006,23,0.457,24,0.847,38,0.071,39,0.004,41,1.99,67,0.005,68,0.004,73,0.959,129,1.646,608,1.659,609,2.486,718,4.107,1496,7.826,1497,7.949,1498,7.949,1500,7.949,1502,7.949,1504,7.949,1508,5.628,1509,5.475,1510,5.475]],["title/interfaces/FindExamByUserDto.html",[608,1.298,1151,3.692]],["body/interfaces/FindExamByUserDto.html",[3,0.077,4,0.077,5,0.069,10,0.314,21,0.006,23,0.397,29,0.222,38,0.077,39,0.004,67,0.005,68,0.004,73,1.009,119,3.07,522,3.735,608,1.799,609,2.696,732,5.421,739,5.246,746,3.39,747,3.144,802,5.116,1101,4.836,1151,6.261,1177,7.533,1511,5.936]],["title/classes/FindPersonalDto.html",[0,0.234,1512,3.692]],["body/classes/FindPersonalDto.html",[0,0.317,2,0.922,3,0.076,4,0.076,5,0.067,10,0.307,18,0.695,21,0.006,23,0.391,29,0.219,38,0.076,39,0.004,41,1.883,46,2.932,67,0.005,68,0.004,73,0.994,110,3.201,180,4.114,936,5.341,1512,6.172,1513,7.77,1514,5.8,1515,6.496,1516,6.696,1517,6.496,1518,5.8,1519,5.341]],["title/injectables/FirebaseAdmin.html",[297,1.011,1520,2.939]],["body/injectables/FirebaseAdmin.html",[0,0.164,3,0.039,4,0.039,5,0.035,8,1.145,10,0.158,11,0.847,18,0.807,20,0.916,21,0.006,22,1.188,23,0.299,24,0.555,25,1.479,26,1.037,29,0.187,38,0.039,39,0.002,49,2.589,50,2.058,60,3.314,64,1.918,66,2.831,67,0.003,68,0.002,73,0.629,129,1.159,195,0.717,217,1.828,222,2.398,297,1.07,298,1.187,303,1.305,327,2.173,408,1.918,609,1.358,862,3.515,1520,3.11,1521,7.213,1522,8.369,1523,2.991,1524,5.474,1525,6.841,1526,4.533,1527,5.624,1528,6.841,1529,6.841,1530,6.841,1531,6.841,1532,6.841,1533,6.841,1534,6.841,1535,5.264,1536,5.657,1537,3.35,1538,4.351,1539,5.077,1540,3.35,1541,5.077,1542,3.35,1543,4.533,1544,5.077,1545,3.35,1546,3.35,1547,2.754,1548,5.077,1549,3.35,1550,3.35,1551,4.533,1552,3.35,1553,5.077,1554,3.35,1555,5.077,1556,3.35,1557,5.077,1558,3.35,1559,4.533,1560,3.35,1561,5.077,1562,3.35,1563,5.077,1564,3.35,1565,5.077,1566,3.35,1567,4.533,1568,6.131,1569,2.991,1570,3.35,1571,3.35,1572,3.35,1573,3.51,1574,2.577,1575,2.991,1576,3.35,1577,3.35,1578,3.35,1579,2.754,1580,3.35,1581,2.577,1582,3.35,1583,3.35,1584,3.35,1585,5.077,1586,5.077,1587,3.35,1588,3.35,1589,3.35,1590,3.35,1591,3.35,1592,3.35,1593,3.35,1594,3.35,1595,3.35,1596,3.35,1597,3.35,1598,3.35,1599,3.35,1600,3.35]],["title/modules/FirebaseAdminModule.html",[256,1.701,1601,3.49]],["body/modules/FirebaseAdminModule.html",[0,0.225,3,0.054,4,0.054,5,0.048,11,0.767,18,0.554,20,1.154,21,0.006,22,1.033,23,0.312,24,0.7,25,1.05,29,0.217,38,0.054,39,0.003,67,0.004,68,0.003,195,0.984,217,1.907,222,1.702,256,2.96,258,2.229,259,2.175,260,2.346,261,2.346,262,2.229,263,4.406,264,4.147,270,3.261,271,2.346,272,2.346,274,2.553,327,2.267,406,3.185,408,2.634,609,1.865,1201,7.105,1520,5.885,1521,5.656,1536,5.656,1538,5.052,1573,2.634,1574,5.656,1575,4.107,1601,6.676,1602,4.107,1603,4.107,1604,4.107,1605,5.656,1606,4.601,1607,4.107,1608,5.709,1609,4.601,1610,7.453,1611,4.107,1612,5.709,1613,5.499,1614,4.601,1615,5.709,1616,4.601,1617,4.601,1618,5.709,1619,4.601,1620,5.709,1621,4.601,1622,4.601,1623,4.601,1624,4.107]],["title/interfaces/FirebaseAsyncModuleOptions.html",[608,1.298,1613,3.322]],["body/interfaces/FirebaseAsyncModuleOptions.html",[3,0.073,4,0.073,5,0.065,10,0.296,13,1.449,21,0.006,23,0.383,24,0.858,26,1.28,29,0.215,38,0.091,39,0.004,64,3.589,67,0.005,68,0.004,71,2.192,73,0.972,129,1.329,195,1.341,256,2.222,406,6.213,408,5.138,608,2.122,609,2.541,1538,4.99,1573,4.492,1579,5.154,1581,4.823,1613,5.431,1625,4.823,1626,5.154,1627,7.005,1628,6.451,1629,5.597,1630,5.154,1631,5.597,1632,5.597]],["title/interfaces/FirebaseAuthDecodedToken.html",[608,1.298,1633,3.692]],["body/interfaces/FirebaseAuthDecodedToken.html",[3,0.077,4,0.077,5,0.069,10,0.312,21,0.006,23,0.428,24,1,38,0.077,39,0.004,60,3.199,67,0.005,68,0.004,73,1.004,129,1.618,510,7.034,608,1.787,609,2.678,718,4.247,803,5.234,1625,5.082,1633,6.235,1634,5.43,1635,5.897,1636,8.161]],["title/injectables/FirebaseAuthService.html",[297,1.011,1637,3.49]],["body/injectables/FirebaseAuthService.html",[0,0.2,3,0.048,4,0.048,5,0.042,10,0.193,11,0.981,13,1.592,18,0.742,20,1.5,21,0.006,22,1.343,23,0.418,24,0.909,25,1.31,26,1.851,29,0.206,33,1.349,38,0.048,39,0.002,43,1.198,60,1.979,64,3.366,67,0.004,68,0.002,73,0.729,122,1.623,129,1.571,195,0.874,204,3.602,217,2.054,222,2.213,297,1.239,298,1.448,303,1.592,327,2.442,347,4.524,510,6.142,803,2.339,1048,3.648,1051,2.972,1520,4.891,1543,5.249,1573,3.944,1633,3.144,1634,4.834,1636,3.648,1637,4.276,1638,6.377,1639,3.648,1640,6.888,1641,5.01,1642,5.88,1643,5.663,1644,5.88,1645,4.524,1646,5.88,1647,4.086,1648,6.888,1649,4.086,1650,5.88,1651,4.086,1652,5.88,1653,4.086,1654,4.086,1655,6.726,1656,6.888,1657,4.086,1658,5.88,1659,4.086,1660,3.648,1661,3.648,1662,4.086,1663,4.086,1664,4.086,1665,4.086,1666,4.086,1667,4.086,1668,4.086,1669,4.086,1670,4.086,1671,4.086,1672,4.086,1673,4.086]],["title/injectables/FirebaseCloudMessagingService.html",[297,1.011,1674,3.49]],["body/injectables/FirebaseCloudMessagingService.html",[0,0.264,3,0.063,4,0.063,5,0.056,10,0.256,11,1.19,18,0.691,20,1.287,21,0.006,22,1.153,23,0.39,24,0.781,25,0.888,26,1.457,29,0.218,38,0.063,39,0.003,64,4.085,67,0.004,68,0.003,73,0.884,129,1.353,195,1.157,217,2.381,222,1.44,297,1.503,298,1.917,303,2.107,327,2.831,1520,5.408,1536,6.534,1547,4.447,1559,6.371,1573,4.572,1638,6.176,1645,5.49,1660,6.371,1674,5.19,1675,6.981,1676,4.829,1677,7.986,1678,7.986,1679,7.136,1680,5.409,1681,6.534,1682,7.986,1683,7.986,1684,5.409,1685,5.409,1686,5.409,1687,5.409]],["title/injectables/FirebaseFirestoreService.html",[297,1.011,1688,3.692]],["body/injectables/FirebaseFirestoreService.html",[0,0.275,3,0.065,4,0.065,5,0.058,10,0.266,11,1.221,18,0.705,20,1.321,21,0.006,22,1.183,23,0.397,24,0.801,25,0.923,29,0.236,38,0.065,39,0.003,64,4.192,67,0.004,68,0.003,73,0.907,129,1.379,195,1.203,217,2.427,222,1.497,297,1.542,298,1.994,303,2.191,327,2.886,1520,5.476,1527,7.088,1551,6.536,1573,4.66,1638,6.271,1645,5.633,1688,5.633,1689,5.022,1690,7.321,1691,7.321,1692,7.321,1693,5.625,1694,5.625,1695,7.267,1696,5.625,1697,5.625,1698,5.625,1699,5.625,1700,5.625]],["title/modules/FirebaseModule.html",[256,1.701,1701,3.49]],["body/modules/FirebaseModule.html",[0,0.213,3,0.051,4,0.051,5,0.045,11,0.727,13,1.007,18,0.533,20,1.11,21,0.006,22,0.994,23,0.3,24,0.673,25,1.01,29,0.232,38,0.051,39,0.003,67,0.004,68,0.003,92,2.222,195,0.932,217,1.836,222,1.639,256,3.011,258,2.11,259,2.06,260,2.221,261,2.221,262,2.11,263,4.33,264,4.219,270,3.138,271,2.221,272,2.221,274,3.416,327,2.182,437,3.352,674,5.061,1201,6.982,1536,4.736,1538,4.933,1573,2.494,1601,3.169,1605,3.352,1607,3.89,1608,5.495,1610,7.305,1611,3.89,1612,5.495,1613,5.369,1615,6.372,1620,5.495,1624,5.495,1637,6.929,1661,3.89,1674,6.929,1675,3.582,1688,5.492,1701,6.825,1702,3.89,1703,3.89,1704,3.89,1705,4.357,1706,4.357,1707,4.357,1708,5.495,1709,4.357,1710,4.357,1711,4.357,1712,5.191,1713,4.357,1714,4.357,1715,4.357]],["title/interfaces/FirebaseModuleOptions.html",[608,1.298,1538,3.051]],["body/interfaces/FirebaseModuleOptions.html",[3,0.071,4,0.071,5,0.063,10,0.288,13,1.409,21,0.006,23,0.412,24,0.972,26,1.245,29,0.211,38,0.09,39,0.004,64,3.489,67,0.005,68,0.004,71,1.702,73,0.955,129,1.586,195,1.304,256,2.16,406,4.219,408,3.489,608,2.085,609,2.471,1538,5.376,1573,4.413,1579,7.304,1581,6.835,1613,4.219,1625,4.689,1626,5.011,1627,5.441,1629,5.441,1630,7.304,1631,7.547,1632,5.441]],["title/injectables/FirebaseStorageService.html",[297,1.011,1712,3.49]],["body/injectables/FirebaseStorageService.html",[0,0.25,3,0.06,4,0.06,5,0.071,10,0.242,11,1.147,12,2.626,13,1.795,18,0.672,20,1.24,21,0.006,22,1.111,23,0.379,24,0.752,25,0.839,26,1.404,29,0.227,33,1.688,38,0.06,39,0.003,42,2.032,43,1.5,64,3.936,67,0.004,68,0.003,73,0.852,92,1.846,129,1.316,195,1.094,217,2.316,222,1.361,297,1.448,298,1.813,303,1.992,327,2.753,700,4.205,1297,4.067,1493,3.719,1520,5.308,1535,6.389,1567,6.137,1573,4.446,1638,6.039,1645,5.289,1712,5,1716,4.566,1717,5.975,1718,6.874,1719,5.114,1720,6.389,1721,5.114,1722,5.114,1723,5.114,1724,5.114,1725,5.114,1726,5.652,1727,5.652,1728,4.566,1729,5.114,1730,5.114,1731,5.114,1732,4.566,1733,5.114,1734,5.114,1735,5.114]],["title/interfaces/FirebaseStorageUploadDto.html",[608,1.298,1720,3.692]],["body/interfaces/FirebaseStorageUploadDto.html",[3,0.075,4,0.075,5,0.067,10,0.306,21,0.006,23,0.443,24,0.876,38,0.075,39,0.004,67,0.005,68,0.004,73,0.992,129,1.61,608,1.751,609,2.625,718,4.209,1493,6.603,1496,7.145,1535,4.982,1720,6.159,1726,7.464,1727,7.464,1728,8.105,1736,5.78,1737,5.78]],["title/injectables/FirebaseUploader.html",[297,1.011,1738,3.692]],["body/injectables/FirebaseUploader.html",[0,0.242,3,0.058,4,0.058,5,0.052,8,1.696,10,0.234,11,1.123,13,1.767,18,0.662,20,1.379,21,0.006,22,1.235,23,0.373,24,0.836,25,1.105,26,1.375,29,0.234,38,0.058,39,0.003,67,0.004,68,0.003,92,1.791,129,1.532,130,1.582,131,1.859,195,1.061,216,2.598,217,1.479,222,2.035,297,1.418,298,1.758,303,1.932,327,2.71,1297,5.231,1462,4.282,1493,3.607,1508,6.578,1569,6.012,1712,5.964,1717,5.181,1726,4.078,1727,4.078,1738,5.181,1739,7.321,1740,4.428,1741,4.959,1742,4.959,1743,6.733,1744,6.733,1745,4.959,1746,6.012,1747,6.012,1748,4.959,1749,4.959,1750,4.959,1751,4.428,1752,4.428,1753,4.428,1754,4.428,1755,4.959,1756,4.959,1757,4.959,1758,4.959,1759,4.959,1760,4.959,1761,4.959]],["title/classes/GracefulUniqueCodeOnExamAgreement1625001565001.html",[0,0.234,1762,3.945]],["body/classes/GracefulUniqueCodeOnExamAgreement1625001565001.html",[0,0.272,2,0.789,3,0.065,4,0.065,5,0.058,8,2.485,9,3.154,10,0.263,11,1.212,12,3.49,13,2.112,14,2.888,15,2.831,16,2.831,17,3.647,18,0.629,20,1.311,21,0.006,22,1.174,23,0.354,24,0.795,25,1.193,26,1.753,27,2.831,29,0.152,30,1.084,38,0.065,39,0.003,43,2.132,54,6.488,67,0.004,68,0.003,141,3.279,295,3.52,529,2.913,545,4.452,546,4.045,847,5.592,949,4.965,950,4.572,1762,5.975,1763,7.227,1764,4.965,1765,5.561,1766,5.561,1767,5.561,1768,5.561]],["title/classes/Grade.html",[0,0.234,232,2.165]],["body/classes/Grade.html",[0,0.2,2,0.581,3,0.048,4,0.048,5,0.043,10,0.194,18,0.795,21,0.006,22,0.951,23,0.457,29,0.234,30,0.798,38,0.048,39,0.002,40,1.727,41,1.876,42,1.627,67,0.004,68,0.002,69,2.145,71,1.645,72,3.482,73,0.73,79,2.719,80,2.784,81,2.784,82,2.122,83,3.607,85,2.925,86,3.255,97,1.983,98,3.482,99,2.034,100,2.74,101,1.936,102,3.112,103,1.983,104,1.936,105,1.983,106,1.936,107,1.983,113,2.914,114,2.272,115,4.386,117,2.711,144,4.994,230,3.366,232,2.657,254,2.978,340,5.67,534,4.371,540,4.619,572,5.257,575,4.531,681,2.344,684,3.745,685,3.655,850,3.746,851,3.565,860,5.67,892,6.157,893,5.306,1769,3.655,1770,6.896,1771,6.896,1772,6.896,1773,4.094,1774,4.094,1775,4.094,1776,5.889,1777,4.094,1778,4.094,1779,4.094,1780,4.094,1781,4.094,1782,4.094,1783,4.094,1784,4.094,1785,4.094]],["title/classes/GradeIndex1624560625346.html",[0,0.234,1786,3.945]],["body/classes/GradeIndex1624560625346.html",[0,0.352,2,0.78,3,0.064,4,0.064,5,0.057,8,2.467,9,3.136,10,0.381,11,1.203,12,3.48,13,2.105,14,2.866,15,2.81,16,2.81,17,3.639,18,0.697,20,1.302,21,0.006,22,1.434,23,0.393,24,0.789,25,1.184,26,1.746,27,2.81,29,0.15,30,1.072,38,0.064,39,0.003,43,2.116,67,0.004,68,0.003,73,0.894,129,0.932,130,1.754,131,2.061,135,3.807,165,3.807,550,4.588,552,3.642,1786,7.027,1787,7.63,1788,4.91,1789,5.499,1790,5.499,1791,5.499,1792,7.214]],["title/classes/GradeRepository.html",[0,0.234,595,3.49]],["body/classes/GradeRepository.html",[0,0.258,2,0.751,3,0.062,4,0.062,5,0.055,10,0.25,11,1.173,18,0.458,20,0.955,21,0.006,22,0.855,23,0.258,24,0.579,25,0.869,26,1.437,29,0.251,30,1.372,33,1.747,38,0.062,39,0.003,46,2.702,67,0.004,68,0.003,71,1.965,222,1.409,224,4.309,225,3.505,232,2.388,248,4.257,249,2.852,250,2.236,251,2.236,252,2.236,534,4.688,540,2.852,595,5.116,850,3.494,851,3.325,860,5.783,982,5.412,1516,6.478,1519,4.351,1793,4.725,1794,6.28,1795,6.28,1796,5.292,1797,4.725,1798,4.072,1799,4.351,1800,4.351,1801,4.725,1802,5.292,1803,5.292,1804,6.28,1805,5.292,1806,5.292,1807,5.292,1808,5.292,1809,4.351,1810,5.292,1811,5.292]],["title/injectables/GradeService.html",[297,1.011,590,3.322]],["body/injectables/GradeService.html",[0,0.266,3,0.064,4,0.064,5,0.057,10,0.258,11,1.197,18,0.694,20,1.294,21,0.006,22,1.159,23,0.391,24,0.785,25,1.178,26,1.74,29,0.248,38,0.064,39,0.003,46,1.681,67,0.004,68,0.003,195,1.167,217,1.626,222,1.91,232,2.461,277,2.304,297,1.511,298,1.933,301,5.642,303,2.795,318,2.939,327,1.933,534,4.793,590,4.967,595,6.609,596,4.869,1516,6.555,1519,4.484,1794,6.405,1795,6.405,1797,4.869,1798,4.196,1801,4.869,1812,4.869,1813,5.453,1814,5.453,1815,5.453,1816,5.453,1817,5.453,1818,5.453,1819,5.453]],["title/classes/HttpExceptionFilter.html",[0,0.234,671,3.177]],["body/classes/HttpExceptionFilter.html",[0,0.2,2,0.58,3,0.048,4,0.048,5,0.042,8,2.011,10,0.193,11,0.981,18,0.596,20,1.061,21,0.006,22,1.113,23,0.287,24,0.643,25,0.671,29,0.206,33,2.894,38,0.048,39,0.002,41,1.38,50,2.792,67,0.004,68,0.002,73,0.729,92,1.475,129,1.353,130,1.303,131,1.531,189,2.417,195,0.874,216,2.14,217,2.247,303,1.592,327,2.442,388,5.287,389,2.417,530,4.791,537,2.598,608,1.59,671,3.894,854,4.791,886,2.828,1051,5.01,1297,3.479,1681,5.3,1820,5.797,1821,3.144,1822,5.663,1823,4.086,1824,5.88,1825,4.834,1826,4.834,1827,6.194,1828,5.3,1829,6.194,1830,4.086,1831,4.086,1832,4.524,1833,4.834,1834,2.972,1835,4.834,1836,3.144,1837,4.276,1838,5.663,1839,4.834,1840,3.359,1841,4.276,1842,3.144,1843,3.359,1844,3.144,1845,3.359,1846,3.359,1847,3.359,1848,3.359,1849,3.359,1850,3.359,1851,3.359,1852,3.359,1853,3.359,1854,5.663,1855,3.359,1856,3.144,1857,3.359,1858,3.359,1859,4.834,1860,3.359,1861,3.359,1862,3.359,1863,3.359,1864,3.359,1865,4.834,1866,3.359,1867,3.359,1868,3.359,1869,3.359,1870,3.359,1871,3.359,1872,3.359,1873,3.359,1874,3.359,1875,3.359,1876,3.359,1877,3.359,1878,3.359,1879,3.359,1880,3.359]],["title/interfaces/IClassValidatorException.html",[608,1.298,1841,3.49]],["body/interfaces/IClassValidatorException.html",[0,0.213,3,0.051,4,0.051,5,0.045,8,1.493,10,0.206,21,0.006,22,0.705,23,0.349,29,0.212,33,2.945,38,0.051,39,0.003,41,1.823,50,2.499,67,0.004,68,0.003,73,0.764,92,1.576,129,1.537,189,2.583,195,0.934,216,2.287,217,1.838,327,1.548,388,4.545,389,2.583,530,4.938,537,2.777,608,1.668,609,1.77,671,2.891,854,3.921,1051,3.176,1297,3.647,1681,6.539,1820,3.36,1821,3.36,1822,5.069,1825,3.59,1826,3.59,1827,5.069,1828,3.36,1829,5.069,1832,4.743,1833,5.069,1834,3.176,1835,5.069,1836,3.36,1837,4.484,1838,6.987,1839,5.069,1840,3.59,1841,5.197,1842,5.974,1843,3.59,1844,3.36,1845,3.59,1846,3.59,1847,3.59,1848,3.59,1849,3.59,1850,3.59,1851,3.59,1852,3.59,1853,3.59,1854,5.875,1855,3.59,1856,3.36,1857,3.59,1858,3.59,1859,5.069,1860,3.59,1861,3.59,1862,3.59,1863,3.59,1864,3.59,1865,5.069,1866,3.59,1867,3.59,1868,3.59,1869,3.59,1870,3.59,1871,3.59,1872,3.59,1873,3.59,1874,3.59,1875,3.59,1876,3.59,1877,3.59,1878,3.59,1879,3.59,1880,3.59]],["title/interfaces/IEntity.html",[608,1.298,1881,3.692]],["body/interfaces/IEntity.html",[0,0.143,3,0.034,4,0.034,5,0.03,8,0.999,9,1.781,10,0.138,12,1.746,13,1.057,16,1.139,17,2.151,21,0.006,22,0.909,23,0.223,26,0.934,27,1.139,29,0.174,30,0.57,31,2.249,33,2.921,34,2.704,36,3.619,38,0.034,39,0.002,40,2.689,41,1.322,43,2.797,45,5.766,46,2.258,55,4.407,56,2.249,57,3.223,58,2.403,59,6.293,60,2.214,61,2.537,62,5.567,63,1.859,67,0.003,68,0.002,73,0.567,92,1.055,100,2.237,125,2.249,147,2.249,225,3.027,232,3.305,295,4.408,425,2.249,490,2.403,525,2.126,527,2.249,533,4.094,534,3.735,536,4.334,537,4.658,538,2.214,540,3.947,542,2.249,544,4.331,548,3.324,575,3.517,608,0.791,609,1.185,851,2.161,1809,5.234,1881,6.636,1882,2.249,1883,2.249,1884,2.609,1885,2.609,1886,2.609,1887,2.403,1888,2.403,1889,2.609,1890,6.408,1891,2.403,1892,2.403,1893,2.403,1894,2.249,1895,2.609,1896,2.609,1897,2.609,1898,2.609,1899,2.609,1900,2.403,1901,2.609,1902,4.081,1903,5.683,1904,6.54,1905,2.609,1906,4.081,1907,6.834]],["title/interfaces/IException.html",[608,1.298,1837,3.49]],["body/interfaces/IException.html",[0,0.201,3,0.048,4,0.048,5,0.043,8,1.406,10,0.194,21,0.006,22,1.221,23,0.419,24,0.911,29,0.207,33,2.899,38,0.048,39,0.002,41,1.774,50,2.394,67,0.004,68,0.002,73,0.732,92,1.484,129,1.557,189,4.47,195,0.88,216,2.154,217,1.761,327,1.457,388,4.396,389,2.432,530,4.805,537,2.615,608,1.598,609,1.667,671,2.723,854,3.756,1051,2.99,1297,4.734,1681,6.41,1820,3.163,1821,3.163,1822,4.856,1825,3.38,1826,3.38,1827,4.856,1828,3.163,1829,4.856,1832,4.544,1833,4.856,1834,2.99,1835,4.856,1836,3.163,1837,5.027,1838,6.85,1839,6.58,1840,6.212,1841,4.296,1842,3.163,1843,3.38,1844,3.163,1845,3.38,1846,3.38,1847,3.38,1848,3.38,1849,3.38,1850,3.38,1851,3.38,1852,3.38,1853,3.38,1854,5.683,1855,3.38,1856,3.163,1857,3.38,1858,3.38,1859,4.856,1860,3.38,1861,3.38,1862,3.38,1863,3.38,1864,3.38,1865,4.856,1866,3.38,1867,3.38,1868,3.38,1869,3.38,1870,3.38,1871,3.38,1872,3.38,1873,3.38,1874,3.38,1875,3.38,1876,3.38,1877,3.38,1878,3.38,1879,3.38,1880,3.38]],["title/modules/InfraModule.html",[256,1.701,383,3.177]],["body/modules/InfraModule.html",[0,0.216,3,0.051,4,0.051,5,0.046,21,0.006,29,0.257,38,0.051,39,0.003,67,0.004,68,0.003,168,2.804,195,0.945,256,2.549,258,2.139,259,2.087,260,2.251,261,2.251,262,2.139,263,3.666,264,3.571,270,3.168,271,2.251,272,2.251,274,3.99,383,6.322,387,5.532,388,5.573,389,2.612,406,4.301,408,3.557,1012,6.511,1032,3.942,1462,5.689,1618,6.419,1701,5.981,1708,3.942,1738,4.781,1751,3.942,1754,3.942,1908,3.942,1909,3.942,1910,4.415,1911,3.942,1912,5.924,1913,6.511,1914,4.415,1915,5.532,1916,4.415,1917,3.63,1918,4.415,1919,4.781,1920,3.63,1921,4.415,1922,4.781,1923,4.415,1924,4.415,1925,4.415,1926,3.942,1927,4.415,1928,4.415,1929,6.213,1930,4.415]],["title/injectables/JwtGuard.html",[200,2.514,297,1.011]],["body/injectables/JwtGuard.html",[0,0.352,3,0.084,4,0.084,5,0.075,21,0.006,29,0.234,38,0.084,39,0.004,67,0.005,68,0.004,71,2.014,195,1.542,200,4.475,297,1.8,298,2.556,1931,6.436,1932,7.209,1933,5.927,1934,7.209]],["title/interfaces/JwtPayload.html",[608,1.298,1935,3.692]],["body/interfaces/JwtPayload.html",[3,0.081,4,0.081,5,0.072,10,0.329,21,0.006,23,0.471,38,0.081,39,0.004,67,0.005,68,0.004,73,1.036,129,1.638,510,7.158,608,1.881,609,2.819,1935,6.434,1936,6.209,1937,6.209]],["title/injectables/JwtStrategy.html",[297,1.011,455,3.49]],["body/injectables/JwtStrategy.html",[0,0.233,3,0.056,4,0.056,5,0.05,10,0.226,11,1.095,13,1.734,18,0.568,20,1.184,21,0.006,22,1.061,23,0.32,24,0.718,25,0.785,26,1.341,29,0.253,33,2.167,36,2.504,38,0.056,39,0.003,43,1.926,46,2.312,49,3.348,50,2.662,60,3.18,61,2.653,67,0.004,68,0.003,71,1.335,92,1.726,195,1.022,217,1.958,222,1.272,297,1.383,298,1.694,303,2.558,327,2.327,388,5.696,389,2.827,392,3.677,436,5.561,437,3.677,455,4.775,458,3.677,459,3.677,478,5.696,489,6.166,491,4.267,1933,3.929,1935,6.212,1938,4.267,1939,6.565,1940,4.779,1941,4.779,1942,6.565,1943,4.779,1944,4.779,1945,4.267,1946,4.779,1947,4.779,1948,4.779,1949,4.267,1950,3.929,1951,4.779,1952,4.779,1953,4.779,1954,4.779,1955,4.779,1956,4.779,1957,4.779,1958,4.779,1959,4.779,1960,4.779,1961,6.565,1962,4.779]],["title/modules/LoggerModule.html",[256,1.701,384,3.49]],["body/modules/LoggerModule.html",[0,0.31,3,0.074,4,0.074,5,0.066,21,0.006,29,0.216,38,0.074,39,0.004,67,0.005,68,0.004,195,1.358,256,3.054,258,3.076,259,3.002,260,3.238,261,3.238,262,3.076,263,4.392,264,4.279,270,4.033,271,3.238,272,3.238,384,6.976,674,6.502,852,6.585,1963,5.669,1964,5.669,1965,5.669,1966,6.349,1967,6.349]],["title/classes/LoginDto.html",[0,0.234,434,3.322]],["body/classes/LoginDto.html",[0,0.383,2,0.89,3,0.073,4,0.073,5,0.065,10,0.296,18,0.679,21,0.006,23,0.383,29,0.234,38,0.073,39,0.004,57,4.903,61,4.355,67,0.005,68,0.004,71,2.192,73,0.972,82,1.814,98,2.894,129,1.451,434,5.431,443,6.213,445,4.151,448,4.99,449,2.829,493,5.154,710,5.597,711,6.589,713,5.597,925,5.597,1968,5.597,1969,6.269,1970,5.154,1971,6.269,1972,6.269]],["title/classes/MailerService.html",[0,0.234,1912,3.177]],["body/classes/MailerService.html",[0,0.328,2,0.953,3,0.078,4,0.078,5,0.07,10,0.318,11,1.366,18,0.582,20,1.212,21,0.006,22,1.085,23,0.328,24,0.735,25,1.103,26,1.672,29,0.184,38,0.078,39,0.004,67,0.005,68,0.004,1912,5.422,1973,5.997,1974,8.209,1975,6.732,1976,7.31,1977,6.856,1978,6.717,1979,5.523,1980,5.997]],["title/injectables/NodeMailerService.html",[297,1.011,1922,3.692]],["body/injectables/NodeMailerService.html",[0,0.252,3,0.06,4,0.06,5,0.054,8,1.763,10,0.244,11,1.153,13,1.802,18,0.598,20,1.247,21,0.006,22,1.117,23,0.337,24,0.756,25,0.846,26,1.411,29,0.25,33,1.702,38,0.06,39,0.003,43,1.512,67,0.004,68,0.003,195,1.103,217,2.325,297,1.456,298,1.827,303,2.692,327,2.764,388,5.809,389,3.049,408,2.951,852,5.516,854,4.958,1033,4.601,1912,4.576,1917,4.238,1919,3.966,1920,4.238,1922,5.317,1975,5.682,1976,6.17,1977,6.504,1979,4.238,1980,4.601,1981,4.601,1982,5.154,1983,7.983,1984,5.154,1985,5.154,1986,4.601,1987,5.154,1988,5.154,1989,6.91,1990,5.154,1991,4.238,1992,5.154,1993,5.154,1994,5.154]],["title/injectables/PayloadInterceptor.html",[297,1.011,672,3.49]],["body/injectables/PayloadInterceptor.html",[0,0.302,3,0.072,4,0.072,5,0.064,8,2.117,10,0.293,11,1.298,18,0.536,20,1.117,21,0.006,22,1,23,0.302,24,0.677,25,1.016,29,0.233,38,0.072,39,0.004,67,0.005,68,0.004,195,1.324,222,1.648,297,1.64,298,2.194,336,4.099,672,5.661,1333,5.089,1493,4.502,1995,5.526,1996,7.784,1997,7.784,1998,7.976,1999,8.515,2000,8.934,2001,6.19,2002,8.515,2003,7.784,2004,5.526,2005,6.19,2006,6.19]],["title/classes/Period.html",[0,0.234,534,2.447]],["body/classes/Period.html",[0,0.232,2,0.675,3,0.055,4,0.055,5,0.049,10,0.309,18,0.789,21,0.006,22,1.209,23,0.461,24,0.716,29,0.205,30,0.927,38,0.055,39,0.003,40,1.919,41,1.117,42,1.89,67,0.004,68,0.003,71,1.828,72,3.72,73,0.811,79,3.021,80,3.093,81,3.093,82,2.106,85,3.716,91,3.871,92,2.363,97,2.304,98,3.72,99,2.363,100,3.554,101,2.248,102,3.375,103,2.304,104,2.248,105,2.304,106,2.248,107,2.304,113,3.405,114,2.64,129,1.109,410,3.871,415,3.459,522,3.357,526,5.578,534,3.336,681,2.723,684,4.161,730,6.2,731,6.2,1229,3.91,2007,4.246,2008,7.48,2009,4.756,2010,4.756,2011,4.756,2012,4.756,2013,3.91,2014,4.756,2015,4.756]],["title/classes/PeriodIndex1624547816204.html",[0,0.234,2016,3.945]],["body/classes/PeriodIndex1624547816204.html",[0,0.227,2,0.659,3,0.054,4,0.054,5,0.048,8,2.201,9,2.878,10,0.349,11,1.074,12,3.311,13,2.003,14,2.558,15,2.507,16,2.507,17,3.514,18,0.64,20,1.161,21,0.006,22,1.353,23,0.36,24,0.704,25,1.057,26,1.629,27,2.507,29,0.127,30,0.906,38,0.054,39,0.003,43,2.657,66,2.664,67,0.004,68,0.003,73,0.798,86,2.779,122,2.558,129,0.787,130,1.481,131,1.741,135,3.215,136,3.662,141,2.904,150,4.566,152,5.31,153,3.197,154,3.943,156,4.886,157,3.943,159,4.719,164,3.118,165,3.215,522,3.444,525,3.378,527,3.573,533,6.304,534,3.282,554,3.685,559,7.121,560,5.292,2016,6.558,2017,7.121,2018,4.146,2019,4.644,2020,4.644,2021,4.644,2022,6.437]],["title/classes/PeriodRepository.html",[0,0.234,597,3.49]],["body/classes/PeriodRepository.html",[0,0.34,2,0.987,3,0.081,4,0.081,5,0.072,21,0.006,29,0.245,30,1.63,38,0.081,39,0.004,67,0.005,68,0.004,71,2.336,248,4.832,249,3.748,250,2.939,251,2.939,252,2.939,534,3.546,597,6.082,1798,5.351,2023,6.209,2024,6.954]],["title/injectables/PeriodService.html",[297,1.011,591,3.322]],["body/injectables/PeriodService.html",[0,0.218,3,0.052,4,0.052,5,0.046,10,0.211,11,1.045,13,1.979,18,0.679,20,1.13,21,0.006,22,1.012,23,0.305,24,0.685,25,1.187,26,1.748,29,0.226,30,0.871,33,2.068,38,0.052,39,0.003,43,1.837,49,3.193,50,2.539,67,0.004,68,0.003,100,3.116,195,0.955,217,1.332,222,2.087,277,1.887,297,1.319,298,1.583,301,5.193,303,2.44,317,2.735,318,2.406,327,1.583,346,5.149,534,4.482,591,4.335,597,6.226,598,3.986,730,4.819,731,4.819,863,3.436,864,3.436,866,3.248,1798,3.436,2025,3.986,2026,7.841,2027,7.233,2028,4.465,2029,4.465,2030,4.465,2031,4.465,2032,4.465,2033,7.233,2034,4.465,2035,4.465,2036,4.465,2037,4.465,2038,4.465,2039,4.465,2040,4.465,2041,7.841,2042,6.263,2043,4.465,2044,6.263,2045,4.465,2046,6.263,2047,4.465,2048,4.465,2049,6.263,2050,6.263,2051,4.465,2052,4.465]],["title/injectables/PersonalQuestionGroup.html",[297,1.011,2053,3.322]],["body/injectables/PersonalQuestionGroup.html",[0,0.302,3,0.051,4,0.051,5,0.046,10,0.207,11,1.031,13,1.656,18,0.535,20,1.116,21,0.006,22,0.999,23,0.302,24,0.677,25,0.72,26,1.263,29,0.252,33,2.365,38,0.051,39,0.004,43,1.814,46,2.209,50,1.778,67,0.004,68,0.003,92,1.584,110,2.635,195,0.938,217,1.844,222,1.907,232,1.979,277,1.853,297,1.303,298,1.555,303,2.409,318,2.363,327,2.192,522,3.549,590,6.055,631,2.363,633,2.687,850,3.864,851,3.678,897,4.388,903,3.374,1010,2.687,1014,3.789,1060,3.036,1062,3.374,1229,3.606,1420,3.915,2013,3.606,2053,4.281,2054,6.395,2055,3.915,2056,7.163,2057,5.385,2058,4.386,2059,4.386,2060,4.386,2061,3.915,2062,3.915,2063,4.386,2064,4.758,2065,3.606,2066,4.386,2067,3.036,2068,4.758,2069,3.606,2070,3.606,2071,3.606,2072,3.915,2073,3.374,2074,4.386,2075,4.386,2076,6.184,2077,4.386,2078,4.386,2079,6.184,2080,4.386,2081,4.386,2082,4.386,2083,3.915,2084,4.386]],["title/classes/Professor.html",[0,0.234,850,2.384]],["body/classes/Professor.html",[0,0.209,2,0.606,3,0.05,4,0.05,5,0.044,10,0.202,18,0.81,21,0.006,23,0.46,24,0.664,26,1.442,29,0.193,30,0.833,34,3.591,36,3.18,38,0.05,39,0.003,40,1.78,41,1.003,42,2.412,46,2.783,63,3.86,67,0.004,68,0.003,71,1.696,72,1.972,73,0.752,74,2.178,79,2.803,80,2.87,81,2.87,82,2.14,85,4.034,91,2.527,92,3.047,95,3.819,97,2.069,98,4.226,99,2.122,100,2.805,101,2.019,102,3.186,103,2.069,104,2.019,105,2.069,106,2.019,107,2.069,129,1.196,130,1.362,222,1.137,232,2.739,243,4.991,254,3.107,410,4.177,411,3.805,627,3.512,634,4.202,681,2.446,803,3.475,812,3.86,850,3.015,862,4.202,893,4.67,2073,5.433,2085,3.814,2086,7.061,2087,4.991,2088,3.814,2089,5.419,2090,4.272,2091,3.814,2092,3.814,2093,3.814,2094,3.814,2095,3.814,2096,3.814,2097,3.814,2098,4.272,2099,4.272]],["title/classes/ProfessorRepository.html",[0,0.234,599,3.49]],["body/classes/ProfessorRepository.html",[0,0.34,2,0.987,3,0.081,4,0.081,5,0.072,21,0.006,29,0.245,30,1.63,38,0.081,39,0.004,67,0.005,68,0.004,71,2.336,248,4.832,249,3.748,250,2.939,251,2.939,252,2.939,599,6.082,850,3.455,1799,5.718,2100,6.209,2101,6.954]],["title/injectables/ProfessorService.html",[297,1.011,592,3.322]],["body/injectables/ProfessorService.html",[0,0.253,3,0.06,4,0.06,5,0.054,10,0.245,11,1.157,18,0.677,20,1.41,21,0.006,22,1.263,23,0.381,24,0.855,25,1.138,26,1.705,29,0.25,30,1.01,33,1.711,38,0.06,39,0.003,67,0.004,68,0.003,82,1.198,195,1.108,217,1.545,222,1.846,250,3.527,251,2.189,252,2.189,277,2.189,297,1.461,298,1.837,302,4.103,303,2.702,318,2.792,327,1.837,347,3.987,592,4.801,599,6.071,600,4.626,800,5.309,850,3.445,1010,3.174,1014,4.248,1040,3.768,1175,3.768,1799,4.26,2102,4.626,2103,6.191,2104,5.181,2105,6.191,2106,5.181,2107,6.191,2108,6.2,2109,5.181,2110,4.626,2111,4.626,2112,5.181,2113,4.626,2114,5.181]],["title/classes/Question.html",[0,0.234,76,1.945]],["body/classes/Question.html",[0,0.177,2,0.513,3,0.042,4,0.042,5,0.038,10,0.254,18,0.806,21,0.006,23,0.469,24,0.777,29,0.194,30,0.705,38,0.042,39,0.002,40,1.577,41,1.783,42,1.436,67,0.003,68,0.002,69,3.979,71,1.501,72,3.806,73,0.666,76,2.179,79,3.281,80,3.359,81,3.359,82,2.151,83,2.214,85,3.773,86,3.068,91,4.204,92,2.874,97,1.751,98,3.806,99,1.795,100,3.163,101,2.541,102,2.895,103,1.751,104,2.541,105,1.751,106,2.541,107,1.751,110,3.24,113,3.484,114,2.983,115,3.418,129,1.349,130,2.267,340,5.276,410,3.18,415,2.628,523,4.204,529,2.816,570,3.931,631,3.829,632,2.628,633,2.214,664,3.931,681,2.069,684,3.418,718,2.604,763,5.729,764,5.729,765,5.276,766,5.276,866,3.909,881,2.393,882,2.393,883,2.393,897,3.931,2115,3.226,2116,3.614,2117,3.614,2118,3.614,2119,3.614,2120,3.614,2121,3.614,2122,3.614,2123,3.614,2124,3.614,2125,3.614,2126,3.614,2127,3.614]],["title/controllers/QuestionController.html",[166,2.027,2128,3.692]],["body/controllers/QuestionController.html",[0,0.154,3,0.037,4,0.037,5,0.033,10,0.149,11,0.808,13,2.182,18,0.681,20,1.42,21,0.006,22,1.271,23,0.434,24,0.861,25,1.292,26,1.794,29,0.233,38,0.037,39,0.002,40,2.216,41,2.061,42,2.346,66,1.304,67,0.003,68,0.002,76,3.377,82,1.819,110,2.987,141,2.664,166,1.332,168,1.422,170,1.864,172,3.082,181,2.004,182,2.425,186,2.425,188,2.867,189,4.233,190,2.292,192,2.182,193,5.204,194,1.931,195,0.674,197,5.622,198,1.864,199,1.455,200,1.651,215,1.931,216,1.651,217,0.94,222,2.095,226,2.425,228,2.425,302,2.867,305,3.755,312,2.087,315,2.087,492,2.775,664,2.969,749,4.087,757,4.804,758,4.294,760,5.622,982,2.425,983,1.864,1021,3.984,1086,2.591,1088,2.425,1090,2.591,1111,2.591,2065,2.591,2128,3.729,2129,2.814,2130,5.271,2131,4.327,2132,4.543,2133,2.814,2134,3.151,2135,2.814,2136,3.151,2137,3.151,2138,2.814,2139,4.821,2140,3.151,2141,2.814,2142,4.846,2143,3.151,2144,2.814,2145,3.151,2146,3.151,2147,4.821,2148,2.814,2149,3.151,2150,4.846,2151,5.907,2152,2.814,2153,3.151,2154,4.327,2155,5.918,2156,2.591,2157,2.814,2158,2.425,2159,2.591,2160,2.814,2161,2.814,2162,2.814,2163,3.151,2164,3.151,2165,3.151,2166,3.151,2167,3.151,2168,3.151,2169,3.151,2170,3.151,2171,3.151,2172,3.151,2173,3.151]],["title/classes/QuestionFindDto.html",[0,0.234,2139,3.49]],["body/classes/QuestionFindDto.html",[0,0.402,2,0.96,3,0.079,4,0.079,5,0.07,10,0.32,18,0.586,21,0.006,23,0.33,24,0.9,29,0.185,38,0.079,39,0.004,41,1.93,67,0.005,68,0.004,73,1.019,82,1.563,110,3.024,449,3.052,664,5.427,665,4.564,699,4.564,2139,5.98,2174,6.76,2175,6.038,2176,6.763,2177,6.763]],["title/classes/QuestionGroup.html",[0,0.234,631,2.586]],["body/classes/QuestionGroup.html",[0,0.364,2,0.491,3,0.04,4,0.04,5,0.036,10,0.246,11,0.868,18,0.8,21,0.006,23,0.462,25,0.568,29,0.19,30,0.675,38,0.04,39,0.002,40,1.527,41,1.751,42,1.375,67,0.003,68,0.002,71,1.454,72,3.753,73,0.645,76,3.023,79,3.211,80,3.288,81,3.288,82,2.135,83,2.121,85,3.455,86,3.003,91,3.079,92,1.879,95,1.72,97,1.677,98,3.753,99,1.72,100,3.113,101,2.46,102,2.822,103,1.677,104,2.46,105,1.677,106,2.46,107,1.677,110,3.147,113,3.31,114,2.889,115,3.31,129,0.882,130,2.499,180,3.288,330,3.977,410,3.079,415,2.518,522,3.229,529,2.727,538,3.03,551,3.7,570,3.831,631,2.805,632,6.222,681,1.982,684,3.31,718,3.369,861,5.719,866,5.059,867,4.815,881,2.292,882,2.292,883,2.292,884,5.142,886,2.396,903,2.663,904,2.846,905,2.846,2013,2.846,2178,3.09,2179,3.461,2180,3.461,2181,3.461,2182,3.461,2183,3.09,2184,3.461,2185,3.461,2186,3.461,2187,3.461,2188,3.461,2189,3.461,2190,3.461,2191,3.461,2192,3.461,2193,3.461,2194,3.09,2195,3.461,2196,3.461,2197,3.461,2198,3.461,2199,3.461]],["title/classes/QuestionGroup1620179231630.html",[0,0.234,2200,3.945]],["body/classes/QuestionGroup1620179231630.html",[0,0.298,2,0.612,3,0.05,4,0.05,5,0.045,8,2.089,9,2.764,10,0.204,11,1.019,12,3.233,13,1.956,14,2.427,15,2.379,16,2.379,17,3.455,18,0.614,20,1.102,21,0.006,22,1.316,23,0.346,24,0.668,25,1.003,26,1.576,27,2.379,29,0.118,30,0.84,38,0.05,39,0.003,40,2.264,43,2.482,66,1.783,67,0.004,68,0.003,73,0.757,76,3.129,86,3.063,90,3.742,122,3.802,124,2.983,129,0.73,130,2.775,131,1.615,135,4.228,136,3.576,137,4.045,138,5.604,139,5.604,140,4.045,141,3.201,142,4.045,143,4.045,149,4.045,150,4.419,151,4.045,152,3.742,153,2.141,154,2.64,156,3.742,157,2.64,159,3.613,164,2.087,165,4.228,423,3.742,523,3.613,538,2.087,550,3.884,553,4.699,555,4.228,556,3.315,765,3.543,766,3.543,2200,6.346,2201,6.891,2202,3.847,2203,4.309,2204,4.309,2205,4.309,2206,3.847,2207,3.847]],["title/controllers/QuestionGroupController.html",[166,2.027,2208,3.692]],["body/controllers/QuestionGroupController.html",[0,0.141,3,0.034,4,0.034,5,0.03,10,0.137,11,0.756,13,2.184,18,0.683,20,1.376,21,0.006,22,1.232,23,0.431,24,0.834,25,1.296,26,1.84,29,0.231,38,0.034,39,0.002,40,2.139,41,2.02,42,2.222,46,2.434,66,1.197,67,0.003,68,0.002,76,2.787,82,1.825,110,2.986,141,2.523,166,1.222,168,1.305,170,1.711,171,2.644,172,2.883,180,2.644,181,1.84,182,2.226,186,2.226,188,2.682,189,4.067,190,2.104,192,3.139,193,5,194,1.772,195,0.619,196,3.139,197,5.619,198,1.711,199,1.335,200,1.515,204,2.778,205,1.916,206,2.002,215,1.772,216,1.515,217,0.863,219,2.582,222,2.101,226,2.226,228,2.226,301,4.192,302,2.682,312,1.916,315,1.916,492,1.656,631,4.374,633,1.772,661,5.305,791,5.049,897,2.778,936,2.378,980,2.582,983,1.711,1084,4.303,1086,2.378,1088,2.226,1090,2.378,1111,2.378,2067,2.002,2132,4.303,2141,2.582,2144,2.582,2148,2.582,2152,2.582,2154,4.048,2155,6.138,2156,2.378,2158,2.226,2162,2.582,2208,3.489,2209,7.246,2210,2.582,2211,4.992,2212,2.582,2213,5.592,2214,2.892,2215,2.582,2216,2.892,2217,2.892,2218,2.892,2219,2.892,2220,2.892,2221,2.892,2222,2.892,2223,2.892,2224,5.305,2225,2.892,2226,5.741,2227,2.892,2228,3.703,2229,2.582,2230,2.378,2231,5.205,2232,2.582,2233,2.892,2234,2.892,2235,2.892,2236,2.892,2237,2.892,2238,2.892,2239,2.892,2240,2.892,2241,2.892,2242,2.892]],["title/classes/QuestionGroupGrade.html",[0,0.234,2064,3.692]],["body/classes/QuestionGroupGrade.html",[0,0.333,2,0.569,3,0.047,4,0.047,5,0.042,10,0.19,11,0.968,18,0.825,21,0.006,23,0.462,25,0.658,29,0.159,38,0.047,39,0.002,40,1.702,41,1.6,42,1.594,67,0.003,68,0.002,71,1.621,72,3.449,73,0.719,76,1.626,79,3.449,80,3.531,81,3.531,82,2.188,83,2.457,85,3.711,86,2.505,91,2.373,92,1.448,97,1.943,98,4.37,99,1.992,100,3.283,101,2.743,102,3.076,103,1.943,104,2.743,105,1.943,106,2.743,107,1.943,110,2.134,129,0.68,130,2.174,180,2.743,232,3.728,242,3.581,330,3.69,410,2.373,522,2.708,529,2.101,538,2.811,551,3.433,570,3.554,631,4.926,633,2.457,681,2.296,718,2.811,861,5.604,866,4.22,867,4.016,881,2.656,882,2.656,883,2.656,884,3.298,886,2.777,897,3.554,2064,4.464,2067,2.777,2174,4.77,2183,3.581,2243,3.581,2244,4.011,2245,4.011,2246,4.011,2247,4.011,2248,4.011,2249,4.011,2250,4.011,2251,4.011,2252,4.011]],["title/classes/QuestionGroupGradeRemove1624883202213.html",[0,0.234,2253,3.945]],["body/classes/QuestionGroupGradeRemove1624883202213.html",[0,0.324,2,0.69,3,0.057,4,0.057,5,0.051,8,2.272,9,2.948,10,0.314,11,1.108,12,3.358,13,2.032,14,2.639,15,2.588,16,2.588,17,3.549,18,0.655,20,1.198,21,0.006,22,1.376,23,0.369,24,0.727,25,1.09,26,1.661,27,2.588,29,0.133,30,0.948,38,0.057,39,0.003,40,1.948,43,1.948,67,0.004,68,0.003,73,0.823,86,3.266,90,4.069,122,3.691,129,0.824,130,2.803,131,1.822,136,2.807,137,3.22,138,5.011,139,5.011,140,3.22,141,2.194,142,3.22,143,3.22,149,3.22,150,2.783,151,3.22,171,2.298,295,2.355,423,2.978,430,3.741,529,3.964,538,2.355,551,2.876,552,3.22,569,5.931,570,4.069,571,3.997,2253,6.686,2254,7.26,2255,4.34,2256,4.862,2257,4.862,2258,4.862]],["title/modules/QuestionGroupModule.html",[256,1.701,269,3.322]],["body/modules/QuestionGroupModule.html",[0,0.238,3,0.057,4,0.057,5,0.051,21,0.006,29,0.259,38,0.057,39,0.003,67,0.004,68,0.003,110,1.793,168,3.002,195,1.043,256,2.686,258,2.361,259,2.304,260,2.485,261,2.485,262,2.361,263,3.863,264,3.764,268,5.825,269,6.74,270,3.393,271,2.485,272,2.485,274,3.693,276,3.099,277,2.059,282,3.545,305,6.083,380,5.594,396,4.351,1137,4.007,2053,6.089,2057,3.374,2070,4.007,2071,4.007,2128,5.83,2160,4.351,2208,5.83,2228,5.825,2229,4.351,2230,4.007,2259,4.351,2260,4.351,2261,4.351,2262,4.874,2263,4.874,2264,4.874,2265,4.874,2266,4.874,2267,4.84,2268,4.351,2269,4.351,2270,4.351,2271,4.874]],["title/classes/QuestionGroupRepository.html",[0,0.234,2057,3.322]],["body/classes/QuestionGroupRepository.html",[0,0.336,2,0.977,3,0.08,4,0.08,5,0.071,21,0.006,29,0.244,30,1.62,38,0.08,39,0.004,67,0.005,68,0.004,71,2.321,110,2.531,248,4.81,249,3.708,250,2.908,251,2.908,252,2.908,631,3.708,633,4.216,2057,5.752,2067,4.764,2272,6.144,2273,6.144,2274,6.881]],["title/injectables/QuestionGroupService.html",[297,1.011,2228,3.177]],["body/injectables/QuestionGroupService.html",[0,0.175,3,0.025,4,0.025,5,0.022,10,0.102,11,0.599,13,2.089,18,0.656,20,1.325,21,0.006,22,1.187,23,0.358,24,0.804,25,1.206,26,1.727,29,0.24,30,0.7,33,2.565,38,0.025,39,0.003,40,2.221,41,1.864,42,0.86,43,2.48,46,1.417,49,1.83,50,1.863,66,0.896,67,0.002,68,0.001,76,2.403,82,1.37,110,2.858,124,2.484,141,2.074,171,2.173,172,2.282,180,3.021,181,2.282,195,0.463,217,1.595,222,1.885,250,3.355,251,0.915,252,0.915,277,0.915,297,0.756,298,0.767,301,3.541,302,2.123,303,1.398,305,4.304,312,2.377,315,1.434,317,2.816,318,1.167,319,2.377,320,1.499,321,1.575,327,2.399,330,1.377,335,1.499,336,1.434,341,1.78,357,1.666,492,1.24,522,2.355,529,1.134,570,2.816,631,4.497,633,1.326,661,4.648,791,4.424,850,1.783,851,1.697,859,1.78,867,1.499,897,3.632,903,1.666,904,1.78,905,1.78,983,1.281,1010,1.326,1011,4.304,1014,2.199,1040,1.575,1043,1.78,1044,1.78,1060,3.182,1062,3.537,1084,3.537,1174,1.933,1241,1.933,1242,1.78,1512,4.114,1804,3.204,2053,3.702,2057,3.702,2061,1.933,2062,1.933,2067,1.499,2068,4.114,2069,1.78,2070,1.78,2071,1.78,2072,1.933,2083,1.933,2132,3.537,2158,1.666,2211,4.104,2212,1.933,2215,1.933,2224,3.889,2226,5.151,2228,2.377,2231,4.396,2232,1.933,2269,1.933,2270,1.933,2275,6.936,2276,1.933,2277,4.596,2278,4.596,2279,2.165,2280,2.165,2281,2.165,2282,2.165,2283,2.165,2284,2.165,2285,2.165,2286,2.165,2287,1.933,2288,2.165,2289,2.165,2290,2.165,2291,2.165,2292,2.165,2293,3.779,2294,2.165,2295,2.165,2296,1.666,2297,1.933,2298,2.165,2299,2.165,2300,3.589,2301,2.165,2302,2.165,2303,2.165,2304,3.589,2305,3.589,2306,3.589,2307,4.596,2308,2.165,2309,2.165,2310,3.589,2311,2.165,2312,2.165,2313,2.165,2314,2.165,2315,2.165,2316,1.933,2317,2.165,2318,2.165,2319,2.165,2320,2.165,2321,3.589,2322,2.165,2323,2.165,2324,2.165,2325,2.165,2326,2.165]],["title/classes/QuestionGroupTarget1621992475274.html",[0,0.234,2327,3.945]],["body/classes/QuestionGroupTarget1621992475274.html",[0,0.213,2,0.62,3,0.051,4,0.051,5,0.045,8,2.108,9,2.784,10,0.413,11,1.028,12,3.247,13,1.965,14,2.45,15,2.402,16,2.402,17,3.466,18,0.619,20,1.112,21,0.006,22,1.323,23,0.442,24,0.674,25,1.012,26,1.586,27,2.402,29,0.119,30,0.851,38,0.051,39,0.003,43,2.754,46,2.797,67,0.004,68,0.003,73,0.764,95,3.062,113,3.02,122,2.839,129,0.74,130,1.393,131,1.637,136,3.591,153,3.55,164,4.117,171,3.378,294,4.743,295,4.454,296,4.445,423,2.675,429,6.932,550,4.938,747,3.378,850,3.062,851,2.914,1252,5.504,2327,6.383,2328,6.932,2329,3.898,2330,4.366,2331,4.366,2332,4.366]],["title/interfaces/QuestionGroupUser.html",[608,1.298,2333,3.945]],["body/interfaces/QuestionGroupUser.html",[3,0.083,4,0.083,5,0.074,10,0.337,21,0.006,23,0.348,38,0.083,39,0.004,40,2.752,41,2.128,67,0.005,68,0.004,73,1.052,110,2.623,608,1.929,609,2.891,611,5.186,897,4.368,2333,6.978,2334,6.366]],["title/classes/QuestionImage1620477869366.html",[0,0.234,2335,3.945]],["body/classes/QuestionImage1620477869366.html",[0,0.214,2,0.621,3,0.051,4,0.051,5,0.045,8,2.112,9,2.787,10,0.207,11,1.03,12,3.249,13,1.966,14,2.453,15,2.405,16,2.405,17,3.468,18,0.62,20,1.114,21,0.006,22,1.324,23,0.349,24,0.675,25,1.014,26,1.587,27,2.405,29,0.12,30,0.853,38,0.051,39,0.003,43,2.698,66,2.555,67,0.004,68,0.003,73,0.765,76,3.729,86,2.665,122,3.379,129,0.741,130,1.969,131,1.64,136,3.887,141,2.786,150,4.449,152,5.636,153,3.067,154,3.783,156,4.761,157,3.783,159,4.598,164,2.991,423,3.783,523,3.653,553,5.98,554,4.869,555,5.888,556,4.751,2206,6.938,2207,6.938,2335,6.39,2336,6.938,2337,3.907,2338,4.376,2339,4.376,2340,4.376]],["title/classes/QuestionPosition1620488935141.html",[0,0.234,2341,3.945]],["body/classes/QuestionPosition1620488935141.html",[0,0.253,2,0.735,3,0.06,4,0.06,5,0.054,8,2.372,9,3.045,10,0.245,11,1.157,12,3.422,13,2.07,14,2.755,15,2.702,16,2.702,17,3.596,18,0.677,20,1.251,21,0.006,22,1.406,23,0.381,24,0.759,25,1.138,26,1.705,27,2.702,29,0.142,30,1.01,38,0.06,39,0.003,43,2.449,67,0.004,68,0.003,73,0.86,76,2.811,86,2.994,113,2.93,122,2.755,129,0.878,130,2.493,131,1.942,136,3.527,152,5.114,153,3.445,164,3.359,529,3.633,550,4.41,570,5.114,2341,6.863,2342,7.453,2343,4.626,2344,5.181,2345,5.181,2346,5.181]],["title/classes/QuestionPositionIdx1620563708532.html",[0,0.234,2347,3.945]],["body/classes/QuestionPositionIdx1620563708532.html",[0,0.222,2,0.644,3,0.053,4,0.053,5,0.047,8,2.166,9,2.842,10,0.393,11,1.056,12,3.287,13,1.989,14,2.516,15,2.467,16,2.467,17,3.496,18,0.632,20,1.143,21,0.006,22,1.342,23,0.356,24,0.693,25,1.04,26,1.613,27,2.467,29,0.124,30,0.885,38,0.053,39,0.003,43,2.719,66,2.621,67,0.004,68,0.003,73,0.785,76,3.652,86,2.734,122,2.516,129,0.769,130,1.447,131,1.701,135,4.384,136,3.636,141,2.858,150,4.521,152,5.271,153,3.146,154,3.88,156,4.837,157,3.88,159,4.671,164,3.068,165,4.384,550,4.028,553,6.076,554,3.626,555,5.956,556,4.873,570,3.88,571,5.207,2347,6.492,2348,7.05,2349,4.051,2350,4.537,2351,4.537,2352,4.537,2353,6.333]],["title/classes/QuestionRepository.html",[0,0.234,2267,3.49]],["body/classes/QuestionRepository.html",[0,0.338,2,0.983,3,0.081,4,0.081,5,0.072,21,0.006,29,0.245,30,1.627,38,0.081,39,0.004,67,0.005,68,0.004,71,2.331,76,2.809,110,2.549,248,4.825,249,3.734,250,2.928,251,2.928,252,2.928,2159,5.698,2267,6.069,2354,6.187,2355,6.93]],["title/injectables/QuestionService.html",[297,1.011,305,3.051]],["body/injectables/QuestionService.html",[0,0.113,3,0.027,4,0.027,5,0.024,10,0.109,11,0.632,13,2.112,18,0.687,20,1.431,21,0.006,22,1.282,23,0.387,24,0.868,25,1.272,26,1.82,29,0.235,30,0.739,33,2.3,38,0.027,39,0.002,40,2.272,41,2.057,42,0.919,43,2.043,49,1.932,50,1.951,66,0.957,67,0.002,68,0.001,76,3.342,82,1.525,110,2.979,124,2.623,141,1.71,172,2.41,181,2.41,195,0.495,217,1.13,222,2.112,250,3.537,251,0.977,252,0.977,277,0.977,297,0.798,298,0.82,302,2.242,303,1.476,305,2.41,312,2.509,315,2.509,317,2.949,318,1.246,319,2.509,320,1.601,321,1.682,327,2.177,330,4.196,335,1.601,336,1.531,337,3.383,357,1.779,408,1.324,488,1.779,492,2.169,496,1.901,529,1.211,570,3.763,631,2.999,633,1.417,664,4.268,749,3.332,757,4.43,758,3.501,760,4.823,897,2.949,983,1.368,1010,1.417,1014,2.321,1021,3.115,1040,1.682,1043,3.115,1044,4.576,1060,2.623,1165,2.064,1211,1.901,1242,1.901,1655,4.969,2065,1.901,2067,1.601,2069,1.901,2130,4.297,2131,3.383,2132,3.704,2133,2.064,2135,2.064,2138,3.383,2139,4.048,2147,4.048,2151,4.048,2157,2.064,2158,1.779,2159,1.901,2161,2.064,2228,4.068,2230,1.901,2267,4.048,2268,2.064,2287,2.064,2296,1.779,2297,2.064,2356,2.064,2357,4.813,2358,3.789,2359,3.789,2360,4.813,2361,2.312,2362,2.312,2363,2.312,2364,2.312,2365,2.312,2366,2.312,2367,3.789,2368,2.312,2369,2.312,2370,3.789,2371,2.312,2372,2.312,2373,2.312,2374,2.312,2375,3.957,2376,2.312,2377,2.312,2378,2.312,2379,2.312,2380,3.789,2381,2.312,2382,2.312,2383,3.789,2384,2.312,2385,2.312,2386,2.312,2387,3.789,2388,2.312,2389,3.789,2390,2.312,2391,2.312,2392,2.064,2393,2.312,2394,2.312,2395,2.312,2396,2.312,2397,2.312]],["title/classes/ReorderQuestionDto.html",[0,0.234,2147,3.49]],["body/classes/ReorderQuestionDto.html",[0,0.389,2,0.913,3,0.075,4,0.075,5,0.067,10,0.304,18,0.69,21,0.006,23,0.389,29,0.176,38,0.075,39,0.004,41,2.126,67,0.005,68,0.004,73,0.988,82,1.843,92,2.879,110,3.187,449,2.902,664,5.308,665,4.809,744,5.799,762,4.949,2147,5.799,2392,7.735,2398,7.124,2399,6.432,2400,5.743,2401,6.432,2402,6.432]],["title/classes/ReorderQuestionGroupDto.html",[0,0.234,2224,3.49]],["body/classes/ReorderQuestionGroupDto.html",[0,0.386,2,0.898,3,0.074,4,0.074,5,0.066,10,0.299,18,0.683,21,0.006,23,0.385,29,0.173,38,0.074,39,0.004,41,2.114,67,0.005,68,0.004,73,0.978,76,3.487,82,1.824,92,2.85,110,3.164,180,4.066,449,2.856,663,4.603,665,4.998,667,5.651,741,4.87,744,5.741,2224,5.741,2316,7.679,2398,7.072,2400,5.651,2403,6.329]],["title/classes/SeedAuxiliary1624412129413.html",[0,0.234,1894,3.692]],["body/classes/SeedAuxiliary1624412129413.html",[0,0.135,2,0.393,3,0.032,4,0.032,5,0.029,8,1.499,9,2.118,10,0.131,11,0.731,12,2.736,13,1.655,14,1.741,15,1.707,16,1.707,17,3.059,18,0.379,20,0.791,21,0.006,22,1.088,23,0.265,24,0.479,25,0.719,26,1.263,27,1.707,29,0.169,30,0.54,31,2.132,33,2.887,34,2.593,36,3.528,38,0.032,39,0.002,40,2.594,41,0.65,43,2.778,45,5.677,46,2.208,55,4.279,56,2.132,57,3.113,58,2.278,59,6.167,60,2.123,61,2.433,62,5.455,63,1.762,67,0.003,68,0.002,92,1,100,2.161,125,2.132,147,2.132,225,2.902,232,3.231,295,4.364,425,2.132,490,2.278,525,2.015,527,2.132,533,3.955,534,3.651,536,4.236,537,4.554,538,2.123,540,3.859,542,2.132,544,4.184,548,3.188,575,3.372,608,0.749,851,2.072,1809,5.082,1881,6.437,1882,4.184,1883,2.132,1884,2.474,1885,2.474,1886,2.474,1887,2.278,1888,2.278,1889,2.474,1890,6.31,1891,2.278,1892,2.278,1893,2.278,1894,3.372,1895,2.474,1896,2.474,1897,2.474,1898,2.474,1899,2.474,1900,2.278,1901,2.474,1902,3.913,1903,5.519,1904,6.393,1905,2.474,1906,3.913,1907,6.696,2404,2.771,2405,2.771]],["title/interfaces/SendAgreementEmailDto.html",[608,1.298,2406,3.692]],["body/interfaces/SendAgreementEmailDto.html",[3,0.078,4,0.078,5,0.069,10,0.315,21,0.006,23,0.447,29,0.182,38,0.078,39,0.004,46,2.828,67,0.005,68,0.004,73,1.011,74,4.677,108,4.619,109,4.243,129,1.13,608,1.805,609,2.705,803,3.82,899,5.222,1019,6.704,2406,6.274,2407,5.485,2408,5.957]],["title/injectables/SendEmailService.html",[297,1.011,1012,3.322]],["body/injectables/SendEmailService.html",[0,0.262,3,0.062,4,0.062,5,0.056,10,0.254,11,1.184,13,1.838,18,0.615,20,1.28,21,0.006,22,1.147,23,0.346,24,0.776,25,0.881,26,1.45,29,0.231,33,2.343,38,0.062,39,0.003,67,0.004,68,0.003,195,1.148,217,2.116,297,1.495,298,1.902,303,2.765,327,2.516,523,4.705,540,2.891,826,4.411,830,4.128,899,2.977,1008,6.336,1012,4.913,1031,6.539,1211,4.411,1912,5.99,1913,6.387,1975,4.411,1979,4.411,1986,4.789,2406,6.513,2409,4.789,2410,5.364,2411,5.364,2412,7.097,2413,5.364,2414,5.364,2415,5.364,2416,6.336,2417,7.097,2418,7.097,2419,5.364,2420,5.364,2421,4.789,2422,5.364,2423,5.364,2424,5.364]],["title/classes/SendMailDto.html",[0,0.234,1977,3.49]],["body/classes/SendMailDto.html",[0,0.318,2,0.925,3,0.076,4,0.076,5,0.068,10,0.308,18,0.788,21,0.006,23,0.444,38,0.076,39,0.004,67,0.005,68,0.004,73,0.996,129,1.651,523,5.156,540,4.697,1977,5.846,2407,7.684,2416,7.781,2425,5.819,2426,6.517,2427,6.517,2428,6.517,2429,6.517]],["title/interfaces/SoftDeleteResult.html",[319,3.177,608,1.298]],["body/interfaces/SoftDeleteResult.html",[3,0.082,4,0.082,5,0.073,10,0.332,21,0.006,23,0.439,38,0.082,39,0.004,41,1.65,66,2.909,67,0.005,68,0.004,73,1.043,319,5.573,320,4.866,608,1.901,609,2.85,1019,6.919,2430,5.779,2431,9.336,2432,7.029]],["title/classes/Student.html",[0,0.234,851,2.268]],["body/classes/Student.html",[0,0.209,2,0.606,3,0.05,4,0.05,5,0.044,10,0.202,18,0.81,21,0.006,23,0.46,24,0.664,26,1.442,29,0.193,30,0.833,34,3.591,36,3.18,38,0.05,39,0.003,40,1.78,41,1.003,42,2.412,46,2.783,63,3.86,67,0.004,68,0.003,71,1.696,72,1.972,73,0.752,74,2.178,79,2.803,80,2.87,81,2.87,82,2.14,85,4.034,91,2.527,92,3.047,95,3.819,97,2.069,98,4.226,99,2.122,100,2.805,101,2.019,102,3.186,103,2.069,104,2.019,105,2.069,106,2.019,107,2.069,129,1.196,130,1.362,222,1.137,232,2.739,243,4.991,254,3.107,410,4.177,411,3.805,627,3.512,634,4.202,681,2.446,803,3.475,812,3.86,851,2.87,862,4.202,893,4.67,2073,5.433,2087,4.991,2088,3.814,2089,5.419,2091,3.814,2092,3.814,2093,3.814,2094,3.814,2095,3.814,2096,3.814,2097,3.814,2433,3.814,2434,7.061,2435,4.272,2436,4.272,2437,4.272]],["title/classes/StudentRepository.html",[0,0.234,601,3.49]],["body/classes/StudentRepository.html",[0,0.34,2,0.987,3,0.081,4,0.081,5,0.072,21,0.006,29,0.245,30,1.63,38,0.081,39,0.004,67,0.005,68,0.004,71,2.336,248,4.832,249,3.748,250,2.939,251,2.939,252,2.939,601,6.082,851,3.288,1800,5.718,2438,6.209,2439,6.954]],["title/injectables/StudentService.html",[297,1.011,593,3.322]],["body/injectables/StudentService.html",[0,0.253,3,0.06,4,0.06,5,0.054,10,0.245,11,1.157,18,0.677,20,1.41,21,0.006,22,1.263,23,0.381,24,0.855,25,1.138,26,1.705,29,0.25,30,1.01,33,1.711,38,0.06,39,0.003,67,0.004,68,0.003,82,1.198,195,1.108,217,1.545,222,1.846,250,3.527,251,2.189,252,2.189,277,2.189,297,1.461,298,1.837,302,4.103,303,2.702,318,2.792,327,1.837,347,3.987,593,4.801,601,6.071,602,4.626,800,5.309,851,3.278,1010,3.174,1014,4.248,1040,3.768,1175,3.768,1800,4.26,2103,6.191,2105,6.191,2107,6.191,2108,6.2,2110,4.626,2111,4.626,2113,4.626,2440,4.626,2441,5.181,2442,5.181,2443,5.181,2444,5.181,2445,5.181]],["title/classes/Subject.html",[0,0.234,540,2.586]],["body/classes/Subject.html",[0,0.224,2,0.651,3,0.053,4,0.053,5,0.048,10,0.217,18,0.794,21,0.006,23,0.462,29,0.217,30,0.895,38,0.053,39,0.003,40,1.873,41,1.724,42,1.824,67,0.004,68,0.003,71,1.783,72,3.664,73,0.791,79,2.948,80,3.018,81,3.018,82,2.121,83,2.812,85,3.647,86,2.756,92,2.305,97,2.223,98,3.664,99,2.28,100,2.917,101,2.17,102,3.312,103,2.223,104,2.17,105,2.223,106,2.17,107,2.223,113,3.353,114,2.548,115,4.06,117,3.04,129,1.345,232,3.764,254,3.338,410,4.695,411,3.44,536,5.241,537,4.669,538,3.556,540,3.44,681,2.628,684,4.06,2073,5.649,2446,4.098,2447,7.341,2448,4.59,2449,4.59,2450,4.59,2451,4.59,2452,4.59,2453,4.59,2454,4.59,2455,4.59]],["title/interfaces/SwaggerOptions.html",[608,1.298,2456,3.692]],["body/interfaces/SwaggerOptions.html",[3,0.076,4,0.076,5,0.068,10,0.31,21,0.006,23,0.445,38,0.076,39,0.004,67,0.005,68,0.004,73,1,129,1.666,524,6.633,538,4.418,608,1.775,609,2.66,2456,6.21,2457,5.857,2458,8.142,2459,8.142,2460,8.741]],["title/injectables/TemplateService.html",[297,1.011,1913,3.322]],["body/injectables/TemplateService.html",[0,0.249,3,0.059,4,0.059,5,0.071,10,0.241,11,1.145,18,0.672,20,1.238,21,0.006,22,1.109,23,0.378,24,0.558,25,0.837,29,0.227,33,2.56,38,0.059,39,0.003,49,2.601,50,2.782,67,0.004,68,0.003,73,0.851,129,1.467,195,1.091,217,2.313,222,1.358,297,1.446,298,1.808,303,3.021,327,2.749,335,4.751,336,3.378,950,4.194,1155,3.925,1297,3.018,1913,4.751,2461,4.554,2462,7.755,2463,6.862,2464,6.862,2465,8.295,2466,7.406,2467,5.101,2468,5.101,2469,5.101,2470,5.101,2471,5.101,2472,5.101,2473,6.127,2474,5.101,2475,5.101,2476,5.101,2477,5.101,2478,5.101,2479,5.101,2480,5.101,2481,5.101,2482,5.101,2483,5.101,2484,5.101,2485,5.101,2486,5.101,2487,5.101,2488,6.862,2489,5.101,2490,5.101,2491,5.101,2492,5.101]],["title/classes/TimestampEntity.html",[0,0.234,102,2.165]],["body/classes/TimestampEntity.html",[0,0.305,2,0.887,3,0.073,4,0.073,5,0.065,10,0.295,18,0.74,21,0.006,23,0.417,29,0.171,30,1.218,38,0.073,39,0.004,67,0.005,68,0.004,71,2.187,73,0.971,79,3.948,80,4.043,81,4.043,82,1.977,100,3.743,101,4.043,102,3.533,104,4.043,106,4.043,2493,5.579,2494,8.551,2495,6.249,2496,6.249,2497,6.249]],["title/classes/UpdateAnswerDto.html",[0,0.234,185,3.49]],["body/classes/UpdateAnswerDto.html",[0,0.35,2,1.016,3,0.083,4,0.083,5,0.074,21,0.006,29,0.233,38,0.083,39,0.004,67,0.005,68,0.004,71,1.999,171,3.383,177,4.954,185,6.187,210,5.884,689,5.884,2498,6.389,2499,5.506,2500,5.884,2501,5.884,2502,7.156]],["title/classes/UpdateExamAgreementDto.html",[0,0.234,979,3.322]],["body/classes/UpdateExamAgreementDto.html",[0,0.425,2,0.819,3,0.067,4,0.067,5,0.06,10,0.273,18,0.645,21,0.006,23,0.44,24,0.953,29,0.225,38,0.087,39,0.003,41,1.748,46,1.78,67,0.004,68,0.003,73,0.923,82,1.721,129,1.262,175,4.133,180,2.729,203,3.415,447,4.931,448,4.735,449,2.605,522,3.275,547,5.241,665,4.133,699,4.574,717,4.199,718,3.992,719,5.154,722,3.671,723,5.154,768,5.154,844,5.705,977,3.996,979,5.154,985,3.671,2503,6.341,2504,5.773,2505,5.773]],["title/classes/UpdateExamAgreementQueryDto.html",[0,0.234,977,3.322]],["body/classes/UpdateExamAgreementQueryDto.html",[0,0.429,2,0.836,3,0.069,4,0.069,5,0.061,10,0.279,18,0.653,21,0.006,23,0.442,29,0.228,38,0.088,39,0.004,41,1.954,46,2.566,67,0.005,68,0.004,73,0.935,82,1.362,129,0.999,175,4.619,180,3.935,203,3.487,447,4.997,448,4.799,449,2.659,522,3.307,547,3.748,665,4.188,699,4.619,717,4.287,718,3.655,722,3.748,723,5.223,844,4.08,977,5.223,979,4.08,985,3.748,2503,6.404,2506,5.894,2507,5.894,2508,5.894]],["title/classes/UpdateExamDto.html",[0,0.234,1097,3.49]],["body/classes/UpdateExamDto.html",[0,0.35,2,1.016,3,0.083,4,0.083,5,0.074,21,0.006,29,0.233,38,0.083,39,0.004,67,0.005,68,0.004,71,1.999,171,3.383,727,4.954,728,5.884,1097,6.187,1100,5.884,2499,5.506,2500,5.884,2501,5.884,2503,5.506,2509,7.156]],["title/classes/UpdateQuestionDto.html",[0,0.234,2151,3.49]],["body/classes/UpdateQuestionDto.html",[0,0.35,2,1.016,3,0.083,4,0.083,5,0.074,21,0.006,29,0.233,38,0.083,39,0.004,67,0.005,68,0.004,71,1.999,110,2.632,171,3.383,199,3.304,757,4.551,758,5.205,762,5.506,2151,6.187,2499,5.506,2510,5.884,2511,7.156]],["title/classes/UpdateQuestionGroupDto.html",[0,0.234,2226,3.49]],["body/classes/UpdateQuestionGroupDto.html",[0,0.346,2,1.005,3,0.082,4,0.082,5,0.074,21,0.006,29,0.231,38,0.082,39,0.004,67,0.005,68,0.004,71,1.977,76,3.426,110,2.604,171,3.347,663,5.149,791,4.901,2226,6.147,2231,5.82,2499,5.447,2500,5.82,2501,5.82,2510,5.82,2512,7.079]],["title/classes/UpdateUserDto.html",[0,0.234,2513,3.49]],["body/classes/UpdateUserDto.html",[0,0.403,2,0.966,3,0.079,4,0.079,5,0.071,10,0.322,18,0.59,21,0.006,23,0.332,24,0.903,29,0.186,38,0.079,39,0.004,67,0.005,68,0.004,73,1.023,82,1.574,129,1.399,449,3.073,699,4.583,802,5.24,803,5.087,815,7.371,2513,6.005,2514,7.371,2515,6.81,2516,6.81]],["title/controllers/UploadController.html",[166,2.027,1915,3.692]],["body/controllers/UploadController.html",[0,0.28,3,0.067,4,0.067,5,0.085,10,0.271,11,1.237,13,1.9,18,0.497,20,1.035,21,0.006,22,0.927,23,0.28,24,0.628,25,0.942,29,0.252,38,0.067,39,0.003,67,0.004,68,0.003,82,1.327,166,2.425,168,2.59,170,3.396,188,4.388,194,3.516,195,1.228,196,5.135,198,3.396,199,2.65,200,3.007,201,3.973,215,3.516,216,3.007,217,1.712,222,1.528,1381,4.416,1462,4.717,1717,6.324,1834,4.174,1915,5.707,1920,4.719,1926,5.124,2517,5.124,2518,5.739,2519,8.219,2520,5.739,2521,5.739,2522,5.739,2523,5.739,2524,5.739,2525,5.124,2526,6.099,2527,5.739,2528,5.739,2529,5.739,2530,5.739,2531,5.739]],["title/classes/UploaderService.html",[0,0.234,1462,3.051]],["body/classes/UploaderService.html",[0,0.32,2,0.931,3,0.076,4,0.076,5,0.068,10,0.31,11,1.346,18,0.568,20,1.184,21,0.006,22,1.06,23,0.32,24,0.718,25,1.077,26,1.648,29,0.179,38,0.076,39,0.004,67,0.005,68,0.004,129,1.481,1297,5.171,1462,5.133,1508,6.633,1547,5.394,1717,6.21,1746,5.857,1747,7.205,1752,5.857,1753,5.857,1974,8.142,2532,5.857,2533,6.561]],["title/classes/User.html",[0,0.234,46,1.479]],["body/classes/User.html",[0,0.182,2,0.528,3,0.043,4,0.043,5,0.039,10,0.176,18,0.796,21,0.006,22,0.602,23,0.474,24,0.601,29,0.21,30,0.726,34,3.864,36,3.421,38,0.043,39,0.002,40,1.612,41,0.874,42,2.183,46,1.694,63,4.153,67,0.003,68,0.002,71,1.535,72,3.843,73,0.681,74,3.676,79,3.329,80,3.409,81,3.409,82,2.126,85,3.82,91,3.251,92,3.085,95,4.407,97,1.803,98,3.843,99,1.849,100,3.198,101,2.598,102,2.947,103,1.803,104,2.598,105,1.803,106,2.598,107,1.803,108,2.577,109,2.368,113,3.517,114,2.066,116,4.906,117,2.465,119,1.719,129,1.364,130,1.753,410,4.761,411,4.337,634,5.324,636,3.061,681,2.132,684,3.494,803,3.739,812,5.118,820,4.228,881,2.465,882,2.465,883,2.465,899,2.066,2087,5.369,2534,3.324,2535,3.723,2536,3.723,2537,3.723,2538,3.723,2539,3.723,2540,3.723,2541,3.723,2542,3.723,2543,3.723]],["title/controllers/UserController.html",[166,2.027,2544,3.692]],["body/controllers/UserController.html",[0,0.236,3,0.056,4,0.056,5,0.05,10,0.229,11,1.104,18,0.654,20,1.362,21,0.006,22,1.219,23,0.368,24,0.826,25,1.239,29,0.25,38,0.056,39,0.003,46,2.984,67,0.004,68,0.003,82,1.745,166,2.044,168,2.183,170,2.862,188,4.465,189,2.862,192,4.583,194,2.964,195,1.035,198,2.862,199,2.234,200,2.534,204,4.972,206,3.349,215,4.056,216,2.534,217,1.443,222,2.009,478,4.8,492,2.77,800,5.581,983,2.862,1175,4.815,1641,4.815,1643,5.443,2156,3.978,2513,6.535,2544,5.094,2545,4.319,2546,3.978,2547,4.838,2548,4.838,2549,4.838,2550,4.838,2551,4.838,2552,4.838,2553,4.838,2554,4.838,2555,3.978,2556,4.319,2557,4.838,2558,4.838,2559,4.838,2560,4.838,2561,4.838,2562,4.838,2563,4.838]],["title/classes/UserDto.html",[0,0.234,2108,3.322]],["body/classes/UserDto.html",[0,0.407,2,0.98,3,0.08,4,0.08,5,0.072,10,0.326,18,0.598,21,0.006,23,0.337,29,0.189,36,4.683,38,0.08,39,0.004,67,0.005,68,0.004,73,1.032,82,1.596,129,1.411,445,4.573,447,5.514,448,5.295,449,3.116,2108,5.764,2564,6.165,2565,6.906]],["title/classes/UserEmail1625013724392.html",[0,0.234,2566,3.945]],["body/classes/UserEmail1625013724392.html",[0,0.251,2,0.73,3,0.06,4,0.06,5,0.053,8,2.359,9,3.033,10,0.368,11,1.151,12,3.414,13,2.065,14,2.741,15,2.687,16,2.687,17,3.591,18,0.674,20,1.245,21,0.006,22,1.402,23,0.38,24,0.755,25,1.132,26,1.7,27,2.687,29,0.141,30,1.002,38,0.06,39,0.003,43,2.441,46,2.566,67,0.004,68,0.003,73,0.855,113,2.172,122,2.043,129,0.871,130,1.64,131,1.927,136,3.516,153,3.427,164,3.342,294,5.308,295,3.342,296,3.95,411,2.77,423,3.149,803,4.458,2566,6.841,2567,7.429,2568,4.589,2569,5.141,2570,5.141,2571,5.141,2572,6.898]],["title/modules/UserModule.html",[256,1.701,385,3.322]],["body/modules/UserModule.html",[0,0.276,3,0.066,4,0.066,5,0.059,21,0.006,29,0.255,38,0.066,39,0.003,67,0.004,68,0.003,168,3.316,195,1.21,256,2.893,258,2.74,259,2.674,260,2.884,261,2.884,262,2.74,263,4.162,264,4.055,270,3.747,271,2.884,272,2.884,274,3.14,276,3.598,277,2.39,379,5.087,380,4.673,385,6.469,394,5.05,478,6.224,488,6.28,1137,4.651,2544,6.28,2556,5.05,2573,5.05,2574,5.05,2575,5.05,2576,5.657,2577,5.657,2578,4.114,2579,5.05,2580,5.657]],["title/classes/UserRepository.html",[0,0.234,2578,3.49]],["body/classes/UserRepository.html",[0,0.34,2,0.987,3,0.081,4,0.081,5,0.072,21,0.006,29,0.245,30,1.63,38,0.081,39,0.004,46,2.144,67,0.005,68,0.004,71,2.336,248,4.832,249,3.748,250,2.939,251,2.939,252,2.939,2555,5.718,2578,6.082,2581,6.209,2582,6.954]],["title/interfaces/UserResult.html",[608,1.298,2583,3.692]],["body/interfaces/UserResult.html",[3,0.078,4,0.078,5,0.07,10,0.319,21,0.006,23,0.468,29,0.184,38,0.078,39,0.004,40,2.7,41,2.077,67,0.005,68,0.004,73,1.017,119,3.112,217,2.447,608,1.823,609,2.733,812,5.854,820,5.186,2430,5.542,2583,6.313,2584,6.018,2585,5.542]],["title/injectables/UserService.html",[297,1.011,478,3.051]],["body/injectables/UserService.html",[0,0.137,3,0.033,4,0.033,5,0.029,10,0.133,11,0.738,13,2.103,18,0.676,20,1.409,21,0.006,22,1.262,23,0.392,24,0.855,25,1.237,26,1.791,29,0.237,30,0.547,33,2.237,36,2.319,38,0.033,39,0.002,40,0.823,42,1.759,43,2.358,45,1.943,46,2.76,49,3.174,50,2.524,57,1.607,60,1.359,61,1.557,67,0.003,68,0.002,82,1.023,119,1.296,129,0.929,130,1.412,195,0.6,217,1.856,222,2.08,250,3.042,251,1.186,252,1.186,277,1.186,297,0.933,298,0.995,303,1.725,318,1.512,321,2.041,327,2.672,436,4.793,478,2.815,489,3.64,492,1.607,592,5.218,593,5.218,640,3.952,642,5.558,645,3.952,800,5.113,812,1.785,820,2.159,983,1.66,1052,2.505,1175,3.22,1641,3.22,1643,3.64,2108,6.384,2513,5.682,2546,3.64,2555,2.307,2578,5.237,2579,2.505,2583,3.406,2585,2.307,2586,2.505,2587,4.427,2588,4.427,2589,4.427,2590,4.427,2591,4.427,2592,2.806,2593,2.806,2594,2.806,2595,4.427,2596,2.806,2597,4.427,2598,2.806,2599,4.427,2600,2.806,2601,4.427,2602,2.806,2603,4.427,2604,2.806,2605,4.427,2606,2.806,2607,4.427,2608,2.806,2609,2.806,2610,2.806,2611,2.806,2612,2.806,2613,2.806,2614,2.806,2615,2.806,2616,2.806,2617,2.806,2618,2.806,2619,2.806,2620,2.806,2621,2.806,2622,2.806,2623,2.806,2624,2.806,2625,4.427,2626,2.806,2627,4.427,2628,2.806,2629,5.483,2630,2.806,2631,4.427,2632,4.427,2633,2.806,2634,2.806,2635,2.806,2636,2.806,2637,2.806,2638,2.806,2639,2.806]],["title/coverage.html",[2640,5.877]],["body/coverage.html",[0,0.471,1,0.999,5,0.013,6,2.433,7,2.433,13,0.503,21,0.006,23,0.059,34,0.719,36,0.636,39,0.001,46,0.375,50,0.493,60,1.055,66,0.503,67,0.001,68,0.001,69,0.636,70,1.085,72,0.561,74,0.619,76,1.683,102,0.548,108,1.507,110,2.954,126,0.999,127,1.085,128,1.085,136,0.513,144,0.805,166,2.616,167,0.935,169,1.085,175,0.674,177,0.841,185,0.884,200,0.636,202,1.675,204,0.744,205,0.805,207,0.841,230,0.999,231,1.085,232,0.548,245,0.884,246,1.085,247,1.085,256,0.772,262,0.589,278,0.884,282,0.884,286,1.085,288,0.999,289,1.085,290,1.085,297,1.772,299,1.085,305,0.773,306,0.805,309,0.935,319,0.805,320,0.841,322,1.675,363,0.935,364,1.085,390,0.999,391,0.999,409,1.085,417,0.999,418,1.085,419,1.085,431,0.935,432,1.085,434,0.841,436,0.773,443,0.841,444,1.085,455,0.884,459,0.935,461,0.884,469,1.085,472,1.085,478,0.773,481,0.884,516,0.999,517,1.085,518,1.79,522,1.649,529,5.288,534,0.619,536,0.719,540,0.655,551,0.719,566,0.999,567,1.085,590,0.841,591,0.841,592,0.841,593,0.841,595,0.884,597,0.884,599,0.884,601,0.884,608,2.105,610,1.085,611,2.623,612,0.884,613,0.999,614,0.999,631,0.655,632,0.884,661,0.884,662,1.085,663,2.623,671,0.805,672,0.884,678,1.085,688,1.085,689,1.79,708,1.085,709,1.085,711,0.935,715,0.884,716,1.79,717,2.623,724,0.935,727,0.841,728,1.79,732,0.719,747,1.962,749,0.841,750,2.623,751,1.79,757,0.773,760,0.841,762,2.277,791,0.841,800,0.773,801,1.085,802,2.277,808,0.999,823,0.884,824,1.79,825,1.085,838,0.935,839,0.999,840,1.085,850,0.604,851,1.029,852,0.805,853,1.085,854,0.773,857,1.085,877,0.805,897,1.334,899,1.209,908,0.999,909,1.085,910,1.085,914,1.085,951,0.999,952,1.085,953,1.085,960,0.999,961,1.085,962,1.085,966,0.935,967,1.79,968,1.085,972,0.884,977,0.841,979,0.841,991,1.79,994,0.999,995,1.085,996,1.085,1000,0.884,1001,1.79,1002,1.085,1004,1.085,1011,0.773,1012,0.841,1031,0.999,1065,0.999,1066,1.085,1067,1.085,1073,0.999,1074,1.085,1075,1.085,1082,0.935,1083,1.085,1094,0.884,1097,0.884,1119,0.805,1120,0.805,1121,0.841,1123,0.935,1125,0.884,1127,0.884,1139,1.675,1140,1.085,1146,1.085,1151,0.935,1200,1.085,1218,0.999,1243,1.085,1246,0.999,1247,1.79,1248,1.79,1262,0.999,1263,1.79,1264,1.79,1268,0.999,1271,1.085,1286,0.999,1287,1.085,1288,0.805,1289,0.999,1307,1.79,1308,1.79,1311,0.935,1319,1.085,1321,1.085,1347,1.085,1348,1.085,1364,0.999,1365,1.085,1366,1.085,1371,0.935,1372,1.085,1377,0.841,1388,0.841,1392,1.085,1403,0.999,1458,1.085,1462,0.773,1505,1.085,1508,0.884,1509,1.085,1510,1.085,1511,1.085,1512,0.935,1513,1.085,1514,1.085,1520,0.744,1521,1.675,1522,1.085,1523,1.085,1535,0.935,1538,0.773,1574,0.935,1605,0.935,1613,0.841,1625,2.277,1626,1.79,1628,4.889,1633,0.935,1634,0.999,1635,1.085,1637,0.884,1638,2.623,1639,1.085,1641,0.884,1674,0.884,1675,0.999,1676,1.085,1688,0.935,1689,1.085,1712,0.884,1716,1.085,1720,0.935,1736,1.085,1737,1.085,1738,0.935,1739,1.085,1740,1.085,1762,0.999,1763,1.085,1764,1.085,1769,1.085,1786,0.999,1787,1.085,1788,1.085,1793,1.085,1812,1.085,1820,2.277,1821,2.277,1837,0.884,1841,0.884,1881,0.935,1882,2.774,1883,2.774,1890,0.935,1894,0.935,1912,0.805,1913,0.841,1915,0.935,1919,0.935,1922,0.935,1931,1.085,1935,0.935,1936,1.085,1937,1.085,1938,1.085,1968,1.085,1970,0.999,1973,1.085,1977,0.884,1981,1.085,1995,1.085,2007,1.085,2016,0.999,2017,1.085,2018,1.085,2023,1.085,2025,1.085,2053,0.841,2054,1.085,2055,1.085,2057,0.841,2064,0.935,2068,0.935,2085,1.085,2100,1.085,2102,1.085,2108,0.841,2115,1.085,2128,0.935,2129,1.085,2139,0.884,2147,0.884,2151,0.884,2174,1.79,2175,1.085,2178,1.085,2200,0.999,2201,1.085,2202,1.085,2208,0.935,2209,1.085,2210,1.085,2224,0.884,2226,0.884,2228,0.805,2243,1.085,2253,0.999,2254,1.085,2255,1.085,2267,0.884,2272,1.085,2273,1.085,2275,1.085,2276,1.085,2293,0.999,2296,0.935,2327,0.999,2328,1.085,2329,1.085,2333,0.999,2334,1.085,2335,0.999,2336,1.085,2337,1.085,2341,0.999,2342,1.085,2343,1.085,2347,0.999,2348,1.085,2349,1.085,2354,1.085,2356,1.085,2375,0.999,2398,1.79,2406,0.935,2407,1.79,2408,1.085,2409,1.085,2425,1.085,2430,1.79,2433,1.085,2438,1.085,2440,1.085,2446,1.085,2456,0.935,2457,1.085,2461,1.085,2493,1.085,2498,1.085,2503,2.277,2510,1.79,2513,0.884,2514,1.085,2517,1.085,2526,0.999,2532,1.085,2534,1.085,2544,0.935,2545,1.085,2564,1.085,2566,0.999,2567,1.085,2568,1.085,2578,0.884,2581,1.085,2583,0.935,2584,1.085,2585,0.999,2586,1.085,2640,1.085,2641,1.215,2642,1.215,2643,1.215,2644,8.872,2645,4.15,2646,5.366,2647,9.367,2648,1.215,2649,2.177,2650,8.238,2651,1.944,2652,8.691,2653,2.959,2654,7.588,2655,4.15,2656,3.606,2657,4.15,2658,2.959,2659,3.193,2660,0.999,2661,1.085,2662,1.085,2663,1.085,2664,1.085,2665,1.944,2666,1.085,2667,1.085,2668,1.085,2669,1.085,2670,1.944,2671,1.085,2672,1.085,2673,1.085,2674,1.944,2675,1.944,2676,1.085,2677,1.085,2678,1.085,2679,1.085,2680,1.944,2681,1.085,2682,1.085,2683,1.085,2684,1.085,2685,1.085,2686,1.085,2687,1.085,2688,1.215,2689,1.215,2690,1.085,2691,1.215,2692,1.215,2693,2.177,2694,1.085,2695,1.085,2696,1.085,2697,2.959,2698,1.085,2699,1.085,2700,1.944,2701,4.412,2702,1.085,2703,1.085,2704,1.085,2705,1.085,2706,1.085,2707,1.085,2708,1.215,2709,1.085,2710,1.944,2711,1.085,2712,1.085,2713,1.085,2714,1.215]],["title/dependencies.html",[259,2.733,2715,3.99]],["body/dependencies.html",[0,0.38,21,0.006,30,1.518,32,4.589,39,0.003,60,2.49,64,2.943,67,0.004,68,0.003,100,2.043,195,1.1,199,2.373,250,2.172,251,2.172,252,2.172,259,2.43,277,2.172,389,3.041,449,3.113,458,3.955,623,4.589,722,3.269,816,4.589,942,4.226,1471,4.589,1472,4.589,1573,2.943,1732,4.589,1834,6.052,1836,3.955,1887,4.226,1888,4.226,1917,4.226,1933,4.226,1949,6.159,1950,4.226,2004,4.589,2473,4.589,2525,4.589,2716,5.141,2717,7.786,2718,5.141,2719,5.141,2720,5.141,2721,6.898,2722,5.141,2723,6.898,2724,5.141,2725,5.141,2726,5.141,2727,5.141,2728,5.141,2729,5.141,2730,5.141,2731,5.141,2732,5.141,2733,5.141,2734,5.141,2735,5.141,2736,5.141,2737,5.141,2738,5.141,2739,5.141,2740,5.141,2741,5.141,2742,5.141,2743,5.141,2744,5.141,2745,5.141,2746,5.141,2747,5.141,2748,5.141,2749,5.141,2750,5.141,2751,5.141,2752,5.141,2753,5.141,2754,5.141,2755,5.141,2756,4.589,2757,5.141,2758,5.141,2759,5.141,2760,5.141,2761,5.141,2762,5.141,2763,5.141]],["title/miscellaneous/enumerations.html",[2764,2.538,2765,5.161]],["body/miscellaneous/enumerations.html",[10,0.232,21,0.006,39,0.003,46,2.062,64,3.829,66,2.767,67,0.004,68,0.003,69,3.504,94,4.864,131,3.752,141,3.018,144,3.252,171,3.162,232,3.018,425,5.146,426,5.971,531,5.499,532,5.971,536,3.957,578,5.499,579,5.971,628,5.971,634,4.63,635,5.971,739,3.829,747,3.162,812,4.253,829,5.499,835,4.037,850,4.057,851,3.861,875,5.499,899,3.712,922,4.864,1468,5.971,2764,3.123,2765,4.384,2766,4.91,2767,9.181,2768,4.384,2769,6.688,2770,6.79,2771,8.166,2772,4.91,2773,5.499,2774,6.688,2775,4.91,2776,4.91,2777,4.91,2778,6.688,2779,6.688,2780,7.606,2781,4.91,2782,6.688,2783,4.91]],["title/miscellaneous/functions.html",[2764,2.538,2784,5.161]],["body/miscellaneous/functions.html",[10,0.248,20,1.681,21,0.006,22,1.505,24,1.019,25,1.529,26,1.427,39,0.003,42,2.081,46,1.614,67,0.004,68,0.003,262,3.807,392,7.056,800,3.33,808,6.461,886,5.803,1524,7.484,1641,5.08,2296,5.374,2466,4.675,2546,4.305,2659,4.029,2660,6.461,2685,4.675,2686,6.235,2687,4.675,2701,4.305,2702,6.235,2703,6.235,2704,6.235,2705,6.235,2706,6.235,2712,4.675,2713,6.235,2764,3.33,2784,4.675,2785,8.02,2786,5.236,2787,5.236,2788,5.236,2789,4.305,2790,5.236,2791,5.236,2792,5.236,2793,5.236,2794,5.236,2795,5.236,2796,5.236,2797,5.236,2798,6.235]],["title/index.html",[10,0.189,578,3.281,2799,3.99]],["body/index.html",[15,2.506,21,0.006,39,0.004,52,6.555,67,0.005,68,0.004,259,3.041,639,5.743,830,4.949,1381,4.949,1991,6.555,2194,5.743,2421,5.743,2800,7.118,2801,8.086,2802,7.973,2803,6.432,2804,6.432,2805,6.432,2806,6.432,2807,5.743,2808,6.432,2809,6.432,2810,6.432,2811,5.743,2812,6.432,2813,6.432,2814,6.432,2815,6.432,2816,6.432,2817,8.664,2818,7.973,2819,6.432,2820,6.432,2821,6.432,2822,5.289,2823,6.432,2824,7.973,2825,6.432,2826,6.432,2827,6.432,2828,6.432,2829,6.432,2830,6.432]],["title/modules.html",[258,3.189]],["body/modules.html",[21,0.005,39,0.004,67,0.005,68,0.004,257,4.46,258,2.971,268,4.061,269,4.245,376,4.718,379,4.245,380,3.9,381,4.46,382,4.46,383,4.061,384,4.46,385,4.245,454,4.46,1601,4.46,1701,4.46,2831,9.977,2832,9.977,2833,9.977,2834,9.977]],["title/overview.html",[2835,5.877]],["body/overview.html",[2,0.387,21,0.006,39,0.002,67,0.003,68,0.002,168,1.231,200,3.906,207,3.726,256,0.967,257,5.795,258,1.322,259,1.29,260,1.391,261,1.391,262,1.322,263,1.391,264,1.355,265,2.436,266,2.436,267,2.436,268,6.115,269,6.101,270,2.208,271,1.391,272,1.391,298,0.967,305,4.742,306,4.937,376,7.143,377,2.436,378,2.436,379,6.162,380,5.712,381,5.423,382,5.937,383,5.836,384,5.174,385,5.161,436,4.742,450,2.436,451,2.436,452,2.436,453,2.436,454,5.937,455,3.915,478,4.742,587,2.436,588,2.436,589,2.436,590,5.161,591,5.161,592,5.161,593,5.161,609,1.106,612,5.423,655,2.436,656,2.436,657,2.436,668,2.436,669,2.436,670,2.436,671,4.058,672,5.423,852,4.937,1011,4.742,1012,5.161,1115,2.436,1117,2.436,1118,2.436,1119,3.565,1120,3.565,1121,3.726,1377,5.161,1384,2.436,1385,2.436,1387,2.436,1388,3.726,1462,3.897,1520,4.568,1601,4.861,1602,2.436,1603,2.436,1604,2.436,1637,5.423,1674,5.423,1701,5.795,1702,2.436,1703,2.436,1704,2.436,1908,2.436,1909,2.436,1911,2.436,1912,4.058,1913,5.161,1963,2.436,1964,2.436,1965,2.436,2053,3.726,2228,3.565,2259,2.436,2260,2.436,2261,2.436,2573,2.436,2574,2.436,2575,2.436,2835,2.436,2836,2.728,2837,2.728,2838,2.728,2839,2.728,2840,2.728]],["title/miscellaneous/typealiases.html",[2764,2.538,2841,5.78]],["body/miscellaneous/typealiases.html",[10,0.309,21,0.006,23,0.319,39,0.004,42,2.598,67,0.005,68,0.004,613,5.376,614,7.176,618,5.838,622,5.838,637,7.191,638,7.191,747,3.808,850,3.248,851,3.091,1139,5.031,1288,4.33,1289,6.622,1297,4.765,1516,6.197,1518,5.838,1527,6.622,1628,5.376,1695,7.191,2659,5.031,2764,4.159,2768,7.191,2770,5.838,2773,5.376,2789,5.376,2798,7.191,2842,6.539,2843,5.838,2844,8.054,2845,8.054,2846,6.539,2847,6.539]],["title/miscellaneous/variables.html",[2764,2.538,2822,4.752]],["body/miscellaneous/variables.html",[6,1.875,7,3.919,10,0.108,21,0.006,23,0.449,33,0.753,34,2.82,35,2.036,36,2.497,37,2.036,39,0.001,41,1.119,46,1.155,49,1.91,50,2.472,52,3.08,53,2.036,57,1.305,60,1.105,67,0.002,68,0.001,76,0.924,92,1.721,110,1.378,124,1.578,129,1.45,130,3.047,131,3.581,204,2.295,205,1.51,222,1.269,232,1.029,282,1.658,330,2.382,335,1.578,336,1.51,346,3.919,390,3.08,391,3.919,459,3.668,522,0.906,524,1.658,536,1.349,538,1.105,631,1.229,700,1.875,711,2.882,732,2.216,837,1.875,850,2.368,851,2.609,854,2.382,867,1.578,1218,3.08,1247,1.875,1248,3.08,1263,1.875,1264,3.08,1268,3.08,1333,1.875,1381,1.754,1403,3.08,1521,1.754,1526,3.344,1538,1.45,1573,1.305,1574,3.668,1581,1.754,1605,1.754,1630,1.875,1828,2.882,1832,1.754,1842,1.754,1844,1.754,1856,1.754,1882,1.754,1883,3.668,1890,2.882,1891,1.875,1892,1.875,1893,1.875,1900,1.875,1919,2.882,1945,2.036,1950,1.875,1970,3.08,1983,2.036,1991,3.08,1998,2.036,2068,2.882,2293,3.08,2375,3.08,2456,1.754,2458,2.036,2459,2.036,2526,3.08,2651,2.036,2659,1.754,2660,1.875,2661,3.344,2662,4.256,2663,4.256,2664,4.256,2665,2.036,2666,4.256,2667,2.036,2668,4.256,2669,2.036,2670,2.036,2671,4.256,2672,2.036,2673,4.256,2674,2.036,2675,4.256,2676,4.256,2677,3.344,2678,2.036,2679,4.256,2680,2.036,2681,4.256,2682,4.256,2683,2.036,2684,3.344,2690,2.036,2694,2.036,2695,3.344,2696,3.344,2698,2.036,2699,4.928,2700,2.036,2701,1.875,2707,3.344,2709,3.344,2710,2.036,2711,3.344,2756,2.036,2764,1.45,2773,1.875,2785,3.344,2789,4.538,2800,3.344,2801,2.036,2807,2.036,2811,2.036,2822,1.875,2843,2.036,2848,2.28,2849,2.28,2850,3.746,2851,3.746,2852,3.746,2853,2.28,2854,2.28,2855,2.28,2856,2.28,2857,2.28,2858,3.746,2859,3.746,2860,2.28,2861,3.746,2862,2.28,2863,3.746,2864,3.746,2865,2.28,2866,3.746,2867,2.28,2868,2.28,2869,3.746,2870,2.28,2871,6.097,2872,2.28,2873,2.28,2874,2.28,2875,2.28,2876,3.746,2877,2.28,2878,2.28,2879,2.28,2880,2.28,2881,2.28,2882,2.28,2883,2.28,2884,3.746,2885,2.28,2886,2.28,2887,2.28,2888,2.28,2889,2.28,2890,4.767,2891,2.28,2892,2.28,2893,2.28,2894,2.28,2895,2.28,2896,2.28,2897,2.28,2898,2.28,2899,2.28,2900,2.28,2901,2.28,2902,2.28,2903,2.28,2904,2.28,2905,2.28,2906,2.28,2907,2.28,2908,2.28,2909,2.28,2910,2.28,2911,2.28,2912,3.746,2913,2.28,2914,2.28,2915,3.746,2916,2.28,2917,2.28,2918,2.28,2919,2.28,2920,2.28,2921,2.28,2922,2.28,2923,2.28,2924,2.28,2925,2.28,2926,2.28,2927,2.28,2928,2.28,2929,2.28,2930,2.28,2931,2.28,2932,2.28,2933,2.28,2934,2.28,2935,2.28,2936,2.28,2937,2.28,2938,2.28,2939,2.28,2940,2.28,2941,2.28,2942,2.28,2943,2.28,2944,2.28,2945,2.28,2946,2.28,2947,2.28,2948,2.28,2949,2.28,2950,2.28]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":529,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":2752,"title":{},"body":{"dependencies.html":{}}}],["0.1.20",{"_index":2763,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":2726,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":2728,"title":{},"body":{"dependencies.html":{}}}],["0.2.31",{"_index":2759,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":2727,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":2749,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":2718,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2647,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2658,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2649,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2656,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2648,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2693,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2697,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2708,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":2688,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2654,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":2689,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2650,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2644,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2646,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2653,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2645,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2655,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2657,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":124,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/QuestionGroup1620179231630.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["1.10.0",{"_index":2743,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":2733,"title":{},"body":{"dependencies.html":{}}}],["1.3.6",{"_index":2748,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":2730,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":2692,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":2937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10h",{"_index":2926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11",{"_index":2837,"title":{},"body":{"overview.html":{}}}],["14",{"_index":2836,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":2762,"title":{},"body":{"dependencies.html":{}}}],["2.2.5",{"_index":2746,"title":{},"body":{"dependencies.html":{}}}],["2.22.1",{"_index":2731,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":2725,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1900,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":2874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22",{"_index":2840,"title":{},"body":{"overview.html":{}}}],["25",{"_index":2691,"title":{},"body":{"coverage.html":{}}}],["29997856155",{"_index":35,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":2754,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":2904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["31",{"_index":2838,"title":{},"body":{"overview.html":{}}}],["36",{"_index":926,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["4.0.0",{"_index":2750,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":2758,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":2741,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":2744,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":2740,"title":{},"body":{"dependencies.html":{}}}],["4.7.15",{"_index":2722,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1872,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["465",{"_index":2930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4xx",{"_index":1864,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["5",{"_index":125,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["5.2.2",{"_index":2716,"title":{},"body":{"dependencies.html":{}}}],["5.2.6",{"_index":2736,"title":{},"body":{"dependencies.html":{}}}],["5.5.3",{"_index":2737,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1868,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["5000",{"_index":2888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["50172241065",{"_index":1892,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":2938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.5.1",{"_index":2723,"title":{},"body":{"dependencies.html":{}}}],["6.6.2",{"_index":2747,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":2755,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":2942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6379",{"_index":949,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{}}}],["7.1.5",{"_index":2721,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":2720,"title":{},"body":{"dependencies.html":{}}}],["7.6.13",{"_index":2717,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":950,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"injectables/TemplateService.html":{}}}],["88",{"_index":2839,"title":{},"body":{"overview.html":{}}}],["9",{"_index":2907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.7.0",{"_index":2738,"title":{},"body":{"dependencies.html":{}}}],["989898",{"_index":1893,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["999999",{"_index":37,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["_",{"_index":1333,"title":{},"body":{"injectables/ExamTargetService.html":{},"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["__dirname",{"_index":2890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_generateuniquecode",{"_index":916,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["_rangeoverlapping",{"_index":2040,"title":{},"body":{"injectables/PeriodService.html":{}}}],["_targetmap",{"_index":1322,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["a.exam_agreement_id",{"_index":1430,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["a.grade_id",{"_index":1433,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["a.id",{"_index":1420,"title":{},"body":{"injectables/ExportationRepository.html":{},"injectables/PersonalQuestionGroup.html":{}}}],["a.position",{"_index":904,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["a.question_id",{"_index":1438,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["a.score",{"_index":1422,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ability",{"_index":618,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory",{"_index":660,"title":{},"body":{"modules/CaslModule.html":{}}}],["ability.factory.ts",{"_index":614,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ability.factory.ts:32",{"_index":617,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilitybuilder",{"_index":619,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":620,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abstract",{"_index":1974,"title":{},"body":{"classes/MailerService.html":{},"classes/UploaderService.html":{}}}],["accessors",{"_index":862,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTargetNode.html":{},"injectables/FirebaseAdmin.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["accesstoken",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":2911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["action",{"_index":159,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["action.enum",{"_index":630,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["action.enum.ts",{"_index":2769,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["active",{"_index":531,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamRepository.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":153,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/UserEmail1625013724392.html":{}}}],["addmonths",{"_index":1884,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["addtargets",{"_index":1268,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addtargets.map((target",{"_index":1269,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["admin",{"_index":64,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["admin.constants",{"_index":1575,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{}}}],["admin.constants.ts",{"_index":2696,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.module",{"_index":1711,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["admin.module.ts",{"_index":1606,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:14",{"_index":1609,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.module.ts:27",{"_index":1614,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider",{"_index":1617,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["admin.provider.ts",{"_index":1523,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["admin.provider.ts:17",{"_index":1540,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:20",{"_index":1552,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:24",{"_index":1570,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:28",{"_index":1572,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:32",{"_index":1542,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:36",{"_index":1545,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:40",{"_index":1550,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:44",{"_index":1554,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:48",{"_index":1556,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:52",{"_index":1558,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:56",{"_index":1560,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:60",{"_index":1562,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:64",{"_index":1564,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:68",{"_index":1566,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:72",{"_index":1549,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin.provider.ts:8",{"_index":1539,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["admin/firebase",{"_index":1605,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin/providers/firebase",{"_index":1522,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"coverage.html":{}}}],["adminuser.ts",{"_index":7,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminuser.ts:37",{"_index":19,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser.ts:8",{"_index":28,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["adminuser1620299822480",{"_index":1,"title":{"classes/AdminUser1620299822480.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{}}}],["affected",{"_index":360,"title":{},"body":{"injectables/AnswerService.html":{}}}],["affected.raw.affectedrows",{"_index":362,"title":{},"body":{"injectables/AnswerService.html":{}}}],["affectedrows",{"_index":2432,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["afterload",{"_index":884,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["age=31536000",{"_index":1734,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["agreed",{"_index":1042,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{}}}],["agreement",{"_index":899,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["agreement.controller",{"_index":1132,"title":{},"body":{"modules/ExamModule.html":{}}}],["agreement.controller.ts",{"_index":968,"title":{},"body":{"controllers/ExamAgreementController.html":{},"coverage.html":{}}}],["agreement.controller.ts:23",{"_index":973,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["agreement.controller.ts:32",{"_index":981,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["agreement.dto",{"_index":725,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["agreement.dto.ts",{"_index":717,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreementDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"coverage.html":{}}}],["agreement.dto.ts:12",{"_index":720,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["agreement.dto.ts:14",{"_index":2507,"title":{},"body":{"classes/UpdateExamAgreementQueryDto.html":{}}}],["agreement.dto.ts:16",{"_index":2508,"title":{},"body":{"classes/UpdateExamAgreementQueryDto.html":{}}}],["agreement.dto.ts:23",{"_index":2505,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{}}}],["agreement.dto.ts:28",{"_index":2504,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{}}}],["agreement.dto.ts:6",{"_index":993,"title":{},"body":{"classes/ExamAgreementDto.html":{}}}],["agreement.dto.ts:9",{"_index":992,"title":{},"body":{"classes/ExamAgreementDto.html":{}}}],["agreement.entity",{"_index":109,"title":{},"body":{"classes/Answer.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"interfaces/SendAgreementEmailDto.html":{},"classes/User.html":{}}}],["agreement.entity.ts",{"_index":914,"title":{},"body":{"classes/ExamAgreement.html":{},"coverage.html":{}}}],["agreement.entity.ts:13",{"_index":927,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:18",{"_index":929,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:21",{"_index":918,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:24",{"_index":921,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:31",{"_index":923,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:34",{"_index":931,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:37",{"_index":920,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:40",{"_index":930,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:43",{"_index":919,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:46",{"_index":935,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.entity.ts:51",{"_index":933,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["agreement.exam",{"_index":900,"title":{},"body":{"classes/Exam.html":{}}}],["agreement.hasfinishedexam",{"_index":1057,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.repository",{"_index":1035,"title":{},"body":{"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{}}}],["agreement.repository.ts",{"_index":1002,"title":{},"body":{"classes/ExamAgreementRepository.html":{},"coverage.html":{}}}],["agreement.service",{"_index":323,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{}}}],["agreement.service.ts",{"_index":1004,"title":{},"body":{"injectables/ExamAgreementService.html":{},"coverage.html":{}}}],["agreement.service.ts:105",{"_index":1016,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:110",{"_index":1025,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:117",{"_index":1020,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:134",{"_index":1023,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:27",{"_index":1013,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:38",{"_index":1017,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:65",{"_index":1027,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.service.ts:81",{"_index":1029,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.status",{"_index":1064,"title":{},"body":{"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{}}}],["agreement.uniquecodesendedat",{"_index":1050,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreement.user",{"_index":2543,"title":{},"body":{"classes/User.html":{}}}],["agreements",{"_index":858,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamService.html":{}}}],["agreementsbydateinterval",{"_index":1005,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["agreementsbydateinterval(start",{"_index":1015,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["aliases",{"_index":2842,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow_anonymous",{"_index":528,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam1620478273991.html":{}}}],["allowanonymous",{"_index":729,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{}}}],["allowedorigins",{"_index":2661,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["alreadyagreed",{"_index":1039,"title":{},"body":{"injectables/ExamAgreementService.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{}}}],["alter",{"_index":296,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/UserEmail1625013724392.html":{}}}],["andwhere",{"_index":1195,"title":{},"body":{"classes/ExamRepository.html":{}}}],["andwhere(':date",{"_index":1184,"title":{},"body":{"classes/ExamRepository.html":{}}}],["andwhere('exam.created_at",{"_index":1191,"title":{},"body":{"classes/ExamRepository.html":{}}}],["andwhere('user.id",{"_index":1810,"title":{},"body":{"classes/GradeRepository.html":{}}}],["anonymous",{"_index":547,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateExamAgreementDto.html":{},"interfaces/CsvLineRow.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"injectables/ExportationRepository.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{}}}],["answer",{"_index":69,"title":{"classes/Answer.html":{}},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExportationRepository.html":{},"classes/Grade.html":{},"classes/Question.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answer.controller",{"_index":275,"title":{},"body":{"modules/AnswerModule.html":{}}}],["answer.dto",{"_index":210,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{}}}],["answer.dto.ts",{"_index":689,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["answer.dto.ts:15",{"_index":694,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:18",{"_index":692,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:22",{"_index":697,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:26",{"_index":691,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.entity",{"_index":244,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer.grade",{"_index":1785,"title":{},"body":{"classes/Grade.html":{}}}],["answer.question",{"_index":2127,"title":{},"body":{"classes/Question.html":{}}}],["answer.service",{"_index":208,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{}}}],["answer.ts",{"_index":128,"title":{},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["answer.ts:13",{"_index":133,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer.ts:4",{"_index":132,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer.ts:6",{"_index":134,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["answer/answer.module",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["answer/entities/answer.entity",{"_index":624,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["answer1622421768424",{"_index":126,"title":{"classes/Answer1622421768424.html":{}},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["answer:12",{"_index":240,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:15",{"_index":241,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:18",{"_index":237,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:21",{"_index":239,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:24",{"_index":236,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer:27",{"_index":238,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["answer_grade",{"_index":2776,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["answer_id",{"_index":1421,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["answercontroller",{"_index":167,"title":{"controllers/AnswerController.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"coverage.html":{}}}],["answerdto",{"_index":343,"title":{},"body":{"injectables/AnswerService.html":{}}}],["answerdto.type",{"_index":348,"title":{},"body":{"injectables/AnswerService.html":{}}}],["answered",{"_index":1141,"title":{},"body":{"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["answergrade",{"_index":144,"title":{"classes/AnswerGrade.html":{}},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["answergraderepository",{"_index":245,"title":{"classes/AnswerGradeRepository.html":{}},"body":{"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"coverage.html":{}}}],["answermodule",{"_index":257,"title":{"modules/AnswerModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["answerrepository",{"_index":278,"title":{"classes/AnswerRepository.html":{}},"body":{"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"coverage.html":{}}}],["answers",{"_index":340,"title":{},"body":{"injectables/AnswerService.html":{},"classes/Grade.html":{},"classes/Question.html":{}}}],["answerscorecheck.ts",{"_index":290,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"coverage.html":{}}}],["answerscorecheck.ts:13",{"_index":292,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{}}}],["answerscorecheck.ts:4",{"_index":291,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{}}}],["answerscorecheck.ts:6",{"_index":293,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{}}}],["answerscorecheck1624750140568",{"_index":288,"title":{"classes/AnswerScoreCheck1624750140568.html":{}},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"coverage.html":{}}}],["answerservice",{"_index":207,"title":{"injectables/AnswerService.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"coverage.html":{},"overview.html":{}}}],["answertype",{"_index":94,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"miscellaneous/enumerations.html":{}}}],["answertype.answer",{"_index":695,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answertype.answer_grade",{"_index":349,"title":{},"body":{"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{}}}],["anônimo",{"_index":1451,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["api",{"_index":2801,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":196,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{}}}],["apiexcludeendpoint",{"_index":1279,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["apihideproperty",{"_index":940,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/ExamAgreementDto.html":{}}}],["apinotfoundresponse",{"_index":2155,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiokresponse",{"_index":197,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["apiproperty",{"_index":788,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["apiproperty({type",{"_index":772,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["apitags",{"_index":198,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["apitags('answer",{"_index":214,"title":{},"body":{"controllers/AnswerController.html":{}}}],["apitags('auth",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('exam",{"_index":1104,"title":{},"body":{"controllers/ExamController.html":{}}}],["apitags('examagreement",{"_index":988,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["apitags('examtarget",{"_index":1280,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["apitags('exportation",{"_index":1380,"title":{},"body":{"controllers/ExportationController.html":{}}}],["apitags('question",{"_index":2163,"title":{},"body":{"controllers/QuestionController.html":{}}}],["apitags('questiongroup",{"_index":2233,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["apitags('upload",{"_index":2528,"title":{},"body":{"controllers/UploadController.html":{}}}],["apitags('user",{"_index":2558,"title":{},"body":{"controllers/UserController.html":{}}}],["aplica",{"_index":1455,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["app",{"_index":1524,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/functions.html":{}}}],["appability",{"_index":638,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["appcheck",{"_index":1525,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["appcontroller",{"_index":363,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applyglobals",{"_index":2702,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyglobals(app",{"_index":2790,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applyperflayer",{"_index":2703,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applyperflayer(app",{"_index":2791,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applysecuritylayer",{"_index":2704,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applysecuritylayer(app",{"_index":2792,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appmodule",{"_index":376,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":1632,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["argumentshost",{"_index":1829,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["arr",{"_index":2796,"title":{},"body":{"miscellaneous/functions.html":{}}}],["array",{"_index":2082,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["array.from(map.values()).map((target",{"_index":1344,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["arrayminsize",{"_index":754,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["arrayminsize(1",{"_index":761,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["asc",{"_index":1443,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["async",{"_index":13,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeMailerService.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/SendEmailService.html":{},"controllers/UploadController.html":{},"classes/UserEmail1625013724392.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["auth",{"_index":60,"title":{"classes/Auth.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth.constants",{"_index":1971,"title":{},"body":{"classes/LoginDto.html":{}}}],["auth.dto",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["auth.dto.ts",{"_index":709,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["auth.password",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FirebaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth.service.ts",{"_index":1639,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:14",{"_index":1659,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:27",{"_index":1653,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:31",{"_index":1649,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:37",{"_index":1657,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:44",{"_index":1651,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.service.ts:9",{"_index":1646,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["auth.ts",{"_index":419,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["auth.ts:15",{"_index":421,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:4",{"_index":420,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth.ts:6",{"_index":422,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["auth/auth.module",{"_index":394,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["auth/dtos/create",{"_index":821,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["auth/guards/jwt.guard",{"_index":2156,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["auth1619445806509",{"_index":417,"title":{"classes/Auth1619445806509.html":{}},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["authcontroller",{"_index":431,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":443,"title":{"classes/AuthDto.html":{}},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["authdto.login",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto:6",{"_index":713,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["authguard",{"_index":1932,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('jwt",{"_index":1934,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authmodule",{"_index":379,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["authrepository",{"_index":461,"title":{"classes/AuthRepository.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authservice",{"_index":436,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["auto_increment",{"_index":143,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["auxiliary.ts",{"_index":518,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["auxiliary.ts:29",{"_index":568,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:4",{"_index":519,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:6",{"_index":521,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["auxiliary.ts:60",{"_index":520,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["auxiliary/auxiliary.module",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["auxiliary1620477175799",{"_index":516,"title":{"classes/Auxiliary1620477175799.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["auxiliary1624416663574",{"_index":566,"title":{"classes/Auxiliary1624416663574.html":{}},"body":{"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["auxiliarymodule",{"_index":380,"title":{"modules/AuxiliaryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["avaliacao",{"_index":2782,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["await",{"_index":43,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeMailerService.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/UserEmail1625013724392.html":{},"injectables/UserService.html":{}}}],["b",{"_index":903,"title":{},"body":{"classes/Exam.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["b.id",{"_index":2084,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["b.position",{"_index":905,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["baseentity",{"_index":2494,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["basename",{"_index":2474,"title":{},"body":{"injectables/TemplateService.html":{}}}],["basename(file",{"_index":2485,"title":{},"body":{"injectables/TemplateService.html":{}}}],["basepath",{"_index":2475,"title":{},"body":{"injectables/TemplateService.html":{}}}],["baserepository",{"_index":248,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["basic",{"_index":2732,"title":{},"body":{"dependencies.html":{}}}],["batchuser",{"_index":309,"title":{"interfaces/BatchUser.html":{}},"body":{"injectables/AnswerService.html":{},"interfaces/BatchUser.html":{},"coverage.html":{}}}],["bcrypt",{"_index":31,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcrypt.compare(logindto.password",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":56,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcrypt.hash(createauthdto.password",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(process.env.admin_password",{"_index":58,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["bcryptjs",{"_index":32,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"dependencies.html":{}}}],["beforeinsert",{"_index":932,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["between",{"_index":123,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{}}}],["between(start",{"_index":1061,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["body",{"_index":189,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["body(new",{"_index":220,"title":{},"body":{"controllers/AnswerController.html":{}}}],["bool",{"_index":866,"title":{},"body":{"classes/Exam.html":{},"injectables/PeriodService.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["boolean",{"_index":718,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamTargetNode.html":{},"interfaces/FileSendDto.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{}}}],["bootstrap",{"_index":262,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["br",{"_index":1477,"title":{},"body":{"injectables/ExportationService.html":{}}}],["brazilian",{"_index":816,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["break",{"_index":645,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["browse",{"_index":2834,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2831,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1728,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{}}}],["buffer",{"_index":1496,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{},"interfaces/FirebaseStorageUploadDto.html":{}}}],["buffer.from(await",{"_index":1485,"title":{},"body":{"injectables/ExportationService.html":{}}}],["build",{"_index":639,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"index.html":{}}}],["builder",{"_index":1483,"title":{},"body":{"injectables/ExportationService.html":{}}}],["builder.tostring",{"_index":1486,"title":{},"body":{"injectables/ExportationService.html":{}}}],["buildswaggerdoc",{"_index":2705,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["buildswaggerdoc(app",{"_index":2793,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cachecontrol",{"_index":1733,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["callback",{"_index":2798,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["callhandler",{"_index":2000,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["can(action.manage",{"_index":644,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.read",{"_index":647,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.update",{"_index":648,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["canagree",{"_index":1142,"title":{},"body":{"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{}}}],["cannot(action.delete",{"_index":649,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["cascade",{"_index":583,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{}}}],["case",{"_index":642,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["casl/ability",{"_index":623,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"dependencies.html":{}}}],["casl/casl.module",{"_index":460,"title":{},"body":{"modules/AuthModule.html":{}}}],["caslabilityfactory",{"_index":612,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslaction",{"_index":628,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["caslmodule",{"_index":454,"title":{"modules/CaslModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["caslsubjects",{"_index":637,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["catch",{"_index":1051,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/FirebaseAuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["catch((e",{"_index":1341,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["catch(console.error",{"_index":2424,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["catch(exception",{"_index":1826,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["catch(httpexception",{"_index":1843,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["cert",{"_index":1630,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":554,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["char",{"_index":1768,"title":{},"body":{"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{}}}],["check",{"_index":112,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerScoreCheck1624750140568.html":{}}}],["check(`\"score",{"_index":121,"title":{},"body":{"classes/Answer.html":{}}}],["childentity",{"_index":243,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["childs",{"_index":1290,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/SendMailDto.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"classes/UserRepository.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/AuthRepository.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/SendMailDto.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["classvalidatorex",{"_index":1873,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["classvalidatorex.error",{"_index":1877,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["classvalidatorex.message",{"_index":1876,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["cli",{"_index":2899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloud",{"_index":1675,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["cls",{"_index":251,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["cluster_answermodule",{"_index":265,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_answermodule_imports",{"_index":267,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_answermodule_providers",{"_index":266,"title":{},"body":{"modules/AnswerModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":450,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":452,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":453,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":451,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule",{"_index":587,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_exports",{"_index":588,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_auxiliarymodule_providers",{"_index":589,"title":{},"body":{"modules/AuxiliaryModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":655,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":657,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":656,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":668,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_exports",{"_index":670,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_providers",{"_index":669,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_exammodule",{"_index":1115,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_exports",{"_index":1118,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_imports",{"_index":1116,"title":{},"body":{"modules/ExamModule.html":{}}}],["cluster_exammodule_providers",{"_index":1117,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exportationmodule",{"_index":1384,"title":{},"body":{"modules/ExportationModule.html":{},"overview.html":{}}}],["cluster_exportationmodule_exports",{"_index":1387,"title":{},"body":{"modules/ExportationModule.html":{},"overview.html":{}}}],["cluster_exportationmodule_imports",{"_index":1386,"title":{},"body":{"modules/ExportationModule.html":{}}}],["cluster_exportationmodule_providers",{"_index":1385,"title":{},"body":{"modules/ExportationModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule",{"_index":1602,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule_exports",{"_index":1603,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebaseadminmodule_providers",{"_index":1604,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"overview.html":{}}}],["cluster_firebasemodule",{"_index":1702,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_exports",{"_index":1703,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_providers",{"_index":1704,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_inframodule",{"_index":1908,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_exports",{"_index":1911,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_inframodule_imports",{"_index":1910,"title":{},"body":{"modules/InfraModule.html":{}}}],["cluster_inframodule_providers",{"_index":1909,"title":{},"body":{"modules/InfraModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":1963,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1964,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1965,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule",{"_index":2259,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule_exports",{"_index":2260,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_questiongroupmodule_imports",{"_index":2262,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["cluster_questiongroupmodule_providers",{"_index":2261,"title":{},"body":{"modules/QuestionGroupModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2573,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2574,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2575,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":537,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{}}}],["code_id",{"_index":541,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["collection",{"_index":1694,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type",{"_index":1697,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["collection.type.ts",{"_index":2844,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["column",{"_index":113,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/Subject.html":{},"classes/User.html":{},"classes/UserEmail1625013724392.html":{}}}],["column({type",{"_index":85,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["column({unique",{"_index":924,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["command",{"_index":2829,"title":{},"body":{"index.html":{}}}],["completed",{"_index":2623,"title":{},"body":{"injectables/UserService.html":{}}}],["compose",{"_index":2818,"title":{},"body":{"index.html":{}}}],["compression",{"_index":2729,"title":{},"body":{"dependencies.html":{}}}],["computador",{"_index":2816,"title":{},"body":{"index.html":{}}}],["config",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{}}}],["configmodule",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/InfraModule.html":{}}}],["configmodule.forroot",{"_index":403,"title":{},"body":{"modules/AppModule.html":{}}}],["configs",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeMailerService.html":{}}}],["configservice.get('firebase",{"_index":1928,"title":{},"body":{"modules/InfraModule.html":{}}}],["configservice.get(databaseconfigkey",{"_index":407,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(jwtconfigkey",{"_index":468,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(jwtconfigkey)!.secret",{"_index":1959,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["conflictexception",{"_index":1030,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["conflictexception('already",{"_index":1041,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["connection",{"_index":1395,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["console.error(e",{"_index":2620,"title":{},"body":{"injectables/UserService.html":{}}}],["console.error(exception",{"_index":1871,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["console.log('create",{"_index":2621,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":33,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseStorageService.html":{},"classes/GradeRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeMailerService.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":154,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["constructor",{"_index":303,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeMailerService.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(firebase_options",{"_index":1576,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(@injectconnection",{"_index":1406,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["constructor(answerrepository",{"_index":304,"title":{},"body":{"injectables/AnswerService.html":{}}}],["constructor(authrepository",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":1940,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(configservice",{"_index":1823,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructor(connection",{"_index":1394,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["constructor(firebaseadmin",{"_index":1645,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{}}}],["constructor(graderepository",{"_index":1813,"title":{},"body":{"injectables/GradeService.html":{}}}],["constructor(mailerservice",{"_index":2410,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["constructor(options",{"_index":1537,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["constructor(periodrepository",{"_index":2028,"title":{},"body":{"injectables/PeriodService.html":{}}}],["constructor(private",{"_index":216,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["constructor(repository",{"_index":1010,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExportationService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["constructor(storageservice",{"_index":1741,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["constructor(targetnodefactory",{"_index":1351,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["constructor(transporter",{"_index":1982,"title":{},"body":{"injectables/NodeMailerService.html":{}}}],["constructor(userrepository",{"_index":2592,"title":{},"body":{"injectables/UserService.html":{}}}],["contenttype",{"_index":1726,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{}}}],["controller",{"_index":166,"title":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('answer",{"_index":213,"title":{},"body":{"controllers/AnswerController.html":{}}}],["controller('auth",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('exam",{"_index":987,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{}}}],["controller('export",{"_index":1379,"title":{},"body":{"controllers/ExportationController.html":{}}}],["controller('question",{"_index":2162,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["controller('upload",{"_index":2527,"title":{},"body":{"controllers/UploadController.html":{}}}],["controller('user",{"_index":2557,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":168,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"modules/InfraModule.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers/app.controller",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["controllers/auth.controller",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/exam",{"_index":1130,"title":{},"body":{"modules/ExamModule.html":{}}}],["controllers/exam.controller",{"_index":1124,"title":{},"body":{"modules/ExamModule.html":{}}}],["controllers/question",{"_index":2264,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/question.controller",{"_index":2266,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["controllers/upload.controller",{"_index":1918,"title":{},"body":{"modules/InfraModule.html":{}}}],["controllers/user.controller",{"_index":2577,"title":{},"body":{"modules/UserModule.html":{}}}],["copy",{"_index":2211,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copy(copyquestiongroupdto",{"_index":2212,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["copying",{"_index":2823,"title":{},"body":{"index.html":{}}}],["copyquestiongroupdto",{"_index":661,"title":{"classes/CopyQuestionGroupDto.html":{}},"body":{"classes/CopyQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["copytogroup",{"_index":2357,"title":{},"body":{"injectables/QuestionService.html":{}}}],["copytogroup(group",{"_index":2362,"title":{},"body":{"injectables/QuestionService.html":{}}}],["core/core.module",{"_index":398,"title":{},"body":{"modules/AppModule.html":{}}}],["core/decorators/is",{"_index":818,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["core/entities/ff.entity",{"_index":117,"title":{},"body":{"classes/Answer.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["coremodule",{"_index":381,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["cors",{"_index":2875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corsconfig",{"_index":2662,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsconfigkey",{"_index":2663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":2872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["count",{"_index":1899,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course",{"_index":536,"title":{"classes/Course.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["course.entity",{"_index":2453,"title":{},"body":{"classes/Subject.html":{}}}],["course.id",{"_index":1902,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course_id",{"_index":542,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["course`(`id",{"_index":562,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["courseid",{"_index":2447,"title":{},"body":{"classes/Subject.html":{}}}],["coverage",{"_index":2640,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":2825,"title":{},"body":{"index.html":{}}}],["cpf",{"_index":34,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["create",{"_index":171,"title":{},"body":{"controllers/AnswerController.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"miscellaneous/enumerations.html":{}}}],["create(@body",{"_index":1105,"title":{},"body":{"controllers/ExamController.html":{}}}],["create(createexamdto",{"_index":1085,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["create(createquestiongroupdto",{"_index":2215,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["create(examid",{"_index":174,"title":{},"body":{"controllers/AnswerController.html":{}}}],["createagreement",{"_index":969,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createagreement(createagreementdto",{"_index":971,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createagreementdto",{"_index":974,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["createanswerdto",{"_index":177,"title":{"classes/CreateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["createanswerdtos",{"_index":176,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["createanswerdtos.map((dto",{"_index":332,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createanswerdtos.map(async",{"_index":342,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createauth",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauth(createauthdto",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["createauthdto",{"_index":481,"title":{"classes/CreateAuthDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["createauthdto.login",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["createbatch",{"_index":300,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createbatch(createanswerdtos",{"_index":308,"title":{},"body":{"injectables/AnswerService.html":{}}}],["createcsv",{"_index":1459,"title":{},"body":{"injectables/ExportationService.html":{}}}],["createcsv(csvlines",{"_index":1464,"title":{},"body":{"injectables/ExportationService.html":{}}}],["created_at",{"_index":137,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["createdat",{"_index":79,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdatecolumn",{"_index":101,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["createdto",{"_index":347,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createexamagreementdto",{"_index":715,"title":{"classes/CreateExamAgreementDto.html":{}},"body":{"classes/CreateExamAgreementDto.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"coverage.html":{}}}],["createexamdto",{"_index":727,"title":{"classes/CreateExamDto.html":{}},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["createforuser",{"_index":615,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":616,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createparamdecorator",{"_index":2916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquestion",{"_index":749,"title":{"classes/CreateQuestion.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["createquestion(createquestiondto",{"_index":2133,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestiondto",{"_index":757,"title":{"classes/CreateQuestionDto.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["createquestiongroupdto",{"_index":791,"title":{"classes/CreateQuestionGroupDto.html":{}},"body":{"classes/CreateQuestionGroupDto.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["createquestiongroupdto.examid",{"_index":2304,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["createquestions",{"_index":2130,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestions(groupid",{"_index":2135,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["createquestionsdto",{"_index":760,"title":{"classes/CreateQuestionsDto.html":{}},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["createquestionsdto.questions.map((dto",{"_index":2381,"title":{},"body":{"injectables/QuestionService.html":{}}}],["createstudent",{"_index":2103,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createstudent(createdto",{"_index":2105,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["createtransport",{"_index":1916,"title":{},"body":{"modules/InfraModule.html":{}}}],["createtransport(configservice.get('nodemailer",{"_index":1930,"title":{},"body":{"modules/InfraModule.html":{}}}],["createuser",{"_index":1641,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuser(@body",{"_index":2559,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createdto",{"_index":1647,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["createuser(createuserdto",{"_index":2546,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["createuserbytype",{"_index":2587,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserbytype(createuserdto",{"_index":2595,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":800,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuserdto.enrollment",{"_index":2617,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":2618,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.type",{"_index":2624,"title":{},"body":{"injectables/UserService.html":{}}}],["credential",{"_index":1583,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["crypto",{"_index":1750,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["csv",{"_index":1472,"title":{},"body":{"injectables/ExportationService.html":{},"dependencies.html":{}}}],["csvline",{"_index":823,"title":{"interfaces/CsvLine.html":{}},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"coverage.html":{}}}],["csvline.anonymous",{"_index":1450,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.group_title",{"_index":1445,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.is_personal",{"_index":1447,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.observation",{"_index":1456,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.question_statement",{"_index":1449,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.score",{"_index":1454,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.subject_title",{"_index":1446,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.unique_code",{"_index":1457,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvline.user_enrollment",{"_index":1452,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["csvlinerow",{"_index":838,"title":{"interfaces/CsvLineRow.html":{}},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{},"coverage.html":{}}}],["csvlines",{"_index":1408,"title":{},"body":{"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{}}}],["csvlines.length",{"_index":1488,"title":{},"body":{"injectables/ExportationService.html":{}}}],["csvlines.map((csvline",{"_index":1444,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ctx",{"_index":1844,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1847,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ctx.getresponse",{"_index":1846,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp(6",{"_index":139,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["customlogger",{"_index":852,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"modules/LoggerModule.html":{},"injectables/NodeMailerService.html":{},"coverage.html":{},"overview.html":{}}}],["código",{"_index":826,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{},"injectables/SendEmailService.html":{}}}],["data",{"_index":1493,"title":{},"body":{"injectables/ExportationService.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"injectables/PayloadInterceptor.html":{}}}],["data.length",{"_index":1501,"title":{},"body":{"injectables/ExportationService.html":{}}}],["database",{"_index":1526,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"miscellaneous/variables.html":{}}}],["database(url",{"_index":1544,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["database/migrations/*.{js,ts",{"_index":2893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":2666,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseconfigkey",{"_index":391,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseurl",{"_index":1579,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["date",{"_index":100,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":1851,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["datetime",{"_index":526,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/Period.html":{}}}],["datetime(6",{"_index":138,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["de",{"_index":830,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{},"injectables/SendEmailService.html":{},"index.html":{}}}],["declarations",{"_index":261,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":1634,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["decoded.email",{"_index":1667,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.email_verified",{"_index":1668,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decoded.uid",{"_index":1666,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decorators",{"_index":82,"title":{},"body":{"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["decoratos/get",{"_index":2554,"title":{},"body":{"controllers/UserController.html":{}}}],["default",{"_index":130,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateAnswerDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Student.html":{},"classes/User.html":{},"classes/UserEmail1625013724392.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["default_port",{"_index":2707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultagreementstatus",{"_index":1196,"title":{},"body":{"classes/ExamRepository.html":{}}}],["defaultname",{"_index":1890,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":66,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/FirebaseAdmin.html":{},"classes/PeriodIndex1624547816204.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":182,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["delete(':id')@apiokresponse()@apinotfoundresponse",{"_index":2144,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["deleted_at",{"_index":142,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["deletedat",{"_index":80,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deletedatecolumn",{"_index":104,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["deleteuser",{"_index":1642,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["deleteuser(uid",{"_index":1650,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["dependencies",{"_index":259,"title":{"dependencies.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":524,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["detectsubjecttype",{"_index":652,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["development",{"_index":2811,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dfs",{"_index":1291,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["dfs(type",{"_index":1295,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["disciplina",{"_index":828,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["distinct",{"_index":1153,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExportationRepository.html":{}}}],["distinct(true",{"_index":1179,"title":{},"body":{"classes/ExamRepository.html":{}}}],["docker",{"_index":2817,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":2641,"title":{},"body":{"coverage.html":{}}}],["dont",{"_index":1863,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["down",{"_index":14,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/UserEmail1625013724392.html":{}}}],["down(queryrunner",{"_index":16,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/UserEmail1625013724392.html":{}}}],["drop",{"_index":164,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/UserEmail1625013724392.html":{}}}],["dsn",{"_index":2946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":1211,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionService.html":{},"injectables/SendEmailService.html":{}}}],["dto.agreement",{"_index":2418,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["dto.questionid",{"_index":333,"title":{},"body":{"injectables/AnswerService.html":{}}}],["dto.user.email",{"_index":2423,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["dto/create",{"_index":209,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["dto/update",{"_index":211,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{}}}],["dtos/auth.dto",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["dtos/copy",{"_index":2232,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["dtos/create",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/file",{"_index":1752,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["dtos/find",{"_index":1174,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/QuestionGroupService.html":{}}}],["dtos/firebase",{"_index":1722,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["dtos/login.dto",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/question",{"_index":2065,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["dtos/reorder",{"_index":2158,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["dtos/send",{"_index":1979,"title":{},"body":{"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/SendEmailService.html":{}}}],["dtos/update",{"_index":983,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/user.dto",{"_index":2612,"title":{},"body":{"injectables/UserService.html":{}}}],["duration",{"_index":2041,"title":{},"body":{"injectables/PeriodService.html":{}}}],["dynamicmodule",{"_index":1610,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["e",{"_index":1052,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/UserService.html":{}}}],["ea",{"_index":1426,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.anonymous",{"_index":1411,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.deleted_at",{"_index":1441,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.exam_id",{"_index":1409,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.id",{"_index":1410,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.observation",{"_index":1412,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.unique_code",{"_index":1413,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["ea.user_id",{"_index":1429,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["each",{"_index":741,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["el.id",{"_index":1190,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ela",{"_index":782,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["em",{"_index":2194,"title":{},"body":{"classes/QuestionGroup.html":{},"index.html":{}}}],["email",{"_index":803,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"classes/Professor.html":{},"interfaces/SendAgreementEmailDto.html":{},"classes/Student.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEmail1625013724392.html":{}}}],["email.dto",{"_index":2414,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["email.dto.ts",{"_index":2408,"title":{},"body":{"interfaces/SendAgreementEmailDto.html":{},"coverage.html":{}}}],["email.service",{"_index":1032,"title":{},"body":{"injectables/ExamAgreementService.html":{},"modules/InfraModule.html":{}}}],["email.service.ts",{"_index":2409,"title":{},"body":{"injectables/SendEmailService.html":{},"coverage.html":{}}}],["email.service.ts:13",{"_index":2413,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["email.service.ts:7",{"_index":2411,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["emailverified",{"_index":1636,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{}}}],["emit",{"_index":1861,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["encoding",{"_index":1502,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{}}}],["end",{"_index":864,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/PeriodService.html":{}}}],["enda",{"_index":2043,"title":{},"body":{"injectables/PeriodService.html":{}}}],["endb",{"_index":2045,"title":{},"body":{"injectables/PeriodService.html":{}}}],["ended_at",{"_index":527,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["endedat",{"_index":730,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{}}}],["endofmonth",{"_index":1885,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["endofmonth(addmonths(new",{"_index":1896,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["engine=innodb",{"_index":151,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["enrollment",{"_index":36,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["enrollment.decorator",{"_index":819,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["enrollment.decorator.ts",{"_index":2686,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["enrollmentlength",{"_index":2684,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":2889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/answer",{"_index":253,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entities/answer.entity",{"_index":212,"title":{},"body":{"controllers/AnswerController.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{}}}],["entities/auth.entity",{"_index":470,"title":{},"body":{"classes/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["entities/exam",{"_index":984,"title":{},"body":{"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{}}}],["entities/exam.entity",{"_index":1101,"title":{},"body":{"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"interfaces/FindExamByUserDto.html":{}}}],["entities/grade.entity",{"_index":1797,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["entities/period.entity",{"_index":1798,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{}}}],["entities/professor.entity",{"_index":1799,"title":{},"body":{"classes/GradeRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{}}}],["entities/question",{"_index":2067,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["entities/question.entity",{"_index":2159,"title":{},"body":{"controllers/QuestionController.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{}}}],["entities/student.entity",{"_index":1800,"title":{},"body":{"classes/GradeRepository.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{}}}],["entities/user.entity",{"_index":2555,"title":{},"body":{"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":114,"title":{},"body":{"classes/Answer.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["entity('answer",{"_index":120,"title":{},"body":{"classes/Answer.html":{}}}],["entity('auth",{"_index":416,"title":{},"body":{"classes/Auth.html":{}}}],["entity('course",{"_index":686,"title":{},"body":{"classes/Course.html":{}}}],["entity('exam",{"_index":896,"title":{},"body":{"classes/Exam.html":{}}}],["entity('exam_agreement",{"_index":943,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["entity('exam_target",{"_index":1245,"title":{},"body":{"classes/ExamTarget.html":{}}}],["entity('grade",{"_index":1784,"title":{},"body":{"classes/Grade.html":{}}}],["entity('period",{"_index":2014,"title":{},"body":{"classes/Period.html":{}}}],["entity('subject",{"_index":2454,"title":{},"body":{"classes/Subject.html":{}}}],["entity('user",{"_index":2541,"title":{},"body":{"classes/User.html":{}}}],["entity.{js,ts",{"_index":2891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entitylike",{"_index":1221,"title":{},"body":{"injectables/ExamService.html":{}}}],["entityrepository",{"_index":249,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AuthRepository.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/StudentRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(answer",{"_index":287,"title":{},"body":{"classes/AnswerRepository.html":{}}}],["entityrepository(answergrade",{"_index":255,"title":{},"body":{"classes/AnswerGradeRepository.html":{}}}],["entityrepository(auth",{"_index":471,"title":{},"body":{"classes/AuthRepository.html":{}}}],["entityrepository(exam",{"_index":1176,"title":{},"body":{"classes/ExamRepository.html":{}}}],["entityrepository(examagreement",{"_index":1003,"title":{},"body":{"classes/ExamAgreementRepository.html":{}}}],["entityrepository(examtarget",{"_index":1320,"title":{},"body":{"classes/ExamTargetRepository.html":{}}}],["entityrepository(grade",{"_index":1802,"title":{},"body":{"classes/GradeRepository.html":{}}}],["entityrepository(period",{"_index":2024,"title":{},"body":{"classes/PeriodRepository.html":{}}}],["entityrepository(professor",{"_index":2101,"title":{},"body":{"classes/ProfessorRepository.html":{}}}],["entityrepository(question",{"_index":2355,"title":{},"body":{"classes/QuestionRepository.html":{}}}],["entityrepository(questiongroup",{"_index":2274,"title":{},"body":{"classes/QuestionGroupRepository.html":{}}}],["entityrepository(student",{"_index":2439,"title":{},"body":{"classes/StudentRepository.html":{}}}],["entityrepository(user",{"_index":2582,"title":{},"body":{"classes/UserRepository.html":{}}}],["enum",{"_index":95,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Professor.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["enum/user",{"_index":820,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["enumerations",{"_index":2765,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/answer",{"_index":118,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{}}}],["enums/casl",{"_index":629,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["enums/exam",{"_index":746,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{}}}],["enums/exportation",{"_index":1473,"title":{},"body":{"injectables/ExportationService.html":{}}}],["env",{"_index":52,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["env.example",{"_index":2824,"title":{},"body":{"index.html":{}}}],["envelope",{"_index":1989,"title":{},"body":{"injectables/NodeMailerService.html":{}}}],["environment",{"_index":2821,"title":{},"body":{"index.html":{}}}],["err",{"_index":1669,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["error",{"_index":1842,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["error('admin_password",{"_index":51,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["error('method",{"_index":1585,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["error('needs",{"_index":2913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["essa",{"_index":779,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["essas",{"_index":2192,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["esses",{"_index":2814,"title":{},"body":{"index.html":{}}}],["estudante",{"_index":2950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["et",{"_index":1157,"title":{},"body":{"classes/ExamRepository.html":{}}}],["et.exam_id",{"_index":1159,"title":{},"body":{"classes/ExamRepository.html":{}}}],["et.exam_target_id",{"_index":1162,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ex",{"_index":1850,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.body",{"_index":1878,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.message",{"_index":1875,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.name",{"_index":1859,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["ex.stack",{"_index":1857,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exam",{"_index":522,"title":{"classes/Exam.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateExamAgreementDto.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/FindExamByUserDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam.constants",{"_index":1219,"title":{},"body":{"injectables/ExamService.html":{}}}],["exam.created_at",{"_index":1167,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.deleted_at",{"_index":1168,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.dto",{"_index":1100,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{}}}],["exam.dto.ts",{"_index":728,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["exam.dto.ts:16",{"_index":743,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:20",{"_index":735,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:24",{"_index":738,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:28",{"_index":737,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:32",{"_index":734,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:37",{"_index":742,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.endedat",{"_index":1186,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.entity",{"_index":937,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["exam.id",{"_index":1158,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.period",{"_index":1229,"title":{},"body":{"injectables/ExamService.html":{},"classes/Period.html":{},"injectables/PersonalQuestionGroup.html":{}}}],["exam.service",{"_index":1036,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["exam.startedat",{"_index":1185,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.status",{"_index":1166,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam.targets",{"_index":1225,"title":{},"body":{"injectables/ExamService.html":{}}}],["exam.ts",{"_index":910,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam.ts:10",{"_index":912,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:4",{"_index":911,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam.ts:6",{"_index":913,"title":{},"body":{"classes/Exam1620478273991.html":{}}}],["exam/entities/exam",{"_index":626,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/entities/exam.entity",{"_index":625,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["exam/exam.module",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{}}}],["exam1620478273991",{"_index":908,"title":{"classes/Exam1620478273991.html":{}},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["exam_agreement",{"_index":545,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"injectables/ExportationRepository.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{}}}],["exam_agreement_id",{"_index":145,"title":{},"body":{"classes/Answer1622421768424.html":{},"injectables/ExportationRepository.html":{}}}],["exam_agreement`(`id",{"_index":158,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["exam_id",{"_index":552,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"injectables/ExportationRepository.html":{},"classes/GradeIndex1624560625346.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["exam_not_found",{"_index":1218,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exam_period",{"_index":1198,"title":{},"body":{"classes/ExamRepository.html":{}}}],["exam_target",{"_index":1161,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{}}}],["exam_target_id",{"_index":1256,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam_target`(`id",{"_index":1261,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["exam_targets_exam_target",{"_index":1156,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{}}}],["exam`(`id",{"_index":558,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{}}}],["examagreement",{"_index":74,"title":{"classes/ExamAgreement.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/Professor.html":{},"interfaces/SendAgreementEmailDto.html":{},"classes/Student.html":{},"classes/User.html":{},"coverage.html":{}}}],["examagreement.ts",{"_index":953,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["examagreement.ts:21",{"_index":955,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement.ts:4",{"_index":954,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement.ts:6",{"_index":956,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["examagreement1622332886234",{"_index":951,"title":{"classes/ExamAgreement1622332886234.html":{}},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["examagreementanonymousdefault.ts",{"_index":962,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["examagreementanonymousdefault.ts:13",{"_index":964,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault.ts:5",{"_index":963,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault.ts:7",{"_index":965,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}}}],["examagreementanonymousdefault1622334780336",{"_index":960,"title":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{}},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["examagreementcontroller",{"_index":966,"title":{"controllers/ExamAgreementController.html":{}},"body":{"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examagreementdto",{"_index":724,"title":{"classes/ExamAgreementDto.html":{}},"body":{"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreementDto.html":{},"coverage.html":{}}}],["examagreementid",{"_index":75,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{}}}],["examagreementnotfinished",{"_index":651,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["examagreementobservation.ts",{"_index":996,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["examagreementobservation.ts:13",{"_index":998,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation.ts:5",{"_index":997,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation.ts:7",{"_index":999,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{}}}],["examagreementobservation1622417032753",{"_index":994,"title":{"classes/ExamAgreementObservation1622417032753.html":{}},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["examagreementrepository",{"_index":1000,"title":{"classes/ExamAgreementRepository.html":{}},"body":{"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examagreements",{"_index":2087,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["examagreementservice",{"_index":306,"title":{"injectables/ExamAgreementService.html":{}},"body":{"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"coverage.html":{},"overview.html":{}}}],["examagreementstatus",{"_index":922,"title":{},"body":{"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"miscellaneous/enumerations.html":{}}}],["examagreementstatus.finished",{"_index":946,"title":{},"body":{"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["examagreementstatus.started",{"_index":944,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["examagreementuniquecode.ts",{"_index":1067,"title":{},"body":{"classes/ExamAgreementUniqueCode1625001091462.html":{},"coverage.html":{}}}],["examagreementuniquecode.ts:20",{"_index":1070,"title":{},"body":{"classes/ExamAgreementUniqueCode1625001091462.html":{}}}],["examagreementuniquecode.ts:6",{"_index":1069,"title":{},"body":{"classes/ExamAgreementUniqueCode1625001091462.html":{}}}],["examagreementuniquecode.ts:8",{"_index":1071,"title":{},"body":{"classes/ExamAgreementUniqueCode1625001091462.html":{}}}],["examagreementuniquecode1625001091462",{"_index":1065,"title":{"classes/ExamAgreementUniqueCode1625001091462.html":{}},"body":{"classes/ExamAgreementUniqueCode1625001091462.html":{},"coverage.html":{}}}],["examagreementuniquecodesendedat.ts",{"_index":1075,"title":{},"body":{"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"coverage.html":{}}}],["examagreementuniquecodesendedat.ts:14",{"_index":1077,"title":{},"body":{"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{}}}],["examagreementuniquecodesendedat.ts:6",{"_index":1076,"title":{},"body":{"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{}}}],["examagreementuniquecodesendedat.ts:8",{"_index":1078,"title":{},"body":{"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{}}}],["examagreementuniquecodesendedat1625002603968",{"_index":1073,"title":{"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{}},"body":{"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"coverage.html":{}}}],["examagreementuser",{"_index":972,"title":{"interfaces/ExamAgreementUser.html":{}},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"coverage.html":{}}}],["examcontroller",{"_index":1082,"title":{"controllers/ExamController.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examid",{"_index":180,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FindPersonalDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{}}}],["exammodule",{"_index":268,"title":{"modules/ExamModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["exampersonalresult",{"_index":1094,"title":{"classes/ExamPersonalResult.html":{}},"body":{"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["example",{"_index":1281,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["examrepository",{"_index":1125,"title":{"classes/ExamRepository.html":{}},"body":{"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["exams",{"_index":2008,"title":{},"body":{"classes/Period.html":{}}}],["examservice",{"_index":1011,"title":{"injectables/ExamService.html":{}},"body":{"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"overview.html":{}}}],["examservice.relations",{"_index":1232,"title":{},"body":{"injectables/ExamService.html":{}}}],["examstatus",{"_index":875,"title":{},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"miscellaneous/enumerations.html":{}}}],["examstatus.active",{"_index":1183,"title":{},"body":{"classes/ExamRepository.html":{}}}],["examtarget",{"_index":877,"title":{"classes/ExamTarget.html":{}},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["examtarget.ts",{"_index":1248,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examtarget.ts:30",{"_index":1250,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget.ts:6",{"_index":1249,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget.ts:8",{"_index":1251,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["examtarget1622326106015",{"_index":1246,"title":{"classes/ExamTarget1622326106015.html":{}},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{}}}],["examtargetadd.ts",{"_index":1264,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examtargetadd.ts:21",{"_index":1266,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd.ts:6",{"_index":1265,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd.ts:8",{"_index":1267,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["examtargetadd1622378888497",{"_index":1262,"title":{"classes/ExamTargetAdd1622378888497.html":{}},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{}}}],["examtargetcontroller",{"_index":1123,"title":{"controllers/ExamTargetController.html":{}},"body":{"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["examtargetmanagerdto",{"_index":1286,"title":{"interfaces/ExamTargetManagerDto.html":{}},"body":{"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["examtargetnode",{"_index":1288,"title":{"classes/ExamTargetNode.html":{}},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["examtargetnodefactory",{"_index":1119,"title":{"injectables/ExamTargetNodeFactory.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"overview.html":{}}}],["examtargetnodeschema",{"_index":1311,"title":{"interfaces/ExamTargetNodeSchema.html":{}},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["examtargetrepository",{"_index":1127,"title":{"classes/ExamTargetRepository.html":{}},"body":{"modules/ExamModule.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["examtargetservice",{"_index":1120,"title":{"injectables/ExamTargetService.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{},"overview.html":{}}}],["examtargettree",{"_index":1121,"title":{"injectables/ExamTargetTree.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"coverage.html":{},"overview.html":{}}}],["examtargettype",{"_index":739,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["examtargettype.course",{"_index":1358,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.grade",{"_index":1359,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.professor",{"_index":1360,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtargettype.student",{"_index":1361,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["examtitle.ts",{"_index":1366,"title":{},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["examtitle.ts:10",{"_index":1368,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle.ts:4",{"_index":1367,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle.ts:6",{"_index":1369,"title":{},"body":{"classes/ExamTitle1621036457247.html":{}}}],["examtitle1621036457247",{"_index":1364,"title":{"classes/ExamTitle1621036457247.html":{}},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["examuser",{"_index":175,"title":{"interfaces/ExamUser.html":{}},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamUser.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"coverage.html":{}}}],["exception",{"_index":1831,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter",{"_index":676,"title":{},"body":{"modules/CoreModule.html":{}}}],["exception.filter.ts",{"_index":1821,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["exception.filter.ts:31",{"_index":1824,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:34",{"_index":1830,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":1874,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.getstatus",{"_index":1848,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.initmessage",{"_index":1849,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.message",{"_index":1853,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.name",{"_index":1860,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exception.stack",{"_index":1858,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exceptionfilter",{"_index":1822,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exceptions",{"_index":1862,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["exclude",{"_index":938,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["executioncontext",{"_index":1998,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":2925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":38,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["exportation",{"_index":1481,"title":{},"body":{"injectables/ExportationService.html":{}}}],["exportation.controller",{"_index":1390,"title":{},"body":{"modules/ExportationModule.html":{}}}],["exportation.repository",{"_index":1391,"title":{},"body":{"modules/ExportationModule.html":{},"injectables/ExportationService.html":{}}}],["exportation.service",{"_index":1378,"title":{},"body":{"controllers/ExportationController.html":{},"modules/ExportationModule.html":{}}}],["exportation/exportation.module",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["exportationcontroller",{"_index":1371,"title":{"controllers/ExportationController.html":{}},"body":{"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"coverage.html":{}}}],["exportationmodule",{"_index":382,"title":{"modules/ExportationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExportationModule.html":{},"modules.html":{},"overview.html":{}}}],["exportationrepository",{"_index":1388,"title":{"injectables/ExportationRepository.html":{}},"body":{"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"coverage.html":{},"overview.html":{}}}],["exportationservice",{"_index":1377,"title":{"injectables/ExportationService.html":{}},"body":{"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationService.html":{},"coverage.html":{},"overview.html":{}}}],["exportationtype",{"_index":1468,"title":{},"body":{"injectables/ExportationService.html":{},"miscellaneous/enumerations.html":{}}}],["exportationtype.avaliacao",{"_index":1492,"title":{},"body":{"injectables/ExportationService.html":{}}}],["exportationtype}_${examid}_${fileprefix}_${filedate}.csv",{"_index":1482,"title":{},"body":{"injectables/ExportationService.html":{}}}],["exports",{"_index":264,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"injectables/ExportationService.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exporttocsv",{"_index":1373,"title":{},"body":{"controllers/ExportationController.html":{},"injectables/ExportationService.html":{}}}],["exporttocsv(@param('examid",{"_index":1382,"title":{},"body":{"controllers/ExportationController.html":{}}}],["exporttocsv(examid",{"_index":1374,"title":{},"body":{"controllers/ExportationController.html":{},"injectables/ExportationService.html":{}}}],["expose",{"_index":939,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["express",{"_index":1834,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"controllers/UploadController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":2519,"title":{},"body":{"controllers/UploadController.html":{}}}],["extends",{"_index":71,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/Auth.html":{},"classes/AuthRepository.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementRepository.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTargetRepository.html":{},"classes/FFEntity.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodRepository.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"classes/QuestionRepository.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":1947,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1956,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":621,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["extre",{"_index":2478,"title":{},"body":{"injectables/TemplateService.html":{}}}],["factories/casl",{"_index":659,"title":{},"body":{"modules/CaslModule.html":{}}}],["factories/exam",{"_index":1135,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetTree.html":{}}}],["faker",{"_index":1888,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"dependencies.html":{}}}],["faker.random.alpha",{"_index":1898,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["faker.random.alphanumeric(20",{"_index":1897,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["false",{"_index":867,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":2800,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fcm",{"_index":1677,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["ff",{"_index":2807,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ff.uneb.br",{"_index":2924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ffentity",{"_index":72,"title":{"classes/FFEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"coverage.html":{}}}],["ffentity:10",{"_index":881,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:13",{"_index":883,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:16",{"_index":882,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/User.html":{}}}],["ffentity:6",{"_index":99,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.match(extre",{"_index":2483,"title":{},"body":{"injectables/TemplateService.html":{}}}],["file.publicurl",{"_index":1735,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file.save(data",{"_index":1730,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["filedate",{"_index":1475,"title":{},"body":{"injectables/ExportationService.html":{}}}],["filedto",{"_index":1746,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["filedto.buffer",{"_index":1760,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["filedto.mimetype",{"_index":1761,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["filedto.norandomname",{"_index":1755,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["fileinterceptor",{"_index":2524,"title":{},"body":{"controllers/UploadController.html":{}}}],["filename",{"_index":1490,"title":{},"body":{"injectables/ExportationService.html":{}}}],["fileprefix",{"_index":1479,"title":{},"body":{"injectables/ExportationService.html":{}}}],["filesenddto",{"_index":1508,"title":{"interfaces/FileSendDto.html":{}},"body":{"interfaces/FileSendDto.html":{},"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{},"coverage.html":{}}}],["filter((file",{"_index":2482,"title":{},"body":{"injectables/TemplateService.html":{}}}],["filters/http",{"_index":675,"title":{},"body":{"modules/CoreModule.html":{}}}],["find",{"_index":2131,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find(@query",{"_index":2168,"title":{},"body":{"controllers/QuestionController.html":{}}}],["find(finddto",{"_index":2138,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto",{"_index":2157,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["find.dto.ts",{"_index":2175,"title":{},"body":{"classes/QuestionFindDto.html":{},"coverage.html":{}}}],["find.dto.ts:6",{"_index":2177,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["find.type",{"_index":1519,"title":{},"body":{"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["find.type.ts",{"_index":2845,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["findall",{"_index":301,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["findauth",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["findauth(authdto",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["findbyids",{"_index":2358,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findbyids(ids",{"_index":2367,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findbytargets",{"_index":1147,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbytargets(undefined",{"_index":1150,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbyuser",{"_index":1148,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbyuser(user",{"_index":1169,"title":{},"body":{"classes/ExamRepository.html":{}}}],["findbyuserandperiod",{"_index":1794,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["findbyuserandperiod(user",{"_index":1795,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["finddto",{"_index":1021,"title":{},"body":{"injectables/ExamAgreementService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["finddto.groupid",{"_index":2384,"title":{},"body":{"injectables/QuestionService.html":{}}}],["findexambyuserdto",{"_index":1151,"title":{"interfaces/FindExamByUserDto.html":{}},"body":{"classes/ExamRepository.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["findone",{"_index":302,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["findone(@param('id",{"_index":1111,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["findone(finddto",{"_index":1018,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["findone(id",{"_index":312,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["findone(userdto",{"_index":2107,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["findpersonal",{"_index":1084,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{}}}],["findpersonal(@getuser",{"_index":1109,"title":{},"body":{"controllers/ExamController.html":{}}}],["findpersonal(examid",{"_index":2219,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["findpersonal(undefined",{"_index":2284,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["findpersonal(user",{"_index":1092,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["findpersonaldto",{"_index":1512,"title":{"classes/FindPersonalDto.html":{}},"body":{"classes/FindPersonalDto.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["findspecializeduser",{"_index":2588,"title":{},"body":{"injectables/UserService.html":{}}}],["findspecializeduser(userdto",{"_index":2597,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser",{"_index":2589,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(userdto",{"_index":2599,"title":{},"body":{"injectables/UserService.html":{}}}],["finished",{"_index":579,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"miscellaneous/enumerations.html":{}}}],["finishexam",{"_index":1006,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["finishexam(agreement",{"_index":1022,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["firebase",{"_index":1573,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["firebase.app.app",{"_index":1568,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.appcheck.appcheck",{"_index":1541,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.appoptions",{"_index":1588,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.auth.auth",{"_index":1543,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.createrequest",{"_index":1648,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.auth.updaterequest",{"_index":1656,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebase.credential.cert(options.cert",{"_index":1584,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.database.database",{"_index":1548,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.firestore.collectionreference",{"_index":2847,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["firebase.firestore.firestore",{"_index":1551,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{}}}],["firebase.initializeapp",{"_index":1578,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.installations.installations",{"_index":1553,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.instanceid.instanceid",{"_index":1555,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.machinelearning.machinelearning",{"_index":1557,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.messaging.messaging",{"_index":1559,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingoptions",{"_index":1683,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.messaging.messagingpayload",{"_index":1682,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebase.projectmanagement.projectmanagement",{"_index":1561,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.remoteconfig.remoteconfig",{"_index":1563,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.securityrules.securityrules",{"_index":1565,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["firebase.serviceaccount",{"_index":1631,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["firebase.storage.storage",{"_index":1567,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{}}}],["firebase_admin",{"_index":2699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebase_bucket",{"_index":2914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebase_options",{"_index":1574,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebaseadmin",{"_index":1520,"title":{"injectables/FirebaseAdmin.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{},"overview.html":{}}}],["firebaseadmin.auth",{"_index":1664,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseadmin.firestore",{"_index":1699,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firebaseadmin.messaging",{"_index":1686,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["firebaseadmin.storage",{"_index":1725,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["firebaseadminmodule",{"_index":1601,"title":{"modules/FirebaseAdminModule.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules.html":{},"overview.html":{}}}],["firebaseadminmodule.forroot(options",{"_index":1714,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseadminmodule.forrootasync(options",{"_index":1715,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["firebaseasyncmoduleoptions",{"_index":1613,"title":{"interfaces/FirebaseAsyncModuleOptions.html":{}},"body":{"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["firebaseauth",{"_index":1640,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["firebaseauthdecodedtoken",{"_index":1633,"title":{"interfaces/FirebaseAuthDecodedToken.html":{}},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"coverage.html":{}}}],["firebaseauthservice",{"_index":1637,"title":{"injectables/FirebaseAuthService.html":{}},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebasecloudmessagingservice",{"_index":1674,"title":{"injectables/FirebaseCloudMessagingService.html":{}},"body":{"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{},"overview.html":{}}}],["firebaseconfig",{"_index":2668,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasefirestorecollection",{"_index":1695,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firebasefirestoreservice",{"_index":1688,"title":{"injectables/FirebaseFirestoreService.html":{}},"body":{"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"coverage.html":{}}}],["firebasemodule",{"_index":1701,"title":{"modules/FirebaseModule.html":{}},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["firebasemodule.forrootasync",{"_index":1927,"title":{},"body":{"modules/InfraModule.html":{}}}],["firebasemoduleoptions",{"_index":1538,"title":{"interfaces/FirebaseModuleOptions.html":{}},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasestorageservice",{"_index":1712,"title":{"injectables/FirebaseStorageService.html":{}},"body":{"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["firebasestorageuploaddto",{"_index":1720,"title":{"interfaces/FirebaseStorageUploadDto.html":{}},"body":{"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["firebaseuploader",{"_index":1738,"title":{"injectables/FirebaseUploader.html":{}},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"coverage.html":{}}}],["firestore",{"_index":1527,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseFirestoreService.html":{},"miscellaneous/typealiases.html":{}}}],["firestore.service.ts",{"_index":1689,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{},"coverage.html":{}}}],["firestore.service.ts:14",{"_index":1693,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["firestore.service.ts:8",{"_index":1691,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["first",{"_index":1216,"title":{},"body":{"injectables/ExamService.html":{}}}],["first(exam.agreements)?.status",{"_index":1238,"title":{},"body":{"injectables/ExamService.html":{}}}],["fk_1d110bd5138b275a2ea2944e290",{"_index":557,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["fk_20bfb4e7c97aa20956be86c6beb",{"_index":958,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["fk_26862c959c4ecfc8f1b4a1a055c",{"_index":586,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_3b2789ae1c494ff1bf8dd4d4607",{"_index":553,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["fk_4a22969058fa5105ad6bee583f1",{"_index":1259,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["fk_7540599d89cb2b6e17cc56d5170",{"_index":585,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_7bdc7fbb138980e5471e2a19366",{"_index":959,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{}}}],["fk_814144bcce3b80921f41f15b823",{"_index":155,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_971014f1fb44be716098484bb5a",{"_index":162,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_af1604ea5493f65a6c8d70d98ed",{"_index":1260,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["fk_b472107b61171823120f069fd50",{"_index":563,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_b9db72ddc93f196bf9d79132171",{"_index":561,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_ba483ad17eb41fb181aa3a77d4f",{"_index":559,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/PeriodIndex1624547816204.html":{}}}],["fk_ba86f32978b67a878005c5af78a",{"_index":580,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_c3d19a89541e4f0813f2fe09194",{"_index":160,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["fk_d35fb46683694975ba85bcd804e",{"_index":565,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["fk_df58a2a413f5647f6411002cb28",{"_index":584,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["fk_f2d35d0b9823628374f51931ddd",{"_index":581,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["flags",{"_index":2193,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["fns",{"_index":1887,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"dependencies.html":{}}}],["following",{"_index":2828,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":156,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["form",{"_index":1991,"title":{},"body":{"injectables/NodeMailerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["fornecida",{"_index":781,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["forroot",{"_index":1607,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forroot(options",{"_index":1608,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync",{"_index":1611,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forrootasync(options",{"_index":1612,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["forwardref",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/QuestionService.html":{},"modules/UserModule.html":{}}}],["found",{"_index":346,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/PeriodService.html":{},"miscellaneous/variables.html":{}}}],["fs",{"_index":2471,"title":{},"body":{"injectables/TemplateService.html":{}}}],["fullfil",{"_index":2819,"title":{},"body":{"index.html":{}}}],["function",{"_index":1628,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":2784,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1431,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["g.id",{"_index":1432,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["g.subject_id",{"_index":1436,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["generate",{"_index":1309,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{}}}],["generate(schema",{"_index":1310,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["gerado",{"_index":1891,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/variables.html":{}}}],["get(':id",{"_index":1090,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get(':id')@apiokresponse({type",{"_index":2141,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get('health",{"_index":367,"title":{},"body":{"controllers/AppController.html":{}}}],["get('me",{"_index":1108,"title":{},"body":{"controllers/ExamController.html":{}}}],["get('me')@apiokresponse({type",{"_index":1093,"title":{},"body":{"controllers/ExamController.html":{}}}],["get('me/:examid",{"_index":2236,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["get('me/:examid')@apiokresponse({type",{"_index":2220,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["get('user",{"_index":1284,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["get('user')@apiexcludeendpoint",{"_index":1275,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["get()@apiokresponse({type",{"_index":1088,"title":{},"body":{"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["get()@useguards(jwtguard",{"_index":2549,"title":{},"body":{"controllers/UserController.html":{}}}],["get(name",{"_index":2464,"title":{},"body":{"injectables/TemplateService.html":{}}}],["getbyuser",{"_index":1007,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["getbyuser(user",{"_index":1024,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["getcollection",{"_index":1690,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getcollection(collection",{"_index":1692,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["getcsvlines",{"_index":1393,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["getcsvlines(examid",{"_index":1397,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["getend",{"_index":889,"title":{},"body":{"classes/Exam.html":{}}}],["getfilename",{"_index":1460,"title":{},"body":{"injectables/ExportationService.html":{}}}],["getfilename(examid",{"_index":1467,"title":{},"body":{"injectables/ExportationService.html":{}}}],["getforuser",{"_index":1272,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getforuser(@getuser",{"_index":1285,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getforuser(user",{"_index":1274,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["getgrades",{"_index":2097,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["gethasfinishedexam",{"_index":934,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["getisleaf",{"_index":1298,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["getlastperiod",{"_index":2026,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getname",{"_index":1569,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseUploader.html":{}}}],["getname(filedto",{"_index":1744,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["getnextposition",{"_index":2359,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getnextposition(groupid",{"_index":2370,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getoptions",{"_index":1571,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["getperiodbyinterval",{"_index":2027,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getperiodbyinterval(undefined",{"_index":2032,"title":{},"body":{"injectables/PeriodService.html":{}}}],["getpersonal",{"_index":2056,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["getpersonal(user",{"_index":2059,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["getstart",{"_index":887,"title":{},"body":{"classes/Exam.html":{}}}],["gettargetmap",{"_index":1323,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["gettargets",{"_index":1273,"title":{},"body":{"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{}}}],["gettargetsforuser",{"_index":1324,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["gettargetsforuser(target",{"_index":1330,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["getting",{"_index":2799,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":204,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"injectables/FirebaseAuthService.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuser(@getuser",{"_index":2561,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(uid",{"_index":1652,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["getuser(user",{"_index":2548,"title":{},"body":{"controllers/UserController.html":{}}}],["given",{"_index":2050,"title":{},"body":{"injectables/PeriodService.html":{}}}],["global",{"_index":674,"title":{},"body":{"modules/CoreModule.html":{},"modules/FirebaseModule.html":{},"modules/LoggerModule.html":{}}}],["gracefuluniquecodeonexamagreement.ts",{"_index":1764,"title":{},"body":{"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"coverage.html":{}}}],["gracefuluniquecodeonexamagreement.ts:12",{"_index":1765,"title":{},"body":{"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{}}}],["gracefuluniquecodeonexamagreement.ts:6",{"_index":1766,"title":{},"body":{"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{}}}],["gracefuluniquecodeonexamagreement1625001091462",{"_index":1068,"title":{},"body":{"classes/ExamAgreementUniqueCode1625001091462.html":{}}}],["gracefuluniquecodeonexamagreement1625001565001",{"_index":1762,"title":{"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{}},"body":{"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"coverage.html":{}}}],["grade",{"_index":232,"title":{"classes/Grade.html":{}},"body":{"classes/AnswerGrade.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/ExportationRepository.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/QuestionGroupGrade.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["grade.dto",{"_index":2066,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["grade.dto.ts",{"_index":2243,"title":{},"body":{"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["grade.dto.ts:5",{"_index":2244,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["grade.entity",{"_index":254,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/Grade.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{}}}],["grade.entity.ts",{"_index":231,"title":{},"body":{"classes/AnswerGrade.html":{},"coverage.html":{}}}],["grade.entity.ts:11",{"_index":235,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["grade.entity.ts:8",{"_index":234,"title":{},"body":{"classes/AnswerGrade.html":{}}}],["grade.id",{"_index":1906,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["grade.repository",{"_index":281,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["grade.repository.ts",{"_index":247,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["grade.subject",{"_index":2455,"title":{},"body":{"classes/Subject.html":{}}}],["grade_id",{"_index":147,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["grade`(`id",{"_index":163,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{}}}],["gradeid",{"_index":233,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/CreateAnswerDto.html":{}}}],["gradeindex.ts",{"_index":1788,"title":{},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["gradeindex.ts:10",{"_index":1790,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex.ts:4",{"_index":1789,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex.ts:6",{"_index":1791,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["gradeindex1624560625346",{"_index":1786,"title":{"classes/GradeIndex1624560625346.html":{}},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["graderepository",{"_index":595,"title":{"classes/GradeRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"coverage.html":{}}}],["grades",{"_index":2073,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{}}}],["grades.length",{"_index":2075,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["grades.map((grade",{"_index":2078,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["gradeservice",{"_index":590,"title":{"injectables/GradeService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/GradeService.html":{},"injectables/PersonalQuestionGroup.html":{},"coverage.html":{},"overview.html":{}}}],["group",{"_index":897,"title":{},"body":{"classes/Exam.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["group.constants",{"_index":2294,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.constants.ts",{"_index":2709,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group.controller",{"_index":2265,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.controller.ts",{"_index":2210,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group.controller.ts:39",{"_index":2216,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:47",{"_index":2217,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:53",{"_index":2221,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:63",{"_index":2218,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:70",{"_index":2227,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:80",{"_index":2214,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:88",{"_index":2225,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.controller.ts:97",{"_index":2222,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["group.dto",{"_index":2231,"title":{},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["group.dto.ts",{"_index":663,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:12",{"_index":795,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:16",{"_index":792,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:20",{"_index":794,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:24",{"_index":793,"title":{},"body":{"classes/CreateQuestionGroupDto.html":{}}}],["group.dto.ts:5",{"_index":667,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["group.dto.ts:8",{"_index":666,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{}}}],["group.dto.ts:9",{"_index":2403,"title":{},"body":{"classes/ReorderQuestionGroupDto.html":{}}}],["group.entity",{"_index":633,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["group.entity.ts",{"_index":2178,"title":{},"body":{"classes/QuestionGroup.html":{},"coverage.html":{}}}],["group.entity.ts:17",{"_index":2186,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:21",{"_index":2179,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:24",{"_index":2182,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:28",{"_index":2184,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:31",{"_index":2181,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:34",{"_index":2185,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:37",{"_index":2180,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.entity.ts:40",{"_index":2187,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["group.exam",{"_index":898,"title":{},"body":{"classes/Exam.html":{}}}],["group.module",{"_index":283,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{}}}],["group.module.ts",{"_index":2263,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["group.position",{"_index":2321,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.provider",{"_index":2270,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["group.provider.ts",{"_index":2055,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"coverage.html":{}}}],["group.provider.ts:13",{"_index":2058,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["group.provider.ts:20",{"_index":2060,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["group.questions",{"_index":2313,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.repository",{"_index":2071,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["group.repository.ts",{"_index":2273,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group.service",{"_index":2230,"title":{},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionService.html":{}}}],["group.service.ts",{"_index":2276,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group.service.ts:100",{"_index":2280,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:124",{"_index":2288,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:147",{"_index":2285,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:167",{"_index":2286,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:24",{"_index":2279,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:33",{"_index":2290,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:44",{"_index":2281,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:57",{"_index":2282,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:61",{"_index":2283,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group.service.ts:75",{"_index":2291,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["group/controllers/question",{"_index":2209,"title":{},"body":{"controllers/QuestionGroupController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts",{"_index":2129,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["group/controllers/question.controller.ts:33",{"_index":2134,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:41",{"_index":2137,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:50",{"_index":2140,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:57",{"_index":2143,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:64",{"_index":2153,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:73",{"_index":2149,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/controllers/question.controller.ts:82",{"_index":2145,"title":{},"body":{"controllers/QuestionController.html":{}}}],["group/dtos/copy",{"_index":662,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dtos/create",{"_index":750,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"coverage.html":{}}}],["group/dtos/find",{"_index":1513,"title":{},"body":{"classes/FindPersonalDto.html":{},"coverage.html":{}}}],["group/dtos/question",{"_index":2174,"title":{},"body":{"classes/QuestionFindDto.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["group/dtos/reorder",{"_index":2398,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["group/dtos/update",{"_index":2510,"title":{},"body":{"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["group/entities/question",{"_index":632,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"coverage.html":{}}}],["group/entities/question.entity",{"_index":111,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{}}}],["group/entities/question.entity.ts",{"_index":2115,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["group/entities/question.entity.ts:12",{"_index":2120,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:15",{"_index":2119,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:18",{"_index":2123,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:21",{"_index":2118,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:25",{"_index":2122,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:28",{"_index":2117,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:31",{"_index":2116,"title":{},"body":{"classes/Question.html":{}}}],["group/entities/question.entity.ts:9",{"_index":2124,"title":{},"body":{"classes/Question.html":{}}}],["group/interfaces/question",{"_index":2334,"title":{},"body":{"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["group/providers/personal",{"_index":2054,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"coverage.html":{}}}],["group/question",{"_index":282,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/question.constants.ts",{"_index":2710,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group/repositories/question",{"_index":2272,"title":{},"body":{"classes/QuestionGroupRepository.html":{},"coverage.html":{}}}],["group/repositories/question.repository.ts",{"_index":2354,"title":{},"body":{"classes/QuestionRepository.html":{},"coverage.html":{}}}],["group/services/question",{"_index":2275,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["group/services/question.service",{"_index":324,"title":{},"body":{"injectables/AnswerService.html":{}}}],["group/services/question.service.ts",{"_index":2356,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["group/services/question.service.ts:102",{"_index":2363,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:114",{"_index":2373,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:135",{"_index":2372,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:24",{"_index":2361,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:32",{"_index":2371,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:39",{"_index":2364,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:51",{"_index":2365,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:64",{"_index":2366,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:75",{"_index":2368,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:79",{"_index":2369,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group/services/question.service.ts:89",{"_index":2374,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group_id",{"_index":555,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["group_title",{"_index":841,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["groupby",{"_index":1215,"title":{},"body":{"injectables/ExamService.html":{}}}],["groupby(agreed",{"_index":1237,"title":{},"body":{"injectables/ExamService.html":{}}}],["groupgrade",{"_index":2079,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["groupgrade.grade",{"_index":2081,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["groupgrades",{"_index":2076,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["groupid",{"_index":664,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["groupidpositionmap",{"_index":2318,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupidpositionmap.get(group.id",{"_index":2322,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupids",{"_index":2316,"title":{},"body":{"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["groupids.map((id",{"_index":2319,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groups",{"_index":859,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["groups.map(async",{"_index":2320,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["groupservice",{"_index":2360,"title":{},"body":{"injectables/QuestionService.html":{}}}],["grupo",{"_index":829,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{},"miscellaneous/enumerations.html":{}}}],["grupopessoal",{"_index":2783,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["guards/jwt.guard",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{}}}],["gzip",{"_index":1731,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["hasfinishedexam",{"_index":917,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["hasgrade",{"_index":1080,"title":{},"body":{"interfaces/ExamAgreementUser.html":{}}}],["healthy",{"_index":372,"title":{},"body":{"controllers/AppController.html":{}}}],["helmet",{"_index":2739,"title":{},"body":{"dependencies.html":{}}}],["hooked",{"_index":252,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["host",{"_index":1828,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":1845,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["html",{"_index":2416,"title":{},"body":{"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{}}}],["http:\\/\\/localhost:(3000|5000",{"_index":2870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":371,"title":{},"body":{"controllers/AppController.html":{}}}],["httpcode(200",{"_index":374,"title":{},"body":{"controllers/AppController.html":{}}}],["httpexception",{"_index":1827,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["httpexceptionfilter",{"_index":671,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{},"overview.html":{}}}],["https:\\/\\/(.*\\.|)herokuapp.com",{"_index":2869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iclassvalidatorexception",{"_index":1841,"title":{"interfaces/IClassValidatorException.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["id",{"_index":40,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":2642,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1165,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/QuestionService.html":{}}}],["idx_040052dd4f7f2aa588ac15c22e",{"_index":1072,"title":{},"body":{"classes/ExamAgreementUniqueCode1625001091462.html":{}}}],["idx_26862c959c4ecfc8f1b4a1a055",{"_index":577,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_2b38bb607ef3e86920e9bd0163",{"_index":549,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{}}}],["idx_31ef2b4d30675d0c15056b7f6e",{"_index":429,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["idx_4a22969058fa5105ad6bee583f",{"_index":1257,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_5cf4963ae12285cda6432d5a3a",{"_index":539,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_7540599d89cb2b6e17cc56d517",{"_index":576,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_914f18c8fbe52b10a6b276bc0c",{"_index":427,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_92374adc6b583e8cf659977e48",{"_index":543,"title":{},"body":{"classes/Auxiliary1620477175799.html":{}}}],["idx_952e252e7470ff78b18a9ec786",{"_index":424,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_988f784cc581e38b7ed4943006",{"_index":1253,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_a6235b5ef0939d8deaad755fc8",{"_index":428,"title":{},"body":{"classes/Auth1619445806509.html":{}}}],["idx_af1604ea5493f65a6c8d70d98e",{"_index":1258,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["idx_df58a2a413f5647f6411002cb2",{"_index":574,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["idx_e12875dfb3b1d92d7d7c5377e2",{"_index":2572,"title":{},"body":{"classes/UserEmail1625013724392.html":{}}}],["idx_ec3a69def9f89a993b8f75ee4d",{"_index":148,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["idx_f2d35d0b9823628374f51931dd",{"_index":573,"title":{},"body":{"classes/Auxiliary1624416663574.html":{}}}],["ientity",{"_index":1881,"title":{"interfaces/IEntity.html":{}},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["iexception",{"_index":1837,"title":{"interfaces/IException.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["ignoreexams",{"_index":1177,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"interfaces/FindExamByUserDto.html":{}}}],["ignoreexams.length",{"_index":1187,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ignoreexams.map((el",{"_index":1189,"title":{},"body":{"classes/ExamRepository.html":{}}}],["ignoreexpiration",{"_index":1957,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image_alt",{"_index":2207,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["image_url",{"_index":2206,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{}}}],["imagealt",{"_index":763,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["imageurl",{"_index":764,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{}}}],["implemented",{"_index":1586,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/UserEmail1625013724392.html":{}}}],["import",{"_index":29,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":274,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["in(groupids",{"_index":2317,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["in(questionids",{"_index":2393,"title":{},"body":{"injectables/QuestionService.html":{}}}],["inactive",{"_index":532,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index('ix_period_started_at_ended_at",{"_index":2015,"title":{},"body":{"classes/Period.html":{}}}],["index('ix_question_group_class_examid",{"_index":2189,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["index('ix_question_group_position",{"_index":2196,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["index('ix_question_group_position')@column({type",{"_index":2183,"title":{},"body":{"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["index('ix_question_position",{"_index":2126,"title":{},"body":{"classes/Question.html":{}}}],["index('ix_question_position')@column({type",{"_index":2121,"title":{},"body":{"classes/Question.html":{}}}],["infersubjects",{"_index":622,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["infra.constants",{"_index":1920,"title":{},"body":{"modules/InfraModule.html":{},"injectables/NodeMailerService.html":{},"controllers/UploadController.html":{}}}],["infra/infra.module",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["inframodule",{"_index":383,"title":{"modules/InfraModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/InfraModule.html":{},"modules.html":{},"overview.html":{}}}],["inherited",{"_index":98,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["initialize",{"_index":2826,"title":{},"body":{"index.html":{}}}],["inject",{"_index":408,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{},"injectables/NodeMailerService.html":{},"injectables/QuestionService.html":{}}}],["inject(forwardref",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/QuestionService.html":{}}}],["inject(nodemailer_transporter",{"_index":1987,"title":{},"body":{"injectables/NodeMailerService.html":{}}}],["injectable",{"_index":297,"title":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":298,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectconnection",{"_index":1401,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["injectrepository",{"_index":318,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{}}}],["injectrepository(answergraderepository",{"_index":328,"title":{},"body":{"injectables/AnswerService.html":{}}}],["injectrepository(answerrepository",{"_index":326,"title":{},"body":{"injectables/AnswerService.html":{}}}],["injectrepository(authrepository",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(examagreementrepository",{"_index":1037,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["injectrepository(examrepository",{"_index":1220,"title":{},"body":{"injectables/ExamService.html":{}}}],["injectrepository(examtargetrepository",{"_index":1335,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["injectrepository(graderepository",{"_index":1817,"title":{},"body":{"injectables/GradeService.html":{}}}],["injectrepository(periodrepository",{"_index":2038,"title":{},"body":{"injectables/PeriodService.html":{}}}],["injectrepository(professorrepository",{"_index":2112,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["injectrepository(questiongrouprepository",{"_index":2072,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["injectrepository(questionrepository",{"_index":2376,"title":{},"body":{"injectables/QuestionService.html":{}}}],["injectrepository(studentrepository",{"_index":2444,"title":{},"body":{"injectables/StudentService.html":{}}}],["injectrepository(userrepository",{"_index":2614,"title":{},"body":{"injectables/UserService.html":{}}}],["inner",{"_index":1160,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExportationRepository.html":{}}}],["innerjoinandselect('exam.agreements",{"_index":1193,"title":{},"body":{"classes/ExamRepository.html":{}}}],["innerjoinandselect('exam.period",{"_index":1197,"title":{},"body":{"classes/ExamRepository.html":{}}}],["innerjoinandselect('grade.subject",{"_index":1807,"title":{},"body":{"classes/GradeRepository.html":{}}}],["insert",{"_index":59,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["instalação",{"_index":2808,"title":{},"body":{"index.html":{}}}],["installations",{"_index":1528,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["instanceid",{"_index":1529,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["instanceof",{"_index":1804,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/QuestionGroupService.html":{}}}],["int",{"_index":86,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Grade.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/Subject.html":{}}}],["intercept",{"_index":1996,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["intercept(_",{"_index":1997,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["interceptors/payload.interceptor",{"_index":677,"title":{},"body":{"modules/CoreModule.html":{}}}],["interface",{"_index":608,"title":{"interfaces/BatchUser.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"interfaces/SendAgreementEmailDto.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{}},"body":{"interfaces/BatchUser.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["interfaces",{"_index":609,"title":{},"body":{"interfaces/BatchUser.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamTargetManagerDto.html":{},"interfaces/ExamTargetNodeSchema.html":{},"interfaces/ExamUser.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"interfaces/QuestionGroupUser.html":{},"interfaces/SendAgreementEmailDto.html":{},"interfaces/SoftDeleteResult.html":{},"interfaces/SwaggerOptions.html":{},"interfaces/UserResult.html":{},"overview.html":{}}}],["interfaces/batch",{"_index":325,"title":{},"body":{"injectables/AnswerService.html":{}}}],["interfaces/csv",{"_index":1399,"title":{},"body":{"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{}}}],["interfaces/exam",{"_index":985,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{}}}],["interfaces/firebase",{"_index":1661,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"modules/FirebaseModule.html":{}}}],["interfaces/jwt",{"_index":1951,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["interfaces/user",{"_index":2613,"title":{},"body":{"injectables/UserService.html":{}}}],["internalservererrorexception",{"_index":2468,"title":{},"body":{"injectables/TemplateService.html":{}}}],["internalservererrorexception('template",{"_index":2490,"title":{},"body":{"injectables/TemplateService.html":{}}}],["interval",{"_index":2033,"title":{},"body":{"injectables/PeriodService.html":{}}}],["is_class",{"_index":842,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["is_personal",{"_index":843,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["isarray",{"_index":744,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isarray()@ispositive({each",{"_index":2400,"title":{},"body":{"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{}}}],["isarray()@validatenested({each",{"_index":796,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["isboolean",{"_index":723,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{}}}],["iscpf",{"_index":804,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdate",{"_index":745,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdate()@type(undefined",{"_index":736,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isdefined",{"_index":755,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["isemail",{"_index":815,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isemail()@isoptional",{"_index":2515,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isenrollment",{"_index":808,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isenum",{"_index":698,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateUserDto.html":{}}}],["isenum(answertype",{"_index":705,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["isenum(examtargettype",{"_index":748,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isenum(userrole",{"_index":810,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(usertype",{"_index":813,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isleaf",{"_index":1292,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["isnotempty",{"_index":447,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UserDto.html":{}}}],["isoptional",{"_index":699,"title":{},"body":{"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/QuestionFindDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isarray()@isenum(examtargettype",{"_index":740,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isoptional()@isboolean",{"_index":733,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@isboolean()@type(undefined",{"_index":719,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["isoptional()@isemail",{"_index":806,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional()@isenum(answertype",{"_index":696,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["isoptional()@ispositive",{"_index":752,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionGroupDto.html":{}}}],["isoptional()@isstring()@isnotempty",{"_index":768,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/UpdateExamAgreementDto.html":{}}}],["isoptional()@isurl",{"_index":770,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["isoptional()@min(1)@max(5",{"_index":693,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["ispositive",{"_index":665,"title":{},"body":{"classes/CopyQuestionGroupDto.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreementDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{}}}],["ispositive()@isoptional",{"_index":2176,"title":{},"body":{"classes/QuestionFindDto.html":{}}}],["ispositive()@type(undefined",{"_index":2506,"title":{},"body":{"classes/UpdateExamAgreementQueryDto.html":{}}}],["ispositive()@validateif(undefined",{"_index":690,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["ispositive({each",{"_index":2402,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["isprod",{"_index":2664,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":448,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/LoginDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UserDto.html":{}}}],["isstring()@isnotempty",{"_index":445,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["isstring()@length(password_min",{"_index":710,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{}}}],["issuer",{"_index":2923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isurl",{"_index":789,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["item",{"_index":653,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":654,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["items",{"_index":221,"title":{},"body":{"controllers/AnswerController.html":{}}}],["ix_period_started_at_ended_at",{"_index":2022,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["ix_question_group_class_examid",{"_index":1792,"title":{},"body":{"classes/GradeIndex1624560625346.html":{}}}],["ix_question_group_position",{"_index":571,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["ix_question_group_target",{"_index":1252,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroupTarget1621992475274.html":{}}}],["ix_question_position",{"_index":2353,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["join",{"_index":1155,"title":{},"body":{"classes/ExamRepository.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/ExportationRepository.html":{},"injectables/TemplateService.html":{}}}],["join(__dirname",{"_index":2476,"title":{},"body":{"injectables/TemplateService.html":{}}}],["jointable",{"_index":892,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{}}}],["json",{"_index":2910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.parse(process.env.firebase_admin",{"_index":2915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["juntar",{"_index":2191,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["jwt",{"_index":1950,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig",{"_index":2671,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfigkey",{"_index":459,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":1955,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":200,"title":{"injectables/JwtGuard.html":{}},"body":{"controllers/AnswerController.html":{},"modules/AuthModule.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"injectables/JwtGuard.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["jwtmodule",{"_index":457,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":467,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmoduleoptions",{"_index":1945,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwtpayload",{"_index":1935,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":455,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":150,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["last",{"_index":2296,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["last(arr",{"_index":2795,"title":{},"body":{"miscellaneous/functions.html":{}}}],["last(questiongroup.exam.groups)?.position",{"_index":2302,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["last(questions)?.position",{"_index":2378,"title":{},"body":{"injectables/QuestionService.html":{}}}],["lazy",{"_index":2089,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["left",{"_index":1154,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExportationRepository.html":{}}}],["leftjoin",{"_index":1181,"title":{},"body":{"classes/ExamRepository.html":{}}}],["leftjoin('exam_targets_exam_target",{"_index":1180,"title":{},"body":{"classes/ExamRepository.html":{}}}],["leftjoinandselect('exam.targets",{"_index":1199,"title":{},"body":{"classes/ExamRepository.html":{}}}],["legend",{"_index":260,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":925,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/LoginDto.html":{}}}],["length(password_min",{"_index":1972,"title":{},"body":{"classes/LoginDto.html":{}}}],["lessthan",{"_index":2035,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthan(end",{"_index":2051,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthanorequal",{"_index":2036,"title":{},"body":{"injectables/PeriodService.html":{}}}],["lessthanorequal(new",{"_index":2048,"title":{},"body":{"injectables/PeriodService.html":{}}}],["limit",{"_index":2735,"title":{},"body":{"dependencies.html":{}}}],["limit.config.ts",{"_index":2675,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":839,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{},"coverage.html":{}}}],["line.interface",{"_index":1400,"title":{},"body":{"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{}}}],["line.interface.ts",{"_index":825,"title":{},"body":{"interfaces/CsvLine.html":{},"coverage.html":{}}}],["literal",{"_index":1019,"title":{},"body":{"injectables/ExamAgreementService.html":{},"interfaces/SendAgreementEmailDto.html":{},"interfaces/SoftDeleteResult.html":{}}}],["load",{"_index":404,"title":{},"body":{"modules/AppModule.html":{}}}],["loadrelations",{"_index":1149,"title":{},"body":{"classes/ExamRepository.html":{}}}],["loadrelations(query",{"_index":1171,"title":{},"body":{"classes/ExamRepository.html":{}}}],["loadtargetmap",{"_index":1325,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["localmente",{"_index":2810,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":942,"title":{},"body":{"classes/ExamAgreement.html":{},"injectables/ExamService.html":{},"dependencies.html":{}}}],["logger",{"_index":854,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/ExamAgreementService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/NodeMailerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('bootstrap",{"_index":2905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('httpexceptionfilter",{"_index":1825,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["logger.service",{"_index":1967,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger/logger.module",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":384,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["logging",{"_index":2897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":61,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{}}}],["login(@body",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto",{"_index":714,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["logindto",{"_index":434,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.login",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto:8",{"_index":712,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["lpad(convert(round(rand",{"_index":1767,"title":{},"body":{"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{}}}],["lógica",{"_index":2804,"title":{},"body":{"index.html":{}}}],["machinelearning",{"_index":1530,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["mail.dto",{"_index":1980,"title":{},"body":{"classes/MailerService.html":{},"injectables/NodeMailerService.html":{}}}],["mail.dto.ts",{"_index":2425,"title":{},"body":{"classes/SendMailDto.html":{},"coverage.html":{}}}],["mail.dto.ts:2",{"_index":2426,"title":{},"body":{"classes/SendMailDto.html":{}}}],["mail.dto.ts:3",{"_index":2428,"title":{},"body":{"classes/SendMailDto.html":{}}}],["mail.dto.ts:4",{"_index":2429,"title":{},"body":{"classes/SendMailDto.html":{}}}],["mail.dto.ts:5",{"_index":2427,"title":{},"body":{"classes/SendMailDto.html":{}}}],["mailer.service",{"_index":1986,"title":{},"body":{"injectables/NodeMailerService.html":{},"injectables/SendEmailService.html":{}}}],["mailerservice",{"_index":1912,"title":{"classes/MailerService.html":{}},"body":{"modules/InfraModule.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/SendEmailService.html":{},"coverage.html":{},"overview.html":{}}}],["manage",{"_index":2778,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manager",{"_index":425,"title":{},"body":{"classes/Auth1619445806509.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"miscellaneous/enumerations.html":{}}}],["manager.dto.ts",{"_index":1287,"title":{},"body":{"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["manytomany",{"_index":893,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["manytomany(undefined",{"_index":2088,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["manytomany(undefined)@jointable",{"_index":878,"title":{},"body":{"classes/Exam.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":1776,"title":{},"body":{"classes/Grade.html":{}}}],["manytoone",{"_index":115,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{}}}],["manytoone(undefined",{"_index":83,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/Grade.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Subject.html":{}}}],["map",{"_index":336,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamTargetService.html":{},"injectables/PayloadInterceptor.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/TemplateService.html":{},"miscellaneous/variables.html":{}}}],["map((_",{"_index":1270,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{}}}],["map((file",{"_index":2484,"title":{},"body":{"injectables/TemplateService.html":{}}}],["maps/user",{"_index":1404,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["match",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matrícula",{"_index":832,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["max",{"_index":700,"title":{},"body":{"classes/CreateAnswerDto.html":{},"injectables/FirebaseStorageService.html":{},"miscellaneous/variables.html":{}}}],["max(5",{"_index":704,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["maxqueryexecutiontime",{"_index":2886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":1681,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["messaging",{"_index":1531,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["messaging.service",{"_index":1709,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["messaging.service.ts",{"_index":1676,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{},"coverage.html":{}}}],["messaging.service.ts:12",{"_index":1684,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["messaging.service.ts:7",{"_index":1679,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["metadata",{"_index":1732,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"classes/UserEmail1625013724392.html":{},"injectables/UserService.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/UserEmail1625013724392.html":{}}}],["migrations",{"_index":2892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":2900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mimetype",{"_index":1498,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{}}}],["min",{"_index":701,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["min(1",{"_index":703,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["miscellaneous",{"_index":2764,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2812,"title":{},"body":{"index.html":{}}}],["models/exam",{"_index":1102,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["module",{"_index":256,"title":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["modulemetadata",{"_index":1629,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["modules",{"_index":258,"title":{"modules.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["morethanorequal",{"_index":2037,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morethanorequal(new",{"_index":2047,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morethanorequal(start",{"_index":2052,"title":{},"body":{"injectables/PeriodService.html":{}}}],["morgan",{"_index":2742,"title":{},"body":{"dependencies.html":{}}}],["mustache",{"_index":2473,"title":{},"body":{"injectables/TemplateService.html":{},"dependencies.html":{}}}],["mustache$/u",{"_index":2479,"title":{},"body":{"injectables/TemplateService.html":{}}}],["mustfindauth",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindauth(authdto",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["mustfindspecializeduser",{"_index":2590,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfindspecializeduser(userdto",{"_index":2601,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser",{"_index":2591,"title":{},"body":{"injectables/UserService.html":{}}}],["mustfinduser(userdto",{"_index":2603,"title":{},"body":{"injectables/UserService.html":{}}}],["mysql",{"_index":2878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":2745,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":22,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserEmail1625013724392.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["naming",{"_index":2760,"title":{},"body":{"dependencies.html":{}}}],["namingstrategy",{"_index":2902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessário",{"_index":2813,"title":{},"body":{"index.html":{}}}],["needed",{"_index":2820,"title":{},"body":{"index.html":{}}}],["needs",{"_index":2909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["negócio",{"_index":2805,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":2003,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["nestjs/common",{"_index":195,"title":{},"body":{"controllers/AnswerController.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"injectables/CustomLogger.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeMailerService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2719,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":458,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2500,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["nestjs/passport",{"_index":1933,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2525,"title":{},"body":{"controllers/UploadController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":199,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"classes/UpdateQuestionDto.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":277,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/AuxiliaryModule.html":{},"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/GradeService.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":50,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/TemplateService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newexam",{"_index":1202,"title":{},"body":{"injectables/ExamService.html":{}}}],["newexam(dto",{"_index":1209,"title":{},"body":{"injectables/ExamService.html":{}}}],["next",{"_index":1999,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":2006,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["nico",{"_index":827,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["node",{"_index":1303,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node.childs",{"_index":1316,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node.dfs(type",{"_index":1306,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.factory",{"_index":1136,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetTree.html":{}}}],["node.factory.ts",{"_index":1308,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["node.factory.ts:12",{"_index":1312,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{}}}],["node.model",{"_index":1313,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetTree.html":{}}}],["node.model.ts",{"_index":1289,"title":{},"body":{"classes/ExamTargetNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["node.model.ts:13",{"_index":1296,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:6",{"_index":1293,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:7",{"_index":1294,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.model.ts:9",{"_index":1299,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["node.type",{"_index":1314,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["node_env",{"_index":1854,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["nodemailer",{"_index":1917,"title":{},"body":{"modules/InfraModule.html":{},"injectables/NodeMailerService.html":{},"dependencies.html":{}}}],["nodemailer_transporter",{"_index":1919,"title":{},"body":{"modules/InfraModule.html":{},"injectables/NodeMailerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodemailerconfig",{"_index":2673,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodemailerservice",{"_index":1922,"title":{"injectables/NodeMailerService.html":{}},"body":{"modules/InfraModule.html":{},"injectables/NodeMailerService.html":{},"coverage.html":{}}}],["norandomname",{"_index":1504,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{}}}],["nota",{"_index":833,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["notfoundexception",{"_index":317,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/PeriodService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["notfoundexception('nothing",{"_index":1489,"title":{},"body":{"injectables/ExportationService.html":{}}}],["notfoundexception('period",{"_index":2049,"title":{},"body":{"injectables/PeriodService.html":{}}}],["notfoundexception(answerdto",{"_index":345,"title":{},"body":{"injectables/AnswerService.html":{}}}],["notfoundexception(authdto",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(finddto",{"_index":1063,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["notfoundexception(querydto",{"_index":1056,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["notfoundexception(this.root",{"_index":1363,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["null",{"_index":122,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationRepository.html":{},"injectables/FirebaseAuthService.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/UserEmail1625013724392.html":{}}}],["nullable",{"_index":91,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/ExamAgreement.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["number",{"_index":41,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"classes/FindPersonalDto.html":{},"classes/Grade.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"miscellaneous/variables.html":{}}}],["não",{"_index":775,"title":{},"body":{"classes/CreateQuestionDto.html":{},"injectables/ExportationRepository.html":{}}}],["o.type",{"_index":707,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["object",{"_index":2906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(new",{"_index":2080,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["object.values(examtargettype",{"_index":1282,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["objects",{"_index":1471,"title":{},"body":{"injectables/ExportationService.html":{},"dependencies.html":{}}}],["objectstocsv",{"_index":1470,"title":{},"body":{"injectables/ExportationService.html":{}}}],["objectstocsv(csvlines",{"_index":1484,"title":{},"body":{"injectables/ExportationService.html":{}}}],["obrigatória",{"_index":777,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["observable",{"_index":2002,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["observation",{"_index":844,"title":{},"body":{"interfaces/CsvLineRow.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExportationRepository.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{}}}],["observação",{"_index":834,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["omittype",{"_index":721,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["omittype(createquestiondto",{"_index":759,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["omittype(examagreementdto",{"_index":726,"title":{},"body":{"classes/CreateExamAgreementDto.html":{}}}],["onetomany",{"_index":684,"title":{},"body":{"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":681,"title":{},"body":{"classes/Course.html":{},"classes/Exam.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["optional",{"_index":24,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/SendEmailService.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserEmail1625013724392.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1536,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseCloudMessagingService.html":{},"modules/FirebaseModule.html":{}}}],["options.databaseurl",{"_index":1580,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.imports",{"_index":1621,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.inject",{"_index":1623,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["options.interface",{"_index":1710,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["options.interface.ts",{"_index":1626,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["options.storagebucket",{"_index":1582,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["options.usefactory",{"_index":1622,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["optionssuccessstatus",{"_index":2873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["order",{"_index":1442,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["origin",{"_index":2660,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["origin(origin",{"_index":2797,"title":{},"body":{"miscellaneous/functions.html":{}}}],["originalname",{"_index":1497,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{}}}],["out",{"_index":272,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":2835,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.type",{"_index":1346,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["package",{"_index":2715,"title":{"dependencies.html":{}},"body":{}}],["padrão",{"_index":790,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["padrão'})@isboolean()@isoptional",{"_index":785,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["padstart",{"_index":941,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["padstart(`${math.round(math.random",{"_index":948,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["para",{"_index":2802,"title":{},"body":{"index.html":{}}}],["param",{"_index":190,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["param('examid",{"_index":219,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/QuestionGroupController.html":{}}}],["param('groupid",{"_index":2166,"title":{},"body":{"controllers/QuestionController.html":{}}}],["param('id",{"_index":226,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"classes/UserEmail1625013724392.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parsearraypipe",{"_index":191,"title":{},"body":{"controllers/AnswerController.html":{}}}],["parseint(process.env.db_port",{"_index":2885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.db_query_timeout",{"_index":2887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_max",{"_index":2943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.rate_limit_window_ms",{"_index":2941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseintpipe",{"_index":193,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["partialpath",{"_index":1305,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["partialtype",{"_index":2499,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["partialtype(createanswerdto",{"_index":2502,"title":{},"body":{"classes/UpdateAnswerDto.html":{}}}],["partialtype(createexamdto",{"_index":2509,"title":{},"body":{"classes/UpdateExamDto.html":{}}}],["partialtype(createquestiondto",{"_index":2511,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["partialtype(createquestiongroupdto",{"_index":2512,"title":{},"body":{"classes/UpdateQuestionGroupDto.html":{}}}],["partialuser",{"_index":2632,"title":{},"body":{"injectables/UserService.html":{}}}],["partialuser.type",{"_index":2633,"title":{},"body":{"injectables/UserService.html":{}}}],["pass",{"_index":2935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passport",{"_index":1949,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":1946,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1953,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":57,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/LoginDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["password_max",{"_index":711,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_min",{"_index":1970,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":2154,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["patch()@apiokresponse({type",{"_index":2148,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["path",{"_index":1297,"title":{},"body":{"classes/ExamTargetNode.html":{},"injectables/ExamTargetTree.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/TemplateService.html":{},"classes/UploaderService.html":{},"miscellaneous/typealiases.html":{}}}],["path).replace(/^\\//u",{"_index":1759,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["path}/${filedto.originalname",{"_index":1756,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["path}/${randombytes(32).tostring('hex",{"_index":1757,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["payload",{"_index":1944,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":1952,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":1937,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payload.uid",{"_index":1961,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payloadinterceptor",{"_index":672,"title":{"injectables/PayloadInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"injectables/PayloadInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["period",{"_index":534,"title":{"classes/Period.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"injectables/ExamService.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["period.entity",{"_index":1781,"title":{},"body":{"classes/Grade.html":{}}}],["period.id",{"_index":1809,"title":{},"body":{"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["period_id",{"_index":533,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["period`(`id",{"_index":560,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/PeriodIndex1624547816204.html":{}}}],["periodid",{"_index":860,"title":{},"body":{"classes/Exam.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{}}}],["periodindex.ts",{"_index":2018,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["periodindex.ts:13",{"_index":2020,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex.ts:4",{"_index":2019,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex.ts:6",{"_index":2021,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{}}}],["periodindex1624547816204",{"_index":2016,"title":{"classes/PeriodIndex1624547816204.html":{}},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["periodrepository",{"_index":597,"title":{"classes/PeriodRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"coverage.html":{}}}],["periodservice",{"_index":591,"title":{"injectables/PeriodService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/ExamService.html":{},"injectables/PeriodService.html":{},"coverage.html":{},"overview.html":{}}}],["personal",{"_index":551,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CreateQuestionGroupDto.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"coverage.html":{}}}],["personal.dto",{"_index":2298,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personal.dto.ts",{"_index":1514,"title":{},"body":{"classes/FindPersonalDto.html":{},"coverage.html":{}}}],["personal.dto.ts:5",{"_index":1515,"title":{},"body":{"classes/FindPersonalDto.html":{}}}],["personal.dto.ts:6",{"_index":1517,"title":{},"body":{"classes/FindPersonalDto.html":{}}}],["personalgroup",{"_index":2278,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personalgroups",{"_index":2324,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["personalquestiongroup",{"_index":2053,"title":{"injectables/PersonalQuestionGroup.html":{}},"body":{"injectables/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"overview.html":{}}}],["pessoal",{"_index":835,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{},"miscellaneous/enumerations.html":{}}}],["pick",{"_index":1627,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{}}}],["picktype",{"_index":817,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["picktype(createauthdto",{"_index":822,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ping",{"_index":365,"title":{},"body":{"controllers/AppController.html":{}}}],["pode",{"_index":774,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["pong",{"_index":366,"title":{},"body":{"controllers/AppController.html":{}}}],["pool",{"_index":2928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["por",{"_index":784,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["port",{"_index":2884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["position",{"_index":570,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{}}}],["post",{"_index":188,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["post('/csv/:examid",{"_index":1375,"title":{},"body":{"controllers/ExportationController.html":{}}}],["post(':groupid",{"_index":2165,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post(':groupid')@apiokresponse({type",{"_index":2136,"title":{},"body":{"controllers/QuestionController.html":{}}}],["post('batch/:examid",{"_index":218,"title":{},"body":{"controllers/AnswerController.html":{}}}],["post('batch/:examid')@apiokresponse({type",{"_index":178,"title":{},"body":{"controllers/AnswerController.html":{}}}],["post('health",{"_index":373,"title":{},"body":{"controllers/AppController.html":{}}}],["post('health')@httpcode(200",{"_index":369,"title":{},"body":{"controllers/AppController.html":{}}}],["post()@apiokresponse({type",{"_index":1086,"title":{},"body":{"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["post()@useinterceptors(undefined",{"_index":2520,"title":{},"body":{"controllers/UploadController.html":{}}}],["prefix",{"_index":170,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/AuthController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["primary",{"_index":149,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["primarygeneratedcolumn",{"_index":97,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["private",{"_index":327,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeMailerService.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"injectables/UserService.html":{}}}],["process.env.admin_password",{"_index":48,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["process.env.db_database",{"_index":2883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_host",{"_index":2879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_logging",{"_index":2898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":2881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.exported_file_prefix",{"_index":1480,"title":{},"body":{"injectables/ExportationService.html":{}}}],["process.env.firebase_admin",{"_index":2908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.firebase_bucket",{"_index":2912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":2921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mail_from",{"_index":2934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mail_password",{"_index":2936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":2876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.sentry_dsn",{"_index":2947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.nexttick",{"_index":2419,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["production",{"_index":1856,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["professor",{"_index":850,"title":{"classes/Professor.html":{}},"body":{"interfaces/CsvLineRow.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["professor.entity",{"_index":1782,"title":{},"body":{"classes/Grade.html":{}}}],["professor_grade",{"_index":572,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Grade.html":{}}}],["professorgrades",{"_index":2086,"title":{},"body":{"classes/Professor.html":{}}}],["professorrepository",{"_index":599,"title":{"classes/ProfessorRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"coverage.html":{}}}],["professors",{"_index":1770,"title":{},"body":{"classes/Grade.html":{}}}],["professorservice",{"_index":592,"title":{"injectables/ProfessorService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["programas",{"_index":2815,"title":{},"body":{"index.html":{}}}],["projectmanagement",{"_index":1532,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["promise",{"_index":26,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/SendEmailService.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/UploaderService.html":{},"classes/UserEmail1625013724392.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":1338,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["promise.all",{"_index":341,"title":{},"body":{"injectables/AnswerService.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/QuestionGroupService.html":{}}}],["promise.all(targets.map(target",{"_index":1254,"title":{},"body":{"classes/ExamTarget1622326106015.html":{}}}],["properties",{"_index":73,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamPersonalResult.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"interfaces/SendAgreementEmailDto.html":{},"classes/SendMailDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"interfaces/UserResult.html":{}}}],["propriedade",{"_index":780,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["provide",{"_index":1618,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/InfraModule.html":{}}}],["provider",{"_index":1615,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["providers",{"_index":263,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/exam",{"_index":1133,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["providers/firebase",{"_index":1616,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["providers/personal",{"_index":2269,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["public",{"_index":12,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseStorageService.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/UserEmail1625013724392.html":{}}}],["publicfile",{"_index":1727,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{}}}],["put",{"_index":192,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":186,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put(':id')@apiokresponse({type",{"_index":2152,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["put()@apiokresponse({type",{"_index":980,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/QuestionGroupController.html":{}}}],["put()@useguards(jwtguard",{"_index":2552,"title":{},"body":{"controllers/UserController.html":{}}}],["q",{"_index":1437,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["q.group_id",{"_index":1440,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["q.id",{"_index":1418,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["q.statement",{"_index":1419,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["qb",{"_index":2383,"title":{},"body":{"injectables/QuestionService.html":{}}}],["qb.where(`${qb.alias}.groupid",{"_index":2385,"title":{},"body":{"injectables/QuestionService.html":{}}}],["qg",{"_index":1439,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["qg.class",{"_index":1415,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["qg.id",{"_index":1417,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["qg.personal",{"_index":1416,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["qg.title",{"_index":1414,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["query",{"_index":982,"title":{},"body":{"controllers/ExamAgreementController.html":{},"classes/ExamRepository.html":{},"classes/GradeRepository.html":{},"controllers/QuestionController.html":{}}}],["query.andwhere('exam.id",{"_index":1188,"title":{},"body":{"classes/ExamRepository.html":{}}}],["query.getmany",{"_index":1811,"title":{},"body":{"classes/GradeRepository.html":{}}}],["query.innerjoin('grade.professors",{"_index":1806,"title":{},"body":{"classes/GradeRepository.html":{}}}],["query.innerjoin('grade.students",{"_index":1805,"title":{},"body":{"classes/GradeRepository.html":{}}}],["querydto",{"_index":976,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["querydto.examid",{"_index":1054,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["querydto.user.id",{"_index":1055,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["queryrunner",{"_index":17,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationRepository.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/UserEmail1625013724392.html":{}}}],["queryrunner.manager.query",{"_index":44,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.manager.query('delete",{"_index":65,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["queryrunner.query",{"_index":295,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"injectables/ExportationRepository.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"interfaces/IEntity.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/UserEmail1625013724392.html":{}}}],["queryrunner.query(\"alter",{"_index":152,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query(\"create",{"_index":135,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query(\"drop",{"_index":165,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1624416663574.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["queryrunner.query('alter",{"_index":294,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/UserEmail1625013724392.html":{}}}],["queryrunner.query('delete",{"_index":1907,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["queryrunner.query('drop",{"_index":430,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["queryrunner.query('insert",{"_index":1255,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{}}}],["querytarget",{"_index":1350,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["querytarget(target",{"_index":1354,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["question",{"_index":76,"title":{"classes/Question.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"injectables/AnswerService.html":{},"modules/AppModule.html":{},"classes/Auxiliary1620477175799.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestionGroupDto.html":{},"injectables/ExportationRepository.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["question.constants",{"_index":2069,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["question.dto",{"_index":758,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{}}}],["question.dto.ts",{"_index":762,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:14",{"_index":787,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:18",{"_index":771,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:23",{"_index":769,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:32",{"_index":786,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:35",{"_index":767,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["question.dto.ts:5",{"_index":2399,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.dto.ts:9",{"_index":2401,"title":{},"body":{"classes/ReorderQuestionDto.html":{}}}],["question.entity",{"_index":2188,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["question.group",{"_index":2197,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["question.groupid",{"_index":2388,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.id",{"_index":338,"title":{},"body":{"injectables/AnswerService.html":{}}}],["question.position",{"_index":2389,"title":{},"body":{"injectables/QuestionService.html":{}}}],["question.service",{"_index":2295,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["question_group",{"_index":550,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/ExamTarget1622326106015.html":{},"injectables/ExportationRepository.html":{},"classes/GradeIndex1624560625346.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["question_group_grade",{"_index":569,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["question_group`(`id",{"_index":556,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["question_id",{"_index":146,"title":{},"body":{"classes/Answer1622421768424.html":{},"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["question_statement",{"_index":845,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["question`(`id",{"_index":161,"title":{},"body":{"classes/Answer1622421768424.html":{}}}],["questioncontroller",{"_index":2128,"title":{"controllers/QuestionController.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questionfinddto",{"_index":2139,"title":{"classes/QuestionFindDto.html":{}},"body":{"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questiongroup",{"_index":631,"title":{"classes/QuestionGroup.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongroup.exam",{"_index":2299,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.examid",{"_index":2308,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.position",{"_index":2301,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["questiongroup.ts",{"_index":2202,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroup.ts:12",{"_index":2204,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:4",{"_index":2203,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup.ts:6",{"_index":2205,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{}}}],["questiongroup1620179231630",{"_index":2200,"title":{"classes/QuestionGroup1620179231630.html":{}},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["questiongroup:17",{"_index":2251,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:21",{"_index":2245,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:24",{"_index":2248,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:28",{"_index":2249,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:31",{"_index":2247,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:34",{"_index":2250,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:37",{"_index":2246,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroup:40",{"_index":2252,"title":{},"body":{"classes/QuestionGroupGrade.html":{}}}],["questiongroupcontroller",{"_index":2208,"title":{"controllers/QuestionGroupController.html":{}},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"coverage.html":{}}}],["questiongroupgrade",{"_index":2064,"title":{"classes/QuestionGroupGrade.html":{}},"body":{"injectables/PersonalQuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"coverage.html":{}}}],["questiongroupgraderemove.ts",{"_index":2255,"title":{},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{},"coverage.html":{}}}],["questiongroupgraderemove.ts:12",{"_index":2257,"title":{},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["questiongroupgraderemove.ts:6",{"_index":2256,"title":{},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["questiongroupgraderemove.ts:8",{"_index":2258,"title":{},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["questiongroupgraderemove1624883202213",{"_index":2253,"title":{"classes/QuestionGroupGradeRemove1624883202213.html":{}},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{},"coverage.html":{}}}],["questiongroupmodule",{"_index":269,"title":{"modules/QuestionGroupModule.html":{}},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/QuestionGroupModule.html":{},"modules.html":{},"overview.html":{}}}],["questiongroupnotfound",{"_index":2293,"title":{},"body":{"injectables/QuestionGroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongrouprelations",{"_index":2068,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questiongrouprepository",{"_index":2057,"title":{"classes/QuestionGroupRepository.html":{}},"body":{"injectables/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"coverage.html":{}}}],["questiongroupservice",{"_index":2228,"title":{"injectables/QuestionGroupService.html":{}},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["questiongrouptarget.ts",{"_index":2329,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["questiongrouptarget.ts:25",{"_index":2331,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget.ts:4",{"_index":2330,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget.ts:6",{"_index":2332,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{}}}],["questiongrouptarget1621992475274",{"_index":2327,"title":{"classes/QuestionGroupTarget1621992475274.html":{}},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["questiongroupuser",{"_index":2333,"title":{"interfaces/QuestionGroupUser.html":{}},"body":{"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["questiongroup})@apinotfoundresponse",{"_index":2213,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["questionid",{"_index":77,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/CreateAnswerDto.html":{}}}],["questionids",{"_index":2392,"title":{},"body":{"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{}}}],["questionids.map((id",{"_index":2395,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionimage.ts",{"_index":2337,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionimage.ts:14",{"_index":2339,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:4",{"_index":2338,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage.ts:6",{"_index":2340,"title":{},"body":{"classes/QuestionImage1620477869366.html":{}}}],["questionimage1620477869366",{"_index":2335,"title":{"classes/QuestionImage1620477869366.html":{}},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["questionmap",{"_index":334,"title":{},"body":{"injectables/AnswerService.html":{}}}],["questionmap.get(answerdto.questionid",{"_index":344,"title":{},"body":{"injectables/AnswerService.html":{}}}],["questionnotfound",{"_index":2375,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionposition.ts",{"_index":2343,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionposition.ts:11",{"_index":2345,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:4",{"_index":2344,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition.ts:6",{"_index":2346,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{}}}],["questionposition1620488935141",{"_index":2341,"title":{"classes/QuestionPosition1620488935141.html":{}},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["questionpositionidx.ts",{"_index":2349,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["questionpositionidx.ts:14",{"_index":2351,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx.ts:4",{"_index":2350,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx.ts:6",{"_index":2352,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{}}}],["questionpositionidx1620563708532",{"_index":2347,"title":{"classes/QuestionPositionIdx1620563708532.html":{}},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["questionpositionmap",{"_index":2394,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionpositionmap.get(question.id",{"_index":2396,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionrepository",{"_index":2267,"title":{"classes/QuestionRepository.html":{}},"body":{"modules/QuestionGroupModule.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questions",{"_index":330,"title":{},"body":{"injectables/AnswerService.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["questions.dto",{"_index":2161,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["questions.dto.ts",{"_index":751,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"coverage.html":{}}}],["questions.dto.ts:16",{"_index":753,"title":{},"body":{"classes/CreateQuestion.html":{}}}],["questions.dto.ts:25",{"_index":799,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["questions.map((question",{"_index":337,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/QuestionService.html":{}}}],["questionservice",{"_index":305,"title":{"injectables/QuestionService.html":{}},"body":{"injectables/AnswerService.html":{},"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["question})@apinotfoundresponse",{"_index":2142,"title":{},"body":{"controllers/QuestionController.html":{}}}],["questão",{"_index":773,"title":{},"body":{"classes/CreateQuestionDto.html":{},"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["questões",{"_index":831,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["randombytes",{"_index":1749,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["rate",{"_index":2734,"title":{},"body":{"dependencies.html":{}}}],["ratelimit",{"_index":2944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ratelimitconfig",{"_index":2676,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ratelimitconfigkey",{"_index":2677,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["raw",{"_index":2431,"title":{},"body":{"interfaces/SoftDeleteResult.html":{}}}],["read",{"_index":2779,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["readdirsync",{"_index":2469,"title":{},"body":{"injectables/TemplateService.html":{}}}],["readdirsync(basepath",{"_index":2481,"title":{},"body":{"injectables/TemplateService.html":{}}}],["readfilesync",{"_index":2470,"title":{},"body":{"injectables/TemplateService.html":{}}}],["readfilesync(join(basepath",{"_index":2486,"title":{},"body":{"injectables/TemplateService.html":{}}}],["readonly",{"_index":217,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeMailerService.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["readonlymap",{"_index":335,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamTargetService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/TemplateService.html":{},"miscellaneous/variables.html":{}}}],["record",{"_index":2460,"title":{},"body":{"interfaces/SwaggerOptions.html":{}}}],["reduce",{"_index":2077,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["references",{"_index":157,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamTarget1622326106015.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{}}}],["reflect",{"_index":2751,"title":{},"body":{"dependencies.html":{}}}],["regexp",{"_index":2868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras",{"_index":2871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('nodemailer",{"_index":2927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('sentry",{"_index":2945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(ratelimitconfigkey",{"_index":2939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regular",{"_index":426,"title":{},"body":{"classes/Auth1619445806509.html":{},"miscellaneous/enumerations.html":{}}}],["reject",{"_index":1339,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["reject(e",{"_index":1342,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["relations",{"_index":1062,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["remoteconfig",{"_index":1533,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["remove",{"_index":172,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["remove(@param('id",{"_index":228,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{}}}],["remove(id",{"_index":181,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["render",{"_index":2472,"title":{},"body":{"injectables/TemplateService.html":{}}}],["render(template",{"_index":2492,"title":{},"body":{"injectables/TemplateService.html":{}}}],["reorder",{"_index":2132,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorder(reorderquesitondto",{"_index":2146,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorder(reorderquestiongroupdto",{"_index":2223,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["reorder(undefined",{"_index":2287,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["reorderquesitondto",{"_index":2150,"title":{},"body":{"controllers/QuestionController.html":{}}}],["reorderquestiondto",{"_index":2147,"title":{"classes/ReorderQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"coverage.html":{}}}],["reorderquestiongroupdto",{"_index":2224,"title":{"classes/ReorderQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/ReorderQuestionGroupDto.html":{},"coverage.html":{}}}],["replace(/\\//gu",{"_index":1478,"title":{},"body":{"injectables/ExportationService.html":{}}}],["repositories/answer",{"_index":280,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["repositories/answer.repository",{"_index":279,"title":{},"body":{"modules/AnswerModule.html":{},"injectables/AnswerService.html":{}}}],["repositories/auth.repository",{"_index":462,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["repositories/exam",{"_index":1034,"title":{},"body":{"injectables/ExamAgreementService.html":{},"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["repositories/exam.repository",{"_index":1126,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{}}}],["repositories/grade.repository",{"_index":596,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/GradeService.html":{}}}],["repositories/period.repository",{"_index":598,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/PeriodService.html":{}}}],["repositories/professor.repository",{"_index":600,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/ProfessorService.html":{}}}],["repositories/question",{"_index":2070,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"modules/QuestionGroupModule.html":{},"injectables/QuestionGroupService.html":{}}}],["repositories/question.repository",{"_index":2268,"title":{},"body":{"modules/QuestionGroupModule.html":{},"injectables/QuestionService.html":{}}}],["repositories/student.repository",{"_index":602,"title":{},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{}}}],["repositories/user.repository",{"_index":2579,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":1014,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/ExportationService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["request",{"_index":1832,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"miscellaneous/variables.html":{}}}],["request.body",{"_index":1879,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["request.url",{"_index":1852,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["request.user",{"_index":2919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('bcryptjs",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["require('faker",{"_index":1889,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["require('lodash",{"_index":1334,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["required",{"_index":765,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["reset",{"_index":271,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve(_.clonedeep(this._targetmap",{"_index":1340,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["response",{"_index":1833,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["response.status(status).send(ex",{"_index":1880,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["result",{"_index":39,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.interface",{"_index":321,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{}}}],["result.interface.ts",{"_index":2430,"title":{},"body":{"interfaces/SoftDeleteResult.html":{},"interfaces/UserResult.html":{},"coverage.html":{}}}],["result.model",{"_index":1103,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["result.model.ts",{"_index":1140,"title":{},"body":{"classes/ExamPersonalResult.html":{},"coverage.html":{}}}],["result.model.ts:4",{"_index":1143,"title":{},"body":{"classes/ExamPersonalResult.html":{}}}],["result.model.ts:5",{"_index":1145,"title":{},"body":{"classes/ExamPersonalResult.html":{}}}],["result.model.ts:6",{"_index":1144,"title":{},"body":{"classes/ExamPersonalResult.html":{}}}],["result.push(...personalgroups",{"_index":2326,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["result.raw.affectedrows",{"_index":1242,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["result?.length",{"_index":47,"title":{},"body":{"classes/AdminUser1620299822480.html":{}}}],["results",{"_index":68,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":222,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"injectables/JwtStrategy.html":{},"injectables/PayloadInterceptor.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/ProfessorService.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/SendEmailService.html":{},"injectables/StudentService.html":{},"injectables/TemplateService.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"controllers/UserController.html":{},"classes/UserEmail1625013724392.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":2753,"title":{},"body":{"dependencies.html":{}}}],["rodar",{"_index":2809,"title":{},"body":{"index.html":{}}}],["role",{"_index":63,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth1619445806509.html":{},"classes/CreateUserDto.html":{},"interfaces/IEntity.html":{},"classes/Professor.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/User.html":{}}}],["role.enum",{"_index":636,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["role.enum.ts",{"_index":2774,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["root",{"_index":1349,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["row.interface",{"_index":1402,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["row.interface.ts",{"_index":840,"title":{},"body":{"interfaces/CsvLineRow.html":{},"coverage.html":{}}}],["runontransactioncomplete",{"_index":2611,"title":{},"body":{"injectables/UserService.html":{}}}],["runontransactioncomplete((e",{"_index":2619,"title":{},"body":{"injectables/UserService.html":{}}}],["rxjs",{"_index":2004,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":2005,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["s",{"_index":1434,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["s.id",{"_index":1435,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["s.title",{"_index":1423,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["salt",{"_index":55,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["schema",{"_index":1277,"title":{},"body":{"controllers/ExamTargetController.html":{},"injectables/ExamTargetNodeFactory.html":{}}}],["schema.childs?.map((node",{"_index":1317,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["schema.type",{"_index":1315,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["scope",{"_index":855,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["scope.transient",{"_index":856,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["score",{"_index":78,"title":{},"body":{"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/CreateAnswerDto.html":{},"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["se",{"_index":778,"title":{},"body":{"classes/CreateQuestionDto.html":{},"injectables/ExportationRepository.html":{}}}],["secret",{"_index":2920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1958,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":2931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["securityrules",{"_index":1534,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["seedauxiliary1.ts",{"_index":1883,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seedauxiliary1.ts:17",{"_index":2405,"title":{},"body":{"classes/SeedAuxiliary1624412129413.html":{}}}],["seedauxiliary1.ts:90",{"_index":2404,"title":{},"body":{"classes/SeedAuxiliary1624412129413.html":{}}}],["seedauxiliary1624412129413",{"_index":1894,"title":{"classes/SeedAuxiliary1624412129413.html":{}},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{}}}],["select",{"_index":45,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/ExamRepository.html":{},"injectables/ExportationRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/UserService.html":{}}}],["selectquerybuilder",{"_index":1172,"title":{},"body":{"classes/ExamRepository.html":{}}}],["send",{"_index":1975,"title":{},"body":{"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/SendEmailService.html":{}}}],["send(sendmaildto",{"_index":1976,"title":{},"body":{"classes/MailerService.html":{},"injectables/NodeMailerService.html":{}}}],["send.dto",{"_index":1753,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["send.dto.ts",{"_index":1510,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["sendagreementemail",{"_index":1008,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/SendEmailService.html":{}}}],["sendagreementemail(dto",{"_index":2412,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["sendagreementemail(email",{"_index":1026,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["sendagreementemaildto",{"_index":2406,"title":{"interfaces/SendAgreementEmailDto.html":{}},"body":{"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"coverage.html":{}}}],["sendemailservice",{"_index":1012,"title":{"injectables/SendEmailService.html":{}},"body":{"injectables/ExamAgreementService.html":{},"modules/InfraModule.html":{},"injectables/SendEmailService.html":{},"coverage.html":{},"overview.html":{}}}],["sendmaildto",{"_index":1977,"title":{"classes/SendMailDto.html":{}},"body":{"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"classes/SendMailDto.html":{},"coverage.html":{}}}],["sendmaildto.to",{"_index":1992,"title":{},"body":{"injectables/NodeMailerService.html":{}}}],["sendtodevice",{"_index":1678,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["sendtodevice(token",{"_index":1680,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["sendtosentry",{"_index":1865,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["senhaforte",{"_index":2949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sentry",{"_index":1835,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["sentry.captureexception(exception",{"_index":1869,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["sentry/node",{"_index":1836,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"dependencies.html":{}}}],["sentry/tracing",{"_index":2724,"title":{},"body":{"dependencies.html":{}}}],["sentryconfig",{"_index":2679,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sentryinit",{"_index":2706,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sentryinit(config",{"_index":2794,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ser",{"_index":776,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["service",{"_index":1381,"title":{},"body":{"controllers/ExportationController.html":{},"controllers/UploadController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["services",{"_index":1713,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["services/exam",{"_index":986,"title":{},"body":{"controllers/ExamAgreementController.html":{},"modules/ExamModule.html":{},"controllers/ExamTargetController.html":{}}}],["services/exam.service",{"_index":1099,"title":{},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{}}}],["services/firebase",{"_index":1708,"title":{},"body":{"modules/FirebaseModule.html":{},"modules/InfraModule.html":{}}}],["services/grade.service",{"_index":603,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/mailer.service",{"_index":1921,"title":{},"body":{"modules/InfraModule.html":{}}}],["services/nodemailer.service",{"_index":1923,"title":{},"body":{"modules/InfraModule.html":{}}}],["services/period.service",{"_index":604,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/professor.service",{"_index":605,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/question",{"_index":2229,"title":{},"body":{"controllers/QuestionGroupController.html":{},"modules/QuestionGroupModule.html":{}}}],["services/question.service",{"_index":2160,"title":{},"body":{"controllers/QuestionController.html":{},"modules/QuestionGroupModule.html":{}}}],["services/send",{"_index":1924,"title":{},"body":{"modules/InfraModule.html":{}}}],["services/student.service",{"_index":606,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["services/template.service",{"_index":1925,"title":{},"body":{"modules/InfraModule.html":{}}}],["services/uploader.service",{"_index":1926,"title":{},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{}}}],["set",{"_index":54,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{}}}],["setexamandposition",{"_index":2277,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["setexamandposition(questiongroup",{"_index":2289,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["seu",{"_index":2421,"title":{},"body":{"injectables/SendEmailService.html":{},"index.html":{}}}],["signoptions",{"_index":2922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sim",{"_index":1448,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["sistema",{"_index":2806,"title":{},"body":{"index.html":{}}}],["size",{"_index":1500,"title":{},"body":{"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{}}}],["smtp.gmail.com",{"_index":2929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snakenamingstrategy",{"_index":2903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["softdeleteresult",{"_index":319,"title":{"interfaces/SoftDeleteResult.html":{}},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["sort((a",{"_index":2083,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["sorte",{"_index":2422,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["sortitems",{"_index":861,"title":{},"body":{"classes/Exam.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"modules/AnswerModule.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"modules/AuxiliaryModule.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/CopyQuestionGroupDto.html":{},"modules/CoreModule.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"injectables/CustomLogger.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"modules/ExportationModule.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"modules/InfraModule.html":{},"injectables/JwtGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"modules/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateAnswerDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["specialized",{"_index":2585,"title":{},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/.../1620299822480",{"_index":2850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1622326106015",{"_index":2867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1622378888497",{"_index":2848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1624416663575",{"_index":2852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../answer",{"_index":2766,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":2861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../casl",{"_index":2768,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../core.constants.ts",{"_index":2853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cors.config.ts",{"_index":2789,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":2786,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../database.config.ts",{"_index":2851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exam",{"_index":2770,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../exam.constants.ts",{"_index":2854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exportation",{"_index":2772,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../firebase",{"_index":2843,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../firebase.config.ts",{"_index":2856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase.constants.ts",{"_index":2855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":2849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../infra.constants.ts",{"_index":2859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":2787,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.config.ts",{"_index":2858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../last.util.ts",{"_index":2788,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2785,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../nodemailer.config.ts",{"_index":2860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../question",{"_index":2862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../question.constants.ts",{"_index":2863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rate",{"_index":2864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sentry.config.ts",{"_index":2865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":2866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":2773,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/answer/answer.controller.ts",{"_index":169,"title":{},"body":{"controllers/AnswerController.html":{},"coverage.html":{}}}],["src/answer/answer.controller.ts:30",{"_index":179,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:43",{"_index":187,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.controller.ts:51",{"_index":183,"title":{},"body":{"controllers/AnswerController.html":{}}}],["src/answer/answer.module.ts",{"_index":273,"title":{},"body":{"modules/AnswerModule.html":{}}}],["src/answer/answer.service.ts",{"_index":299,"title":{},"body":{"injectables/AnswerService.html":{},"coverage.html":{}}}],["src/answer/answer.service.ts:17",{"_index":307,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:28",{"_index":310,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:67",{"_index":311,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:71",{"_index":313,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:80",{"_index":316,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/answer.service.ts:88",{"_index":314,"title":{},"body":{"injectables/AnswerService.html":{}}}],["src/answer/dto/create",{"_index":688,"title":{},"body":{"classes/CreateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/dto/update",{"_index":2498,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["src/answer/entities/answer",{"_index":230,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/Grade.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity",{"_index":2125,"title":{},"body":{"classes/Question.html":{}}}],["src/answer/entities/answer.entity.ts",{"_index":70,"title":{},"body":{"classes/Answer.html":{},"coverage.html":{}}}],["src/answer/entities/answer.entity.ts:12",{"_index":93,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:15",{"_index":96,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:18",{"_index":87,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:21",{"_index":89,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:24",{"_index":84,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/entities/answer.entity.ts:27",{"_index":88,"title":{},"body":{"classes/Answer.html":{}}}],["src/answer/enums/answer",{"_index":2775,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/answer/interfaces/batch",{"_index":610,"title":{},"body":{"interfaces/BatchUser.html":{},"coverage.html":{}}}],["src/answer/repositories/answer",{"_index":246,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"coverage.html":{}}}],["src/answer/repositories/answer.repository.ts",{"_index":286,"title":{},"body":{"classes/AnswerRepository.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.constants.ts",{"_index":2651,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.module.ts",{"_index":456,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":2608,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/auth.service.ts",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:23",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/casl/casl.module.ts",{"_index":658,"title":{},"body":{"modules/CaslModule.html":{}}}],["src/auth/casl/enums/casl",{"_index":2777,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/casl/factories/casl",{"_index":613,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/controllers/auth.controller.ts",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/controllers/auth.controller.ts:12",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/dtos/auth.dto.ts",{"_index":444,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/auth.dto.ts:6",{"_index":446,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dtos/create",{"_index":708,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts",{"_index":1968,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.dto.ts:8",{"_index":1969,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":409,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts:10",{"_index":413,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:13",{"_index":414,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/entities/auth.entity.ts:7",{"_index":412,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/guards/jwt.guard",{"_index":201,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/UploadController.html":{}}}],["src/auth/guards/jwt.guard.ts",{"_index":1931,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/interfaces/jwt",{"_index":1936,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/repositories/auth.repository.ts",{"_index":469,"title":{},"body":{"classes/AuthRepository.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1938,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:14",{"_index":1941,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:27",{"_index":1943,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auxiliary/auxiliary.module",{"_index":1137,"title":{},"body":{"modules/ExamModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["src/auxiliary/auxiliary.module.ts",{"_index":594,"title":{},"body":{"modules/AuxiliaryModule.html":{}}}],["src/auxiliary/entities/course.entity.ts",{"_index":678,"title":{},"body":{"classes/Course.html":{},"coverage.html":{}}}],["src/auxiliary/entities/course.entity.ts:11",{"_index":683,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:14",{"_index":682,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/course.entity.ts:8",{"_index":680,"title":{},"body":{"classes/Course.html":{}}}],["src/auxiliary/entities/grade.entity",{"_index":242,"title":{},"body":{"classes/AnswerGrade.html":{},"classes/QuestionGroupGrade.html":{}}}],["src/auxiliary/entities/grade.entity.ts",{"_index":1769,"title":{},"body":{"classes/Grade.html":{},"coverage.html":{}}}],["src/auxiliary/entities/grade.entity.ts:20",{"_index":1780,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:23",{"_index":1775,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:26",{"_index":1779,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:29",{"_index":1774,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:32",{"_index":1773,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:36",{"_index":1778,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/grade.entity.ts:40",{"_index":1777,"title":{},"body":{"classes/Grade.html":{}}}],["src/auxiliary/entities/period.entity",{"_index":891,"title":{},"body":{"classes/Exam.html":{}}}],["src/auxiliary/entities/period.entity.ts",{"_index":2007,"title":{},"body":{"classes/Period.html":{},"coverage.html":{}}}],["src/auxiliary/entities/period.entity.ts:12",{"_index":2012,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:15",{"_index":2009,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:18",{"_index":2010,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/period.entity.ts:9",{"_index":2011,"title":{},"body":{"classes/Period.html":{}}}],["src/auxiliary/entities/professor.entity",{"_index":2061,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["src/auxiliary/entities/professor.entity.ts",{"_index":2085,"title":{},"body":{"classes/Professor.html":{},"coverage.html":{}}}],["src/auxiliary/entities/professor.entity.ts:10",{"_index":2098,"title":{},"body":{"classes/Professor.html":{}}}],["src/auxiliary/entities/professor.entity.ts:8",{"_index":2090,"title":{},"body":{"classes/Professor.html":{}}}],["src/auxiliary/entities/student.entity",{"_index":2062,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{}}}],["src/auxiliary/entities/student.entity.ts",{"_index":2433,"title":{},"body":{"classes/Student.html":{},"coverage.html":{}}}],["src/auxiliary/entities/student.entity.ts:10",{"_index":2436,"title":{},"body":{"classes/Student.html":{}}}],["src/auxiliary/entities/student.entity.ts:8",{"_index":2435,"title":{},"body":{"classes/Student.html":{}}}],["src/auxiliary/entities/subject.entity.ts",{"_index":2446,"title":{},"body":{"classes/Subject.html":{},"coverage.html":{}}}],["src/auxiliary/entities/subject.entity.ts:10",{"_index":2448,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:13",{"_index":2452,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:16",{"_index":2450,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:19",{"_index":2449,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/entities/subject.entity.ts:22",{"_index":2451,"title":{},"body":{"classes/Subject.html":{}}}],["src/auxiliary/repositories/grade.repository.ts",{"_index":1793,"title":{},"body":{"classes/GradeRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/grade.repository.ts:11",{"_index":1796,"title":{},"body":{"classes/GradeRepository.html":{}}}],["src/auxiliary/repositories/period.repository.ts",{"_index":2023,"title":{},"body":{"classes/PeriodRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/professor.repository.ts",{"_index":2100,"title":{},"body":{"classes/ProfessorRepository.html":{},"coverage.html":{}}}],["src/auxiliary/repositories/student.repository.ts",{"_index":2438,"title":{},"body":{"classes/StudentRepository.html":{},"coverage.html":{}}}],["src/auxiliary/services/grade.service",{"_index":2063,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["src/auxiliary/services/grade.service.ts",{"_index":1812,"title":{},"body":{"injectables/GradeService.html":{},"coverage.html":{}}}],["src/auxiliary/services/grade.service.ts:15",{"_index":1815,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/grade.service.ts:19",{"_index":1816,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/grade.service.ts:9",{"_index":1814,"title":{},"body":{"injectables/GradeService.html":{}}}],["src/auxiliary/services/period.service",{"_index":1217,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/auxiliary/services/period.service.ts",{"_index":2025,"title":{},"body":{"injectables/PeriodService.html":{},"coverage.html":{}}}],["src/auxiliary/services/period.service.ts:14",{"_index":2030,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:27",{"_index":2031,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:42",{"_index":2034,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/period.service.ts:8",{"_index":2029,"title":{},"body":{"injectables/PeriodService.html":{}}}],["src/auxiliary/services/professor.service",{"_index":2609,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/professor.service.ts",{"_index":2102,"title":{},"body":{"injectables/ProfessorService.html":{},"coverage.html":{}}}],["src/auxiliary/services/professor.service.ts:11",{"_index":2104,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:18",{"_index":2106,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/professor.service.ts:24",{"_index":2109,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["src/auxiliary/services/student.service",{"_index":2610,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auxiliary/services/student.service.ts",{"_index":2440,"title":{},"body":{"injectables/StudentService.html":{},"coverage.html":{}}}],["src/auxiliary/services/student.service.ts:11",{"_index":2441,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:18",{"_index":2442,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/services/student.service.ts:24",{"_index":2443,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/auxiliary/types/user",{"_index":1518,"title":{},"body":{"classes/FindPersonalDto.html":{},"miscellaneous/typealiases.html":{}}}],["src/config/cors.config.ts",{"_index":2659,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/config/database.config.ts",{"_index":2665,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/firebase.config.ts",{"_index":2667,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/index.ts",{"_index":2669,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/interfaces/swagger.interface.ts",{"_index":2457,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{}}}],["src/config/jwt.config.ts",{"_index":2670,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/nodemailer.config.ts",{"_index":2672,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/rate",{"_index":2674,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/sentry.config.ts",{"_index":2678,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.config.ts",{"_index":2680,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controllers/app.controller.ts",{"_index":364,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/controllers/app.controller.ts:12",{"_index":370,"title":{},"body":{"controllers/AppController.html":{}}}],["src/controllers/app.controller.ts:6",{"_index":368,"title":{},"body":{"controllers/AppController.html":{}}}],["src/core/core.constants.ts",{"_index":2683,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":673,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/decorators/is",{"_index":2685,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/entities/ff.entity",{"_index":415,"title":{},"body":{"classes/Auth.html":{},"classes/ExamTarget.html":{},"classes/Period.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{}}}],["src/core/entities/ff.entity.ts",{"_index":1505,"title":{},"body":{"classes/FFEntity.html":{},"coverage.html":{}}}],["src/core/entities/ff.entity.ts:6",{"_index":1506,"title":{},"body":{"classes/FFEntity.html":{}}}],["src/core/entities/timestamp.entity.ts",{"_index":2493,"title":{},"body":{"classes/TimestampEntity.html":{},"coverage.html":{}}}],["src/core/entities/timestamp.entity.ts:10",{"_index":2495,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:13",{"_index":2497,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/entities/timestamp.entity.ts:16",{"_index":2496,"title":{},"body":{"classes/TimestampEntity.html":{}}}],["src/core/filters/http",{"_index":1820,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"coverage.html":{}}}],["src/core/interceptors/payload.interceptor.ts",{"_index":1995,"title":{},"body":{"injectables/PayloadInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/payload.interceptor.ts:12",{"_index":2001,"title":{},"body":{"injectables/PayloadInterceptor.html":{}}}],["src/core/interfaces/soft",{"_index":320,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"interfaces/SoftDeleteResult.html":{},"coverage.html":{}}}],["src/core/utils/last.util",{"_index":2297,"title":{},"body":{"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["src/core/utils/last.util.ts",{"_index":2687,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/migrations",{"_index":2901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/migrations/1619445806509",{"_index":418,"title":{},"body":{"classes/Auth1619445806509.html":{},"coverage.html":{}}}],["src/database/migrations/1620179231630",{"_index":2201,"title":{},"body":{"classes/QuestionGroup1620179231630.html":{},"coverage.html":{}}}],["src/database/migrations/1620299822480",{"_index":6,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1620477175799",{"_index":517,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"coverage.html":{}}}],["src/database/migrations/1620477869366",{"_index":2336,"title":{},"body":{"classes/QuestionImage1620477869366.html":{},"coverage.html":{}}}],["src/database/migrations/1620478273991",{"_index":909,"title":{},"body":{"classes/Exam1620478273991.html":{},"coverage.html":{}}}],["src/database/migrations/1620488935141",{"_index":2342,"title":{},"body":{"classes/QuestionPosition1620488935141.html":{},"coverage.html":{}}}],["src/database/migrations/1620563708532",{"_index":2348,"title":{},"body":{"classes/QuestionPositionIdx1620563708532.html":{},"coverage.html":{}}}],["src/database/migrations/1621036457247",{"_index":1365,"title":{},"body":{"classes/ExamTitle1621036457247.html":{},"coverage.html":{}}}],["src/database/migrations/1621992475274",{"_index":2328,"title":{},"body":{"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{}}}],["src/database/migrations/1622326106015",{"_index":1247,"title":{},"body":{"classes/ExamTarget1622326106015.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1622332886234",{"_index":952,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{},"coverage.html":{}}}],["src/database/migrations/1622334780336",{"_index":961,"title":{},"body":{"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"coverage.html":{}}}],["src/database/migrations/1622378888497",{"_index":1263,"title":{},"body":{"classes/ExamTargetAdd1622378888497.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1622417032753",{"_index":995,"title":{},"body":{"classes/ExamAgreementObservation1622417032753.html":{},"coverage.html":{}}}],["src/database/migrations/1622421768424",{"_index":127,"title":{},"body":{"classes/Answer1622421768424.html":{},"coverage.html":{}}}],["src/database/migrations/1624416663574",{"_index":567,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"coverage.html":{}}}],["src/database/migrations/1624416663575",{"_index":1882,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1624547816204",{"_index":2017,"title":{},"body":{"classes/PeriodIndex1624547816204.html":{},"coverage.html":{}}}],["src/database/migrations/1624560625346",{"_index":1787,"title":{},"body":{"classes/GradeIndex1624560625346.html":{},"coverage.html":{}}}],["src/database/migrations/1624750140569",{"_index":289,"title":{},"body":{"classes/AnswerScoreCheck1624750140568.html":{},"coverage.html":{}}}],["src/database/migrations/1624883202214",{"_index":2254,"title":{},"body":{"classes/QuestionGroupGradeRemove1624883202213.html":{},"coverage.html":{}}}],["src/database/migrations/1625001091463",{"_index":1066,"title":{},"body":{"classes/ExamAgreementUniqueCode1625001091462.html":{},"coverage.html":{}}}],["src/database/migrations/1625001565002",{"_index":1763,"title":{},"body":{"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"coverage.html":{}}}],["src/database/migrations/1625002603969",{"_index":1074,"title":{},"body":{"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"coverage.html":{}}}],["src/database/migrations/1625013724393",{"_index":2567,"title":{},"body":{"classes/UserEmail1625013724392.html":{},"coverage.html":{}}}],["src/exam/controllers/exam",{"_index":967,"title":{},"body":{"controllers/ExamAgreementController.html":{},"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["src/exam/controllers/exam.controller.ts",{"_index":1083,"title":{},"body":{"controllers/ExamController.html":{},"coverage.html":{}}}],["src/exam/controllers/exam.controller.ts:31",{"_index":1087,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:37",{"_index":1089,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:43",{"_index":1095,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:48",{"_index":1091,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:53",{"_index":1098,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/controllers/exam.controller.ts:61",{"_index":1096,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/dtos/create",{"_index":716,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"coverage.html":{}}}],["src/exam/dtos/exam",{"_index":991,"title":{},"body":{"classes/ExamAgreementDto.html":{},"interfaces/ExamTargetManagerDto.html":{},"coverage.html":{}}}],["src/exam/dtos/find",{"_index":1511,"title":{},"body":{"interfaces/FindExamByUserDto.html":{},"coverage.html":{}}}],["src/exam/dtos/update",{"_index":2503,"title":{},"body":{"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["src/exam/entities/exam",{"_index":108,"title":{},"body":{"classes/Answer.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"interfaces/SendAgreementEmailDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["src/exam/entities/exam.entity",{"_index":2013,"title":{},"body":{"classes/Period.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/QuestionGroup.html":{}}}],["src/exam/entities/exam.entity.ts",{"_index":857,"title":{},"body":{"classes/Exam.html":{},"coverage.html":{}}}],["src/exam/entities/exam.entity.ts:20",{"_index":880,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:23",{"_index":869,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:26",{"_index":874,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:29",{"_index":870,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:32",{"_index":868,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:35",{"_index":876,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:38",{"_index":873,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:42",{"_index":879,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:45",{"_index":872,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:48",{"_index":871,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:51",{"_index":865,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:54",{"_index":885,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:58",{"_index":888,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/entities/exam.entity.ts:62",{"_index":890,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/enums/exam",{"_index":2780,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/exam/exam.constants.ts",{"_index":2690,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/exam/exam.module",{"_index":284,"title":{},"body":{"modules/AnswerModule.html":{}}}],["src/exam/exam.module.ts",{"_index":1122,"title":{},"body":{"modules/ExamModule.html":{}}}],["src/exam/factories/exam",{"_index":1307,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"coverage.html":{}}}],["src/exam/interfaces/exam",{"_index":202,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamUser.html":{},"coverage.html":{}}}],["src/exam/models/exam",{"_index":1139,"title":{},"body":{"classes/ExamPersonalResult.html":{},"classes/ExamTargetNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/exam/providers/exam",{"_index":1347,"title":{},"body":{"injectables/ExamTargetTree.html":{},"coverage.html":{}}}],["src/exam/repositories/exam",{"_index":1001,"title":{},"body":{"classes/ExamAgreementRepository.html":{},"classes/ExamTargetRepository.html":{},"coverage.html":{}}}],["src/exam/repositories/exam.repository.ts",{"_index":1146,"title":{},"body":{"classes/ExamRepository.html":{},"coverage.html":{}}}],["src/exam/repositories/exam.repository.ts:25",{"_index":1152,"title":{},"body":{"classes/ExamRepository.html":{}}}],["src/exam/repositories/exam.repository.ts:55",{"_index":1170,"title":{},"body":{"classes/ExamRepository.html":{}}}],["src/exam/repositories/exam.repository.ts:73",{"_index":1173,"title":{},"body":{"classes/ExamRepository.html":{}}}],["src/exam/services/exam",{"_index":322,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["src/exam/services/exam.service",{"_index":2292,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["src/exam/services/exam.service.ts",{"_index":1200,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{}}}],["src/exam/services/exam.service.ts:19",{"_index":1214,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:24",{"_index":1204,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:33",{"_index":1210,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:46",{"_index":1205,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:53",{"_index":1206,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:57",{"_index":1207,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:69",{"_index":1208,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:88",{"_index":1213,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/services/exam.service.ts:97",{"_index":1212,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exportation/enums/exportation",{"_index":2781,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/exportation/exportation.controller.ts",{"_index":1372,"title":{},"body":{"controllers/ExportationController.html":{},"coverage.html":{}}}],["src/exportation/exportation.controller.ts:19",{"_index":1376,"title":{},"body":{"controllers/ExportationController.html":{}}}],["src/exportation/exportation.module.ts",{"_index":1389,"title":{},"body":{"modules/ExportationModule.html":{}}}],["src/exportation/exportation.repository.ts",{"_index":1392,"title":{},"body":{"injectables/ExportationRepository.html":{},"coverage.html":{}}}],["src/exportation/exportation.repository.ts:12",{"_index":1398,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["src/exportation/exportation.repository.ts:9",{"_index":1396,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["src/exportation/exportation.service.ts",{"_index":1458,"title":{},"body":{"injectables/ExportationService.html":{},"coverage.html":{}}}],["src/exportation/exportation.service.ts:11",{"_index":1463,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/exportation.service.ts:17",{"_index":1469,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/exportation.service.ts:28",{"_index":1465,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/exportation.service.ts:34",{"_index":1466,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/exportation/interfaces/csv",{"_index":824,"title":{},"body":{"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"coverage.html":{}}}],["src/exportation/maps/user",{"_index":2694,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase",{"_index":1751,"title":{},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["src/firebase/dtos/firebase",{"_index":1736,"title":{},"body":{"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["src/firebase/firebase",{"_index":1521,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.constants.ts",{"_index":2698,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/firebase/firebase.module.ts",{"_index":1705,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:31",{"_index":1706,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.module.ts:41",{"_index":1707,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/interfaces/firebase",{"_index":1625,"title":{},"body":{"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"interfaces/FirebaseModuleOptions.html":{},"coverage.html":{}}}],["src/firebase/services/firebase",{"_index":1638,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["src/firebase/types/firebase",{"_index":2846,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/infra/controllers/upload.controller.ts",{"_index":2517,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{}}}],["src/infra/controllers/upload.controller.ts:23",{"_index":2521,"title":{},"body":{"controllers/UploadController.html":{}}}],["src/infra/dtos/file",{"_index":1509,"title":{},"body":{"interfaces/FileSendDto.html":{},"coverage.html":{}}}],["src/infra/dtos/send",{"_index":2407,"title":{},"body":{"interfaces/SendAgreementEmailDto.html":{},"classes/SendMailDto.html":{},"coverage.html":{}}}],["src/infra/infra.constants.ts",{"_index":2700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infra/infra.module",{"_index":1138,"title":{},"body":{"modules/ExamModule.html":{},"modules/ExportationModule.html":{}}}],["src/infra/infra.module.ts",{"_index":1914,"title":{},"body":{"modules/InfraModule.html":{}}}],["src/infra/services/firebase",{"_index":1739,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["src/infra/services/mailer.service.ts",{"_index":1973,"title":{},"body":{"classes/MailerService.html":{},"coverage.html":{}}}],["src/infra/services/mailer.service.ts:4",{"_index":1978,"title":{},"body":{"classes/MailerService.html":{}}}],["src/infra/services/nodemailer.service.ts",{"_index":1981,"title":{},"body":{"injectables/NodeMailerService.html":{},"coverage.html":{}}}],["src/infra/services/nodemailer.service.ts:11",{"_index":1984,"title":{},"body":{"injectables/NodeMailerService.html":{}}}],["src/infra/services/nodemailer.service.ts:20",{"_index":1985,"title":{},"body":{"injectables/NodeMailerService.html":{}}}],["src/infra/services/send",{"_index":1031,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/SendEmailService.html":{},"coverage.html":{}}}],["src/infra/services/template.service.ts",{"_index":2461,"title":{},"body":{"injectables/TemplateService.html":{},"coverage.html":{}}}],["src/infra/services/template.service.ts:24",{"_index":2467,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/infra/services/template.service.ts:8",{"_index":2463,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/infra/services/uploader.service",{"_index":1474,"title":{},"body":{"injectables/ExportationService.html":{}}}],["src/infra/services/uploader.service.ts",{"_index":2532,"title":{},"body":{"classes/UploaderService.html":{},"coverage.html":{}}}],["src/infra/services/uploader.service.ts:4",{"_index":2533,"title":{},"body":{"classes/UploaderService.html":{}}}],["src/logger/logger.module.ts",{"_index":1966,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logger.service",{"_index":1033,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/NodeMailerService.html":{}}}],["src/logger/logger.service.ts",{"_index":853,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":2701,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/question",{"_index":110,"title":{},"body":{"classes/Answer.html":{},"modules/AnswerModule.html":{},"injectables/AnswerService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/Exam.html":{},"classes/FindPersonalDto.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"modules/QuestionGroupModule.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/controllers/user.controller.ts",{"_index":2545,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/controllers/user.controller.ts:16",{"_index":2547,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controllers/user.controller.ts:22",{"_index":2550,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/controllers/user.controller.ts:28",{"_index":2553,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/decoratos/get",{"_index":205,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionGroupController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dtos/create",{"_index":801,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/update",{"_index":2514,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto",{"_index":2110,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["src/user/dtos/user.dto.ts",{"_index":2564,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/user/dtos/user.dto.ts:6",{"_index":2565,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/entities/user.entity",{"_index":936,"title":{},"body":{"classes/ExamAgreement.html":{},"classes/FindPersonalDto.html":{},"controllers/QuestionGroupController.html":{}}}],["src/user/entities/user.entity.ts",{"_index":2534,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:11",{"_index":2537,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:14",{"_index":2535,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":2536,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:20",{"_index":2540,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:23",{"_index":2539,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:26",{"_index":2538,"title":{},"body":{"classes/User.html":{}}}],["src/user/enum/user",{"_index":635,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/helpers/create",{"_index":2712,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/user/interfaces/user",{"_index":2584,"title":{},"body":{"interfaces/UserResult.html":{},"coverage.html":{}}}],["src/user/repositories/user.repository.ts",{"_index":2581,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/user/user.module.ts",{"_index":2576,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":2586,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:108",{"_index":2606,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":2593,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":2594,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:47",{"_index":2596,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:58",{"_index":2600,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":2604,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:70",{"_index":2598,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:97",{"_index":2602,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":1840,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["start",{"_index":863,"title":{},"body":{"classes/Exam.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/PeriodService.html":{}}}],["starta",{"_index":2042,"title":{},"body":{"injectables/PeriodService.html":{}}}],["startb",{"_index":2044,"title":{},"body":{"injectables/PeriodService.html":{}}}],["started",{"_index":578,"title":{"index.html":{}},"body":{"classes/Auxiliary1624416663574.html":{},"miscellaneous/enumerations.html":{}}}],["started_at",{"_index":525,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["startedat",{"_index":731,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/Period.html":{},"injectables/PeriodService.html":{}}}],["startofmonth",{"_index":1886,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["startofmonth(new",{"_index":1895,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["stated_at",{"_index":535,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["statement",{"_index":766,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{}}}],["statements",{"_index":2643,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1201,"title":{},"body":{"injectables/ExamService.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["status",{"_index":530,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["status.enum",{"_index":894,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{}}}],["status.enum.ts",{"_index":2771,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":1838,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["storage",{"_index":1535,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["storage.service.ts",{"_index":1716,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["storage.service.ts:15",{"_index":1721,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:9",{"_index":1718,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storagebucket",{"_index":1581,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["storageservice",{"_index":1743,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["strategies",{"_index":2761,"title":{},"body":{"dependencies.html":{}}}],["strategies/jwt.strategy",{"_index":465,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1948,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":129,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthDto.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationService.html":{},"interfaces/FileSendDto.html":{},"injectables/FirebaseAdmin.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"interfaces/SendAgreementEmailDto.html":{},"classes/SendMailDto.html":{},"classes/Student.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["student",{"_index":851,"title":{"classes/Student.html":{}},"body":{"interfaces/CsvLineRow.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["student.cpf",{"_index":1905,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["student.enrollment",{"_index":1904,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["student.entity",{"_index":1783,"title":{},"body":{"classes/Grade.html":{}}}],["student_grade",{"_index":575,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/Grade.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["studentgrades",{"_index":2434,"title":{},"body":{"classes/Student.html":{}}}],["studentrepository",{"_index":601,"title":{"classes/StudentRepository.html":{}},"body":{"modules/AuxiliaryModule.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"coverage.html":{}}}],["students",{"_index":1771,"title":{},"body":{"classes/Grade.html":{}}}],["studentservice",{"_index":593,"title":{"injectables/StudentService.html":{}},"body":{"modules/AuxiliaryModule.html":{},"injectables/StudentService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["subject",{"_index":540,"title":{"classes/Subject.html":{}},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"injectables/ExportationRepository.html":{},"classes/Grade.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"classes/Subject.html":{},"coverage.html":{}}}],["subject.course",{"_index":687,"title":{},"body":{"classes/Course.html":{}}}],["subject.entity",{"_index":685,"title":{},"body":{"classes/Course.html":{},"classes/Grade.html":{}}}],["subject.id",{"_index":1903,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["subject_id",{"_index":544,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["subject_title",{"_index":846,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["subject`(`id",{"_index":564,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{}}}],["subjectid",{"_index":1772,"title":{},"body":{"classes/Grade.html":{}}}],["subjects",{"_index":679,"title":{},"body":{"classes/Course.html":{}}}],["subscriber.{js,ts",{"_index":2895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscribers",{"_index":2894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sudo",{"_index":2830,"title":{},"body":{"index.html":{}}}],["super",{"_index":1954,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":2832,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":2491,"title":{},"body":{"injectables/TemplateService.html":{}}}],["suprir",{"_index":2803,"title":{},"body":{"index.html":{}}}],["svg",{"_index":2833,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2756,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":2681,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfigkey",{"_index":2682,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2456,"title":{"interfaces/SwaggerOptions.html":{}},"body":{"interfaces/SwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":640,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"injectables/UserService.html":{}}}],["synchronize",{"_index":2896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":2466,"title":{},"body":{"injectables/TemplateService.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":136,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/UserEmail1625013724392.html":{},"coverage.html":{}}}],["tableinheritance",{"_index":116,"title":{},"body":{"classes/Answer.html":{},"classes/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2714,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":747,"title":{},"body":{"classes/CreateExamDto.html":{},"modules/ExamModule.html":{},"classes/ExamRepository.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/FindExamByUserDto.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["target.controller",{"_index":1131,"title":{},"body":{"modules/ExamModule.html":{}}}],["target.controller.ts",{"_index":1271,"title":{},"body":{"controllers/ExamTargetController.html":{},"coverage.html":{}}}],["target.controller.ts:20",{"_index":1278,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["target.controller.ts:26",{"_index":1276,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["target.entity",{"_index":895,"title":{},"body":{"classes/Exam.html":{},"classes/ExamRepository.html":{},"classes/ExamTargetRepository.html":{},"injectables/ExamTargetService.html":{}}}],["target.entity.ts",{"_index":1243,"title":{},"body":{"classes/ExamTarget.html":{},"coverage.html":{}}}],["target.entity.ts:8",{"_index":1244,"title":{},"body":{"classes/ExamTarget.html":{}}}],["target.id",{"_index":1163,"title":{},"body":{"classes/ExamRepository.html":{}}}],["target.repository",{"_index":1128,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["target.repository.ts",{"_index":1319,"title":{},"body":{"classes/ExamTargetRepository.html":{},"coverage.html":{}}}],["target.service",{"_index":1129,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["target.service.ts",{"_index":1321,"title":{},"body":{"injectables/ExamTargetService.html":{},"coverage.html":{}}}],["target.service.ts:12",{"_index":1327,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:22",{"_index":1332,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:30",{"_index":1328,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:42",{"_index":1329,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.service.ts:48",{"_index":1331,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["target.type",{"_index":1164,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ExamTargetService.html":{}}}],["targetmap",{"_index":1223,"title":{},"body":{"injectables/ExamService.html":{}}}],["targetmap.get(target",{"_index":1227,"title":{},"body":{"injectables/ExamService.html":{}}}],["targetnodefactory",{"_index":1353,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["targetnodefactory.generate",{"_index":1357,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["targets",{"_index":732,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"interfaces/ExamTargetManagerDto.html":{},"injectables/ExamTargetService.html":{},"interfaces/FindExamByUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targets.map((target",{"_index":1226,"title":{},"body":{"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{}}}],["targetservice",{"_index":1203,"title":{},"body":{"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["template",{"_index":2488,"title":{},"body":{"injectables/TemplateService.html":{}}}],["template.service",{"_index":2415,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["templatemap",{"_index":2462,"title":{},"body":{"injectables/TemplateService.html":{}}}],["templateservice",{"_index":1913,"title":{"injectables/TemplateService.html":{}},"body":{"modules/InfraModule.html":{},"injectables/SendEmailService.html":{},"injectables/TemplateService.html":{},"coverage.html":{},"overview.html":{}}}],["testing",{"_index":1867,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["text",{"_index":523,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamTitle1621036457247.html":{},"classes/Question.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionImage1620477869366.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{}}}],["text/csv",{"_index":1499,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this._targetmap",{"_index":1337,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.answergraderepository.create(createdto",{"_index":351,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answergraderepository.save",{"_index":350,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.create(createdto",{"_index":353,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.delete",{"_index":339,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.find",{"_index":355,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.findone(id",{"_index":356,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.merge(answer",{"_index":358,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.save",{"_index":352,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.save(answer",{"_index":359,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerrepository.softdelete",{"_index":361,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.answerservice.createbatch(createanswerdtos",{"_index":223,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.remove(id",{"_index":229,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.answerservice.update(id",{"_index":227,"title":{},"body":{"controllers/AnswerController.html":{}}}],["this.app",{"_index":1577,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.auth",{"_index":1590,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.database(url",{"_index":1591,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.delete",{"_index":1600,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.firestore",{"_index":1592,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.instanceid",{"_index":1593,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.machinelearning",{"_index":1594,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.messaging",{"_index":1595,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.name",{"_index":1587,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.options",{"_index":1589,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.projectmanagement",{"_index":1596,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.remoteconfig",{"_index":1597,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.securityrules",{"_index":1598,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.app.storage",{"_index":1599,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["this.authrepository.findone",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authrepository.save",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.createauth",{"_index":2616,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.findauth",{"_index":1960,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.login(logindto",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.childs",{"_index":1304,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.childs.length",{"_index":1300,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.configservice.get('node_env",{"_index":1855,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.configservice.get('skip_sentry",{"_index":1866,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.connection.createqueryrunner",{"_index":1407,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["this.createcsv(csvlines",{"_index":1494,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.createquerybuilder('exam",{"_index":1178,"title":{},"body":{"classes/ExamRepository.html":{}}}],["this.createquerybuilder('grade",{"_index":1803,"title":{},"body":{"classes/GradeRepository.html":{}}}],["this.createuserbytype(createuserdto",{"_index":2615,"title":{},"body":{"injectables/UserService.html":{}}}],["this.endedat",{"_index":907,"title":{},"body":{"classes/Exam.html":{}}}],["this.examagreementservice.createagreement(createagreementdto",{"_index":989,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["this.examagreementservice.findone(user",{"_index":329,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.examagreementservice.finishexam(examagreement",{"_index":354,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.examagreementservice.updateagreement",{"_index":990,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["this.examservice.create(createexamdto",{"_index":1106,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findall",{"_index":1107,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findone(copyquestiongroupdto.examid",{"_index":2312,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(createagreementdto.examid",{"_index":1038,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.examservice.findone(examid",{"_index":2300,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.examservice.findone(id",{"_index":1112,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.findpersonal(user",{"_index":1110,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.remove(id",{"_index":1114,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.update(id",{"_index":1113,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.exports",{"_index":1624,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.fcm",{"_index":1685,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.fcm.sendtodevice(token",{"_index":1687,"title":{},"body":{"injectables/FirebaseCloudMessagingService.html":{}}}],["this.findauth",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findone(copyquestiongroupdto.groupid",{"_index":2311,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.findone(id",{"_index":357,"title":{},"body":{"injectables/AnswerService.html":{},"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.findspecializeduser(userdto",{"_index":2636,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduser(userdto",{"_index":2630,"title":{},"body":{"injectables/UserService.html":{}}}],["this.firebaseauth",{"_index":1663,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.createuser(createdto",{"_index":1671,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.deleteuser(uid",{"_index":1673,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.getuser(uid",{"_index":1670,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.updateuser(uid",{"_index":1672,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firebaseauth.verifyidtoken(token",{"_index":1665,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.firestore",{"_index":1698,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.firestore.collection(collection",{"_index":1700,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["this.generate(node",{"_index":1318,"title":{},"body":{"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{}}}],["this.getfilename(examid",{"_index":1491,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.getnextposition(createquestiondto.groupid",{"_index":2379,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.getnextposition(updatedto.groupid",{"_index":2390,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.gettargetmap",{"_index":1343,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.graderepository.find",{"_index":1818,"title":{},"body":{"injectables/GradeService.html":{}}}],["this.graderepository.findbyuserandperiod(user",{"_index":1819,"title":{},"body":{"injectables/GradeService.html":{}}}],["this.gradeservice.findbyuserandperiod",{"_index":2074,"title":{},"body":{"injectables/PersonalQuestionGroup.html":{}}}],["this.groups",{"_index":901,"title":{},"body":{"classes/Exam.html":{}}}],["this.groups?.sort((a",{"_index":902,"title":{},"body":{"classes/Exam.html":{}}}],["this.groupservice.findone(groupid",{"_index":2377,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.isleaf",{"_index":1302,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.jwtservice.signasync",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loadrelations(query).getmany",{"_index":1192,"title":{},"body":{"classes/ExamRepository.html":{}}}],["this.loadtargetmap",{"_index":1336,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.logger.error('catched",{"_index":1870,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["this.logger.error(e",{"_index":1053,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.logger.log",{"_index":1993,"title":{},"body":{"injectables/NodeMailerService.html":{}}}],["this.logger.setcontext('nodemailerservice",{"_index":1988,"title":{},"body":{"injectables/NodeMailerService.html":{}}}],["this.mailerservice",{"_index":2420,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["this.mustfindauth(logindto",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mustfinduser",{"_index":2637,"title":{},"body":{"injectables/UserService.html":{}}}],["this.newexam(createexamdto",{"_index":1228,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.newexam(updateexamdto",{"_index":1240,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.periodrepository.find",{"_index":2039,"title":{},"body":{"injectables/PeriodService.html":{}}}],["this.periodrepository.findone",{"_index":2046,"title":{},"body":{"injectables/PeriodService.html":{}}}],["this.periodservice.getperiodbyinterval(exam",{"_index":1230,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.personalgroup.getpersonal(user",{"_index":2325,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.professorgrades",{"_index":2099,"title":{},"body":{"classes/Professor.html":{}}}],["this.professorservice.createstudent(createuserdto",{"_index":2626,"title":{},"body":{"injectables/UserService.html":{}}}],["this.professorservice.findone(userdto",{"_index":2634,"title":{},"body":{"injectables/UserService.html":{}}}],["this.providers",{"_index":1620,"title":{},"body":{"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{}}}],["this.questiongroupservice.copy(copyquestiongroupdto",{"_index":2240,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.create(createquestiongroupdto",{"_index":2234,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findall",{"_index":2235,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findone(id",{"_index":2238,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.findpersonal",{"_index":2237,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.remove(id",{"_index":2242,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.reorder(reorderquestiongroupdto",{"_index":2241,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questiongroupservice.update(id",{"_index":2239,"title":{},"body":{"controllers/QuestionGroupController.html":{}}}],["this.questions",{"_index":2198,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questions?.sort((a",{"_index":2199,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["this.questionservice.copytogroup",{"_index":2314,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.questionservice.createquestion(createquestiondto",{"_index":2164,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.createquestions(groupid",{"_index":2167,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.find(finddto",{"_index":2169,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findbyids",{"_index":331,"title":{},"body":{"injectables/AnswerService.html":{}}}],["this.questionservice.findone(id",{"_index":2170,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.remove(id",{"_index":2173,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.reorder(reorderquesitondto",{"_index":2172,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.update(id",{"_index":2171,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.repository.create",{"_index":1044,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.create(createdto",{"_index":2113,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["this.repository.create(createquestiongroupdto",{"_index":2303,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.create(entitylike",{"_index":1222,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.find",{"_index":1060,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetService.html":{},"injectables/PersonalQuestionGroup.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.findbyids(ids",{"_index":2386,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.findbytargets",{"_index":1236,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.findbyuser(user",{"_index":1234,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.findone",{"_index":1040,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/ProfessorService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/StudentService.html":{}}}],["this.repository.findone(id",{"_index":1233,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.getcsvlines(examid",{"_index":1487,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.repository.merge",{"_index":2309,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.merge(agreement",{"_index":1059,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.repository.merge(exam",{"_index":1239,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.merge(question",{"_index":2391,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save",{"_index":1043,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["this.repository.save(agreement",{"_index":1047,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.repository.save(exam",{"_index":1231,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.repository.save(professor",{"_index":2114,"title":{},"body":{"injectables/ProfessorService.html":{}}}],["this.repository.save(question",{"_index":2380,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save(questiongroup",{"_index":2306,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.repository.save(questions",{"_index":2382,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.save(student",{"_index":2445,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.repository.softdelete",{"_index":2397,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.repository.softdelete(id",{"_index":1241,"title":{},"body":{"injectables/ExamService.html":{},"injectables/QuestionGroupService.html":{}}}],["this.repository.update(group.id",{"_index":2323,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.root",{"_index":1356,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["this.root.dfs(target",{"_index":1362,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["this.sendagreementemail(user.email",{"_index":1046,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.sendemailservice.sendagreementemail",{"_index":1049,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["this.service.exporttocsv(examid",{"_index":1383,"title":{},"body":{"controllers/ExportationController.html":{}}}],["this.service.upload(file",{"_index":2531,"title":{},"body":{"controllers/UploadController.html":{}}}],["this.setexamandposition",{"_index":2305,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["this.startedat",{"_index":906,"title":{},"body":{"classes/Exam.html":{}}}],["this.status",{"_index":945,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["this.storage",{"_index":1724,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storage.bucket(bucket).file(path",{"_index":1729,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.storageservice.upload(this.getname(filedto",{"_index":1758,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["this.studentgrades",{"_index":2437,"title":{},"body":{"classes/Student.html":{}}}],["this.studentservice.createstudent(createuserdto",{"_index":2628,"title":{},"body":{"injectables/UserService.html":{}}}],["this.studentservice.findone(userdto",{"_index":2635,"title":{},"body":{"injectables/UserService.html":{}}}],["this.targetservice.gettargetmap",{"_index":1224,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.targetservice.gettargets",{"_index":1283,"title":{},"body":{"controllers/ExamTargetController.html":{}}}],["this.targetservice.gettargetsforuser(user.type",{"_index":1235,"title":{},"body":{"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{}}}],["this.templatemap",{"_index":2480,"title":{},"body":{"injectables/TemplateService.html":{}}}],["this.templatemap.get(name",{"_index":2489,"title":{},"body":{"injectables/TemplateService.html":{}}}],["this.templateservice.get('agreement",{"_index":2417,"title":{},"body":{"injectables/SendEmailService.html":{}}}],["this.transporter.sendmail",{"_index":1994,"title":{},"body":{"injectables/NodeMailerService.html":{}}}],["this.tree.querytarget(target).map((p",{"_index":1345,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["this.type",{"_index":1301,"title":{},"body":{"classes/ExamTargetNode.html":{}}}],["this.uniquecode",{"_index":947,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["this.uploadservice.upload",{"_index":1495,"title":{},"body":{"injectables/ExportationService.html":{}}}],["this.userrepository.findone",{"_index":2629,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.merge(user",{"_index":2639,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":2638,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":2560,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findspecializeduser",{"_index":1962,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.mustfinduser",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updateuser(user.enrollment",{"_index":2563,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":49,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"injectables/AnswerService.html":{},"injectables/AuthService.html":{},"injectables/ExamAgreementService.html":{},"injectables/ExamService.html":{},"injectables/ExamTargetTree.html":{},"injectables/ExportationService.html":{},"injectables/FirebaseAdmin.html":{},"injectables/JwtStrategy.html":{},"injectables/PeriodService.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"injectables/TemplateService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["timestamp",{"_index":1839,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IException.html":{}}}],["timestamp.entity",{"_index":1507,"title":{},"body":{"classes/FFEntity.html":{}}}],["timestampentity",{"_index":102,"title":{"classes/TimestampEntity.html":{}},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"coverage.html":{}}}],["timestampentity:10",{"_index":103,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:13",{"_index":107,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timestampentity:16",{"_index":105,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["timewindow",{"_index":2940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tinyint",{"_index":90,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["tipo",{"_index":836,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{}}}],["title",{"_index":538,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/Exam.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/IEntity.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["tls",{"_index":2933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tocopy",{"_index":2310,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["tocopy.questions",{"_index":2315,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["todo",{"_index":2190,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["token",{"_index":1660,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{}}}],["token.interface",{"_index":1662,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["token.interface.ts",{"_index":1635,"title":{},"body":{"interfaces/FirebaseAuthDecodedToken.html":{},"coverage.html":{}}}],["tolocaledatestring('pt",{"_index":1476,"title":{},"body":{"injectables/ExportationService.html":{}}}],["transaction",{"_index":2622,"title":{},"body":{"injectables/UserService.html":{}}}],["transactional",{"_index":250,"title":{},"body":{"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"injectables/AnswerService.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTargetRepository.html":{},"classes/GradeRepository.html":{},"classes/PeriodRepository.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["transformer",{"_index":722,"title":{},"body":{"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreement.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"dependencies.html":{}}}],["transporter",{"_index":1983,"title":{},"body":{"injectables/NodeMailerService.html":{},"miscellaneous/variables.html":{}}}],["tree",{"_index":1326,"title":{},"body":{"injectables/ExamTargetService.html":{}}}],["tree.provider",{"_index":1134,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamTargetService.html":{}}}],["tree.provider.ts",{"_index":1348,"title":{},"body":{"injectables/ExamTargetTree.html":{},"coverage.html":{}}}],["tree.provider.ts:25",{"_index":1355,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["tree.provider.ts:8",{"_index":1352,"title":{},"body":{"injectables/ExamTargetTree.html":{}}}],["true",{"_index":92,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"injectables/ExportationService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"injectables/JwtStrategy.html":{},"classes/Period.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["true})@arrayminsize(1",{"_index":798,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["true})@exclude()@apihideproperty",{"_index":928,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["true})@type(undefined)@isdefined({each",{"_index":797,"title":{},"body":{"classes/CreateQuestionsDto.html":{}}}],["try",{"_index":1048,"title":{},"body":{"injectables/ExamAgreementService.html":{},"injectables/FirebaseAuthService.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"controllers/AnswerController.html":{},"classes/AnswerGrade.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/Course.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CsvLine.html":{},"interfaces/CsvLineRow.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"controllers/ExamAgreementController.html":{},"classes/ExamAgreementDto.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"interfaces/ExamAgreementUser.html":{},"controllers/ExamController.html":{},"classes/ExamPersonalResult.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"classes/ExamTitle1621036457247.html":{},"interfaces/ExamUser.html":{},"controllers/ExportationController.html":{},"injectables/ExportationRepository.html":{},"injectables/ExportationService.html":{},"classes/FFEntity.html":{},"interfaces/FileSendDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/FindPersonalDto.html":{},"injectables/FirebaseAdmin.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseCloudMessagingService.html":{},"injectables/FirebaseFirestoreService.html":{},"modules/FirebaseModule.html":{},"interfaces/FirebaseModuleOptions.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/FirebaseStorageUploadDto.html":{},"injectables/FirebaseUploader.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IClassValidatorException.html":{},"interfaces/IEntity.html":{},"interfaces/IException.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MailerService.html":{},"injectables/NodeMailerService.html":{},"injectables/PayloadInterceptor.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"injectables/PeriodService.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionFindDto.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"interfaces/QuestionGroupUser.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"injectables/SendEmailService.html":{},"classes/SendMailDto.html":{},"interfaces/SoftDeleteResult.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"interfaces/SwaggerOptions.html":{},"injectables/TemplateService.html":{},"classes/TimestampEntity.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserEmail1625013724392.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":119,"title":{},"body":{"classes/Answer.html":{},"injectables/AnswerService.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateUserDto.html":{},"classes/ExamTarget.html":{},"controllers/ExamTargetController.html":{},"interfaces/ExamTargetManagerDto.html":{},"classes/ExamTargetNode.html":{},"injectables/ExamTargetNodeFactory.html":{},"interfaces/ExamTargetNodeSchema.html":{},"injectables/ExamTargetService.html":{},"injectables/ExamTargetTree.html":{},"interfaces/ExamUser.html":{},"injectables/ExportationService.html":{},"interfaces/FindExamByUserDto.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{}}}],["type.enum.ts",{"_index":2767,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["type.map",{"_index":1405,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["type.map.ts",{"_index":2695,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2841,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":30,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerGrade.html":{},"classes/AnswerGradeRepository.html":{},"classes/AnswerRepository.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"injectables/AnswerService.html":{},"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementRepository.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTargetRepository.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/ExportationRepository.html":{},"classes/FFEntity.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/Grade.html":{},"classes/GradeIndex1624560625346.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/Period.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/PeriodRepository.html":{},"injectables/PeriodService.html":{},"classes/Professor.html":{},"classes/ProfessorRepository.html":{},"injectables/ProfessorService.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupRepository.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/Student.html":{},"classes/StudentRepository.html":{},"injectables/StudentService.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{},"classes/UserEmail1625013724392.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":276,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":607,"title":{},"body":{"modules/AuxiliaryModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{}}}],["typeormmodule.forfeature([answerrepository",{"_index":285,"title":{},"body":{"modules/AnswerModule.html":{}}}],["typeormmodule.forfeature([authrepository",{"_index":466,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([questiongrouprepository",{"_index":2271,"title":{},"body":{"modules/QuestionGroupModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":2580,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":2501,"title":{},"body":{"classes/UpdateAnswerDto.html":{},"classes/UpdateExamDto.html":{},"classes/UpdateQuestionGroupDto.html":{}}}],["types/firebase",{"_index":1696,"title":{},"body":{"injectables/FirebaseFirestoreService.html":{}}}],["types/user",{"_index":1801,"title":{},"body":{"classes/GradeRepository.html":{},"injectables/GradeService.html":{}}}],["u",{"_index":1427,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["u.enrollment",{"_index":1424,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["u.id",{"_index":1428,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["u.type",{"_index":1425,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["uh",{"_index":375,"title":{},"body":{"controllers/AppController.html":{}}}],["ui",{"_index":2757,"title":{},"body":{"dependencies.html":{}}}],["uid",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FirebaseAuthDecodedToken.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/JwtPayload.html":{}}}],["um",{"_index":2195,"title":{},"body":{"classes/QuestionGroup.html":{}}}],["unauthorizedexception",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception(logindto",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(userdto",{"_index":2631,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":42,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"classes/ExamTargetNode.html":{},"injectables/FirebaseStorageService.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGrade.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uneb",{"_index":1990,"title":{},"body":{"injectables/NodeMailerService.html":{}}}],["unique",{"_index":411,"title":{},"body":{"classes/Auth.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Course.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamTarget.html":{},"classes/ExamTarget1622326106015.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{},"classes/UserEmail1625013724392.html":{}}}],["unique_code",{"_index":847,"title":{},"body":{"interfaces/CsvLineRow.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"injectables/ExportationRepository.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{}}}],["unique_code_sended_at",{"_index":1079,"title":{},"body":{"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{}}}],["uniquecode",{"_index":650,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement.html":{}}}],["uniquecodesendedat",{"_index":915,"title":{},"body":{"classes/ExamAgreement.html":{}}}],["unknown",{"_index":2917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unprocessableentityexception",{"_index":2607,"title":{},"body":{"injectables/UserService.html":{}}}],["up",{"_index":15,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/UserEmail1625013724392.html":{},"index.html":{}}}],["up(queryrunner",{"_index":27,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/GradeIndex1624560625346.html":{},"interfaces/IEntity.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/SeedAuxiliary1624412129413.html":{},"classes/UserEmail1625013724392.html":{}}}],["upcase",{"_index":1901,"title":{},"body":{"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["update",{"_index":141,"title":{},"body":{"classes/Answer1622421768424.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{},"classes/PeriodIndex1624547816204.html":{},"controllers/QuestionController.html":{},"classes/QuestionGroup1620179231630.html":{},"controllers/QuestionGroupController.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"injectables/QuestionService.html":{},"miscellaneous/enumerations.html":{}}}],["update(id",{"_index":315,"title":{},"body":{"injectables/AnswerService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"injectables/QuestionService.html":{}}}],["updateagreement",{"_index":1009,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["updateagreement(querydto",{"_index":1028,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["updateagreementdto",{"_index":978,"title":{},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{}}}],["updateagreementdto.anonymous",{"_index":1058,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["updateagreemment",{"_index":970,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["updateagreemment(user",{"_index":975,"title":{},"body":{"controllers/ExamAgreementController.html":{}}}],["updateanswerdto",{"_index":185,"title":{"classes/UpdateAnswerDto.html":{}},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/UpdateAnswerDto.html":{},"coverage.html":{}}}],["updated_at",{"_index":140,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamTarget1622326106015.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{}}}],["updatedat",{"_index":81,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedatecolumn",{"_index":106,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerGrade.html":{},"classes/Auth.html":{},"classes/Course.html":{},"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/ExamTarget.html":{},"classes/FFEntity.html":{},"classes/Grade.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/TimestampEntity.html":{},"classes/User.html":{}}}],["updatedto",{"_index":1655,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/QuestionService.html":{}}}],["updatedto.groupid",{"_index":2387,"title":{},"body":{"injectables/QuestionService.html":{}}}],["updateexamagreementdto",{"_index":979,"title":{"classes/UpdateExamAgreementDto.html":{}},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"coverage.html":{}}}],["updateexamagreementquerydto",{"_index":977,"title":{"classes/UpdateExamAgreementQueryDto.html":{}},"body":{"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"coverage.html":{}}}],["updateexamdto",{"_index":1097,"title":{"classes/UpdateExamDto.html":{}},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/UpdateExamDto.html":{},"coverage.html":{}}}],["updateone",{"_index":173,"title":{},"body":{"controllers/AnswerController.html":{}}}],["updateone(id",{"_index":184,"title":{},"body":{"controllers/AnswerController.html":{}}}],["updatequestiondto",{"_index":2151,"title":{"classes/UpdateQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["updatequestiongroupdto",{"_index":2226,"title":{"classes/UpdateQuestionGroupDto.html":{}},"body":{"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/UpdateQuestionGroupDto.html":{},"coverage.html":{}}}],["updatequestiongroupdto.examid",{"_index":2307,"title":{},"body":{"injectables/QuestionGroupService.html":{}}}],["updateuser",{"_index":1643,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuser(@body",{"_index":2562,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(enrollment",{"_index":2605,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(uid",{"_index":1654,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["updateuser(updateuserdto",{"_index":2551,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserdto",{"_index":2513,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["upload",{"_index":1717,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/FirebaseUploader.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{}}}],["upload(@uploadedfile",{"_index":2530,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(file",{"_index":2518,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload(filedto",{"_index":1747,"title":{},"body":{"injectables/FirebaseUploader.html":{},"classes/UploaderService.html":{}}}],["upload(path",{"_index":1719,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["upload.dto",{"_index":1723,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["upload.dto.ts",{"_index":1737,"title":{},"body":{"interfaces/FirebaseStorageUploadDto.html":{},"coverage.html":{}}}],["upload_path",{"_index":2526,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadcontroller",{"_index":1915,"title":{"controllers/UploadController.html":{}},"body":{"modules/InfraModule.html":{},"controllers/UploadController.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":2522,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploader.service",{"_index":1754,"title":{},"body":{"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{}}}],["uploader.service.ts",{"_index":1740,"title":{},"body":{"injectables/FirebaseUploader.html":{},"coverage.html":{}}}],["uploader.service.ts:11",{"_index":1745,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploader.service.ts:19",{"_index":1748,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploader.service.ts:8",{"_index":1742,"title":{},"body":{"injectables/FirebaseUploader.html":{}}}],["uploaderservice",{"_index":1462,"title":{"classes/UploaderService.html":{}},"body":{"injectables/ExportationService.html":{},"injectables/FirebaseUploader.html":{},"modules/InfraModule.html":{},"controllers/UploadController.html":{},"classes/UploaderService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadservice",{"_index":1461,"title":{},"body":{"injectables/ExportationService.html":{}}}],["url",{"_index":1546,"title":{},"body":{"injectables/FirebaseAdmin.html":{}}}],["use",{"_index":2932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useclass",{"_index":1929,"title":{},"body":{"modules/InfraModule.html":{}}}],["usefactory",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FirebaseAdminModule.html":{},"interfaces/FirebaseAsyncModuleOptions.html":{},"interfaces/FirebaseModuleOptions.html":{},"modules/InfraModule.html":{}}}],["useguards",{"_index":194,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtguard",{"_index":215,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/ExportationController.html":{},"controllers/QuestionController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{}}}],["useinterceptors",{"_index":2523,"title":{},"body":{"controllers/UploadController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2529,"title":{},"body":{"controllers/UploadController.html":{}}}],["user",{"_index":46,"title":{"classes/User.html":{}},"body":{"classes/AdminUser1620299822480.html":{},"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"classes/Auth1619445806509.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CsvLineRow.html":{},"classes/ExamAgreement.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"injectables/ExportationRepository.html":{},"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"interfaces/IEntity.html":{},"injectables/JwtStrategy.html":{},"injectables/PersonalQuestionGroup.html":{},"classes/Professor.html":{},"controllers/QuestionGroupController.html":{},"injectables/QuestionGroupService.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/SeedAuxiliary1624412129413.html":{},"interfaces/SendAgreementEmailDto.html":{},"classes/Student.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserEmail1625013724392.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":206,"title":{},"body":{"controllers/AnswerController.html":{},"controllers/ExamAgreementController.html":{},"controllers/ExamController.html":{},"controllers/ExamTargetController.html":{},"controllers/QuestionGroupController.html":{},"controllers/UserController.html":{}}}],["user.decorator.ts",{"_index":2711,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1175,"title":{},"body":{"classes/ExamRepository.html":{},"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":802,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindExamByUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":805,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:15",{"_index":809,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":814,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":811,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":807,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":2516,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":1045,"title":{},"body":{"injectables/ExamAgreementService.html":{}}}],["user.enrollment",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.helper.ts",{"_index":2713,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["user.id",{"_index":225,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/GradeRepository.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["user.interface",{"_index":203,"title":{},"body":{"controllers/AnswerController.html":{},"injectables/AnswerService.html":{},"controllers/ExamAgreementController.html":{},"injectables/ExamAgreementService.html":{},"controllers/ExamController.html":{},"classes/ExamRepository.html":{},"injectables/ExamService.html":{},"controllers/ExamTargetController.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{}}}],["user.interface.ts",{"_index":611,"title":{},"body":{"interfaces/BatchUser.html":{},"interfaces/ExamAgreementUser.html":{},"interfaces/ExamUser.html":{},"interfaces/QuestionGroupUser.html":{},"coverage.html":{}}}],["user.interface.ts:3",{"_index":1081,"title":{},"body":{"interfaces/ExamAgreementUser.html":{}}}],["user.role",{"_index":641,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["user.service",{"_index":2556,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.type",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/dtos/create",{"_index":2111,"title":{},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{}}}],["user/entities/user.entity",{"_index":627,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Professor.html":{},"classes/Student.html":{}}}],["user/enum/user",{"_index":1370,"title":{},"body":{"interfaces/ExamUser.html":{}}}],["user/user.module",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user:11",{"_index":2093,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:14",{"_index":2091,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:17",{"_index":2092,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:20",{"_index":2096,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:23",{"_index":2095,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user:26",{"_index":2094,"title":{},"body":{"classes/Professor.html":{},"classes/Student.html":{}}}],["user_enrollment",{"_index":848,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["user_id",{"_index":548,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["user_type",{"_index":849,"title":{},"body":{"interfaces/CsvLineRow.html":{},"injectables/ExportationRepository.html":{}}}],["user`(`id",{"_index":582,"title":{},"body":{"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{}}}],["usercontroller",{"_index":2544,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":2108,"title":{"classes/UserDto.html":{}},"body":{"injectables/ProfessorService.html":{},"injectables/StudentService.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["useremail.ts",{"_index":2568,"title":{},"body":{"classes/UserEmail1625013724392.html":{},"coverage.html":{}}}],["useremail.ts:13",{"_index":2570,"title":{},"body":{"classes/UserEmail1625013724392.html":{}}}],["useremail.ts:4",{"_index":2569,"title":{},"body":{"classes/UserEmail1625013724392.html":{}}}],["useremail.ts:6",{"_index":2571,"title":{},"body":{"classes/UserEmail1625013724392.html":{}}}],["useremail1625013724392",{"_index":2566,"title":{"classes/UserEmail1625013724392.html":{}},"body":{"classes/UserEmail1625013724392.html":{},"coverage.html":{}}}],["userid",{"_index":224,"title":{},"body":{"controllers/AnswerController.html":{},"interfaces/BatchUser.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreateExamAgreementDto.html":{},"classes/ExamAgreement.html":{},"classes/ExamAgreementDto.html":{},"injectables/ExamAgreementService.html":{},"classes/ExamRepository.html":{},"classes/GradeRepository.html":{}}}],["usermodule",{"_index":385,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":2880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":2578,"title":{"classes/UserRepository.html":{}},"body":{"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userresult",{"_index":2583,"title":{"interfaces/UserResult.html":{}},"body":{"interfaces/UserResult.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userrole",{"_index":634,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/CreateUserDto.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":643,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.manager",{"_index":646,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["userrole.regular",{"_index":2542,"title":{},"body":{"classes/User.html":{}}}],["users",{"_index":2458,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":478,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertofind",{"_index":1516,"title":{},"body":{"classes/FindPersonalDto.html":{},"classes/GradeRepository.html":{},"injectables/GradeService.html":{},"miscellaneous/typealiases.html":{}}}],["usertype",{"_index":812,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/ExamUser.html":{},"classes/Professor.html":{},"classes/Student.html":{},"classes/User.html":{},"interfaces/UserResult.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["usertype.professor",{"_index":2625,"title":{},"body":{"injectables/UserService.html":{}}}],["usertype.student",{"_index":2627,"title":{},"body":{"injectables/UserService.html":{}}}],["usertypemap",{"_index":1403,"title":{},"body":{"injectables/ExportationRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usertypemap.get(csvline.user_type",{"_index":1453,"title":{},"body":{"injectables/ExportationRepository.html":{}}}],["usevalue",{"_index":1619,"title":{},"body":{"modules/FirebaseAdminModule.html":{}}}],["using",{"_index":2827,"title":{},"body":{"index.html":{}}}],["usuário",{"_index":837,"title":{},"body":{"interfaces/CsvLine.html":{},"injectables/ExportationRepository.html":{},"miscellaneous/variables.html":{}}}],["utf",{"_index":2487,"title":{},"body":{"injectables/TemplateService.html":{}}}],["utf8",{"_index":1503,"title":{},"body":{"injectables/ExportationService.html":{}}}],["uuid",{"_index":546,"title":{},"body":{"classes/Auxiliary1620477175799.html":{},"injectables/CaslAbilityFactory.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{}}}],["v0.0.1",{"_index":2948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":1939,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":1942,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":702,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["validateif((o",{"_index":706,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["validatenested",{"_index":756,"title":{},"body":{"classes/CreateQuestion.html":{},"classes/CreateQuestionsDto.html":{}}}],["validator",{"_index":449,"title":{},"body":{"classes/AuthDto.html":{},"classes/CopyQuestionGroupDto.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateExamAgreementDto.html":{},"classes/CreateExamDto.html":{},"classes/CreateQuestion.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateQuestionGroupDto.html":{},"classes/CreateQuestionsDto.html":{},"classes/CreateUserDto.html":{},"classes/ExamAgreementDto.html":{},"classes/LoginDto.html":{},"classes/QuestionFindDto.html":{},"classes/ReorderQuestionDto.html":{},"classes/ReorderQuestionGroupDto.html":{},"classes/UpdateExamAgreementDto.html":{},"classes/UpdateExamAgreementQueryDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["value",{"_index":131,"title":{},"body":{"classes/Answer1622421768424.html":{},"classes/AnswerScoreCheck1624750140568.html":{},"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/CreateAnswerDto.html":{},"classes/Exam1620478273991.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementAnonymousDefault1622334780336.html":{},"classes/ExamAgreementObservation1622417032753.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{},"injectables/ExamService.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"classes/ExamTitle1621036457247.html":{},"injectables/FirebaseUploader.html":{},"classes/GradeIndex1624560625346.html":{},"classes/HttpExceptionFilter.html":{},"classes/PeriodIndex1624547816204.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/QuestionPosition1620488935141.html":{},"classes/QuestionPositionIdx1620563708532.html":{},"classes/UserEmail1625013724392.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":62,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"classes/ExamTarget1622326106015.html":{},"classes/ExamTargetAdd1622378888497.html":{},"interfaces/IEntity.html":{},"classes/SeedAuxiliary1624412129413.html":{}}}],["var",{"_index":53,"title":{},"body":{"classes/AdminUser1620299822480.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":410,"title":{},"body":{"classes/Auth.html":{},"classes/Course.html":{},"classes/Period.html":{},"classes/Professor.html":{},"classes/Question.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"classes/Student.html":{},"classes/Subject.html":{},"classes/User.html":{}}}],["varchar(255",{"_index":423,"title":{},"body":{"classes/Auth1619445806509.html":{},"classes/Auxiliary1620477175799.html":{},"classes/Auxiliary1624416663574.html":{},"classes/ExamAgreement1622332886234.html":{},"classes/QuestionGroup1620179231630.html":{},"classes/QuestionGroupGradeRemove1624883202213.html":{},"classes/QuestionGroupTarget1621992475274.html":{},"classes/QuestionImage1620477869366.html":{},"classes/UserEmail1625013724392.html":{}}}],["varchar(36",{"_index":957,"title":{},"body":{"classes/ExamAgreement1622332886234.html":{},"classes/ExamAgreementUniqueCode1625001091462.html":{}}}],["variable",{"_index":2652,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2822,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":2465,"title":{},"body":{"injectables/TemplateService.html":{}}}],["verdadeira",{"_index":783,"title":{},"body":{"classes/CreateQuestionDto.html":{}}}],["verifytoken",{"_index":1644,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["verifytoken(token",{"_index":1658,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["version",{"_index":2459,"title":{},"body":{"interfaces/SwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["views",{"_index":2477,"title":{},"body":{"injectables/TemplateService.html":{}}}],["void",{"_index":886,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAgreement.html":{},"classes/HttpExceptionFilter.html":{},"classes/QuestionGroup.html":{},"classes/QuestionGroupGrade.html":{},"miscellaneous/functions.html":{}}}],["where('agreement.userid",{"_index":1194,"title":{},"body":{"classes/ExamRepository.html":{}}}],["where('exam.status",{"_index":1182,"title":{},"body":{"classes/ExamRepository.html":{}}}],["where('grade.periodid",{"_index":1808,"title":{},"body":{"classes/GradeRepository.html":{}}}],["yes",{"_index":1547,"title":{},"body":{"injectables/FirebaseAdmin.html":{},"injectables/FirebaseCloudMessagingService.html":{},"classes/UploaderService.html":{}}}],["zoom",{"_index":270,"title":{},"body":{"modules/AnswerModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/AuxiliaryModule.html":{},"modules/CaslModule.html":{},"modules/CoreModule.html":{},"modules/ExamModule.html":{},"modules/ExportationModule.html":{},"modules/FirebaseAdminModule.html":{},"modules/FirebaseModule.html":{},"modules/InfraModule.html":{},"modules/LoggerModule.html":{},"modules/QuestionGroupModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUser1620299822480.html":{"url":"classes/AdminUser1620299822480.html","title":"class - AdminUser1620299822480","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUser1620299822480\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620299822480-AdminUser.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620299822480-AdminUser.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\n\nconst cpf = '29997856155';\nconst enrollment = '999999';\n\nexport class AdminUser1620299822480 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    const result:\n      | {\n          id: number;\n        }[]\n      | undefined = await queryRunner.manager.query(\n      'SELECT id FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n\n    if (!result?.length) {\n      if (!process.env.ADMIN_PASSWORD) {\n        throw new Error('ADMIN_PASSWORD env var not set');\n      }\n\n      const salt = await bcrypt.genSalt();\n      const password = await bcrypt.hash(process.env.ADMIN_PASSWORD, salt);\n\n      await queryRunner.manager.query(\n        'INSERT INTO auth (login, password, salt) VALUES (?, ?, ?)',\n        [enrollment, password, salt],\n      );\n      await queryRunner.manager.query(\n        'INSERT INTO user (enrollment, cpf, type, role) VALUES (?, ?, ?, ?)',\n        [enrollment, cpf, 'User', 'admin'],\n      );\n    }\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.manager.query('DELETE FROM auth WHERE login = ?', [\n      enrollment,\n    ]);\n    await queryRunner.manager.query(\n      'DELETE FROM user WHERE cpf = ? OR enrollment = ?',\n      [cpf, enrollment],\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Answer.html":{"url":"classes/Answer.html","title":"class - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examAgreement\n                            \n                            \n                                examAgreementId\n                            \n                            \n                                question\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreementId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'tinyint', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/exam-agreement.entity';\nimport { Question } from 'src/question-group/entities/question.entity';\nimport { Check, Column, Entity, ManyToOne, TableInheritance } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { AnswerType } from '../enums/answer-type.enum';\n\n@Entity('answer')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: AnswerType } })\n@Check(`\"score\" IS NULL OR \"score\" BETWEEN 1 AND 5`)\nexport class Answer extends FFEntity {\n  @Column({ type: 'tinyint', nullable: true })\n  score?: number;\n\n  @Column({ type: 'enum', enum: AnswerType })\n  type: AnswerType;\n\n  @Column({ type: 'int' })\n  examAgreementId: number;\n\n  @Column({ type: 'int' })\n  questionId: number;\n\n  @ManyToOne(() => ExamAgreement)\n  examAgreement: ExamAgreement;\n\n  @ManyToOne(() => Question)\n  question: Question;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Answer1622421768424.html":{"url":"classes/Answer1622421768424.html","title":"class - Answer1622421768424","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer1622421768424\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622421768424-Answer.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Answer1622421768424'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622421768424-Answer.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622421768424-Answer.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622421768424-Answer.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Answer1622421768424 implements MigrationInterface {\n    name = 'Answer1622421768424'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `answer` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `score` int NULL, `type` enum ('Answer', 'AnswerGrade') NOT NULL, `exam_agreement_id` int NOT NULL, `question_id` int NOT NULL, `grade_id` int NULL, INDEX `IDX_ec3a69def9f89a993b8f75ee4d` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_814144bcce3b80921f41f15b823` FOREIGN KEY (`exam_agreement_id`) REFERENCES `exam_agreement`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_c3d19a89541e4f0813f2fe09194` FOREIGN KEY (`question_id`) REFERENCES `question`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `answer` ADD CONSTRAINT `FK_971014f1fb44be716098484bb5a` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_971014f1fb44be716098484bb5a`\");\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_c3d19a89541e4f0813f2fe09194`\");\n        await queryRunner.query(\"ALTER TABLE `answer` DROP FOREIGN KEY `FK_814144bcce3b80921f41f15b823`\");\n        await queryRunner.query(\"DROP INDEX `IDX_ec3a69def9f89a993b8f75ee4d` ON `answer`\");\n        await queryRunner.query(\"DROP TABLE `answer`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnswerController.html":{"url":"controllers/AnswerController.html","title":"controller - AnswerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnswerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                answer\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(examId: number, user: ExamUser, createAnswerDtos: CreateAnswerDto[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('batch/:examId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createAnswerDtos\n                                    \n                                            CreateAnswerDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(id: number, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  Delete,\n  ParseArrayPipe,\n  Put,\n  ParseIntPipe,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ExamUser } from 'src/exam/interfaces/exam-user.interface';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { AnswerService } from './answer.service';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\nimport { Answer } from './entities/answer.entity';\n\n@Controller('answer')\n@ApiTags('Answer')\n@ApiBearerAuth()\n@UseGuards(JwtGuard)\nexport class AnswerController {\n  constructor(private readonly answerService: AnswerService) {}\n\n  @Post('batch/:examId')\n  @ApiOkResponse({ type: [CreateAnswerDto] })\n  async create(\n    @Param('examId', ParseIntPipe) examId: number,\n    @GetUser() user: ExamUser,\n    @Body(new ParseArrayPipe({ items: CreateAnswerDto }))\n    createAnswerDtos: CreateAnswerDto[],\n  ) {\n    return this.answerService.createBatch(createAnswerDtos, {\n      userId: user.id,\n      examId,\n    });\n  }\n\n  @Put(':id')\n  async updateOne(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAnswerDto: UpdateAnswerDto,\n  ): Promise {\n    return this.answerService.update(id, updateAnswerDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number) {\n    return this.answerService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGrade.html":{"url":"classes/AnswerGrade.html","title":"class - AnswerGrade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGrade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/entities/answer-grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Answer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                grade\n                            \n                            \n                                gradeId\n                            \n                            \n                                examAgreement\n                            \n                            \n                                examAgreementId\n                            \n                            \n                                question\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grade\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer-grade.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gradeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/entities/answer-grade.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreement\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:24\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreementId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:18\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:27\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:21\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'tinyint', nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: AnswerType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Answer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Answer:15\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Grade } from 'src/auxiliary/entities/grade.entity';\nimport { ChildEntity, Column, ManyToOne } from 'typeorm';\nimport { Answer } from './answer.entity';\n\n@ChildEntity()\nexport class AnswerGrade extends Answer {\n  @ManyToOne(() => Grade)\n  grade: Grade;\n\n  @Column({ type: 'int' })\n  gradeId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerGradeRepository.html":{"url":"classes/AnswerGradeRepository.html","title":"class - AnswerGradeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerGradeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer-grade.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { AnswerGrade } from '../entities/answer-grade.entity';\n\n@EntityRepository(AnswerGrade)\nexport class AnswerGradeRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnswerModule.html":{"url":"modules/AnswerModule.html","title":"module - AnswerModule","body":"\n                   \n\n\n\n\n    Modules\n    AnswerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_providers\n\n\n\ncluster_AnswerModule_imports\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nExamModule->AnswerModule\n\n\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nAnswerModule -->\n\nQuestionGroupModule->AnswerModule\n\n\n\n\n\nAnswerService\n\nAnswerService\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/answer/answer.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnswerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnswerController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ExamModule\n                        \n                        \n                            QuestionGroupModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AnswerService } from './answer.service';\nimport { AnswerController } from './answer.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnswerRepository } from './repositories/answer.repository';\nimport { AnswerGradeRepository } from './repositories/answer-grade.repository';\nimport { QuestionGroupModule } from 'src/question-group/question-group.module';\nimport { ExamModule } from 'src/exam/exam.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AnswerRepository, AnswerGradeRepository]),\n    QuestionGroupModule,\n    ExamModule,\n  ],\n  controllers: [AnswerController],\n  providers: [AnswerService],\n})\nexport class AnswerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerRepository.html":{"url":"classes/AnswerRepository.html","title":"class - AnswerRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/repositories/answer.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Answer } from '../entities/answer.entity';\n\n@EntityRepository(Answer)\nexport class AnswerRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerScoreCheck1624750140568.html":{"url":"classes/AnswerScoreCheck1624750140568.html","title":"class - AnswerScoreCheck1624750140568","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerScoreCheck1624750140568\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624750140569-AnswerScoreCheck.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'AnswerScoreCheck1624750140568'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624750140569-AnswerScoreCheck.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624750140569-AnswerScoreCheck.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624750140569-AnswerScoreCheck.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AnswerScoreCheck1624750140568 implements MigrationInterface {\n  name = 'AnswerScoreCheck1624750140568';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query('ALTER TABLE `answer` DROP COLUMN `score`');\n    await queryRunner.query(\n      'ALTER TABLE `answer` ADD `score` tinyint NULL CHECK (`score` IS NULL OR `score` BETWEEN 1 AND 5)',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query('ALTER TABLE `answer` DROP COLUMN `score`');\n    await queryRunner.query('ALTER TABLE `answer` ADD `score` int NULL');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnswerService.html":{"url":"injectables/AnswerService.html","title":"injectable - AnswerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AnswerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/answer.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createBatch\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(answerRepository: AnswerRepository, answerGradeRepository: AnswerGradeRepository, questionService: QuestionService, examAgreementService: ExamAgreementService)\n                    \n                \n                        \n                            \n                                Defined in src/answer/answer.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        answerRepository\n                                                  \n                                                        \n                                                                        AnswerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        answerGradeRepository\n                                                  \n                                                        \n                                                                        AnswerGradeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examAgreementService\n                                                  \n                                                        \n                                                                        ExamAgreementService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createBatch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createBatch(createAnswerDtos: CreateAnswerDto[], user: BatchUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAnswerDtos\n                                    \n                                            CreateAnswerDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                BatchUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/answer/answer.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateAnswerDto: UpdateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/answer/answer.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAnswerDto\n                                    \n                                                UpdateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { ExamAgreementService } from 'src/exam/services/exam-agreement.service';\nimport { Question } from 'src/question-group/entities/question.entity';\nimport { QuestionService } from 'src/question-group/services/question.service';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\nimport { UpdateAnswerDto } from './dto/update-answer.dto';\nimport { Answer } from './entities/answer.entity';\nimport { AnswerType } from './enums/answer-type.enum';\nimport { BatchUser } from './interfaces/batch-user.interface';\nimport { AnswerGradeRepository } from './repositories/answer-grade.repository';\nimport { AnswerRepository } from './repositories/answer.repository';\n\n@Injectable()\nexport class AnswerService {\n  constructor(\n    @InjectRepository(AnswerRepository)\n    private readonly answerRepository: AnswerRepository,\n    @InjectRepository(AnswerGradeRepository)\n    private readonly answerGradeRepository: AnswerGradeRepository,\n    private readonly questionService: QuestionService,\n    private readonly examAgreementService: ExamAgreementService,\n  ) {}\n\n  @Transactional()\n  async createBatch(\n    createAnswerDtos: CreateAnswerDto[],\n    user: BatchUser,\n  ): Promise {\n    const examAgreement = await this.examAgreementService.findOne(user);\n    const questions = await this.questionService.findByIds(\n      createAnswerDtos.map((dto) => dto.questionId),\n    );\n    const questionMap: ReadonlyMap = new Map(\n      questions.map((question) => [question.id, question]),\n    );\n\n    await this.answerRepository.delete({ examAgreement });\n\n    const answers = await Promise.all(\n      createAnswerDtos.map(async (answerDto) => {\n        if (!questionMap.get(answerDto.questionId)) {\n          throw new NotFoundException(answerDto, 'Question not found');\n        }\n\n        const createDto = { ...answerDto, examAgreement };\n\n        if (answerDto.type === AnswerType.ANSWER_GRADE) {\n          return this.answerGradeRepository.save(\n            this.answerGradeRepository.create(createDto),\n          );\n        }\n\n        return this.answerRepository.save(\n          this.answerRepository.create(createDto),\n        );\n      }),\n    );\n\n    await this.examAgreementService.finishExam(examAgreement);\n\n    return answers;\n  }\n\n  findAll() {\n    return this.answerRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const answer = await this.answerRepository.findOne(id);\n    if (!answer) {\n      throw new NotFoundException({ id });\n    }\n    return answer;\n  }\n\n  @Transactional()\n  async update(id: number, updateAnswerDto: UpdateAnswerDto): Promise {\n    let answer = await this.findOne(id);\n    answer = this.answerRepository.merge(answer, updateAnswerDto);\n\n    return this.answerRepository.save(answer);\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const affected: SoftDeleteResult = await this.answerRepository.softDelete(\n      id,\n    );\n\n    if (!affected.raw.affectedRows) {\n      throw new NotFoundException({ id });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ping\n                            \n                            \n                                pong\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ping\n                        \n                        \n                    \n                \n            \n            \n                \nping()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in src/controllers/app.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pong\n                        \n                        \n                    \n                \n            \n            \n                \npong()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('health')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/controllers/app.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, Post } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get('health')\n  ping(): string {\n    return 'Healthy';\n  }\n\n  @Post('health')\n  @HttpCode(200)\n  pong() {\n    return \"Uh\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnswerModule\n\nAnswerModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnswerModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nExportationModule\n\nExportationModule\n\nAppModule -->\n\nExportationModule->AppModule\n\n\n\n\n\nInfraModule\n\nInfraModule\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnswerModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            AuxiliaryModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            ExamModule\n                        \n                        \n                            ExportationModule\n                        \n                        \n                            InfraModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            QuestionGroupModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { configs, databaseConfigKey } from './config';\n\nimport { LoggerModule } from './logger/logger.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './user/user.module';\nimport { ExamModule } from './exam/exam.module';\nimport { QuestionGroupModule } from './question-group/question-group.module';\nimport { AnswerModule } from './answer/answer.module';\nimport { CoreModule } from './core/core.module';\nimport { AuxiliaryModule } from './auxiliary/auxiliary.module';\nimport { InfraModule } from './infra/infra.module';\nimport { AppController } from './controllers/app.controller';\nimport { ExportationModule } from './exportation/exportation.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ load: configs }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(databaseConfigKey)!,\n      inject: [ConfigService],\n    }),\n    CoreModule,\n    LoggerModule,\n    AuthModule,\n    UserModule,\n    ExamModule,\n    QuestionGroupModule,\n    AnswerModule,\n    AuxiliaryModule,\n    InfraModule,\n    ExportationModule,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/entities/auth.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity } from 'typeorm';\n\n@Entity('auth')\nexport class Auth extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  login: string;\n\n  @Column({ type: 'varchar' })\n  password: string;\n\n  @Column({ type: 'varchar' })\n  salt: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth1619445806509.html":{"url":"classes/Auth1619445806509.html","title":"class - Auth1619445806509","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth1619445806509\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1619445806509-Auth.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auth1619445806509'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1619445806509-Auth.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1619445806509-Auth.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Auth1619445806509 implements MigrationInterface {\n  name = 'Auth1619445806509';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'CREATE TABLE `auth` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `login` varchar(255) NOT NULL, `password` varchar(255) NOT NULL, `salt` varchar(255) NOT NULL, UNIQUE INDEX `IDX_952e252e7470ff78b18a9ec786` (`login`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      \"CREATE TABLE `user` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `enrollment` varchar(255) NOT NULL, `cpf` varchar(255) NOT NULL, `type` varchar(255) NOT NULL, `role` enum ('manager', 'admin', 'regular') NOT NULL DEFAULT 'regular', UNIQUE INDEX `IDX_914f18c8fbe52b10a6b276bc0c` (`enrollment`), UNIQUE INDEX `IDX_a6235b5ef0939d8deaad755fc8` (`cpf`), INDEX `IDX_31ef2b4d30675d0c15056b7f6e` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_a6235b5ef0939d8deaad755fc8` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_914f18c8fbe52b10a6b276bc0c` ON `user`',\n    );\n    await queryRunner.query('DROP TABLE `user`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_952e252e7470ff78b18a9ec786` ON `auth`',\n    );\n    await queryRunner.query('DROP TABLE `auth`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/auth/controllers/auth.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthService } from '../auth.service';\nimport { LoginDto } from '../dtos/login.dto';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  login(@Body() loginDto: LoginDto): Promise {\n    return this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/auth.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AuthDto {\n  @IsString()\n  @IsNotEmpty()\n  login: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nCaslModule\n\nCaslModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtGuard\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            CaslModule\n                        \n                        \n                            JwtGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserModule } from '../user/user.module';\nimport { jwtConfigKey } from '../config';\n\nimport { CaslModule } from './casl/casl.module';\n\nimport { AuthService } from './auth.service';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { JwtGuard } from './guards/jwt.guard';\nimport { AuthController } from './controllers/auth.controller';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AuthRepository]),\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get(jwtConfigKey)!,\n      inject: [ConfigService],\n    }),\n    UserModule,\n    CaslModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtGuard, JwtStrategy],\n  exports: [AuthService, JwtGuard, CaslModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthRepository.html":{"url":"classes/AuthRepository.html","title":"class - AuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/repositories/auth.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Auth } from '../entities/auth.entity';\n\n@EntityRepository(Auth)\nexport class AuthRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuth\n                            \n                            \n                                findAuth\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                mustFindAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authRepository: AuthRepository, jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        AuthRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAuth(createAuthDto: CreateAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAuthDto\n                                    \n                                                CreateAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAuth\n                        \n                        \n                    \n                \n            \n            \n                \nfindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindAuth(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport bcrypt = require('bcryptjs');\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { UserService } from '../user/user.service';\n\nimport { LoginDto } from './dtos/login.dto';\nimport { Auth } from './entities/auth.entity';\nimport { AuthRepository } from './repositories/auth.repository';\nimport { CreateAuthDto } from './dtos/create-auth.dto';\nimport { AuthDto } from './dtos/auth.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(AuthRepository)\n    private readonly authRepository: AuthRepository,\n    private readonly jwtService: JwtService,\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  findAuth(authDto: AuthDto): Promise {\n    return this.authRepository.findOne({ ...authDto });\n  }\n\n  async mustFindAuth(authDto: AuthDto): Promise {\n    const auth = await this.findAuth({ login: authDto.login });\n    if (!auth) {\n      throw new NotFoundException(authDto);\n    }\n\n    return auth;\n  }\n\n  async login(loginDto: LoginDto): Promise {\n    const auth = await this.mustFindAuth(loginDto);\n\n    const match = await bcrypt.compare(loginDto.password, auth.password);\n    if (!match) {\n      throw new UnauthorizedException(loginDto);\n    }\n\n    const user = await this.userService.mustFindUser({\n      enrollment: loginDto.login,\n    });\n    const accessToken = await this.jwtService.signAsync({\n      uid: user.enrollment,\n      type: user.type,\n    });\n\n    return accessToken;\n  }\n\n  @Transactional()\n  async createAuth(createAuthDto: CreateAuthDto): Promise {\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(createAuthDto.password, salt);\n\n    await this.authRepository.save({\n      login: createAuthDto.login,\n      salt,\n      password,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auxiliary1620477175799.html":{"url":"classes/Auxiliary1620477175799.html","title":"class - Auxiliary1620477175799","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auxiliary1620477175799\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477175799-Auxiliary.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auxiliary1620477175799'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477175799-Auxiliary.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Auxiliary1620477175799 implements MigrationInterface {\n  name = 'Auxiliary1620477175799';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"CREATE TABLE `exam` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `text` text NOT NULL, `description` text NOT NULL, `started_at` datetime NOT NULL, `ended_at` datetime NOT NULL, `allow_anonymous` tinyint NOT NULL DEFAULT 0, `status` enum ('active', 'inactive') NOT NULL, `period_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n    await queryRunner.query(\n      'CREATE TABLE `period` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `name` varchar(255) NULL, `stated_at` datetime NOT NULL, `ended_at` datetime NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `course` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, UNIQUE INDEX `IDX_5cf4963ae12285cda6432d5a3a` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `subject` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `code` varchar(255) NOT NULL, `title` varchar(255) NOT NULL, `code_id` int NOT NULL, `course_id` int NULL, UNIQUE INDEX `IDX_92374adc6b583e8cf659977e48` (`code`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `subject_id` int NULL, `period_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'CREATE TABLE `exam_agreement` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `uuid` varchar(255) NOT NULL, `anonymous` tinyint NOT NULL, `user_id` int NOT NULL, UNIQUE INDEX `IDX_2b38bb607ef3e86920e9bd0163` (`uuid`), PRIMARY KEY (`id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD `personal` tinyint NOT NULL DEFAULT 0',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD `exam_id` int NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL DEFAULT 0',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` ADD CONSTRAINT `FK_1d110bd5138b275a2ea2944e290` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP FOREIGN KEY `FK_1d110bd5138b275a2ea2944e290`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` CHANGE `class` `class` tinyint NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `period_id`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `status`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `allow_anonymous`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `ended_at`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `started_at`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `description`');\n    await queryRunner.query('ALTER TABLE `exam` DROP COLUMN `text`');\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `exam_id`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `personal`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_2b38bb607ef3e86920e9bd0163` ON `exam_agreement`',\n    );\n    await queryRunner.query('DROP TABLE `exam_agreement`');\n    await queryRunner.query('DROP TABLE `grade`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_92374adc6b583e8cf659977e48` ON `subject`',\n    );\n    await queryRunner.query('DROP TABLE `subject`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_5cf4963ae12285cda6432d5a3a` ON `course`',\n    );\n    await queryRunner.query('DROP TABLE `course`');\n    await queryRunner.query('DROP TABLE `period`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auxiliary1624416663574.html":{"url":"classes/Auxiliary1624416663574.html","title":"class - Auxiliary1624416663574","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auxiliary1624416663574\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663574-Auxiliary.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Auxiliary1624416663574'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663574-Auxiliary.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Auxiliary1624416663574 implements MigrationInterface {\n    name = 'Auxiliary1624416663574'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `period` CHANGE `stated_at` `started_at` datetime NOT NULL\");\n        await queryRunner.query(\"CREATE TABLE `question_group_grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL DEFAULT 0, `personal` tinyint NOT NULL DEFAULT 0, `position` int NOT NULL DEFAULT '0', `exam_id` int NULL, INDEX `IX_question_group_position` (`position`), PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `professor_grade` (`user_id` int NOT NULL, `grade_id` int NOT NULL, INDEX `IDX_f2d35d0b9823628374f51931dd` (`user_id`), INDEX `IDX_df58a2a413f5647f6411002cb2` (`grade_id`), PRIMARY KEY (`user_id`, `grade_id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `student_grade` (`user_id` int NOT NULL, `grade_id` int NOT NULL, INDEX `IDX_7540599d89cb2b6e17cc56d517` (`user_id`), INDEX `IDX_26862c959c4ecfc8f1b4a1a055` (`grade_id`), PRIMARY KEY (`user_id`, `grade_id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP COLUMN `code_id`\");\n        await queryRunner.query(\"ALTER TABLE `exam_agreement` ADD `status` enum ('started', 'finished') NOT NULL DEFAULT 'started'\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`\");\n        await queryRunner.query(\"ALTER TABLE `subject` CHANGE `course_id` `course_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `subject_id` `subject_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `period_id` `period_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `question_group_grade` ADD CONSTRAINT `FK_ba86f32978b67a878005c5af78a` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` ADD CONSTRAINT `FK_f2d35d0b9823628374f51931ddd` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` ADD CONSTRAINT `FK_df58a2a413f5647f6411002cb28` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` ADD CONSTRAINT `FK_7540599d89cb2b6e17cc56d5170` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` ADD CONSTRAINT `FK_26862c959c4ecfc8f1b4a1a055c` FOREIGN KEY (`grade_id`) REFERENCES `grade`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `student_grade` DROP FOREIGN KEY `FK_26862c959c4ecfc8f1b4a1a055c`\");\n        await queryRunner.query(\"ALTER TABLE `student_grade` DROP FOREIGN KEY `FK_7540599d89cb2b6e17cc56d5170`\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` DROP FOREIGN KEY `FK_df58a2a413f5647f6411002cb28`\");\n        await queryRunner.query(\"ALTER TABLE `professor_grade` DROP FOREIGN KEY `FK_f2d35d0b9823628374f51931ddd`\");\n        await queryRunner.query(\"ALTER TABLE `question_group_grade` DROP FOREIGN KEY `FK_ba86f32978b67a878005c5af78a`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_d35fb46683694975ba85bcd804e`\");\n        await queryRunner.query(\"ALTER TABLE `grade` DROP FOREIGN KEY `FK_b472107b61171823120f069fd50`\");\n        await queryRunner.query(\"ALTER TABLE `subject` DROP FOREIGN KEY `FK_b9db72ddc93f196bf9d79132171`\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `period_id` `period_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` CHANGE `subject_id` `subject_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_d35fb46683694975ba85bcd804e` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `grade` ADD CONSTRAINT `FK_b472107b61171823120f069fd50` FOREIGN KEY (`subject_id`) REFERENCES `subject`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `subject` CHANGE `course_id` `course_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD CONSTRAINT `FK_b9db72ddc93f196bf9d79132171` FOREIGN KEY (`course_id`) REFERENCES `course`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n        await queryRunner.query(\"ALTER TABLE `exam_agreement` DROP COLUMN `status`\");\n        await queryRunner.query(\"ALTER TABLE `subject` ADD `code_id` int NOT NULL\");\n        await queryRunner.query(\"DROP INDEX `IDX_26862c959c4ecfc8f1b4a1a055` ON `student_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_7540599d89cb2b6e17cc56d517` ON `student_grade`\");\n        await queryRunner.query(\"DROP TABLE `student_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_df58a2a413f5647f6411002cb2` ON `professor_grade`\");\n        await queryRunner.query(\"DROP INDEX `IDX_f2d35d0b9823628374f51931dd` ON `professor_grade`\");\n        await queryRunner.query(\"DROP TABLE `professor_grade`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_group_position` ON `question_group_grade`\");\n        await queryRunner.query(\"DROP TABLE `question_group_grade`\");\n        await queryRunner.query(\"ALTER TABLE `period` CHANGE `started_at` `stated_at` datetime NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuxiliaryModule.html":{"url":"modules/AuxiliaryModule.html","title":"module - AuxiliaryModule","body":"\n                   \n\n\n\n\n    Modules\n    AuxiliaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\n\nGradeService \n\nGradeService \n\n\n\nPeriodService \n\nPeriodService \n\n\n\nProfessorService \n\nProfessorService \n\n\n\nStudentService \n\nStudentService \n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nGradeService  -->\n\nAuxiliaryModule->GradeService \n\n\n\nPeriodService  -->\n\nAuxiliaryModule->PeriodService \n\n\n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nGradeService\n\nGradeService\n\nAuxiliaryModule -->\n\nGradeService->AuxiliaryModule\n\n\n\n\n\nPeriodService\n\nPeriodService\n\nAuxiliaryModule -->\n\nPeriodService->AuxiliaryModule\n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auxiliary/auxiliary.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GradeService\n                        \n                        \n                            PeriodService\n                        \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GradeService\n                        \n                        \n                            PeriodService\n                        \n                        \n                            ProfessorService\n                        \n                        \n                            StudentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { GradeRepository } from './repositories/grade.repository';\nimport { PeriodRepository } from './repositories/period.repository';\nimport { ProfessorRepository } from './repositories/professor.repository';\nimport { StudentRepository } from './repositories/student.repository';\n\nimport { GradeService } from './services/grade.service';\nimport { PeriodService } from './services/period.service';\nimport { ProfessorService } from './services/professor.service';\nimport { StudentService } from './services/student.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      StudentRepository,\n      ProfessorRepository,\n      GradeRepository,\n      PeriodRepository,\n    ]),\n  ],\n  providers: [StudentService, ProfessorService, GradeService, PeriodService],\n  exports: [StudentService, ProfessorService, GradeService, PeriodService],\n})\nexport class AuxiliaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BatchUser.html":{"url":"interfaces/BatchUser.html","title":"interface - BatchUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BatchUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/interfaces/batch-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        examId\n                                \n                                \n                                        userId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        examId\n                                    \n                                \n                                \n                                    \n                                        examId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BatchUser {\n  userId: number;\n  examId: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/casl/factories/casl-ability.factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createForUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/casl/factories/casl-ability.factory.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { Answer } from '../../../answer/entities/answer.entity';\nimport { Exam } from '../../../exam/entities/exam.entity';\nimport { ExamAgreement } from '../../../exam/entities/exam-agreement.entity';\nimport { User } from '../../../user/entities/user.entity';\nimport { CaslAction as Action } from '../enums/casl-action.enum';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { UserRole } from 'src/user/enum/user-role.enum';\n\ntype CaslSubjects =\n  | InferSubjects\n  | 'all';\n\ntype AppAbility = Ability;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder(\n      Ability as AbilityClass,\n    );\n\n    switch (user.role) {\n      case UserRole.ADMIN:\n        can(Action.MANAGE, 'all');\n        break;\n      case UserRole.MANAGER:\n        can(Action.READ, 'all');\n        can(Action.MANAGE, QuestionGroup);\n        break;\n      default:\n        can(Action.READ, User);\n        can(Action.READ, ExamAgreement, { userId: user.id });\n    }\n\n    // User\n    can(Action.UPDATE, User, { id: user.id });\n\n    can(Action.MANAGE, Answer, {});\n\n    // ExamAgreement\n    cannot(Action.DELETE, ExamAgreement, { uniqueCode: undefined });\n\n    const examAgreementNotFinished = {\n      userId: user.id,\n      uuid: undefined,\n    };\n\n    can(Action.MANAGE, ExamAgreement, examAgreementNotFinished);\n\n    // Answer\n    can(Action.MANAGE, Answer, {\n      examAgreement: examAgreementNotFinished,\n    });\n\n    // Answer Grade\n\n    return build({\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/casl/casl.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './factories/casl-ability.factory';\n\n@Module({ providers: [CaslAbilityFactory], exports: [CaslAbilityFactory] })\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CopyQuestionGroupDto.html":{"url":"classes/CopyQuestionGroupDto.html","title":"class - CopyQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CopyQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/copy-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/copy-question-group.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/copy-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPositive } from 'class-validator';\n\nexport class CopyQuestionGroupDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsPositive()\n  examId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_CoreModule_exports\n\n\n\n\nHttpExceptionFilter \n\nHttpExceptionFilter \n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\n\n\nCoreModule\n\nCoreModule\n\nHttpExceptionFilter  -->\n\nCoreModule->HttpExceptionFilter \n\n\n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HttpExceptionFilter\n                        \n                        \n                            PayloadInterceptor\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { HttpExceptionFilter } from './filters/http-exception.filter';\nimport { PayloadInterceptor } from './interceptors/payload.interceptor';\n\n@Global()\n@Module({\n  imports: [ConfigModule],\n  providers: [PayloadInterceptor, HttpExceptionFilter],\n  exports: [PayloadInterceptor, HttpExceptionFilter],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Course.html":{"url":"classes/Course.html","title":"class - Course","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Course\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/course.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                subjects\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subjects\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/course.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('course')\nexport class Course extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @OneToMany(() => Subject, (subject) => subject.course)\n  subjects: Subject[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnswerDto.html":{"url":"classes/CreateAnswerDto.html","title":"class - CreateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/create-answer.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                gradeId\n                            \n                            \n                                questionId\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            gradeId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()@ValidateIf(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Min(1)@Max(5)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnswerType\n\n                        \n                    \n                    \n                        \n                            Default value : AnswerType.ANSWER\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsEnum(AnswerType)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/answer/dto/create-answer.dto.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEnum,\n  IsOptional,\n  IsPositive,\n  Max,\n  Min,\n  ValidateIf,\n} from 'class-validator';\nimport { AnswerType } from '../enums/answer-type.enum';\n\nexport class CreateAnswerDto {\n  @IsOptional()\n  @Min(1)\n  @Max(5)\n  score?: number;\n\n  @IsPositive()\n  questionId: number;\n\n  @IsOptional()\n  @IsEnum(AnswerType)\n  type: AnswerType = AnswerType.ANSWER;\n\n  @IsPositive()\n  @ValidateIf((o: CreateAnswerDto) => o.type === AnswerType.ANSWER_GRADE)\n  gradeId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/create-auth.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        LoginDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         LoginDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         LoginDto:8\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { LoginDto } from './login.dto';\n\nexport class CreateAuthDto extends LoginDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamAgreementDto.html":{"url":"classes/CreateExamAgreementDto.html","title":"class - CreateExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                anonymous\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam-agreement.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsBoolean, IsOptional } from 'class-validator';\nimport { ExamAgreementDto } from './exam-agreement.dto';\n\nexport class CreateExamAgreementDto extends OmitType(ExamAgreementDto, [\n  'userId',\n]) {\n  @IsOptional()\n  @IsBoolean()\n  @Type(() => Boolean)\n  anonymous?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamDto.html":{"url":"classes/CreateExamDto.html","title":"class - CreateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                startedAt\n                            \n                            \n                                    Optional\n                                targets\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsArray()@IsEnum(ExamTargetType, {each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/create-exam.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\n\nexport class CreateExamDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsDate()\n  @Type(() => Date)\n  startedAt: Date;\n\n  @IsDate()\n  @Type(() => Date)\n  endedAt: Date;\n\n  @IsOptional()\n  @IsBoolean()\n  allowAnonymous?: boolean;\n\n  @IsOptional()\n  @IsArray()\n  @IsEnum(ExamTargetType, {each: true})\n  targets?: ExamTargetType[];\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestion.html":{"url":"classes/CreateQuestion.html","title":"class - CreateQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-questions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-questions.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsDefined,\n  IsOptional,\n  IsPositive,\n  ValidateNested,\n} from 'class-validator';\nimport { CreateQuestionDto } from './create-question.dto';\n\nclass CreateQuestion extends OmitType(CreateQuestionDto, ['groupId']) {\n  @IsOptional()\n  @IsPositive()\n  id?: number;\n}\n\nexport class CreateQuestionsDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateQuestion)\n  @IsDefined({ each: true })\n  @ArrayMinSize(1)\n  questions: CreateQuestion[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionDto.html":{"url":"classes/CreateQuestionDto.html","title":"class - CreateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    Optional\n                                required\n                            \n                            \n                                statement\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsUrl()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: Boolean, title: 'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão'})@IsBoolean()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question.dto.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class CreateQuestionDto {\n  @IsString()\n  @IsNotEmpty()\n  statement: string;\n\n  @IsOptional()\n  @IsUrl()\n  imageUrl?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  imageAlt?: string;\n\n  @ApiProperty({\n    type: Boolean,\n    title:\n      'Questão pode não ser obrigatória. Se essa propriedade não for fornecida, ela é verdadeira por padrão',\n  })\n  @IsBoolean()\n  @IsOptional()\n  required?: boolean;\n\n  @IsPositive()\n  groupId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionGroupDto.html":{"url":"classes/CreateQuestionGroupDto.html","title":"class - CreateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                class\n                            \n                            \n                                    Optional\n                                examId\n                            \n                            \n                                    Optional\n                                personal\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-question-group.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n} from 'class-validator';\n\nexport class CreateQuestionGroupDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsOptional()\n  @IsBoolean()\n  class?: boolean;\n\n  @IsOptional()\n  @IsBoolean()\n  personal?: boolean;\n\n  @IsOptional()\n  @IsPositive()\n  examId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionsDto.html":{"url":"classes/CreateQuestionsDto.html","title":"class - CreateQuestionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/create-questions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                questions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CreateQuestion[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ValidateNested({each: true})@Type(undefined)@IsDefined({each: true})@ArrayMinSize(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/create-questions.dto.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsDefined,\n  IsOptional,\n  IsPositive,\n  ValidateNested,\n} from 'class-validator';\nimport { CreateQuestionDto } from './create-question.dto';\n\nclass CreateQuestion extends OmitType(CreateQuestionDto, ['groupId']) {\n  @IsOptional()\n  @IsPositive()\n  id?: number;\n}\n\nexport class CreateQuestionsDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateQuestion)\n  @IsDefined({ each: true })\n  @ArrayMinSize(1)\n  questions: CreateQuestion[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                enrollment\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsCPF()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnrollment()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserRole)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(UserType)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/create-user.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsEnum, IsOptional } from 'class-validator';\nimport { IsCPF } from 'brazilian-class-validator';\nimport { PickType } from '@nestjs/swagger';\n\nimport { IsEnrollment } from '../../core/decorators/is-enrollment.decorator';\nimport { UserType } from '../enum/user-type.enum';\nimport { CreateAuthDto } from '../../auth/dtos/create-auth.dto';\nimport { UserRole } from '../enum/user-role.enum';\n\nexport class CreateUserDto extends PickType(CreateAuthDto, ['password']) {\n  @IsCPF()\n  cpf: string;\n\n  @IsEnrollment()\n  enrollment: string;\n\n  @IsEnum(UserType)\n  type: UserType;\n\n  @IsEnum(UserRole)\n  role: UserRole;\n\n  @IsOptional()\n  @IsEmail()\n  email?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CsvLine.html":{"url":"interfaces/CsvLine.html","title":"interface - CsvLine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CsvLine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/interfaces/csv-line.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Código Único\n                                \n                                \n                                            Optional\n                                        Disciplina\n                                \n                                \n                                        Grupo de Questões\n                                \n                                \n                                        Matrícula\n                                \n                                \n                                        Nota\n                                \n                                \n                                            Optional\n                                        Observação\n                                \n                                \n                                        Pessoal\n                                \n                                \n                                        Questão\n                                \n                                \n                                        Tipo de Usuário\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Código Único\n                                    \n                                \n                                \n                                    \n                                        Código Único:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Disciplina\n                                    \n                                \n                                \n                                    \n                                        Disciplina:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Grupo de Questões\n                                    \n                                \n                                \n                                    \n                                        Grupo de Questões:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Matrícula\n                                    \n                                \n                                \n                                    \n                                        Matrícula:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Nota\n                                    \n                                \n                                \n                                    \n                                        Nota:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Observação\n                                    \n                                \n                                \n                                    \n                                        Observação:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Pessoal\n                                    \n                                \n                                \n                                    \n                                        Pessoal:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Questão\n                                    \n                                \n                                \n                                    \n                                        Questão:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Tipo de Usuário\n                                    \n                                \n                                \n                                    \n                                        Tipo de Usuário:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CsvLine {\n  'Grupo de Questões': string;\n  'Tipo de Usuário': string;\n  Disciplina?: string;\n  Pessoal: string;\n  Questão: string;\n  Matrícula: string;\n  Nota: string;\n  'Código Único': string;\n  Observação?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CsvLineRow.html":{"url":"interfaces/CsvLineRow.html","title":"interface - CsvLineRow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CsvLineRow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/interfaces/csv-line-row.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        anonymous\n                                \n                                \n                                        group_id\n                                \n                                \n                                        group_title\n                                \n                                \n                                        is_class\n                                \n                                \n                                        is_personal\n                                \n                                \n                                            Optional\n                                        observation\n                                \n                                \n                                        question_id\n                                \n                                \n                                        question_statement\n                                \n                                \n                                            Optional\n                                        score\n                                \n                                \n                                            Optional\n                                        subject_title\n                                \n                                \n                                        unique_code\n                                \n                                \n                                        user_enrollment\n                                \n                                \n                                        user_type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        anonymous\n                                    \n                                \n                                \n                                    \n                                        anonymous:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group_id\n                                    \n                                \n                                \n                                    \n                                        group_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group_title\n                                    \n                                \n                                \n                                    \n                                        group_title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        is_class\n                                    \n                                \n                                \n                                    \n                                        is_class:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        is_personal\n                                    \n                                \n                                \n                                    \n                                        is_personal:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        observation\n                                    \n                                \n                                \n                                    \n                                        observation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        question_id\n                                    \n                                \n                                \n                                    \n                                        question_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        question_statement\n                                    \n                                \n                                \n                                    \n                                        question_statement:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        score\n                                    \n                                \n                                \n                                    \n                                        score:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject_title\n                                    \n                                \n                                \n                                    \n                                        subject_title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unique_code\n                                    \n                                \n                                \n                                    \n                                        unique_code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_enrollment\n                                    \n                                \n                                \n                                    \n                                        user_enrollment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_type\n                                    \n                                \n                                \n                                    \n                                        user_type:     \"Professor\" | \"Student\" | \"User\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Professor\" | \"Student\" | \"User\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CsvLineRow {\n  score?: string;\n  group_id: number;\n  group_title: string;\n  is_class: boolean;\n  is_personal: boolean;\n  question_id: number;\n  question_statement: string;\n  user_enrollment: string;\n  user_type: 'Professor' | 'Student' | 'User';\n  anonymous: boolean;\n  subject_title?: string;\n  unique_code: string;\n  observation?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger, Injectable, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class CustomLogger extends Logger {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam.html":{"url":"classes/Exam.html","title":"class - Exam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                agreements\n                            \n                            \n                                allowAnonymous\n                            \n                            \n                                description\n                            \n                            \n                                endedAt\n                            \n                            \n                                groups\n                            \n                            \n                                period\n                            \n                            \n                                periodId\n                            \n                            \n                                startedAt\n                            \n                            \n                                status\n                            \n                            \n                                    Optional\n                                targets\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    start\n                                \n                                \n                                    end\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            agreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allowAnonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groups\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     QuestionGroup[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            periodId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamStatus})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamTarget[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/exam/entities/exam.entity.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        start\n                    \n                \n\n                \n                    \n                        getstart()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/entities/exam.entity.ts:58\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        end\n                    \n                \n\n                \n                    \n                        getend()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/entities/exam.entity.ts:62\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Period } from 'src/auxiliary/entities/period.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport {\n  AfterLoad,\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { ExamStatus } from '../enums/exam-status.enum';\nimport { ExamAgreement } from './exam-agreement.entity';\nimport { ExamTarget } from './exam-target.entity';\n\n@Entity('exam')\nexport class Exam extends FFEntity {\n  @Column({ type: 'text' })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'datetime' })\n  startedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @Column({ type: 'bool', default: false })\n  allowAnonymous: boolean;\n\n  @Column({ type: 'enum', enum: ExamStatus })\n  status: ExamStatus;\n\n  @Column({ type: 'int' })\n  periodId: number;\n\n  @ManyToMany(() => ExamTarget)\n  @JoinTable()\n  targets?: ExamTarget[];\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => QuestionGroup, (group) => group.exam)\n  groups: QuestionGroup[];\n\n  @OneToMany(() => ExamAgreement, (agreement) => agreement.exam)\n  agreements: ExamAgreement[];\n\n  @AfterLoad()\n  sortItems() {\n    this.groups = this.groups?.sort((a, b) => a.position - b.position) ?? [];\n  }\n\n  get start(): Date {\n    return this.startedAt;\n  }\n\n  get end(): Date {\n    return this.endedAt;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam1620478273991.html":{"url":"classes/Exam1620478273991.html","title":"class - Exam1620478273991","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam1620478273991\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620478273991-Exam.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam1620478273991'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620478273991-Exam.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620478273991-Exam.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Exam1620478273991 implements MigrationInterface {\n    name = 'Exam1620478273991'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL DEFAULT 0\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `allow_anonymous` `allow_anonymous` tinyint NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreement.html":{"url":"classes/ExamAgreement.html","title":"class - ExamAgreement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam-agreement.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anonymous\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                    Optional\n                                observation\n                            \n                            \n                                status\n                            \n                            \n                                uniqueCode\n                            \n                            \n                                    Optional\n                                uniqueCodeSendedAt\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _generateUniqueCode\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasFinishedExam\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'boolean', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            observation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamAgreementStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamAgreementStatus, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uniqueCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true, length: 36})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            uniqueCodeSendedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime', nullable: true})@Exclude()@ApiHideProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            _generateUniqueCode\n                        \n                        \n                    \n                \n            \n            \n                \n_generateUniqueCode()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()\n                \n            \n\n            \n                \n                    Defined in src/exam/entities/exam-agreement.entity.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        hasFinishedExam\n                    \n                \n\n                \n                    \n                        gethasFinishedExam()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/entities/exam-agreement.entity.ts:46\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { FFEntity } from '../../core/entities/ff.entity';\nimport { BeforeInsert, Column, Entity, ManyToOne } from 'typeorm';\nimport { User } from 'src/user/entities/user.entity';\nimport { Exam } from './exam.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { Exclude, Expose } from 'class-transformer';\nimport { ApiHideProperty } from '@nestjs/swagger';\nimport { padStart } from 'lodash';\n\n@Entity('exam_agreement')\nexport class ExamAgreement extends FFEntity {\n  @Column({ unique: true, length: 36 })\n  uniqueCode: string;\n\n  @Column({ type: 'datetime', nullable: true })\n  @Exclude()\n  @ApiHideProperty()\n  uniqueCodeSendedAt?: Date;\n\n  @Column({ type: 'boolean', default: false })\n  anonymous: boolean;\n\n  @Column({ type: 'text', nullable: true })\n  observation?: string;\n\n  @Column({\n    type: 'enum',\n    enum: ExamAgreementStatus,\n    default: ExamAgreementStatus.STARTED,\n  })\n  status: ExamAgreementStatus;\n\n  @Column({ type: 'int' })\n  userId: number;\n\n  @Column({ type: 'int' })\n  examId: number;\n\n  @ManyToOne(() => User)\n  user: User;\n\n  @ManyToOne(() => Exam)\n  exam: Exam;\n\n  @Expose()\n  get hasFinishedExam(): boolean {\n    return this.status === ExamAgreementStatus.FINISHED;\n  }\n\n  @BeforeInsert()\n  _generateUniqueCode() {\n    this.uniqueCode = padStart(`${Math.round(Math.random() * 6379)}`, 8, '0');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreement1622332886234.html":{"url":"classes/ExamAgreement1622332886234.html","title":"class - ExamAgreement1622332886234","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreement1622332886234\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622332886234-ExamAgreement.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreement1622332886234'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622332886234-ExamAgreement.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreement1622332886234 implements MigrationInterface {\n  name = 'ExamAgreement1622332886234';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD `exam_id` int NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `uuid` `uuid` varchar(36) NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD CONSTRAINT `FK_20bfb4e7c97aa20956be86c6beb` FOREIGN KEY (`user_id`) REFERENCES `user`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD CONSTRAINT `FK_7bdc7fbb138980e5471e2a19366` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP FOREIGN KEY `FK_7bdc7fbb138980e5471e2a19366`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP FOREIGN KEY `FK_20bfb4e7c97aa20956be86c6beb`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `uuid` `uuid` varchar(255) NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP COLUMN `exam_id`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementAnonymousDefault1622334780336.html":{"url":"classes/ExamAgreementAnonymousDefault1622334780336.html","title":"class - ExamAgreementAnonymousDefault1622334780336","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementAnonymousDefault1622334780336\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreementAnonymousDefault1622334780336'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreementAnonymousDefault1622334780336\n  implements MigrationInterface {\n  name = 'ExamAgreementAnonymousDefault1622334780336';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `anonymous` `anonymous` tinyint NOT NULL DEFAULT 0',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `anonymous` `anonymous` tinyint NOT NULL',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamAgreementController.html":{"url":"controllers/ExamAgreementController.html","title":"controller - ExamAgreementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamAgreementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam-agreement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam-agreement\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAgreement\n                            \n                            \n                                    Async\n                                updateAgreemment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAgreement(createAgreementDto: CreateExamAgreementDto, user: ExamAgreementUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-agreement.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAgreementDto\n                                    \n                                                CreateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamAgreementUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAgreemment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAgreemment(user: ExamUser, queryDto: UpdateExamAgreementQueryDto, updateAgreementDto: UpdateExamAgreementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiOkResponse({type: ExamAgreement})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-agreement.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryDto\n                                    \n                                                UpdateExamAgreementQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAgreementDto\n                                    \n                                                UpdateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Put, Query, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { CreateExamAgreementDto } from '../dtos/create-exam-agreement.dto';\nimport {\n  UpdateExamAgreementDto,\n  UpdateExamAgreementQueryDto,\n} from '../dtos/update-exam-agreement.dto';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\nimport { ExamAgreementUser } from '../interfaces/exam-agreement-user.interface';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamAgreementService } from '../services/exam-agreement.service';\n\n@Controller('exam-agreement')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\n@ApiTags('ExamAgreement')\nexport class ExamAgreementController {\n  constructor(private readonly examAgreementService: ExamAgreementService) {}\n\n  @Post()\n  async createAgreement(\n    @Body() createAgreementDto: CreateExamAgreementDto,\n    @GetUser() user: ExamAgreementUser,\n  ): Promise {\n    return this.examAgreementService.createAgreement(createAgreementDto, user);\n  }\n\n  @Put()\n  @ApiOkResponse({ type: ExamAgreement })\n  async updateAgreemment(\n    @GetUser() user: ExamUser,\n    @Query() queryDto: UpdateExamAgreementQueryDto,\n    @Body() updateAgreementDto: UpdateExamAgreementDto,\n  ): Promise {\n    return this.examAgreementService.updateAgreement(\n      { ...queryDto, user },\n      updateAgreementDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementDto.html":{"url":"classes/ExamAgreementDto.html","title":"class - ExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/exam-agreement.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiHideProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/exam-agreement.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from '@nestjs/swagger';\nimport { IsPositive } from 'class-validator';\n\nexport class ExamAgreementDto {\n  @ApiHideProperty()\n  userId: number;\n\n  @IsPositive()\n  examId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementObservation1622417032753.html":{"url":"classes/ExamAgreementObservation1622417032753.html","title":"class - ExamAgreementObservation1622417032753","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementObservation1622417032753\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622417032753-ExamAgreementObservation.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreementObservation1622417032753'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622417032753-ExamAgreementObservation.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreementObservation1622417032753\n  implements MigrationInterface {\n  name = 'ExamAgreementObservation1622417032753';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD `observation` text NULL',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP COLUMN `observation`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementRepository.html":{"url":"classes/ExamAgreementRepository.html","title":"class - ExamAgreementRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam-agreement.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\n\n@EntityRepository(ExamAgreement)\nexport class ExamAgreementRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamAgreementService.html":{"url":"injectables/ExamAgreementService.html","title":"injectable - ExamAgreementService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamAgreementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam-agreement.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                agreementsByDateInterval\n                            \n                            \n                                    Async\n                                createAgreement\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                finishExam\n                            \n                            \n                                getByUser\n                            \n                            \n                                    Private\n                                    Async\n                                sendAgreementEmail\n                            \n                            \n                                    Async\n                                updateAgreement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamAgreementRepository, examService: ExamService, sendEmailService: SendEmailService, logger: CustomLogger)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam-agreement.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamAgreementRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examService\n                                                  \n                                                        \n                                                                        ExamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sendEmailService\n                                                  \n                                                        \n                                                                        SendEmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        CustomLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            agreementsByDateInterval\n                        \n                        \n                    \n                \n            \n            \n                \nagreementsByDateInterval(start: Date, end: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAgreement(createAgreementDto: CreateExamAgreementDto, user: ExamAgreementUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAgreementDto\n                                    \n                                                CreateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ExamAgreementUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(findDto: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            finishExam\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    finishExam(agreement: ExamAgreement)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    agreement\n                                    \n                                                ExamAgreement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetByUser(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            sendAgreementEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendAgreementEmail(email: string, agreement: ExamAgreement)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agreement\n                                    \n                                                ExamAgreement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAgreement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAgreement(queryDto: UpdateExamAgreementQueryDto, updateAgreementDto: UpdateExamAgreementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam-agreement.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryDto\n                                    \n                                                UpdateExamAgreementQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAgreementDto\n                                    \n                                                UpdateExamAgreementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SendEmailService } from 'src/infra/services/send-email.service';\nimport { CustomLogger } from 'src/logger/logger.service';\n\nimport { Between } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateExamAgreementDto } from '../dtos/create-exam-agreement.dto';\nimport {\n  UpdateExamAgreementDto,\n  UpdateExamAgreementQueryDto,\n} from '../dtos/update-exam-agreement.dto';\nimport { ExamAgreement } from '../entities/exam-agreement.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { ExamAgreementUser } from '../interfaces/exam-agreement-user.interface';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamAgreementRepository } from '../repositories/exam-agreement.repository';\nimport { ExamService } from './exam.service';\n\n@Injectable()\nexport class ExamAgreementService {\n  constructor(\n    @InjectRepository(ExamAgreementRepository)\n    private readonly repository: ExamAgreementRepository,\n    @Inject(forwardRef(() => ExamService))\n    private readonly examService: ExamService,\n    private readonly sendEmailService: SendEmailService,\n    private readonly logger: CustomLogger,\n  ) {}\n\n  @Transactional()\n  async createAgreement(\n    createAgreementDto: CreateExamAgreementDto,\n    user: ExamAgreementUser,\n  ): Promise {\n    const exam = await this.examService.findOne(createAgreementDto.examId);\n    const alreadyAgreed = await this.repository.findOne({\n      where: { exam, user },\n    });\n\n    if (alreadyAgreed) {\n      throw new ConflictException('already agreed');\n    }\n\n    const agreement = await this.repository.save(\n      this.repository.create({\n        ...createAgreementDto,\n        userId: user.id,\n      }),\n    );\n\n    if (user.email) {\n      await this.sendAgreementEmail(user.email, agreement);\n    }\n\n    return this.repository.save(agreement);\n  }\n\n  private async sendAgreementEmail(\n    email: string,\n    agreement: ExamAgreement,\n  ): Promise {\n    try {\n      await this.sendEmailService.sendAgreementEmail({\n        user: { email },\n        agreement,\n      });\n      agreement.uniqueCodeSendedAt = new Date();\n    } catch (e) {\n      this.logger.error(e);\n    }\n  }\n\n  @Transactional()\n  async updateAgreement(\n    queryDto: UpdateExamAgreementQueryDto,\n    updateAgreementDto: UpdateExamAgreementDto,\n  ): Promise {\n    const agreement = await this.repository.findOne({\n      where: {\n        examId: queryDto.examId,\n        userId: queryDto.user.id,\n      },\n    });\n\n    if (!agreement) {\n      throw new NotFoundException(queryDto);\n    }\n\n    if (agreement.hasFinishedExam) {\n      delete updateAgreementDto.anonymous;\n    }\n\n    return this.repository.save(\n      this.repository.merge(agreement, updateAgreementDto),\n    );\n  }\n\n  agreementsByDateInterval(start: Date, end: Date): Promise {\n    return this.repository.find({ where: { createdAt: Between(start, end) } });\n  }\n\n  @Transactional()\n  getByUser(user: ExamUser): Promise {\n    return this.repository.find({\n      where: { userId: user.id },\n      relations: ['exam'],\n    });\n  }\n\n  async findOne(findDto: {\n    userId: number;\n    examId: number;\n  }): Promise {\n    const agreement = await this.repository.findOne({\n      where: findDto,\n      relations: ['exam'],\n    });\n\n    if (!agreement) {\n      throw new NotFoundException(findDto);\n    }\n\n    return agreement;\n  }\n\n  @Transactional()\n  async finishExam(agreement: ExamAgreement): Promise {\n    agreement.status = ExamAgreementStatus.FINISHED;\n\n    return this.repository.save(agreement);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementUniqueCode1625001091462.html":{"url":"classes/ExamAgreementUniqueCode1625001091462.html","title":"class - ExamAgreementUniqueCode1625001091462","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementUniqueCode1625001091462\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1625001091463-ExamAgreementUniqueCode.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'GracefulUniqueCodeOnExamAgreement1625001091462'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1625001091463-ExamAgreementUniqueCode.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1625001091463-ExamAgreementUniqueCode.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1625001091463-ExamAgreementUniqueCode.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreementUniqueCode1625001091462\n  implements MigrationInterface\n{\n  name = 'GracefulUniqueCodeOnExamAgreement1625001091462';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_2b38bb607ef3e86920e9bd0163` ON `exam_agreement`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `uuid` `unique_code` varchar(36) NOT NULL',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD UNIQUE INDEX `IDX_040052dd4f7f2aa588ac15c22e` (`unique_code`)',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP INDEX `IDX_040052dd4f7f2aa588ac15c22e`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` CHANGE `unique_code` `uuid` varchar(36) NOT NULL',\n    );\n    await queryRunner.query(\n      'CREATE UNIQUE INDEX `IDX_2b38bb607ef3e86920e9bd0163` ON `exam_agreement` (`uuid`)',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html":{"url":"classes/ExamAgreementUniqueCodeSendedAt1625002603968.html","title":"class - ExamAgreementUniqueCodeSendedAt1625002603968","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAgreementUniqueCodeSendedAt1625002603968\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1625002603969-ExamAgreementUniqueCodeSendedAt.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamAgreementUniqueCodeSendedAt1625002603968'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1625002603969-ExamAgreementUniqueCodeSendedAt.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1625002603969-ExamAgreementUniqueCodeSendedAt.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1625002603969-ExamAgreementUniqueCodeSendedAt.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ExamAgreementUniqueCodeSendedAt1625002603968\n  implements MigrationInterface\n{\n  name = 'ExamAgreementUniqueCodeSendedAt1625002603968';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` ADD `unique_code_sended_at` datetime NULL',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_agreement` DROP COLUMN `unique_code_sended_at`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamAgreementUser.html":{"url":"interfaces/ExamAgreementUser.html","title":"interface - ExamAgreementUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamAgreementUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/interfaces/exam-agreement-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasGrade\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasGrade\n                        \n                        \n                    \n                \n            \n            \n                \nhasGrade()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/interfaces/exam-agreement-user.interface.ts:3\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ExamAgreementUser {\n  id: number;\n  hasGrade(): boolean;\n  email?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamController.html":{"url":"controllers/ExamController.html","title":"controller - ExamController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Exam})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@ApiOkResponse({type: ExamPersonalResult})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n} from '@nestjs/common';\nimport { ExamService } from '../services/exam.service';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { UpdateExamDto } from '../dtos/update-exam.dto';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { Exam } from '../entities/exam.entity';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamPersonalResult } from '../models/exam-personal-result.model';\n\n@Controller('exam')\n@ApiTags('Exam')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class ExamController {\n  constructor(private readonly examService: ExamService) {}\n\n  @Post()\n  @ApiOkResponse({ type: Exam })\n  async create(@Body() createExamDto: CreateExamDto): Promise {\n    return this.examService.create(createExamDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Exam] })\n  async findAll(): Promise {\n    return this.examService.findAll();\n  }\n\n  @Get('me')\n  @ApiOkResponse({ type: ExamPersonalResult })\n  async findPersonal(@GetUser() user: ExamUser): Promise {\n    return this.examService.findPersonal(user);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.examService.findOne(id);\n  }\n\n  @Put(':id')\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateExamDto: UpdateExamDto,\n  ): Promise {\n    return this.examService.update(id, updateExamDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.examService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExamModule.html":{"url":"modules/ExamModule.html","title":"module - ExamModule","body":"\n                   \n\n\n\n\n    Modules\n    ExamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_imports\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_ExamModule_exports\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\n\n\nExamModule\n\nExamModule\n\nExamModule -->\n\nAuxiliaryModule->ExamModule\n\n\n\n\n\nInfraModule\n\nInfraModule\n\nExamModule -->\n\nInfraModule->ExamModule\n\n\n\n\n\nExamAgreementService \n\nExamAgreementService \n\nExamAgreementService  -->\n\nExamModule->ExamAgreementService \n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\n\n\nExamAgreementService\n\nExamAgreementService\n\nExamModule -->\n\nExamAgreementService->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nExamTargetNodeFactory\n\nExamTargetNodeFactory\n\nExamModule -->\n\nExamTargetNodeFactory->ExamModule\n\n\n\n\n\nExamTargetService\n\nExamTargetService\n\nExamModule -->\n\nExamTargetService->ExamModule\n\n\n\n\n\nExamTargetTree\n\nExamTargetTree\n\nExamModule -->\n\nExamTargetTree->ExamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exam/exam.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExamAgreementService\n                        \n                        \n                            ExamService\n                        \n                        \n                            ExamTargetNodeFactory\n                        \n                        \n                            ExamTargetService\n                        \n                        \n                            ExamTargetTree\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExamController\n                        \n                        \n                            ExamTargetController\n                        \n                        \n                            ExamAgreementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuxiliaryModule\n                        \n                        \n                            InfraModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExamAgreementService\n                        \n                        \n                            ExamService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { ExamService } from './services/exam.service';\nimport { ExamController } from './controllers/exam.controller';\nimport { ExamRepository } from './repositories/exam.repository';\nimport { ExamTargetRepository } from './repositories/exam-target.repository';\nimport { ExamTargetService } from './services/exam-target.service';\nimport { ExamTargetController } from './controllers/exam-target.controller';\nimport { ExamAgreementService } from './services/exam-agreement.service';\nimport { ExamAgreementRepository } from './repositories/exam-agreement.repository';\nimport { ExamAgreementController } from './controllers/exam-agreement.controller';\nimport { ExamTargetTree } from './providers/exam-target-tree.provider';\nimport { ExamTargetNodeFactory } from './factories/exam-target-node.factory';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\nimport { InfraModule } from 'src/infra/infra.module';\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      ExamRepository,\n      ExamTargetRepository,\n      ExamAgreementRepository,\n    ]),\n    AuxiliaryModule,\n    InfraModule,\n  ],\n  controllers: [ExamController, ExamTargetController, ExamAgreementController],\n  providers: [\n    ExamService,\n    ExamTargetService,\n    ExamAgreementService,\n    ExamTargetTree,\n    ExamTargetNodeFactory,\n  ],\n  exports: [ExamService, ExamAgreementService],\n})\nexport class ExamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamPersonalResult.html":{"url":"classes/ExamPersonalResult.html","title":"class - ExamPersonalResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamPersonalResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/models/exam-personal-result.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alreadyAgreed\n                            \n                            \n                                answered\n                            \n                            \n                                canAgree\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            alreadyAgreed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-personal-result.model.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answered\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-personal-result.model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            canAgree\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-personal-result.model.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Exam } from '../entities/exam.entity';\n\nexport class ExamPersonalResult {\n  alreadyAgreed: Exam[];\n  canAgree: Exam[];\n  answered: Exam[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamRepository.html":{"url":"classes/ExamRepository.html","title":"class - ExamRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findByTargets\n                            \n                            \n                                    Async\n                                findByUser\n                            \n                            \n                                    Private\n                                loadRelations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByTargets(undefined: FindExamByUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/repositories/exam.repository.ts:25\n                \n            \n\n\n            \n                \n                    SELECT DISTINCT exam.*\nFROM exam\nLEFT JOIN exam_targets_exam_target et\n  ON exam.id = et.exam_id\nINNER JOIN exam_target target\n  on et.exam_target_id = target.id AND target.type IN :targets\nWHERE\n  (exam.id NOT IN :ids)\n  (exam.status = \"ACTIVE\") AND\n  (exam.created_at BETWEEN :start AND :end) AND\n  (exam.deleted_at IS NULL)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindExamByUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUser(user: ExamUser)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/repositories/exam.repository.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            loadRelations\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadRelations(query: SelectQueryBuilder)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/repositories/exam.repository.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, SelectQueryBuilder } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { FindExamByUserDto } from '../dtos/find-exam-by-user.dto';\nimport { ExamTarget } from '../entities/exam-target.entity';\nimport { Exam } from '../entities/exam.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { ExamStatus } from '../enums/exam-status.enum';\nimport { ExamUser } from '../interfaces/exam-user.interface';\n\n@EntityRepository(Exam)\nexport class ExamRepository extends BaseRepository {\n  /**\n   * SELECT DISTINCT exam.*\n   * FROM exam\n   * LEFT JOIN exam_targets_exam_target et\n   *  ON exam.id = et.exam_id\n   * INNER JOIN exam_target target\n   *  on et.exam_target_id = target.id AND target.type IN :targets\n   * WHERE\n   *  (exam.id NOT IN :ids)\n   *  (exam.status = \"ACTIVE\") AND\n   *  (exam.created_at BETWEEN :start AND :end) AND\n   *  (exam.deleted_at IS NULL)\n   */\n  async findByTargets({\n    ignoreExams,\n    targets,\n  }: FindExamByUserDto): Promise {\n    const query = this.createQueryBuilder('exam');\n\n    query\n      .distinct(true)\n      .leftJoin('exam_targets_exam_target', 'et', 'exam.id = et.exam_id')\n      .leftJoin(\n        ExamTarget,\n        'target',\n        'et.exam_target_id = target.id AND target.type IN (:...targets)',\n        { targets },\n      )\n      .where('exam.status = :status', { status: ExamStatus.ACTIVE })\n      .andWhere(':date BETWEEN exam.startedAt AND exam.endedAt', {\n        date: new Date(),\n      });\n\n    if (ignoreExams.length) {\n      query.andWhere('exam.id NOT IN (:...ids)', {\n        ids: ignoreExams.map((el) => el.id),\n      });\n    }\n    // .andWhere('exam.created_at BETWEEN :start AND :end', {start})\n\n    return this.loadRelations(query).getMany();\n  }\n\n  async findByUser(user: ExamUser): Promise {\n    const query = this.createQueryBuilder('exam');\n\n    query\n      .innerJoinAndSelect('exam.agreements', 'agreement')\n      .where('agreement.userId = :userId', { userId: user.id })\n      .andWhere(\n        '(agreement.status = :answered OR (agreement.status = :defaultAgreementStatus AND :date BETWEEN exam.startedAt AND exam.endedAt))',\n        {\n          answered: ExamAgreementStatus.FINISHED,\n          defaultAgreementStatus: ExamAgreementStatus.STARTED,\n          date: new Date(),\n        },\n      );\n\n    return this.loadRelations(query).getMany();\n  }\n\n  private loadRelations(\n    query: SelectQueryBuilder,\n  ): SelectQueryBuilder {\n    return query\n      .innerJoinAndSelect('exam.period', 'exam_period')\n      .leftJoinAndSelect('exam.targets', 'exam_target');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamService.html":{"url":"injectables/ExamService.html","title":"injectable - ExamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                relations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Private\n                                    Async\n                                newExam\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamRepository, targetService: ExamTargetService, periodService: PeriodService)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetService\n                                                  \n                                                        \n                                                                        ExamTargetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        periodService\n                                                  \n                                                        \n                                                                        PeriodService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExamDto: CreateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExamDto\n                                    \n                                                CreateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            newExam\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newExam(dto: CreateExamDto | UpdateExamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                            CreateExamDto | UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExamDto: UpdateExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/exam/services/exam.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExamDto\n                                    \n                                                UpdateExamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                                Readonly\n                            relations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    'groups',\n    'period',\n    'agreements',\n    'targets',\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/services/exam.service.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { groupBy, first } from 'lodash';\nimport { PeriodService } from 'src/auxiliary/services/period.service';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { UpdateExamDto } from '../dtos/update-exam.dto';\nimport { Exam } from '../entities/exam.entity';\nimport { ExamAgreementStatus } from '../enums/exam-agreement-status.enum';\nimport { EXAM_NOT_FOUND } from '../exam.constants';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamPersonalResult } from '../models/exam-personal-result.model';\nimport { ExamRepository } from '../repositories/exam.repository';\nimport { ExamTargetService } from './exam-target.service';\n\n@Injectable()\nexport class ExamService {\n  private static readonly relations = [\n    'groups',\n    'period',\n    'agreements',\n    'targets',\n  ];\n\n  constructor(\n    @InjectRepository(ExamRepository)\n    private readonly repository: ExamRepository,\n    private readonly targetService: ExamTargetService,\n    private readonly periodService: PeriodService,\n  ) {}\n\n  private async newExam(dto: CreateExamDto | UpdateExamDto): Promise {\n    const { targets, ...entityLike } = dto;\n    const exam = this.repository.create(entityLike);\n\n    if (targets) {\n      const targetMap = await this.targetService.getTargetMap();\n      exam.targets = targets.map((target) => targetMap.get(target)!);\n    }\n\n    return exam;\n  }\n\n  @Transactional()\n  async create(createExamDto: CreateExamDto): Promise {\n    const exam = await this.newExam(createExamDto);\n    exam.period = await this.periodService.getPeriodByInterval(exam);\n\n    return this.repository.save(exam);\n  }\n\n  findAll(): Promise {\n    return this.repository.find({ relations: ExamService.relations });\n  }\n\n  async findOne(id: number): Promise {\n    const exam = await this.repository.findOne(id, {\n      relations: ExamService.relations,\n    });\n    if (!exam) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n\n    return exam;\n  }\n\n  @Transactional()\n  async findPersonal(user: ExamUser): Promise {\n    const agreed = await this.repository.findByUser(user);\n\n    const targets = this.targetService.getTargetsForUser(user.type);\n\n    const canAgree = await this.repository.findByTargets({\n      ignoreExams: agreed,\n      targets,\n    });\n\n    const {\n      [ExamAgreementStatus.STARTED]: alreadyAgreed = [],\n      [ExamAgreementStatus.FINISHED]: answered = [],\n    } = groupBy(agreed, (exam) => first(exam.agreements)?.status);\n\n    return { alreadyAgreed, answered, canAgree };\n  }\n\n  @Transactional()\n  async update(id: number, updateExamDto: UpdateExamDto) {\n    let exam = await this.findOne(id);\n\n    exam = this.repository.merge(exam, await this.newExam(updateExamDto));\n\n    return this.repository.save(exam);\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, EXAM_NOT_FOUND);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTarget.html":{"url":"classes/ExamTarget.html","title":"class - ExamTarget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTarget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/entities/exam-target.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: ExamTargetType, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/entities/exam-target.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Column, Entity } from 'typeorm';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\n\n@Entity('exam_target')\nexport class ExamTarget extends FFEntity {\n  @Column({ type: 'enum', enum: ExamTargetType, unique: true })\n  type: ExamTargetType;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTarget1622326106015.html":{"url":"classes/ExamTarget1622326106015.html","title":"class - ExamTarget1622326106015","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTarget1622326106015\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622326106015-ExamTarget.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTarget1622326106015'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622326106015-ExamTarget.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nconst targets = [\"Student\", \"Professor\"];\n\nexport class ExamTarget1622326106015 implements MigrationInterface {\n  name = 'ExamTarget1622326106015';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IX_question_group_target` ON `question_group`',\n    );\n    await queryRunner.query(\n      \"CREATE TABLE `exam_target` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `type` enum ('Student', 'Professor') NOT NULL, UNIQUE INDEX `IDX_988f784cc581e38b7ed4943006` (`type`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n    await Promise.all(targets.map(target => queryRunner.query('INSERT INTO `exam_target` (`type`) VALUES (?)', [target])));\n    await queryRunner.query(\n      'CREATE TABLE `exam_targets_exam_target` (`exam_id` int NOT NULL, `exam_target_id` int NOT NULL, INDEX `IDX_4a22969058fa5105ad6bee583f` (`exam_id`), INDEX `IDX_af1604ea5493f65a6c8d70d98e` (`exam_target_id`), PRIMARY KEY (`exam_id`, `exam_target_id`)) ENGINE=InnoDB',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `target`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` ADD CONSTRAINT `FK_4a22969058fa5105ad6bee583f1` FOREIGN KEY (`exam_id`) REFERENCES `exam`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` ADD CONSTRAINT `FK_af1604ea5493f65a6c8d70d98ed` FOREIGN KEY (`exam_target_id`) REFERENCES `exam_target`(`id`) ON DELETE CASCADE ON UPDATE NO ACTION',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` DROP FOREIGN KEY `FK_af1604ea5493f65a6c8d70d98ed`',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `exam_targets_exam_target` DROP FOREIGN KEY `FK_4a22969058fa5105ad6bee583f1`',\n    );\n    await queryRunner.query(\n      \"ALTER TABLE `question_group` ADD `target` enum ('Student', 'Professor') NULL\",\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_af1604ea5493f65a6c8d70d98e` ON `exam_targets_exam_target`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_4a22969058fa5105ad6bee583f` ON `exam_targets_exam_target`',\n    );\n    await queryRunner.query('DROP TABLE `exam_targets_exam_target`');\n    await queryRunner.query(\n      'DROP INDEX `IDX_988f784cc581e38b7ed4943006` ON `exam_target`',\n    );\n    await queryRunner.query('DROP TABLE `exam_target`');\n    await queryRunner.query(\n      'CREATE INDEX `IX_question_group_target` ON `question_group` (`target`)',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetAdd1622378888497.html":{"url":"classes/ExamTargetAdd1622378888497.html","title":"class - ExamTargetAdd1622378888497","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetAdd1622378888497\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1622378888497-ExamTargetAdd.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTargetAdd1622378888497'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1622378888497-ExamTargetAdd.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nconst addTargets = ['Course', 'Grade'];\n\nexport class ExamTargetAdd1622378888497 implements MigrationInterface {\n  name = 'ExamTargetAdd1622378888497';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"ALTER TABLE `exam_target` CHANGE `type` `type` enum ('Student', 'Professor', 'Course', 'Grade') NOT NULL\",\n    );\n    await Promise.all(\n      addTargets.map((target) =>\n        queryRunner.query('INSERT INTO exam_target (`type`) VALUES (?)', [\n          target,\n        ]),\n      ),\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `DELETE FROM exam_target WHERE type IN (${addTargets\n        .map((_) => '?')\n        .join(', ')})`,\n      [...addTargets],\n    );\n    await queryRunner.query(\n      \"ALTER TABLE `exam_target` CHANGE `type` `type` enum ('Student', 'Professor') NOT NULL\",\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamTargetController.html":{"url":"controllers/ExamTargetController.html","title":"controller - ExamTargetController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamTargetController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/controllers/exam-target.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam-target\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getForUser\n                            \n                            \n                                    Async\n                                getTargets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getForUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetForUser(user: ExamUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user')@ApiExcludeEndpoint()\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-target.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ExamUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTargets()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined, schema: undefined})\n                \n            \n\n            \n                \n                    Defined in src/exam/controllers/exam-target.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { ApiExcludeEndpoint, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamUser } from '../interfaces/exam-user.interface';\nimport { ExamTargetService } from '../services/exam-target.service';\n\n@Controller('exam-target')\n@ApiTags('ExamTarget')\n@UseGuards(JwtGuard)\nexport class ExamTargetController {\n  constructor(private readonly targetService: ExamTargetService) {}\n\n  @Get()\n  @ApiOkResponse({\n    type: [String],\n    schema: { example: Object.values(ExamTargetType) },\n  })\n  async getTargets(): Promise {\n    return this.targetService.getTargets();\n  }\n\n  @Get('user')\n  @ApiExcludeEndpoint()\n  getForUser(@GetUser() user: ExamUser) {\n    return this.targetService.getTargetsForUser(user.type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamTargetManagerDto.html":{"url":"interfaces/ExamTargetManagerDto.html","title":"interface - ExamTargetManagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamTargetManagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/exam-target-manager.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        targets\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        targets\n                                    \n                                \n                                \n                                    \n                                        targets:         ExamTargetType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ExamTargetType } from '../enums/exam-target-type.enum';\n\nexport interface ExamTargetManagerDto {\n  targets?: ExamTargetType[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetNode.html":{"url":"classes/ExamTargetNode.html","title":"class - ExamTargetNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/models/exam-target-node.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                childs\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dfs\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isLeaf\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamTargetNode[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-target-node.model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetType\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/models/exam-target-node.model.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dfs\n                        \n                        \n                    \n                \n            \n            \n                \ndfs(type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/models/exam-target-node.model.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Path\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isLeaf\n                    \n                \n\n                \n                    \n                        getisLeaf()\n                    \n                \n                            \n                                \n                                    Defined in src/exam/models/exam-target-node.model.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ExamTargetType } from '../enums/exam-target-type.enum';\n\ntype Path = ExamTargetNode[] | undefined;\n\nexport class ExamTargetNode {\n  childs: ExamTargetNode[];\n  type: ExamTargetType;\n\n  get isLeaf(): boolean {\n    return !this.childs.length;\n  }\n\n  dfs(type: string): Path {\n    if (this.type === type) {\n      return [this];\n    }\n    if (this.isLeaf) return;\n    for (const node of this.childs) {\n      const partialPath = node.dfs(type);\n      if (partialPath) {\n        return [this, ...partialPath];\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetNodeFactory.html":{"url":"injectables/ExamTargetNodeFactory.html","title":"injectable - ExamTargetNodeFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetNodeFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/factories/exam-target-node.factory.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            generate\n                        \n                        \n                    \n                \n            \n            \n                \ngenerate(schema: ExamTargetNodeSchema)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/factories/exam-target-node.factory.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ExamTargetNodeSchema\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExamTargetNode\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\ninterface ExamTargetNodeSchema {\n  type: ExamTargetType;\n  childs?: ExamTargetNodeSchema[];\n}\n\n@Injectable()\nexport class ExamTargetNodeFactory {\n  generate(schema: ExamTargetNodeSchema): ExamTargetNode {\n    const node = new ExamTargetNode();\n    node.type = schema.type;\n\n    node.childs = schema.childs?.map((node) => this.generate(node)) ?? [];\n\n    return node;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamTargetNodeSchema.html":{"url":"interfaces/ExamTargetNodeSchema.html","title":"interface - ExamTargetNodeSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamTargetNodeSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/factories/exam-target-node.factory.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        childs\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        childs\n                                    \n                                \n                                \n                                    \n                                        childs:         ExamTargetNodeSchema[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetNodeSchema[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ExamTargetType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\ninterface ExamTargetNodeSchema {\n  type: ExamTargetType;\n  childs?: ExamTargetNodeSchema[];\n}\n\n@Injectable()\nexport class ExamTargetNodeFactory {\n  generate(schema: ExamTargetNodeSchema): ExamTargetNode {\n    const node = new ExamTargetNode();\n    node.type = schema.type;\n\n    node.childs = schema.childs?.map((node) => this.generate(node)) ?? [];\n\n    return node;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTargetRepository.html":{"url":"classes/ExamTargetRepository.html","title":"class - ExamTargetRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTargetRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/repositories/exam-target.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { ExamTarget } from '../entities/exam-target.entity';\n\n@EntityRepository(ExamTarget)\nexport class ExamTargetRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetService.html":{"url":"injectables/ExamTargetService.html","title":"injectable - ExamTargetService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/services/exam-target.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _targetMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTargetMap\n                            \n                            \n                                    Async\n                                getTargets\n                            \n                            \n                                getTargetsForUser\n                            \n                            \n                                    Private\n                                    Async\n                                loadTargetMap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExamTargetRepository, tree: ExamTargetTree)\n                    \n                \n                        \n                            \n                                Defined in src/exam/services/exam-target.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExamTargetRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tree\n                                                  \n                                                        \n                                                                        ExamTargetTree\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTargetMap\n                        \n                        \n                    \n                \n            \n            \n                \ngetTargetMap()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTargets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTargets()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTargetsForUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetTargetsForUser(target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExamTargetType[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            loadTargetMap\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadTargetMap()\n                \n            \n\n\n            \n                \n                    Defined in src/exam/services/exam-target.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Optional\n                            _targetMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReadonlyMap\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/services/exam-target.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport _ = require('lodash');\n\nimport { ExamTarget } from '../entities/exam-target.entity';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetTree } from '../providers/exam-target-tree.provider';\nimport { ExamTargetRepository } from '../repositories/exam-target.repository';\n\n@Injectable()\nexport class ExamTargetService {\n  private _targetMap?: ReadonlyMap;\n\n  constructor(\n    @InjectRepository(ExamTargetRepository)\n    private readonly repository: ExamTargetRepository,\n    private readonly tree: ExamTargetTree,\n  ) {\n    this.loadTargetMap();\n  }\n\n  private async loadTargetMap(): Promise {\n    const targets = await this.repository.find();\n\n    this._targetMap = new Map(\n      targets.map((target) => [target.type, target]),\n    );\n  }\n\n  getTargetMap(): Promise> {\n    return new Promise((resolve, reject) => {\n      if (!this._targetMap) {\n        return this.loadTargetMap()\n          .then(() => resolve(_.cloneDeep(this._targetMap!)))\n          .catch((e) => reject(e));\n      }\n\n      resolve(_.cloneDeep(this._targetMap));\n    });\n  }\n\n  async getTargets(): Promise {\n    const map = await this.getTargetMap();\n\n    return Array.from(map.values()).map((target) => target.type);\n  }\n\n  getTargetsForUser(target: string): ExamTargetType[] {\n    return this.tree.queryTarget(target).map((p) => p.type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamTargetTree.html":{"url":"injectables/ExamTargetTree.html","title":"injectable - ExamTargetTree","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExamTargetTree\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/exam-target-tree.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                root\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                queryTarget\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(targetNodeFactory: ExamTargetNodeFactory)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/exam-target-tree.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        targetNodeFactory\n                                                  \n                                                        \n                                                                        ExamTargetNodeFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            queryTarget\n                        \n                        \n                    \n                \n            \n            \n                \nqueryTarget(target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/exam/providers/exam-target-tree.provider.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ExamTargetNode[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            root\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamTargetNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/providers/exam-target-tree.provider.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nimport { ExamTargetNodeFactory } from '../factories/exam-target-node.factory';\nimport { ExamTargetNode } from '../models/exam-target-node.model';\n\n@Injectable()\nexport class ExamTargetTree {\n  private readonly root: ExamTargetNode;\n\n  constructor(targetNodeFactory: ExamTargetNodeFactory) {\n    this.root = targetNodeFactory.generate({\n      type: ExamTargetType.COURSE,\n      childs: [\n        {\n          type: ExamTargetType.GRADE,\n          childs: [\n            { type: ExamTargetType.PROFESSOR },\n            { type: ExamTargetType.STUDENT },\n          ],\n        },\n      ],\n    });\n  }\n\n  queryTarget(target: string): ExamTargetNode[] {\n    const path = this.root.dfs(target);\n\n    if (!path) {\n      throw new NotFoundException(this.root, target);\n    }\n\n    return path;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamTitle1621036457247.html":{"url":"classes/ExamTitle1621036457247.html","title":"class - ExamTitle1621036457247","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamTitle1621036457247\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621036457247-ExamTitle.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ExamTitle1621036457247'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621036457247-ExamTitle.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class ExamTitle1621036457247 implements MigrationInterface {\n    name = 'ExamTitle1621036457247'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `text` `title` text NOT NULL\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `title` `text` text NOT NULL\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamUser.html":{"url":"interfaces/ExamUser.html","title":"interface - ExamUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExamUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/interfaces/exam-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         UserType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserType } from '../../user/enum/user-type.enum';\n\nexport interface ExamUser {\n  id: number;\n  type: UserType;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExportationController.html":{"url":"controllers/ExportationController.html","title":"controller - ExportationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExportationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/exportation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                export\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                exportToCsv\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            exportToCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportToCsv(examId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/csv/:examId')\n                \n            \n\n            \n                \n                    Defined in src/exportation/exportation.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  ParseIntPipe,\n  Post,\n  Param,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { ExportationService } from './exportation.service';\n\n@Controller('export')\n@ApiTags('Exportation')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class ExportationController {\n  constructor(private readonly service: ExportationService) {}\n  @Post('/csv/:examId')\n  async exportToCsv(@Param('examId', ParseIntPipe) examId: number) {\n    return this.service.exportToCsv(examId);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExportationModule.html":{"url":"modules/ExportationModule.html","title":"module - ExportationModule","body":"\n                   \n\n\n\n\n    Modules\n    ExportationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExportationModule\n\n\n\ncluster_ExportationModule_providers\n\n\n\ncluster_ExportationModule_imports\n\n\n\ncluster_ExportationModule_exports\n\n\n\n\nInfraModule\n\nInfraModule\n\n\n\nExportationModule\n\nExportationModule\n\nExportationModule -->\n\nInfraModule->ExportationModule\n\n\n\n\n\nExportationService \n\nExportationService \n\nExportationService  -->\n\nExportationModule->ExportationService \n\n\n\n\n\nExportationRepository\n\nExportationRepository\n\nExportationModule -->\n\nExportationRepository->ExportationModule\n\n\n\n\n\nExportationService\n\nExportationService\n\nExportationModule -->\n\nExportationService->ExportationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exportation/exportation.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExportationRepository\n                        \n                        \n                            ExportationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExportationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            InfraModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExportationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { InfraModule } from 'src/infra/infra.module';\nimport { ExportationController } from './exportation.controller';\nimport { ExportationRepository } from './exportation.repository';\nimport { ExportationService } from './exportation.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature(), InfraModule],\n  providers: [ExportationService, ExportationRepository],\n  exports: [ExportationService],\n  controllers: [ExportationController],\n})\nexport class ExportationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExportationRepository.html":{"url":"injectables/ExportationRepository.html","title":"injectable - ExportationRepository","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExportationRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/exportation.repository.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCsvLines\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/exportation/exportation.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCsvLines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCsvLines(examId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.repository.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CsvLine } from './interfaces/csv-line.interface';\nimport { Connection } from 'typeorm';\nimport { InjectConnection } from '@nestjs/typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { CsvLineRow } from './interfaces/csv-line-row.interface';\nimport { userTypeMap } from './maps/user-type.map';\n\n@Injectable()\nexport class ExportationRepository {\n  constructor(@InjectConnection() private readonly connection: Connection) {}\n\n  async getCsvLines(examId: number): Promise {\n    const queryRunner = this.connection.createQueryRunner();\n\n    const csvLines: CsvLineRow[] = await queryRunner.query(\n      `\n      SELECT DISTINCT\n          ea.exam_id AS 'exam_id',\n          ea.id AS 'exam_agreement_id',\n          ea.anonymous AS 'anonymous',\n          ea.observation AS 'observation',\n          ea.unique_code AS 'unique_code',\n          qg.title AS 'group_title',\n          qg.class AS 'is_class',\n          qg.personal AS 'is_personal',\n          qg.id AS 'group_id',\n          q.id AS 'question_id',\n          q.statement AS 'question_statement',\n          a.id AS 'answer_id',\n          a.score AS 'score',\n          s.title AS 'subject_title',\n          u.enrollment AS 'user_enrollment',\n          u.type AS 'user_type'\n      FROM\n          exam_agreement ea\n      INNER JOIN \\`user\\` u ON\n          u.id = ea.user_id\n      INNER JOIN answer a ON\n          a.exam_agreement_id = ea.id\n      LEFT JOIN grade g ON\n          g.id = a.grade_id\n      LEFT JOIN subject s ON\n          s.id = g.subject_id\n      INNER JOIN question q ON\n          q.id = a.question_id\n      INNER JOIN question_group qg ON\n          qg.id = q.group_id\n      WHERE\n          ea.exam_id = ? AND ea.deleted_at IS NULL\n      ORDER BY\n          ea.id ASC,\n          qg.id ASC,\n          q.id ASC\n      `,\n      [examId],\n    );\n\n    return csvLines.map((csvLine) => {\n      return {\n        'Grupo de Questões': csvLine.group_title,\n        Disciplina: csvLine.subject_title,\n        Pessoal: csvLine.is_personal ? 'Sim' : 'Não',\n        Questão: csvLine.question_statement,\n        Matrícula: csvLine.anonymous ? 'Anônimo' : csvLine.user_enrollment,\n        'Tipo de Usuário': userTypeMap.get(csvLine.user_type)!,\n        Nota: csvLine.score ?? 'Não se aplica',\n        Observação: csvLine.observation,\n        'Código Único': csvLine.unique_code,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExportationService.html":{"url":"injectables/ExportationService.html","title":"injectable - ExportationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExportationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exportation/exportation.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createCsv\n                            \n                            \n                                    Async\n                                exportToCsv\n                            \n                            \n                                    Private\n                                getFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ExportationRepository, uploadService: UploaderService)\n                    \n                \n                        \n                            \n                                Defined in src/exportation/exportation.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ExportationRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        UploaderService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCsv(csvLines: CsvLine[])\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    csvLines\n                                    \n                                                CsvLine[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            exportToCsv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportToCsv(examId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getFileName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFileName(examId: number, exportationType: ExportationType)\n                \n            \n\n\n            \n                \n                    Defined in src/exportation/exportation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exportationType\n                                    \n                                                ExportationType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport ObjectsToCsv from 'objects-to-csv';\n\nimport { ExportationRepository } from './exportation.repository';\n\nimport { ExportationType } from './enums/exportation-type.enum';\nimport { CsvLine } from './interfaces/csv-line.interface';\nimport { UploaderService } from 'src/infra/services/uploader.service';\n\n@Injectable()\nexport class ExportationService {\n  constructor(\n    private readonly repository: ExportationRepository,\n    private readonly uploadService: UploaderService,\n  ) {}\n\n  private getFileName(\n    examId: number,\n    exportationType: ExportationType,\n  ): string {\n    const fileDate = new Date()\n      .toLocaleDateString('pt-BR')\n      .replace(/\\//gu, '-');\n    const filePrefix = process.env.EXPORTED_FILE_PREFIX || 'exportation';\n    return `${exportationType}_${examId}_${filePrefix}_${fileDate}.csv`;\n  }\n\n  private async createCsv(csvLines: CsvLine[]): Promise {\n    const builder = new ObjectsToCsv(csvLines);\n\n    return Buffer.from(await builder.toString());\n  }\n\n  async exportToCsv(examId: number): Promise {\n    const csvLines: CsvLine[] = await this.repository.getCsvLines(examId);\n\n    if (!csvLines.length) {\n      throw new NotFoundException('Nothing to export');\n    }\n\n    const fileName = this.getFileName(examId, ExportationType.AVALIACAO);\n    const data = await this.createCsv(csvLines);\n\n    return this.uploadService.upload(\n      {\n        buffer: data,\n        originalname: fileName,\n        mimetype: 'text/csv',\n        size: data.length,\n        encoding: 'utf8',\n        noRandomName: true,\n      },\n      'exports',\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FFEntity.html":{"url":"classes/FFEntity.html","title":"class - FFEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FFEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/ff.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        TimestampEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/ff.entity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PrimaryGeneratedColumn } from 'typeorm';\nimport { TimestampEntity } from './timestamp.entity';\n\nexport class FFEntity extends TimestampEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileSendDto.html":{"url":"interfaces/FileSendDto.html","title":"interface - FileSendDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FileSendDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/dtos/file-send.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        buffer\n                                \n                                \n                                        encoding\n                                \n                                \n                                        mimetype\n                                \n                                \n                                            Optional\n                                        noRandomName\n                                \n                                \n                                        originalname\n                                \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        noRandomName\n                                    \n                                \n                                \n                                    \n                                        noRandomName:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalname\n                                    \n                                \n                                \n                                    \n                                        originalname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FileSendDto {\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n  buffer: Buffer;\n  size: number;\n  noRandomName?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindExamByUserDto.html":{"url":"interfaces/FindExamByUserDto.html","title":"interface - FindExamByUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FindExamByUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/find-exam-by-user.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ignoreExams\n                                \n                                \n                                        targets\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreExams\n                                    \n                                \n                                \n                                    \n                                        ignoreExams:         Exam[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Exam[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targets\n                                    \n                                \n                                \n                                    \n                                        targets:         ExamTargetType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamTargetType[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Exam } from '../entities/exam.entity';\nimport { ExamTargetType } from '../enums/exam-target-type.enum';\nexport interface FindExamByUserDto {\n  ignoreExams: Exam[];\n  targets: ExamTargetType[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindPersonalDto.html":{"url":"classes/FindPersonalDto.html","title":"class - FindPersonalDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindPersonalDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/find-personal.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/find-personal.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserToFind | User\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/find-personal.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserToFind } from 'src/auxiliary/types/user-to-find.type';\nimport { User } from 'src/user/entities/user.entity';\n\nexport class FindPersonalDto {\n  examId: number;\n  user: UserToFind | User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAdmin.html":{"url":"injectables/FirebaseAdmin.html","title":"injectable - FirebaseAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                app\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                appCheck\n                            \n                            \n                                auth\n                            \n                            \n                                database\n                            \n                            \n                                delete\n                            \n                            \n                                firestore\n                            \n                            \n                                installations\n                            \n                            \n                                instanceId\n                            \n                            \n                                machineLearning\n                            \n                            \n                                messaging\n                            \n                            \n                                projectManagement\n                            \n                            \n                                remoteConfig\n                            \n                            \n                                securityRules\n                            \n                            \n                                storage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    options\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: FirebaseModuleOptions)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        FirebaseModuleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            appCheck\n                        \n                        \n                    \n                \n            \n            \n                \nappCheck()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.appCheck.AppCheck\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            auth\n                        \n                        \n                    \n                \n            \n            \n                \nauth()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         firebase.auth.Auth\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            database\n                        \n                        \n                    \n                \n            \n            \n                \ndatabase(url?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     firebase.database.Database\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            firestore\n                        \n                        \n                    \n                \n            \n            \n                \nfirestore()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.firestore.Firestore\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            installations\n                        \n                        \n                    \n                \n            \n            \n                \ninstallations()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.installations.Installations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            instanceId\n                        \n                        \n                    \n                \n            \n            \n                \ninstanceId()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.instanceId.InstanceId\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            machineLearning\n                        \n                        \n                    \n                \n            \n            \n                \nmachineLearning()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.machineLearning.MachineLearning\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            messaging\n                        \n                        \n                    \n                \n            \n            \n                \nmessaging()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.messaging.Messaging\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            projectManagement\n                        \n                        \n                    \n                \n            \n            \n                \nprojectManagement()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.projectManagement.ProjectManagement\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remoteConfig\n                        \n                        \n                    \n                \n            \n            \n                \nremoteConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.remoteConfig.RemoteConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            securityRules\n                        \n                        \n                    \n                \n            \n            \n                \nsecurityRules()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.securityRules.SecurityRules\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            storage\n                        \n                        \n                    \n                \n            \n            \n                \nstorage()\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     firebase.storage.Storage\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.app.App\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:24\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/firebase/firebase-admin/providers/firebase-admin.provider.ts:28\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FIREBASE_OPTIONS } from '../firebase-admin.constants';\nimport { FirebaseModuleOptions } from '../../interfaces';\n\n@Injectable()\nexport class FirebaseAdmin implements firebase.app.App {\n  private readonly app: firebase.app.App;\n\n  constructor(@Inject(FIREBASE_OPTIONS) options: FirebaseModuleOptions) {\n    this.app = firebase.initializeApp({\n      databaseURL: options.databaseURL,\n      storageBucket: options.storageBucket,\n      credential: firebase.credential.cert(options.cert),\n    });\n  }\n  appCheck(): firebase.appCheck.AppCheck {\n    throw new Error('Method not implemented.');\n  }\n  installations(): firebase.installations.Installations {\n    throw new Error('Method not implemented.');\n  }\n\n  get name(): string {\n    return this.app.name;\n  }\n\n  get options(): firebase.AppOptions {\n    return this.app.options;\n  }\n\n  auth(): firebase.auth.Auth {\n    return this.app.auth();\n  }\n\n  database(url?: string): firebase.database.Database {\n    return this.app.database(url);\n  }\n\n  firestore(): firebase.firestore.Firestore {\n    return this.app.firestore();\n  }\n\n  instanceId(): firebase.instanceId.InstanceId {\n    return this.app.instanceId();\n  }\n\n  machineLearning(): firebase.machineLearning.MachineLearning {\n    return this.app.machineLearning();\n  }\n\n  messaging(): firebase.messaging.Messaging {\n    return this.app.messaging();\n  }\n\n  projectManagement(): firebase.projectManagement.ProjectManagement {\n    return this.app.projectManagement();\n  }\n\n  remoteConfig(): firebase.remoteConfig.RemoteConfig {\n    return this.app.remoteConfig();\n  }\n\n  securityRules(): firebase.securityRules.SecurityRules {\n    return this.app.securityRules();\n  }\n\n  storage(): firebase.storage.Storage {\n    return this.app.storage();\n  }\n\n  delete(): Promise {\n    return this.app.delete();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseAdminModule.html":{"url":"modules/FirebaseAdminModule.html","title":"module - FirebaseAdminModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseAdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FirebaseAdminModule\n\n\n\ncluster_FirebaseAdminModule_exports\n\n\n\ncluster_FirebaseAdminModule_providers\n\n\n\n\nFirebaseAdmin \n\nFirebaseAdmin \n\n\n\nFirebaseAdminModule\n\nFirebaseAdminModule\n\nFirebaseAdmin  -->\n\nFirebaseAdminModule->FirebaseAdmin \n\n\n\n\n\nFirebaseAdmin\n\nFirebaseAdmin\n\nFirebaseAdminModule -->\n\nFirebaseAdmin->FirebaseAdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase-admin/firebase-admin.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseAdmin\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseAdmin\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase-admin/firebase-admin.module.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from '../interfaces';\nimport { FirebaseAdmin } from './providers/firebase-admin.provider';\nimport { FIREBASE_OPTIONS } from './firebase-admin.constants';\n\n@Module({ providers: [FirebaseAdmin], exports: [FirebaseAdmin] })\nexport class FirebaseAdminModule {\n  private static readonly exports = [FirebaseAdmin];\n  private static readonly providers: Provider[] = [FirebaseAdmin];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useValue: options,\n        },\n        ...this.providers,\n      ],\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseAdminModule,\n      imports: options.imports ?? [],\n      providers: [\n        {\n          provide: FIREBASE_OPTIONS,\n          useFactory: options.useFactory,\n          inject: options.inject ?? [],\n        },\n        ...this.providers,\n      ],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAsyncModuleOptions.html":{"url":"interfaces/FirebaseAsyncModuleOptions.html","title":"interface - FirebaseAsyncModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAsyncModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        inject\n                                \n                                \n                                        useFactory\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseAuthDecodedToken.html":{"url":"interfaces/FirebaseAuthDecodedToken.html","title":"interface - FirebaseAuthDecodedToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseAuthDecodedToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        emailVerified\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailVerified\n                                    \n                                \n                                \n                                    \n                                        emailVerified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FirebaseAuthDecodedToken {\n  emailVerified?: boolean;\n  email?: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAuthService.html":{"url":"injectables/FirebaseAuthService.html","title":"injectable - FirebaseAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firebaseAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                deleteUser\n                            \n                            \n                                getUser\n                            \n                            \n                                updateUser\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createDto: firebase.auth.CreateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            firebase.auth.CreateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \nupdateUser(uid: string, updateDto: firebase.auth.UpdateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            firebase.auth.UpdateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-auth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firebaseAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         firebase.auth.Auth\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-auth.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\n\nimport { FirebaseAuthDecodedToken } from '../interfaces/firebase-auth-decoded-token.interface';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseAuthService {\n  private readonly firebaseAuth: firebase.auth.Auth;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firebaseAuth = firebaseAdmin.auth();\n  }\n\n  async verifyToken(token: string): Promise {\n    try {\n      const decoded = await this.firebaseAuth.verifyIdToken(token);\n      return {\n        uid: decoded.uid,\n        email: decoded.email,\n        emailVerified: decoded.email_verified,\n      };\n    } catch (err) {\n      return null;\n    }\n  }\n\n  getUser(uid: string): Promise {\n    return this.firebaseAuth.getUser(uid);\n  }\n\n  createUser(\n    createDto: firebase.auth.CreateRequest,\n  ): Promise {\n    return this.firebaseAuth.createUser(createDto);\n  }\n\n  updateUser(\n    uid: string,\n    updateDto: firebase.auth.UpdateRequest,\n  ): Promise {\n    return this.firebaseAuth.updateUser(uid, updateDto);\n  }\n\n  deleteUser(uid: string): Promise {\n    return this.firebaseAuth.deleteUser(uid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseCloudMessagingService.html":{"url":"injectables/FirebaseCloudMessagingService.html","title":"injectable - FirebaseCloudMessagingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseCloudMessagingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-cloud-messaging.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                fcm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendToDevice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendToDevice\n                        \n                        \n                    \n                \n            \n            \n                \nsendToDevice(token: string, message: firebase.messaging.MessagingPayload, options?: firebase.messaging.MessagingOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            firebase.messaging.MessagingPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            firebase.messaging.MessagingOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            fcm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.messaging.Messaging\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-cloud-messaging.service.ts:7\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\n\n@Injectable()\nexport class FirebaseCloudMessagingService {\n  private readonly fcm: firebase.messaging.Messaging;\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.fcm = firebaseAdmin.messaging();\n  }\n\n  sendToDevice(\n    token: string,\n    message: firebase.messaging.MessagingPayload,\n    options?: firebase.messaging.MessagingOptions,\n  ): Promise {\n    return this.fcm.sendToDevice(token, message, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseFirestoreService.html":{"url":"injectables/FirebaseFirestoreService.html","title":"injectable - FirebaseFirestoreService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseFirestoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-firestore.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                firestore\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collection: string)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-firestore.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FirebaseFirestoreCollection\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            firestore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.firestore.Firestore\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-firestore.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport firebase from 'firebase-admin';\nimport { FirebaseAdmin } from '../firebase-admin';\nimport { FirebaseFirestoreCollection } from '../types/firebase-firestore-collection.type';\n\n@Injectable()\nexport class FirebaseFirestoreService {\n  private readonly firestore: firebase.firestore.Firestore;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.firestore = firebaseAdmin.firestore();\n  }\n\n  getCollection(collection: string): FirebaseFirestoreCollection {\n    return this.firestore.collection(collection);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseModule.html":{"url":"modules/FirebaseModule.html","title":"module - FirebaseModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_exports\n\n\n\ncluster_FirebaseModule_providers\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseAuthService\n                        \n                        \n                            FirebaseCloudMessagingService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: FirebaseModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: FirebaseAsyncModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/firebase.module.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FirebaseAsyncModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module, Provider } from '@nestjs/common';\n\nimport { FirebaseAuthService } from './services/firebase-auth.service';\nimport { FirebaseCloudMessagingService } from './services/firebase-cloud-messaging.service';\nimport {\n  FirebaseAsyncModuleOptions,\n  FirebaseModuleOptions,\n} from './interfaces/firebase-async-module-options.interface';\nimport { FirebaseAdminModule } from './firebase-admin/firebase-admin.module';\nimport { FirebaseStorageService, FirebaseFirestoreService } from './services';\n\n@Module({\n  providers: [FirebaseAuthService, FirebaseCloudMessagingService],\n  exports: [FirebaseAuthService, FirebaseCloudMessagingService],\n})\nexport class FirebaseModule {\n  private static readonly providers: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  private static readonly exports: Provider[] = [\n    FirebaseAuthService,\n    FirebaseCloudMessagingService,\n    FirebaseStorageService,\n    FirebaseFirestoreService,\n  ];\n\n  static forRoot(options: FirebaseModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRoot(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n\n  static forRootAsync(options: FirebaseAsyncModuleOptions): DynamicModule {\n    return {\n      module: FirebaseModule,\n      global: true,\n      imports: [FirebaseAdminModule.forRootAsync(options)],\n      providers: [...this.providers],\n      exports: this.exports,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseModuleOptions.html":{"url":"interfaces/FirebaseModuleOptions.html","title":"interface - FirebaseModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/interfaces/firebase-async-module-options.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cert\n                                \n                                \n                                            Optional\n                                        databaseURL\n                                \n                                \n                                            Optional\n                                        storageBucket\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cert\n                                    \n                                \n                                \n                                    \n                                        cert:     firebase.ServiceAccount\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     firebase.ServiceAccount\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        databaseURL\n                                    \n                                \n                                \n                                    \n                                        databaseURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storageBucket\n                                    \n                                \n                                \n                                    \n                                        storageBucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { ModuleMetadata } from '@nestjs/common';\n\nexport interface FirebaseModuleOptions {\n  cert: firebase.ServiceAccount;\n  databaseURL?: string;\n  storageBucket?: string;\n}\n\nexport interface FirebaseAsyncModuleOptions\n  extends Pick {\n  useFactory: (\n    ...args: any[]\n  ) => FirebaseModuleOptions | Promise;\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseStorageService.html":{"url":"injectables/FirebaseStorageService.html","title":"injectable - FirebaseStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/services/firebase-storage.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                storage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseAdmin: FirebaseAdmin)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/services/firebase-storage.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseAdmin\n                                                  \n                                                        \n                                                                        FirebaseAdmin\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(path: string, undefined: FirebaseStorageUploadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/services/firebase-storage.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FirebaseStorageUploadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            storage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     firebase.storage.Storage\n\n                        \n                    \n                        \n                            \n                                    Defined in src/firebase/services/firebase-storage.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import firebase from 'firebase-admin';\nimport { Injectable } from '@nestjs/common';\n\nimport { FirebaseAdmin } from '../firebase-admin';\nimport { FirebaseStorageUploadDto } from '../dtos/firebase-storage-upload.dto';\n\n@Injectable()\nexport class FirebaseStorageService {\n  private readonly storage: firebase.storage.Storage;\n\n  constructor(firebaseAdmin: FirebaseAdmin) {\n    this.storage = firebaseAdmin.storage();\n  }\n\n  async upload(\n    path: string,\n    { data, contentType, publicFile, bucket }: FirebaseStorageUploadDto,\n  ): Promise {\n    const file = this.storage.bucket(bucket).file(path);\n    await file.save(data, {\n      gzip: true,\n      contentType,\n      public: publicFile,\n      metadata: {\n        cacheControl: 'public, max-age=31536000',\n      },\n    });\n    return file.publicUrl();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FirebaseStorageUploadDto.html":{"url":"interfaces/FirebaseStorageUploadDto.html","title":"interface - FirebaseStorageUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FirebaseStorageUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/dtos/firebase-storage-upload.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bucket\n                                \n                                \n                                        contentType\n                                \n                                \n                                        data\n                                \n                                \n                                        publicFile\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bucket\n                                    \n                                \n                                \n                                    \n                                        bucket:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contentType\n                                    \n                                \n                                \n                                    \n                                        contentType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicFile\n                                    \n                                \n                                \n                                    \n                                        publicFile:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FirebaseStorageUploadDto {\n  data: Buffer;\n  contentType: string;\n  publicFile: boolean;\n  bucket?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseUploader.html":{"url":"injectables/FirebaseUploader.html","title":"injectable - FirebaseUploader","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseUploader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/firebase-uploader.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getName\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: FirebaseStorageService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/services/firebase-uploader.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        FirebaseStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getName(fileDto: FileSendDto, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/firebase-uploader.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/firebase-uploader.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { randomBytes } from 'crypto';\nimport { FirebaseStorageService } from 'src/firebase';\nimport { FileSendDto } from '../dtos/file-send.dto';\nimport { UploaderService } from './uploader.service';\n\n@Injectable()\nexport class FirebaseUploader implements UploaderService {\n  constructor(private readonly storageService: FirebaseStorageService) {}\n\n  private getName(fileDto: FileSendDto, path: string): string {\n    if (fileDto.noRandomName) {\n      return `${path}/${fileDto.originalname}`;\n    }\n\n    return `${path}/${randomBytes(32).toString('hex')}`;\n  }\n\n  async upload(fileDto: FileSendDto, path = ''): Promise {\n    return this.storageService.upload(this.getName(fileDto, path).replace(/^\\//u, ''), {\n      data: fileDto.buffer,\n      contentType: fileDto.mimetype,\n      publicFile: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html":{"url":"classes/GracefulUniqueCodeOnExamAgreement1625001565001.html","title":"class - GracefulUniqueCodeOnExamAgreement1625001565001","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GracefulUniqueCodeOnExamAgreement1625001565001\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1625001565002-GracefulUniqueCodeOnExamAgreement.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1625001565002-GracefulUniqueCodeOnExamAgreement.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1625001565002-GracefulUniqueCodeOnExamAgreement.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class GracefulUniqueCodeOnExamAgreement1625001565001\n  implements MigrationInterface\n{\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'UPDATE `exam_agreement` SET `unique_code` = LPAD(CONVERT(ROUND(RAND() * 6379), CHAR), 8, \"0\")',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'UPDATE `exam_agreement` SET `unique_code` = UUID()',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grade.html":{"url":"classes/Grade.html","title":"class - Grade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/grade.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                period\n                            \n                            \n                                periodId\n                            \n                            \n                                professors\n                            \n                            \n                                students\n                            \n                            \n                                subject\n                            \n                            \n                                subjectId\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AnswerGrade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            period\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Period\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            periodId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            professors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Professor[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable({name: 'professor_grade'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            students\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Student[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable({name: 'student_grade'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subjectId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/grade.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnswerGrade } from 'src/answer/entities/answer-grade.entity';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Period } from './period.entity';\nimport { Professor } from './professor.entity';\nimport { Student } from './student.entity';\nimport { Subject } from './subject.entity';\n\n@Entity('grade')\nexport class Grade extends FFEntity {\n  @Column({ type: 'int' })\n  subjectId: number;\n\n  @Column({ type: 'int' })\n  periodId: number;\n\n  @ManyToOne(() => Subject)\n  subject: Subject;\n\n  @ManyToOne(() => Period)\n  period: Period;\n\n  @OneToMany(() => AnswerGrade, (answer) => answer.grade)\n  answers: AnswerGrade[];\n\n  @ManyToMany(() => Student)\n  @JoinTable({ name: 'student_grade' })\n  students: Student[];\n\n  @ManyToMany(() => Professor)\n  @JoinTable({ name: 'professor_grade' })\n  professors: Professor[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GradeIndex1624560625346.html":{"url":"classes/GradeIndex1624560625346.html","title":"class - GradeIndex1624560625346","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GradeIndex1624560625346\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624560625346-GradeIndex.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'GradeIndex1624560625346'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624560625346-GradeIndex.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class GradeIndex1624560625346 implements MigrationInterface {\n    name = 'GradeIndex1624560625346'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE INDEX `IX_question_group_class_examId` ON `question_group` (`class`, `exam_id`)\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"DROP INDEX `IX_question_group_class_examId` ON `question_group`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GradeRepository.html":{"url":"classes/GradeRepository.html","title":"class - GradeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GradeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/grade.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findByUserAndPeriod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByUserAndPeriod\n                        \n                        \n                    \n                \n            \n            \n                \nfindByUserAndPeriod(user: UserToFind, period: Period)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/repositories/grade.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserToFind\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    period\n                                    \n                                                Period\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Grade } from '../entities/grade.entity';\nimport { Period } from '../entities/period.entity';\nimport { Professor } from '../entities/professor.entity';\nimport { Student } from '../entities/student.entity';\nimport { UserToFind } from '../types/user-to-find.type';\n\n@EntityRepository(Grade)\nexport class GradeRepository extends BaseRepository {\n  findByUserAndPeriod(user: UserToFind, period: Period): Promise {\n    const query = this.createQueryBuilder('grade');\n\n    if (user instanceof Student) {\n      query.innerJoin('grade.students', 'user');\n    }\n\n    if (user instanceof Professor) {\n      query.innerJoin('grade.professors', 'user');\n    }\n\n    query\n      .innerJoinAndSelect('grade.subject', 'subject')\n      .where('grade.periodId = :periodId', { periodId: period.id })\n      .andWhere('user.id = :userId', { userId: user.id });\n\n    return query.getMany();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GradeService.html":{"url":"injectables/GradeService.html","title":"injectable - GradeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GradeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/grade.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                findByUserAndPeriod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gradeRepository: GradeRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/grade.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gradeRepository\n                                                  \n                                                        \n                                                                        GradeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/grade.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByUserAndPeriod\n                        \n                        \n                    \n                \n            \n            \n                \nfindByUserAndPeriod(user: UserToFind, period: Period)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/grade.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserToFind\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    period\n                                    \n                                                Period\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Grade } from '../entities/grade.entity';\nimport { Period } from '../entities/period.entity';\nimport { GradeRepository } from '../repositories/grade.repository';\nimport type { UserToFind } from '../types/user-to-find.type';\n\n@Injectable()\nexport class GradeService {\n  constructor(\n    @InjectRepository(GradeRepository)\n    private readonly gradeRepository: GradeRepository,\n  ) {}\n\n  findAll(): Promise {\n    return this.gradeRepository.find();\n  }\n\n  findByUserAndPeriod(user: UserToFind, period: Period): Promise {\n    return this.gradeRepository.findByUserAndPeriod(user, period);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/http-exception.filter.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('HttpExceptionFilter')\n                        \n                    \n                        \n                            \n                                    Defined in src/core/filters/http-exception.filter.ts:31\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http-exception.filter.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IClassValidatorException.html":{"url":"interfaces/IClassValidatorException.html","title":"interface - IClassValidatorException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IClassValidatorException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        message\n                                \n                                \n                                        statusCode\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IEntity.html":{"url":"interfaces/IEntity.html","title":"interface - IEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663575-SeedAuxiliary1.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { addMonths, endOfMonth, startOfMonth } from 'date-fns';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\nimport faker = require('faker');\nimport bcrypt = require('bcryptjs');\n\ninterface IEntity {\n  id: number;\n}\n\nconst defaultName = 'Gerado';\nconst student = {\n  cpf: '50172241065',\n  enrollment: '989898',\n};\n\nexport class SeedAuxiliary1624412129413 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'INSERT INTO `period` (`name`, `started_at`, `ended_at`) VALUES (?, ?, ?)',\n      [\n        defaultName,\n        startOfMonth(new Date()),\n        endOfMonth(addMonths(new Date(), 5)),\n      ],\n    );\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `course` (`code`, `title`) VALUES (?, ?)',\n      [defaultName, faker.random.alphaNumeric(20)],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `subject` (`code`, `title`, `course_id`) VALUES (?, ?, ?)',\n      [defaultName, faker.random.alpha({ count: 20, upcase: true }), course.id],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `grade` (`subject_id`, `period_id`) VALUES (?, ?)',\n      [subject.id, period.id],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(process.env.ADMIN_PASSWORD!, salt);\n\n    await queryRunner.query(\n      'INSERT INTO `auth` (`login`, `password`, `salt`) VALUES (?, ?, ?)',\n      [student.enrollment, password, salt],\n    );\n    await queryRunner.query(\n      'INSERT INTO `user` (`enrollment`, `cpf`, `type`, `role`) VALUES (?, ?, ?, ?)',\n      [student.enrollment, student.cpf, 'Student', 'manager'],\n    );\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `student_grade` (`user_id`, `grade_id`) VALUES (?, ?)',\n      [user.id, grade.id],\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n    await queryRunner.query('DELETE FROM `student_grade` WHERE `user_id` = ?', [\n      user.id,\n    ]);\n    await queryRunner.query('DELETE FROM `user` WHERE `enrollment` = ?', [\n      student.enrollment,\n    ]);\n    await queryRunner.query('DELETE FROM `auth` WHERE `login` = ?', [\n      student.enrollment,\n    ]);\n\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    await queryRunner.query('DELETE FROM `subject` WHERE `id` = ?', [\n      subject.id,\n    ]);\n    await queryRunner.query('DELETE FROM `course` WHERE `id` = ?', [course.id]);\n    await queryRunner.query('DELETE FROM `grade` WHERE `id` = ?', [grade.id]);\n    await queryRunner.query('DELETE FROM `period` WHERE `id` = ?', [period.id]);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IException.html":{"url":"interfaces/IException.html","title":"interface - IException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http-exception.filter.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        body\n                                \n                                \n                                        message\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                        path\n                                \n                                \n                                            Optional\n                                        stack\n                                \n                                \n                                        statusCode\n                                \n                                \n                                        timestamp\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stack\n                                    \n                                \n                                \n                                    \n                                        stack:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as sentry from '@sentry/node';\nimport { ConfigService } from '@nestjs/config';\n\ninterface IException {\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  stack?: any;\n  message: any;\n  name?: string;\n  body?: any;\n}\n\ninterface IClassValidatorException {\n  statusCode: number;\n  error: string;\n  message: string[];\n}\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger('HttpExceptionFilter');\n  constructor(private readonly configService: ConfigService) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    exception.initMessage();\n    const ex: IException = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n    };\n    const NODE_ENV = this.configService.get('NODE_ENV');\n    if (NODE_ENV !== 'production') {\n      ex.stack = exception.stack;\n      ex.name = exception.name;\n    }\n    // Only emit to Sentry exceptions that dont have code 4xx\n    const sendToSentry =\n      this.configService.get('SKIP_SENTRY') !== 'true' &&\n      NODE_ENV !== 'testing' &&\n      (status = 500);\n\n    if (sendToSentry) {\n      sentry.captureException(exception);\n    } else {\n      this.logger.error('Catched');\n      console.error(exception);\n    }\n\n    if (status === 400) {\n      const classValidatorEx = exception.getResponse() as IClassValidatorException;\n      ex.message = classValidatorEx.message;\n      ex.name = classValidatorEx.error;\n      ex.body = request.body;\n    }\n\n    response.status(status).send(ex);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InfraModule.html":{"url":"modules/InfraModule.html","title":"module - InfraModule","body":"\n                   \n\n\n\n\n    Modules\n    InfraModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_providers\n\n\n\ncluster_InfraModule_imports\n\n\n\ncluster_InfraModule_exports\n\n\n\n\nFirebaseModule\n\nFirebaseModule\n\n\n\nInfraModule\n\nInfraModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\n\n\nMailerService \n\nMailerService \n\nMailerService  -->\n\nInfraModule->MailerService \n\n\n\n\n\nSendEmailService \n\nSendEmailService \n\nSendEmailService  -->\n\nInfraModule->SendEmailService \n\n\n\n\n\nTemplateService \n\nTemplateService \n\nTemplateService  -->\n\nInfraModule->TemplateService \n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\nSendEmailService\n\nSendEmailService\n\nInfraModule -->\n\nSendEmailService->InfraModule\n\n\n\n\n\nTemplateService\n\nTemplateService\n\nInfraModule -->\n\nTemplateService->InfraModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infra/infra.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SendEmailService\n                        \n                        \n                            TemplateService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FirebaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailerService\n                        \n                        \n                            SendEmailService\n                        \n                        \n                            TemplateService\n                        \n                        \n                            UploaderService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\nimport { FirebaseModule } from 'src/firebase';\nimport { UploadController } from './controllers/upload.controller';\nimport { NODEMAILER_TRANSPORTER } from './infra.constants';\nimport { FirebaseUploader } from './services/firebase-uploader.service';\nimport { MailerService } from './services/mailer.service';\nimport { NodeMailerService } from './services/nodemailer.service';\nimport { SendEmailService } from './services/send-email.service';\nimport { TemplateService } from './services/template.service';\nimport { UploaderService } from './services/uploader.service';\n\n@Module({\n  imports: [\n    ConfigModule,\n    FirebaseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) =>\n        configService.get('firebase')!,\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [\n    { provide: UploaderService, useClass: FirebaseUploader },\n    {\n      provide: NODEMAILER_TRANSPORTER,\n      useFactory: (configService: ConfigService) =>\n        createTransport(configService.get('nodemailer')),\n      inject: [ConfigService],\n    },\n    { provide: MailerService, useClass: NodeMailerService },\n    TemplateService,\n    SendEmailService,\n  ],\n  controllers: [UploadController],\n  exports: [UploaderService, MailerService, TemplateService, SendEmailService],\n})\nexport class InfraModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        type\n                                \n                                \n                                        uid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  type: string;\n  uid: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userService: UserService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModuleOptions } from '@nestjs/jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { jwtConfigKey } from '../../config';\n\nimport { UserService } from '../../user/user.service';\nimport { AuthService } from '../auth.service';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n    configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true,\n      secretOrKey: configService.get(jwtConfigKey)!.secret,\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const auth = await this.authService.findAuth({ login: payload.uid });\n    if (!auth) {\n      throw new UnauthorizedException();\n    }\n\n    const user = await this.userService.findSpecializedUser({\n      enrollment: payload.uid,\n    });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { CustomLogger } from './logger.service';\n\n@Global()\n@Module({\n  providers: [CustomLogger],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/login.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        AuthDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@Length(PASSWORD_MIN, PASSWORD_MAX)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dtos/login.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         AuthDto\n\n                                \n                            \n                        \n                            \n                                    Defined in         AuthDto:6\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, Length } from 'class-validator';\nimport { PASSWORD_MAX, PASSWORD_MIN } from '../auth.constants';\nimport { AuthDto } from './auth.dto';\n\nexport class LoginDto extends AuthDto {\n  @IsString()\n  @Length(PASSWORD_MIN, PASSWORD_MAX)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MailerService.html":{"url":"classes/MailerService.html","title":"class - MailerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MailerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/mailer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            send\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    send(sendMailDto: SendMailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/mailer.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sendMailDto\n                                    \n                                                SendMailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SendMailDto } from '../dtos/send-mail.dto';\n\nexport abstract class MailerService {\n  abstract send(sendMailDto: SendMailDto): Promise;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NodeMailerService.html":{"url":"injectables/NodeMailerService.html","title":"injectable - NodeMailerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NodeMailerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/nodemailer.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(transporter: Transporter, configService: ConfigService, logger: CustomLogger)\n                    \n                \n                        \n                            \n                                Defined in src/infra/services/nodemailer.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        transporter\n                                                  \n                                                        \n                                                                    Transporter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        CustomLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            send\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    send(sendMailDto: SendMailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/nodemailer.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sendMailDto\n                                    \n                                                SendMailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Transporter } from 'nodemailer';\nimport { CustomLogger } from 'src/logger/logger.service';\n\nimport { SendMailDto } from '../dtos/send-mail.dto';\nimport { NODEMAILER_TRANSPORTER } from '../infra.constants';\nimport { MailerService } from './mailer.service';\n\n@Injectable()\nexport class NodeMailerService implements MailerService {\n  constructor(\n    @Inject(NODEMAILER_TRANSPORTER) private readonly transporter: Transporter,\n    private readonly configService: ConfigService,\n    private readonly logger: CustomLogger,\n  ) {\n    this.logger.setContext('NodeMailerService');\n  }\n\n  async send(sendMailDto: SendMailDto): Promise {\n    const envelope = {\n      from: `UNEB Form `,\n      to: sendMailDto.to,\n    };\n    this.logger.log(\n      await this.transporter.sendMail({\n        ...sendMailDto,\n        ...envelope,\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PayloadInterceptor.html":{"url":"injectables/PayloadInterceptor.html","title":"injectable - PayloadInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PayloadInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/payload.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(_: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/payload.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class PayloadInterceptor implements NestInterceptor {\n  intercept(_: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Period.html":{"url":"classes/Period.html","title":"class - Period","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Period\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/period.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                endedAt\n                            \n                            \n                                exams\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                startedAt\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exams\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/period.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport { Column, Entity, Index, OneToMany } from 'typeorm';\n\n@Entity('period')\n@Index('IX_period_started_at_ended_at', ['startedAt', 'endedAt'])\nexport class Period extends FFEntity {\n  @Column({ type: 'varchar', nullable: true })\n  name?: string;\n\n  @Column({ type: 'datetime' })\n  startedAt: Date;\n\n  @Column({ type: 'datetime' })\n  endedAt: Date;\n\n  @OneToMany(() => Exam, (exam) => exam.period)\n  exams: Exam[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PeriodIndex1624547816204.html":{"url":"classes/PeriodIndex1624547816204.html","title":"class - PeriodIndex1624547816204","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PeriodIndex1624547816204\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624547816204-PeriodIndex.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'PeriodIndex1624547816204'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624547816204-PeriodIndex.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class PeriodIndex1624547816204 implements MigrationInterface {\n    name = 'PeriodIndex1624547816204'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`\");\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `period_id` `period_id` int NOT NULL\");\n        await queryRunner.query(\"CREATE INDEX `IX_period_started_at_ended_at` ON `period` (`started_at`, `ended_at`)\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `exam` DROP FOREIGN KEY `FK_ba483ad17eb41fb181aa3a77d4f`\");\n        await queryRunner.query(\"DROP INDEX `IX_period_started_at_ended_at` ON `period`\");\n        await queryRunner.query(\"ALTER TABLE `exam` CHANGE `period_id` `period_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `exam` ADD CONSTRAINT `FK_ba483ad17eb41fb181aa3a77d4f` FOREIGN KEY (`period_id`) REFERENCES `period`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PeriodRepository.html":{"url":"classes/PeriodRepository.html","title":"class - PeriodRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PeriodRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/period.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Period } from '../entities/period.entity';\n\n@EntityRepository(Period)\nexport class PeriodRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PeriodService.html":{"url":"injectables/PeriodService.html","title":"injectable - PeriodService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PeriodService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/period.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                getLastPeriod\n                            \n                            \n                                    Async\n                                getPeriodByInterval\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(periodRepository: PeriodRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/period.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        periodRepository\n                                                  \n                                                        \n                                                                        PeriodRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLastPeriod\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLastPeriod()\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPeriodByInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPeriodByInterval(undefined: Interval)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/period.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Interval\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { LessThan, LessThanOrEqual, MoreThanOrEqual } from 'typeorm';\nimport { Period } from '../entities/period.entity';\nimport { PeriodRepository } from '../repositories/period.repository';\n\n@Injectable()\nexport class PeriodService {\n  constructor(\n    @InjectRepository(PeriodRepository)\n    private readonly periodRepository: PeriodRepository,\n  ) {}\n\n  findAll(): Promise {\n    return this.periodRepository.find();\n  }\n\n  // bool _rangeOverlapping(\n  //   Duration startA,\n  //   Duration endA,\n  //   Duration startB,\n  //   Duration endB,\n  // ) {\n  //   return (startA = startB);\n  // }\n\n  async getLastPeriod(): Promise {\n    const period = await this.periodRepository.findOne({\n      where: {\n        startedAt: MoreThanOrEqual(new Date()),\n        endedAt: LessThanOrEqual(new Date()),\n      },\n    });\n\n    if (!period) {\n      throw new NotFoundException('period not found for given date');\n    }\n\n    return period;\n  }\n\n  async getPeriodByInterval({ start, end }: Interval): Promise {\n    const period = await this.periodRepository.findOne({\n      where: {\n        startedAt: LessThan(end),\n        endedAt: MoreThanOrEqual(start),\n      },\n    });\n\n    if (!period) {\n      throw new NotFoundException('period not found for given date');\n    }\n\n    return period;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersonalQuestionGroup.html":{"url":"injectables/PersonalQuestionGroup.html","title":"injectable - PersonalQuestionGroup","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PersonalQuestionGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/providers/personal-group.provider.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPersonal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionGroupRepository, gradeService: GradeService)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/providers/personal-group.provider.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionGroupRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gradeService\n                                                  \n                                                        \n                                                                        GradeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPersonal(user: Student | Professor, exam: Exam)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/providers/personal-group.provider.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            Student | Professor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exam\n                                    \n                                                Exam\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Professor } from 'src/auxiliary/entities/professor.entity';\nimport { Student } from 'src/auxiliary/entities/student.entity';\nimport { GradeService } from 'src/auxiliary/services/grade.service';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport { QuestionGroupGrade } from '../dtos/question-group-grade.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { questionGroupRelations } from '../question.constants';\nimport { QuestionGroupRepository } from '../repositories/question-group.repository';\n\n@Injectable()\nexport class PersonalQuestionGroup {\n  constructor(\n    @InjectRepository(QuestionGroupRepository)\n    private readonly repository: QuestionGroupRepository,\n    private readonly gradeService: GradeService,\n  ) {}\n\n  async getPersonal(\n    user: Student | Professor,\n    exam: Exam,\n  ): Promise {\n    const grades = await this.gradeService.findByUserAndPeriod(\n      user,\n      exam.period,\n    );\n    if (!grades.length) {\n      return [];\n    }\n\n    const groupGrades = await this.repository.find({\n      where: { class: true, exam },\n      relations: questionGroupRelations,\n    });\n\n    return groupGrades\n      .reduce(\n        (result, group) => [\n          ...result,\n          ...grades.map((grade) => {\n            const groupGrade = Object.assign(new QuestionGroupGrade(), group);\n            groupGrade.grade = grade;\n            return groupGrade;\n          }),\n        ],\n        new Array(),\n      )\n      .sort((a, b) => a.id - b.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Professor.html":{"url":"classes/Professor.html","title":"class - Professor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Professor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/professor.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                professorGrades\n                            \n                            \n                                cpf\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    grades\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            professorGrades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, {lazy: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/professor.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true, nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:26\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        grades\n                    \n                \n\n                \n                    \n                        getgrades()\n                    \n                \n                            \n                                \n                                    Defined in src/auxiliary/entities/professor.entity.ts:10\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ChildEntity, ManyToMany } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Grade } from './grade.entity';\n\n@ChildEntity()\nexport class Professor extends User {\n  @ManyToMany(() => Grade, { lazy: true })\n  professorGrades: Promise;\n\n  get grades(): Promise {\n    return this.professorGrades;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfessorRepository.html":{"url":"classes/ProfessorRepository.html","title":"class - ProfessorRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfessorRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/professor.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Professor } from '../entities/professor.entity';\n\n@EntityRepository(Professor)\nexport class ProfessorRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfessorService.html":{"url":"injectables/ProfessorService.html","title":"injectable - ProfessorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfessorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/professor.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ProfessorRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/professor.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ProfessorRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/professor.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Professor } from '../entities/professor.entity';\nimport { ProfessorRepository } from '../repositories/professor.repository';\n\n@Injectable()\nexport class ProfessorService {\n  constructor(\n    @InjectRepository(ProfessorRepository)\n    private readonly repository: ProfessorRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const professor = this.repository.create(createDto);\n\n    return this.repository.save(professor);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                group\n                            \n                            \n                                groupId\n                            \n                            \n                                    Optional\n                                imageAlt\n                            \n                            \n                                    Optional\n                                imageUrl\n                            \n                            \n                                position\n                            \n                            \n                                required\n                            \n                            \n                                statement\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Answer[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QuestionGroup\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageAlt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            required\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Answer } from 'src/answer/entities/answer.entity';\nimport { FFEntity } from 'src/core/entities/ff.entity';\nimport { QuestionGroup } from 'src/question-group/entities/question-group.entity';\nimport { Column, Entity, Index, ManyToOne, OneToMany } from 'typeorm';\n\n@Entity()\nexport class Question extends FFEntity {\n  @Column({ type: 'text' })\n  statement: string;\n\n  @Column({ type: 'text', nullable: true })\n  imageUrl?: string;\n\n  @Column({ type: 'varchar', nullable: true })\n  imageAlt?: string;\n\n  @Column({ type: 'bool', default: true })\n  required: boolean;\n\n  @Column({ type: 'int' })\n  groupId: number;\n\n  @Index('IX_question_position')\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @ManyToOne(() => QuestionGroup)\n  group: QuestionGroup;\n\n  @OneToMany(() => Answer, (answer) => answer.question)\n  answers: Answer[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createQuestion\n                            \n                            \n                                    Async\n                                createQuestions\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: Question})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestions(groupId: number, createQuestionsDto: CreateQuestionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':groupId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createQuestionsDto\n                                    \n                                                CreateQuestionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(findDto: QuestionFindDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuesitonDto: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuesitonDto\n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: Question})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiNotFoundResponse, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { CreateQuestionDto } from '../dtos/create-question.dto';\nimport { QuestionFindDto } from '../dtos/question-find.dto';\nimport { ReorderQuestionDto } from '../dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from '../dtos/update-question.dto';\nimport { Question } from '../entities/question.entity';\nimport { QuestionService } from '../services/question.service';\nimport { CreateQuestionsDto } from '../dtos/create-questions.dto';\n\n@Controller('question')\n@ApiTags('Question')\n@UseGuards(JwtGuard)\nexport class QuestionController {\n  constructor(private readonly questionService: QuestionService) {}\n\n  @Post()\n  @ApiOkResponse({ type: Question })\n  async createQuestion(\n    @Body() createQuestionDto: CreateQuestionDto,\n  ): Promise {\n    return this.questionService.createQuestion(createQuestionDto);\n  }\n\n  @Post(':groupId')\n  @ApiOkResponse({ type: [Question] })\n  async createQuestions(\n    @Param('groupId', ParseIntPipe) groupId: number,\n    @Body() createQuestionsDto: CreateQuestionsDto,\n  ): Promise {\n    return this.questionService.createQuestions(groupId, createQuestionsDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [Question] })\n  async find(@Query() findDto: QuestionFindDto) {\n    return this.questionService.find(findDto);\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: Question })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionDto: UpdateQuestionDto,\n  ): Promise {\n    return this.questionService.update(id, updateQuestionDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({ type: [Question] })\n  async reorder(\n    @Body() reorderQuesitonDto: ReorderQuestionDto,\n  ): Promise {\n    return this.questionService.reorder(reorderQuesitonDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionFindDto.html":{"url":"classes/QuestionFindDto.html","title":"class - QuestionFindDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionFindDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/question-find.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                groupId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/question-find.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class QuestionFindDto {\n  @IsPositive()\n  @IsOptional()\n  groupId?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup.html":{"url":"classes/QuestionGroup.html","title":"class - QuestionGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/entities/question-group.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                personal\n                            \n                            \n                                position\n                            \n                            \n                                questions\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_group_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/entities/question-group.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Defined in src/question-group/entities/question-group.entity.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FFEntity } from 'src/core/entities/ff.entity';\nimport { Exam } from 'src/exam/entities/exam.entity';\nimport {\n  AfterLoad,\n  Column,\n  Entity,\n  Index,\n  ManyToOne,\n  OneToMany,\n} from 'typeorm';\nimport { Question } from './question.entity';\n\n@Entity()\n@Index('IX_question_group_class_examId', ['class', 'examId'])\nexport class QuestionGroup extends FFEntity {\n  @Column({ type: 'varchar' })\n  title: string;\n\n  // TODO: juntar essas flags em um enum\n  @Column({ type: 'bool', default: false })\n  class: boolean;\n\n  @Column({ type: 'bool', default: false })\n  personal: boolean;\n\n  @Index('IX_question_group_position')\n  @Column({ type: 'int', default: 0 })\n  position: number;\n\n  @Column({ type: 'int', nullable: true })\n  examId: number;\n\n  @OneToMany(() => Question, (question) => question.group)\n  questions: Question[];\n\n  @ManyToOne(() => Exam)\n  exam: Exam;\n\n  @AfterLoad()\n  sortItems() {\n    this.questions =\n      this.questions?.sort((a, b) => a.position - b.position) ?? [];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroup1620179231630.html":{"url":"classes/QuestionGroup1620179231630.html","title":"class - QuestionGroup1620179231630","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroup1620179231630\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620179231630-QuestionGroup.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup1620179231630'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620179231630-QuestionGroup.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionGroup1620179231630 implements MigrationInterface {\n    name = 'QuestionGroup1620179231630'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `question` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `statement` text NOT NULL, `image_url` text NOT NULL, `image_alt` varchar(255) NOT NULL DEFAULT '', `required` tinyint NOT NULL DEFAULT 1, `group_id` int NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"CREATE TABLE `question_group` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"DROP TABLE `question_group`\");\n        await queryRunner.query(\"DROP TABLE `question`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionGroupController.html":{"url":"controllers/QuestionGroupController.html","title":"controller - QuestionGroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionGroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/controllers/question-group.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question-group\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({type: QuestionGroup})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(examId: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me/:examId')@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(reorderQuestionGroupDto: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reorderQuestionGroupDto\n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({type: QuestionGroup})@ApiNotFoundResponse()\n                \n            \n\n            \n                \n                    Defined in src/question-group/controllers/question-group.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  ParseIntPipe,\n  Put,\n  Patch,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\n\nimport { QuestionGroupService } from '../services/question-group.service';\nimport { CreateQuestionGroupDto } from '../dtos/create-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dtos/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CopyQuestionGroupDto } from '../dtos/copy-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dtos/reorder-question-group.dto';\nimport { GetUser } from 'src/user/decoratos/get-user.decorator';\nimport { User } from 'src/user/entities/user.entity';\n\n@Controller('question-group')\n@ApiTags('QuestionGroup')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class QuestionGroupController {\n  constructor(private readonly questionGroupService: QuestionGroupService) {}\n\n  @Post()\n  @ApiOkResponse({ type: QuestionGroup })\n  async create(\n    @Body() createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.create(createQuestionGroupDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async findAll(): Promise {\n    return this.questionGroupService.findAll();\n  }\n\n  @Get('me/:examId')\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async findPersonal(\n    @Param('examId', ParseIntPipe) examId: number,\n    @GetUser() user: User,\n  ): Promise {\n    return this.questionGroupService.findPersonal({ examId, user });\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async findOne(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionGroupService.findOne(id);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.update(id, updateQuestionGroupDto);\n  }\n\n  @Put()\n  @ApiOkResponse({ type: QuestionGroup })\n  @ApiNotFoundResponse()\n  async copy(\n    @Body() copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.copy(copyQuestionGroupDto);\n  }\n\n  @Patch()\n  @ApiOkResponse({ type: [QuestionGroup] })\n  async reorder(\n    @Body() reorderQuestionGroupDto: ReorderQuestionGroupDto,\n  ): Promise {\n    return this.questionGroupService.reorder(reorderQuestionGroupDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  async remove(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.questionGroupService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupGrade.html":{"url":"classes/QuestionGroupGrade.html","title":"class - QuestionGroupGrade","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupGrade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/question-group-grade.dto.ts\n        \n\n\n            \n                Extends\n            \n            \n                        QuestionGroup\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                grade\n                            \n                            \n                                class\n                            \n                            \n                                exam\n                            \n                            \n                                examId\n                            \n                            \n                                personal\n                            \n                            \n                                position\n                            \n                            \n                                questions\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sortItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grade\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade\n\n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/question-group-grade.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:21\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exam\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Exam\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:37\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int', nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:31\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            personal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:24\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index('IX_question_group_position')@Column({type: 'int', default: 0})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:28\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         QuestionGroup\n\n                                \n                            \n                        \n                            \n                                    Defined in         QuestionGroup:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortItems\n                        \n                        \n                    \n                \n            \n            \n                \nsortItems()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @AfterLoad()\n                \n            \n\n            \n                \n                    Inherited from         QuestionGroup\n\n                \n            \n            \n                \n                        Defined in         QuestionGroup:40\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Grade } from 'src/auxiliary/entities/grade.entity';\nimport { QuestionGroup } from '../entities/question-group.entity';\n\nexport class QuestionGroupGrade extends QuestionGroup {\n  grade: Grade;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupGradeRemove1624883202213.html":{"url":"classes/QuestionGroupGradeRemove1624883202213.html","title":"class - QuestionGroupGradeRemove1624883202213","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupGradeRemove1624883202213\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624883202214-QuestionGroupGradeRemove.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroupGradeRemove1624883202213'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1624883202214-QuestionGroupGradeRemove.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624883202214-QuestionGroupGradeRemove.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624883202214-QuestionGroupGradeRemove.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class QuestionGroupGradeRemove1624883202213\n  implements MigrationInterface\n{\n  name = 'QuestionGroupGradeRemove1624883202213';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query('DROP TABLE `question_group_grade`');\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"CREATE TABLE `question_group_grade` (`created_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), `updated_at` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), `deleted_at` datetime(6) NULL, `id` int NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `class` tinyint NOT NULL DEFAULT 0, `personal` tinyint NOT NULL DEFAULT 0, `position` int NOT NULL DEFAULT '0', `exam_id` int NULL, INDEX `IX_question_group_position` (`position`), PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionGroupModule.html":{"url":"modules/QuestionGroupModule.html","title":"module - QuestionGroupModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionGroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_exports\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\ncluster_QuestionGroupModule_imports\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nAuxiliaryModule->QuestionGroupModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionGroupModule->QuestionService \n\n\n\n\n\nPersonalQuestionGroup\n\nPersonalQuestionGroup\n\nQuestionGroupModule -->\n\nPersonalQuestionGroup->QuestionGroupModule\n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionGroupModule -->\n\nQuestionService->QuestionGroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question-group/question-group.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PersonalQuestionGroup\n                        \n                        \n                            QuestionGroupService\n                        \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionGroupController\n                        \n                        \n                            QuestionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuxiliaryModule\n                        \n                        \n                            ExamModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuestionGroupService } from './services/question-group.service';\nimport { QuestionGroupController } from './controllers/question-group.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QuestionGroupRepository } from './repositories/question-group.repository';\nimport { QuestionController } from './controllers/question.controller';\nimport { ExamModule } from '../exam/exam.module';\nimport { QuestionService } from './services/question.service';\nimport { QuestionRepository } from './repositories/question.repository';\nimport { PersonalQuestionGroup } from './providers/personal-group.provider';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([QuestionGroupRepository, QuestionRepository]),\n    ExamModule,\n    AuxiliaryModule,\n  ],\n  controllers: [QuestionGroupController, QuestionController],\n  providers: [QuestionGroupService, PersonalQuestionGroup, QuestionService],\n  exports: [QuestionService],\n})\nexport class QuestionGroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupRepository.html":{"url":"classes/QuestionGroupRepository.html","title":"class - QuestionGroupRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/repositories/question-group.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from \"typeorm\";\nimport { BaseRepository } from \"typeorm-transactional-cls-hooked\";\nimport { QuestionGroup } from \"../entities/question-group.entity\";\n\n@EntityRepository(QuestionGroup)\nexport class QuestionGroupRepository extends BaseRepository {}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionGroupService.html":{"url":"injectables/QuestionGroupService.html","title":"injectable - QuestionGroupService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionGroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/services/question-group.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copy\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPersonal\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Private\n                                    Async\n                                setExamAndPosition\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionGroupRepository, examService: ExamService, questionService: QuestionService, personalGroup: PersonalQuestionGroup)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/services/question-group.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionGroupRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examService\n                                                  \n                                                        \n                                                                        ExamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        personalGroup\n                                                  \n                                                        \n                                                                        PersonalQuestionGroup\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copy(copyQuestionGroupDto: CopyQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    copyQuestionGroupDto\n                                    \n                                                CopyQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createQuestionGroupDto: CreateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionGroupDto\n                                    \n                                                CreateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPersonal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPersonal(undefined: FindPersonalDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindPersonalDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            setExamAndPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setExamAndPosition(questionGroup: QuestionGroup, examId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questionGroup\n                                    \n                                                QuestionGroup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    examId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateQuestionGroupDto: UpdateQuestionGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question-group.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateQuestionGroupDto\n                                    \n                                                UpdateQuestionGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { In } from 'typeorm';\n\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { ExamService } from 'src/exam/services/exam.service';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { CopyQuestionGroupDto } from '../dtos/copy-question-group.dto';\nimport { CreateQuestionGroupDto } from '../dtos/create-question-group.dto';\nimport { ReorderQuestionGroupDto } from '../dtos/reorder-question-group.dto';\nimport { UpdateQuestionGroupDto } from '../dtos/update-question-group.dto';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { questionGroupNotFound } from '../question-group.constants';\nimport { QuestionService } from './question.service';\nimport { QuestionGroupRepository } from '../repositories/question-group.repository';\nimport { last } from 'src/core/utils/last.util';\nimport { FindPersonalDto } from '../dtos/find-personal.dto';\nimport { PersonalQuestionGroup } from '../providers/personal-group.provider';\nimport { Student } from 'src/auxiliary/entities/student.entity';\nimport { Professor } from 'src/auxiliary/entities/professor.entity';\nimport { questionGroupRelations } from '../question.constants';\n\n@Injectable()\nexport class QuestionGroupService {\n  constructor(\n    @InjectRepository(QuestionGroupRepository)\n    private readonly repository: QuestionGroupRepository,\n    private readonly examService: ExamService,\n    private readonly questionService: QuestionService,\n    private readonly personalGroup: PersonalQuestionGroup,\n  ) {}\n\n  private async setExamAndPosition(\n    questionGroup: QuestionGroup,\n    examId: number,\n  ) {\n    questionGroup.exam = await this.examService.findOne(examId);\n\n    questionGroup.position =\n      (last(questionGroup.exam.groups)?.position ?? -1) + 1;\n  }\n\n  @Transactional()\n  async create(\n    createQuestionGroupDto: CreateQuestionGroupDto,\n  ): Promise {\n    const questionGroup = this.repository.create(createQuestionGroupDto);\n    if (createQuestionGroupDto.examId) {\n      await this.setExamAndPosition(\n        questionGroup,\n        createQuestionGroupDto.examId,\n      );\n    }\n    return this.repository.save(questionGroup);\n  }\n\n  findAll(): Promise {\n    return this.repository.find({ relations: questionGroupRelations});\n  }\n\n  async findOne(id: number): Promise {\n    const questionGroup = await this.repository.findOne({\n      where: { id },\n      relations: questionGroupRelations,\n    });\n\n    if (!questionGroup) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n\n    return questionGroup;\n  }\n\n  @Transactional()\n  async update(\n    id: number,\n    updateQuestionGroupDto: UpdateQuestionGroupDto,\n  ): Promise {\n    let questionGroup = await this.findOne(id);\n\n    if (\n      updateQuestionGroupDto.examId &&\n      updateQuestionGroupDto.examId !== questionGroup.examId\n    ) {\n      await this.setExamAndPosition(\n        questionGroup,\n        updateQuestionGroupDto.examId,\n      );\n    }\n\n    questionGroup = this.repository.merge(\n      questionGroup,\n      updateQuestionGroupDto,\n    );\n\n    return this.repository.save(questionGroup);\n  }\n\n  @Transactional()\n  async copy(\n    copyQuestionGroupDto: CopyQuestionGroupDto,\n  ): Promise {\n    const toCopy = await this.findOne(copyQuestionGroupDto.groupId);\n    const exam = await this.examService.findOne(copyQuestionGroupDto.examId);\n\n    const group = await this.repository.save(\n      this.repository.create({\n        ...toCopy,\n        questions: [],\n        exam,\n        id: undefined,\n      }),\n    );\n\n    group.questions = await this.questionService.copyToGroup(\n      group,\n      toCopy.questions,\n    );\n\n    return group;\n  }\n\n  @Transactional()\n  async reorder({\n    examId,\n    groupIds,\n  }: ReorderQuestionGroupDto): Promise {\n    const groups = await this.repository.find({\n      where: { examId, id: In(groupIds) },\n    });\n\n    const groupIdPositionMap: ReadonlyMap = new Map(\n      groupIds.map((id, position) => [id, position]),\n    );\n\n    return (\n      await Promise.all(\n        groups.map(async (group) => {\n          group.position = groupIdPositionMap.get(group.id) ?? 0;\n          await this.repository.update(group.id, { position: group.position });\n          return group;\n        }),\n      )\n    ).sort((a, b) => a.position - b.position);\n  }\n\n  async findPersonal({\n    examId,\n    user,\n  }: FindPersonalDto): Promise {\n    const exam = await this.examService.findOne(examId);\n\n    const result = await this.repository.find({\n      where: { exam, class: false },\n      relations: questionGroupRelations,\n    });\n\n    if (user instanceof Student || user instanceof Professor) {\n      const personalGroups = await this.personalGroup.getPersonal(user, exam);\n      result.push(...personalGroups);\n    }\n\n    return result;\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete(id);\n\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionGroupNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionGroupTarget1621992475274.html":{"url":"classes/QuestionGroupTarget1621992475274.html","title":"class - QuestionGroupTarget1621992475274","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionGroupTarget1621992475274\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621992475274-QuestionGroupTarget.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroupTarget1621992475274'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621992475274-QuestionGroupTarget.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class QuestionGroupTarget1621992475274 implements MigrationInterface {\n  name = 'QuestionGroupTarget1621992475274';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"ALTER TABLE `question_group` ADD `target` enum ('Student', 'Professor') NULL\",\n    );\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query('ALTER TABLE `user` DROP COLUMN `type`');\n    await queryRunner.query(\n      \"ALTER TABLE `user` ADD `type` enum ('Professor', 'Student', 'User') NOT NULL\",\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IX_question_group_target` ON `question_group` (`target`)',\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user` (`type`)',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'DROP INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user`',\n    );\n    await queryRunner.query(\n      'DROP INDEX `IX_question_group_target` ON `question_group`',\n    );\n    await queryRunner.query('ALTER TABLE `user` DROP COLUMN `type`');\n    await queryRunner.query(\n      'ALTER TABLE `user` ADD `type` varchar(255) NOT NULL',\n    );\n    await queryRunner.query(\n      'CREATE INDEX `IDX_31ef2b4d30675d0c15056b7f6e` ON `user` (`type`)',\n    );\n    await queryRunner.query(\n      'ALTER TABLE `question_group` DROP COLUMN `target`',\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuestionGroupUser.html":{"url":"interfaces/QuestionGroupUser.html","title":"interface - QuestionGroupUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  QuestionGroupUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/interfaces/question-group-user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface QuestionGroupUser {\n  id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionImage1620477869366.html":{"url":"classes/QuestionImage1620477869366.html","title":"class - QuestionImage1620477869366","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionImage1620477869366\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620477869366-QuestionImage.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionImage1620477869366'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620477869366-QuestionImage.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionImage1620477869366 implements MigrationInterface {\n    name = 'QuestionImage1620477869366'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_alt` `image_alt` varchar(255) NOT NULL DEFAULT ''\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `image_url` `image_url` text NOT NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPosition1620488935141.html":{"url":"classes/QuestionPosition1620488935141.html","title":"class - QuestionPosition1620488935141","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPosition1620488935141\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620488935141-QuestionPosition.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionPosition1620488935141'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620488935141-QuestionPosition.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionPosition1620488935141 implements MigrationInterface {\n    name = 'QuestionPosition1620488935141'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` ADD `position` int NOT NULL DEFAULT '0'\");\n        await queryRunner.query(\"ALTER TABLE `question_group` ADD `position` int NOT NULL DEFAULT '0'\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question_group` DROP COLUMN `position`\");\n        await queryRunner.query(\"ALTER TABLE `question` DROP COLUMN `position`\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPositionIdx1620563708532.html":{"url":"classes/QuestionPositionIdx1620563708532.html","title":"class - QuestionPositionIdx1620563708532","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPositionIdx1620563708532\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1620563708532-QuestionPositionIdx.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionPositionIdx1620563708532'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1620563708532-QuestionPositionIdx.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class QuestionPositionIdx1620563708532 implements MigrationInterface {\n    name = 'QuestionPositionIdx1620563708532'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NOT NULL\");\n        await queryRunner.query(\"CREATE INDEX `IX_question_position` ON `question` (`position`)\");\n        await queryRunner.query(\"CREATE INDEX `IX_question_group_position` ON `question_group` (`position`)\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"ALTER TABLE `question` DROP FOREIGN KEY `FK_3b2789ae1c494ff1bf8dd4d4607`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_group_position` ON `question_group`\");\n        await queryRunner.query(\"DROP INDEX `IX_question_position` ON `question`\");\n        await queryRunner.query(\"ALTER TABLE `question` CHANGE `group_id` `group_id` int NULL\");\n        await queryRunner.query(\"ALTER TABLE `question` ADD CONSTRAINT `FK_3b2789ae1c494ff1bf8dd4d4607` FOREIGN KEY (`group_id`) REFERENCES `question_group`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION\");\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionRepository.html":{"url":"classes/QuestionRepository.html","title":"class - QuestionRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/repositories/question.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Question } from '../entities/question.entity';\n\n@EntityRepository(Question)\nexport class QuestionRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/services/question.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                copyToGroup\n                            \n                            \n                                    Async\n                                createQuestion\n                            \n                            \n                                    Async\n                                createQuestions\n                            \n                            \n                                find\n                            \n                            \n                                findByIds\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                    Async\n                                getNextPosition\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                reorder\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: QuestionRepository, groupService: QuestionGroupService)\n                    \n                \n                        \n                            \n                                Defined in src/question-group/services/question.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        QuestionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        groupService\n                                                  \n                                                        \n                                                                        QuestionGroupService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            copyToGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copyToGroup(group: QuestionGroup, questions: Question[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                QuestionGroup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questions\n                                    \n                                                Question[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestion(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createQuestionDto\n                                    \n                                                CreateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createQuestions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createQuestions(groupId: number, createQuestionsDto: CreateQuestionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createQuestionsDto\n                                    \n                                                CreateQuestionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(findDto: QuestionFindDto)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findDto\n                                    \n                                                QuestionFindDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByIds\n                        \n                        \n                    \n                \n            \n            \n                \nfindByIds(ids: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getNextPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNextPosition(groupId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reorder\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reorder(undefined: ReorderQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ReorderQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/question-group/services/question.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                                UpdateQuestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SoftDeleteResult } from 'src/core/interfaces/soft-delete-result.interface';\nimport { In } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\nimport { QuestionGroup } from '../entities/question-group.entity';\nimport { CreateQuestionDto } from '../dtos/create-question.dto';\nimport { QuestionFindDto } from '../dtos/question-find.dto';\nimport { ReorderQuestionDto } from '../dtos/reorder-question.dto';\nimport { UpdateQuestionDto } from '../dtos/update-question.dto';\nimport { Question } from '../entities/question.entity';\nimport { questionNotFound } from '../question.constants';\nimport { QuestionRepository } from '../repositories/question.repository';\nimport { QuestionGroupService } from './question-group.service';\nimport { last } from 'src/core/utils/last.util';\nimport { CreateQuestionsDto } from '../dtos/create-questions.dto';\n\n@Injectable()\nexport class QuestionService {\n  constructor(\n    @InjectRepository(QuestionRepository)\n    private readonly repository: QuestionRepository,\n    @Inject(forwardRef(() => QuestionGroupService))\n    private readonly groupService: QuestionGroupService,\n  ) {}\n\n  private async getNextPosition(groupId: number): Promise {\n    const { questions } = await this.groupService.findOne(groupId);\n\n    return (last(questions)?.position ?? -1) + 1;\n  }\n\n  @Transactional()\n  async createQuestion(\n    createQuestionDto: CreateQuestionDto,\n  ): Promise {\n    const question = this.repository.create({\n      ...createQuestionDto,\n      position: await this.getNextPosition(createQuestionDto.groupId),\n    });\n\n    return this.repository.save(question);\n  }\n\n  @Transactional()\n  async createQuestions(\n    groupId: number,\n    createQuestionsDto: CreateQuestionsDto,\n  ): Promise {\n    const questions = this.repository.create(\n      createQuestionsDto.questions.map((dto, position) =>\n        this.repository.create({ ...dto, position, groupId }),\n      ),\n    );\n\n    return this.repository.save(questions);\n  }\n\n  find(findDto: QuestionFindDto): Promise {\n    return this.repository.find({\n      where: (qb) => {\n        if (findDto.groupId) {\n          qb.where(`${qb.alias}.groupId = :groupId`, findDto);\n        }\n        return qb;\n      },\n    });\n  }\n\n  findByIds(ids: number[]): Promise {\n    return this.repository.findByIds(ids);\n  }\n\n  async findOne(id: number): Promise {\n    const question = await this.repository.findOne({ id });\n    if (!question) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n\n    return question;\n  }\n\n  @Transactional()\n  async update(id: number, updateDto: UpdateQuestionDto): Promise {\n    let question = await this.findOne(id);\n\n    if (updateDto.groupId && question.groupId !== updateDto.groupId) {\n      question.position = await this.getNextPosition(updateDto.groupId);\n    }\n\n    question = this.repository.merge(question, updateDto);\n\n    return this.repository.save(question);\n  }\n\n  @Transactional()\n  async copyToGroup(\n    group: QuestionGroup,\n    questions: Question[],\n  ): Promise {\n    return this.repository.save(\n      questions.map((question) =>\n        this.repository.create({ ...question, group, id: undefined }),\n      ),\n    );\n  }\n\n  @Transactional()\n  async reorder({\n    groupId,\n    questionIds,\n  }: ReorderQuestionDto): Promise {\n    const questions = await this.repository.find({\n      where: { groupId, id: In(questionIds) },\n    });\n\n    const questionPositionMap: ReadonlyMap = new Map(\n      questionIds.map((id, position) => [id, position]),\n    );\n\n    return this.repository.save(\n      questions.map((question) => {\n        question.position = questionPositionMap.get(question.id) ?? 0;\n        return question;\n      }),\n    );\n  }\n\n  @Transactional()\n  async remove(id: number): Promise {\n    const result: SoftDeleteResult = await this.repository.softDelete({ id });\n    if (!result.raw.affectedRows) {\n      throw new NotFoundException({ id }, questionNotFound);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionDto.html":{"url":"classes/ReorderQuestionDto.html","title":"class - ReorderQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/reorder-question.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                groupId\n                            \n                            \n                                questionIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from \"class-validator\";\n\nexport class ReorderQuestionDto {\n  @IsPositive()\n  groupId: number;\n\n  @IsArray()\n  @IsPositive({each: true})\n  questionIds: number[];\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReorderQuestionGroupDto.html":{"url":"classes/ReorderQuestionGroupDto.html","title":"class - ReorderQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReorderQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/reorder-question-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                groupIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupIds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@IsPositive({each: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/question-group/dtos/reorder-question-group.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsPositive } from 'class-validator';\n\nexport class ReorderQuestionGroupDto {\n  @IsPositive()\n  examId: number;\n\n  @IsArray()\n  @IsPositive({ each: true })\n  groupIds: number[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SeedAuxiliary1624412129413.html":{"url":"classes/SeedAuxiliary1624412129413.html","title":"class - SeedAuxiliary1624412129413","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SeedAuxiliary1624412129413\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1624416663575-SeedAuxiliary1.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663575-SeedAuxiliary1.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1624416663575-SeedAuxiliary1.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { addMonths, endOfMonth, startOfMonth } from 'date-fns';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\nimport faker = require('faker');\nimport bcrypt = require('bcryptjs');\n\ninterface IEntity {\n  id: number;\n}\n\nconst defaultName = 'Gerado';\nconst student = {\n  cpf: '50172241065',\n  enrollment: '989898',\n};\n\nexport class SeedAuxiliary1624412129413 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'INSERT INTO `period` (`name`, `started_at`, `ended_at`) VALUES (?, ?, ?)',\n      [\n        defaultName,\n        startOfMonth(new Date()),\n        endOfMonth(addMonths(new Date(), 5)),\n      ],\n    );\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `course` (`code`, `title`) VALUES (?, ?)',\n      [defaultName, faker.random.alphaNumeric(20)],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `subject` (`code`, `title`, `course_id`) VALUES (?, ?, ?)',\n      [defaultName, faker.random.alpha({ count: 20, upcase: true }), course.id],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `grade` (`subject_id`, `period_id`) VALUES (?, ?)',\n      [subject.id, period.id],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    const salt = await bcrypt.genSalt();\n    const password = await bcrypt.hash(process.env.ADMIN_PASSWORD!, salt);\n\n    await queryRunner.query(\n      'INSERT INTO `auth` (`login`, `password`, `salt`) VALUES (?, ?, ?)',\n      [student.enrollment, password, salt],\n    );\n    await queryRunner.query(\n      'INSERT INTO `user` (`enrollment`, `cpf`, `type`, `role`) VALUES (?, ?, ?, ?)',\n      [student.enrollment, student.cpf, 'Student', 'manager'],\n    );\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n\n    await queryRunner.query(\n      'INSERT INTO `student_grade` (`user_id`, `grade_id`) VALUES (?, ?)',\n      [user.id, grade.id],\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    const [\n      user,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `user` WHERE `enrollment` = ?',\n      [student.enrollment],\n    );\n    await queryRunner.query('DELETE FROM `student_grade` WHERE `user_id` = ?', [\n      user.id,\n    ]);\n    await queryRunner.query('DELETE FROM `user` WHERE `enrollment` = ?', [\n      student.enrollment,\n    ]);\n    await queryRunner.query('DELETE FROM `auth` WHERE `login` = ?', [\n      student.enrollment,\n    ]);\n\n    const [\n      period,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `period` WHERE `name` = ?',\n      [defaultName],\n    );\n    const [\n      course,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `course` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      subject,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `subject` WHERE `code` = ?',\n      [defaultName],\n    );\n    const [\n      grade,\n    ]: IEntity[] = await queryRunner.query(\n      'SELECT `id` FROM `grade` WHERE `subject_id` = ? AND `period_id` = ?',\n      [subject.id, period.id],\n    );\n\n    await queryRunner.query('DELETE FROM `subject` WHERE `id` = ?', [\n      subject.id,\n    ]);\n    await queryRunner.query('DELETE FROM `course` WHERE `id` = ?', [course.id]);\n    await queryRunner.query('DELETE FROM `grade` WHERE `id` = ?', [grade.id]);\n    await queryRunner.query('DELETE FROM `period` WHERE `id` = ?', [period.id]);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendAgreementEmailDto.html":{"url":"interfaces/SendAgreementEmailDto.html","title":"interface - SendAgreementEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SendAgreementEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/dtos/send-agreement-email.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        agreement\n                                \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        agreement\n                                    \n                                \n                                \n                                    \n                                        agreement:         ExamAgreement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExamAgreement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/exam-agreement.entity';\n\nexport interface SendAgreementEmailDto {\n  user: { email: string };\n  agreement: ExamAgreement;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SendEmailService.html":{"url":"injectables/SendEmailService.html","title":"injectable - SendEmailService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SendEmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/send-email.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendAgreementEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService, templateService: TemplateService)\n                    \n                \n                        \n                            \n                                Defined in src/infra/services/send-email.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                        MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateService\n                                                  \n                                                        \n                                                                        TemplateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendAgreementEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendAgreementEmail(dto: SendAgreementEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/send-email.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SendAgreementEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SendAgreementEmailDto } from '../dtos/send-agreement-email.dto';\nimport { MailerService } from './mailer.service';\nimport { TemplateService } from './template.service';\n\n@Injectable()\nexport class SendEmailService {\n  constructor(\n    private readonly mailerService: MailerService,\n    private readonly templateService: TemplateService,\n  ) {}\n\n  async sendAgreementEmail(dto: SendAgreementEmailDto): Promise {\n    const html = this.templateService.get('agreement', dto.agreement);\n    const text = this.templateService.get('agreement-text', dto.agreement);\n\n    process.nextTick(() =>\n      this.mailerService\n        .send({\n          html,\n          text,\n          subject: 'Seu código de sorte',\n          to: dto.user.email,\n        })\n        .catch(console.error),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendMailDto.html":{"url":"classes/SendMailDto.html","title":"class - SendMailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendMailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/dtos/send-mail.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                html\n                            \n                            \n                                subject\n                            \n                            \n                                text\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            html\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/infra/dtos/send-mail.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/infra/dtos/send-mail.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/infra/dtos/send-mail.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            to\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/infra/dtos/send-mail.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SendMailDto {\n  html: string;\n  text: string;\n  to: string;\n  subject: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SoftDeleteResult.html":{"url":"interfaces/SoftDeleteResult.html","title":"interface - SoftDeleteResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SoftDeleteResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/soft-delete-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        raw\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        raw\n                                    \n                                \n                                \n                                    \n                                        raw:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SoftDeleteResult {\n  raw: {\n    affectedRows: number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Student.html":{"url":"classes/Student.html","title":"class - Student","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Student\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/student.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        User\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                studentGrades\n                            \n                            \n                                cpf\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    grades\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            studentGrades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, {lazy: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/student.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:14\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true, nullable: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:17\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:26\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         User\n\n                                \n                            \n                        \n                            \n                                    Defined in         User:20\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        grades\n                    \n                \n\n                \n                    \n                        getgrades()\n                    \n                \n                            \n                                \n                                    Defined in src/auxiliary/entities/student.entity.ts:10\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ChildEntity, ManyToMany } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Grade } from './grade.entity';\n\n@ChildEntity()\nexport class Student extends User {\n  @ManyToMany(() => Grade, { lazy: true })\n  studentGrades!: Promise;\n\n  get grades(): Promise {\n    return this.studentGrades;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StudentRepository.html":{"url":"classes/StudentRepository.html","title":"class - StudentRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StudentRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/repositories/student.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { Student } from '../entities/student.entity';\n\n@EntityRepository(Student)\nexport class StudentRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StudentService.html":{"url":"injectables/StudentService.html","title":"injectable - StudentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StudentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/services/student.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStudent\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: StudentRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auxiliary/services/student.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        StudentRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStudent\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStudent(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auxiliary/services/student.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserDto } from 'src/user/dtos/user.dto';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from '../../user/dtos/create-user.dto';\nimport { Student } from '../entities/student.entity';\nimport { StudentRepository } from '../repositories/student.repository';\n\n@Injectable()\nexport class StudentService {\n  constructor(\n    @InjectRepository(StudentRepository)\n    private readonly repository: StudentRepository,\n  ) {}\n\n  @Transactional()\n  createStudent(createDto: CreateUserDto): Promise {\n    const student = this.repository.create(createDto);\n\n    return this.repository.save(student);\n  }\n\n  findOne(userDto: UserDto): Promise {\n    return this.repository.findOne({ ...userDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Subject.html":{"url":"classes/Subject.html","title":"class - Subject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auxiliary/entities/subject.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                course\n                            \n                            \n                                courseId\n                            \n                            \n                                grades\n                            \n                            \n                                title\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            course\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Course\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            courseId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grades\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Grade[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auxiliary/entities/subject.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, OneToMany } from 'typeorm';\n\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { Course } from './course.entity';\nimport { Grade } from './grade.entity';\n\n@Entity('subject')\nexport class Subject extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  code: string;\n\n  @Column({ type: 'varchar' })\n  title: string;\n\n  @Column({ type: 'int' })\n  courseId: number;\n\n  @ManyToOne(() => Course)\n  course: Course;\n\n  @OneToMany(() => Grade, (grade) => grade.subject)\n  grades: Grade[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerOptions.html":{"url":"interfaces/SwaggerOptions.html","title":"interface - SwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/interfaces/swagger.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        title\n                                \n                                \n                                        users\n                                \n                                \n                                        version\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        users\n                                    \n                                \n                                \n                                    \n                                        users:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerOptions {\n  title: string;\n  description: string;\n  version: string;\n  users: Record;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemplateService.html":{"url":"injectables/TemplateService.html","title":"injectable - TemplateService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TemplateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/template.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                templateMap\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infra/services/template.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(name: string, vars: T)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/template.service.ts:24\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    vars\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            templateMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ReadonlyMap\n\n                        \n                    \n                        \n                            \n                                    Defined in src/infra/services/template.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { readdirSync, readFileSync } from 'fs';\nimport { render } from 'mustache';\nimport { basename, join } from 'path';\n\n@Injectable()\nexport class TemplateService {\n  private readonly templateMap: ReadonlyMap;\n\n  constructor() {\n    const basePath = join(__dirname, '..', '..', '..', 'views');\n    const extRe = /.+\\.mustache$/u;\n\n    this.templateMap = new Map(\n      readdirSync(basePath)\n        .filter((file) => file.match(extRe))\n        .map((file) => [\n          basename(file, '.mustache'),\n          readFileSync(join(basePath, file), 'utf-8'),\n        ]),\n    );\n  }\n\n  get(name: string, vars: T): string {\n    const template = this.templateMap.get(name);\n    if (!template) {\n      throw new InternalServerErrorException('Template not supported');\n    }\n\n    return render(template, vars);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimestampEntity.html":{"url":"classes/TimestampEntity.html","title":"class - TimestampEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimestampEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/entities/timestamp.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/entities/timestamp.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport class TimestampEntity extends BaseEntity {\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnswerDto.html":{"url":"classes/UpdateAnswerDto.html","title":"class - UpdateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answer/dto/update-answer.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnswerDto } from './create-answer.dto';\n\nexport class UpdateAnswerDto extends PartialType(CreateAnswerDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamAgreementDto.html":{"url":"classes/UpdateExamAgreementDto.html","title":"class - UpdateExamAgreementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamAgreementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                anonymous\n                            \n                            \n                                    Optional\n                                observation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            anonymous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsBoolean()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/update-exam-agreement.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            observation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/update-exam-agreement.dto.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n} from 'class-validator';\nimport { ExamUser } from '../interfaces/exam-user.interface';\n\nexport class UpdateExamAgreementQueryDto {\n  @IsPositive()\n  @Type(() => Number)\n  examId: number;\n\n  user: ExamUser;\n}\n\nexport class UpdateExamAgreementDto {\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  observation?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Type(() => Boolean)\n  anonymous?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamAgreementQueryDto.html":{"url":"classes/UpdateExamAgreementQueryDto.html","title":"class - UpdateExamAgreementQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamAgreementQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam-agreement.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examId\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/update-exam-agreement.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ExamUser\n\n                        \n                    \n                        \n                            \n                                    Defined in src/exam/dtos/update-exam-agreement.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsPositive,\n  IsString,\n} from 'class-validator';\nimport { ExamUser } from '../interfaces/exam-user.interface';\n\nexport class UpdateExamAgreementQueryDto {\n  @IsPositive()\n  @Type(() => Number)\n  examId: number;\n\n  user: ExamUser;\n}\n\nexport class UpdateExamAgreementDto {\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  observation?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Type(() => Boolean)\n  anonymous?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamDto.html":{"url":"classes/UpdateExamDto.html","title":"class - UpdateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateExamDto } from './create-exam.dto';\n\nexport class UpdateExamDto extends PartialType(CreateExamDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionDto.html":{"url":"classes/UpdateQuestionDto.html","title":"class - UpdateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/update-question.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateQuestionDto } from './create-question.dto';\n\nexport class UpdateQuestionDto extends PartialType(CreateQuestionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionGroupDto.html":{"url":"classes/UpdateQuestionGroupDto.html","title":"class - UpdateQuestionGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question-group/dtos/update-question-group.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateQuestionGroupDto } from './create-question-group.dto';\n\nexport class UpdateQuestionGroupDto extends PartialType(CreateQuestionGroupDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/update-user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsOptional } from 'class-validator';\n\nexport class UpdateUserDto {\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadController.html":{"url":"controllers/UploadController.html","title":"controller - UploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/controllers/upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                upload\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/infra/controllers/upload.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { UPLOAD_PATH } from '../infra.constants';\nimport { UploaderService } from '../services/uploader.service';\n\n@Controller('upload')\n@ApiTags('Upload')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class UploadController {\n  constructor(private readonly service: UploaderService) {}\n\n  @Post()\n  @UseInterceptors(FileInterceptor('file'))\n  async upload(@UploadedFile() file: Express.Multer.File) {\n    return this.service.upload(file, UPLOAD_PATH);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploaderService.html":{"url":"classes/UploaderService.html","title":"class - UploaderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploaderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infra/services/uploader.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileDto: FileSendDto, path?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infra/services/uploader.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                FileSendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FileSendDto } from '../dtos/file-send.dto';\n\nexport abstract class UploaderService {\n  abstract upload(fileDto: FileSendDto, path?: string): Promise;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        FFEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cpf\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                enrollment\n                            \n                            \n                                examAgreements\n                            \n                            \n                                role\n                            \n                            \n                                type\n                            \n                            \n                                id\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                createdAt\n                            \n                            \n                                deletedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            examAgreements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExamAgreement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', default: undefined, enum: UserRole})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: UserType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:6\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         FFEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         FFEntity:13\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deletedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimestampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimestampEntity:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExamAgreement } from 'src/exam/entities/exam-agreement.entity';\nimport { Column, Entity, OneToMany, TableInheritance } from 'typeorm';\nimport { FFEntity } from '../../core/entities/ff.entity';\nimport { UserRole } from '../enum/user-role.enum';\nimport { UserType } from '../enum/user-type.enum';\n\n@Entity('user')\n@TableInheritance({ column: { type: 'enum', name: 'type', enum: UserType } })\nexport class User extends FFEntity {\n  @Column({ type: 'varchar', unique: true })\n  enrollment: string;\n\n  @Column({ type: 'varchar', unique: true })\n  cpf: string;\n\n  @Column({ type: 'varchar', unique: true, nullable: true })\n  email?: string;\n\n  @Column({ type: 'enum', enum: UserType })\n  type: UserType;\n\n  @Column({ type: 'enum', default: UserRole.REGULAR, enum: UserRole })\n  role: UserRole;\n\n  @OneToMany(() => ExamAgreement, (agreement) => agreement.user)\n  examAgreements: ExamAgreement[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                getUser\n                            \n                            \n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \nupdateUser(updateUserDto: UpdateUserDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@UseGuards(JwtGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/controllers/user.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Put, UseGuards } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtGuard } from '../../auth/guards/jwt.guard';\nimport { GetUser } from '../decoratos/get-user.decorator';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { UpdateUserDto } from '../dtos/update-user.dto';\nimport { User } from '../entities/user.entity';\nimport { UserService } from '../user.service';\n\n@Controller('user')\n@ApiTags('User')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  createUser(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUser(createUserDto);\n  }\n\n  @Get()\n  @UseGuards(JwtGuard)\n  getUser(@GetUser() user: User) {\n    return user;\n  }\n\n  @Put()\n  @UseGuards(JwtGuard)\n  updateUser(@Body() updateUserDto: UpdateUserDto, @GetUser() user: User) {\n    return this.userService.updateUser(user.enrollment, updateUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                enrollment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dtos/user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class UserDto {\n  @IsString()\n  @IsNotEmpty()\n  enrollment: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEmail1625013724392.html":{"url":"classes/UserEmail1625013724392.html","title":"class - UserEmail1625013724392","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEmail1625013724392\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1625013724393-UserEmail.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'UserEmail1625013724392'\n                        \n                    \n                        \n                            \n                                    Defined in src/database/migrations/1625013724393-UserEmail.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1625013724393-UserEmail.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1625013724393-UserEmail.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class UserEmail1625013724392 implements MigrationInterface {\n  name = 'UserEmail1625013724392';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query('ALTER TABLE `user` ADD `email` varchar(255) NULL');\n    await queryRunner.query(\n      'ALTER TABLE `user` ADD UNIQUE INDEX `IDX_e12875dfb3b1d92d7d7c5377e2` (`email`)',\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      'ALTER TABLE `user` DROP INDEX `IDX_e12875dfb3b1d92d7d7c5377e2`',\n    );\n    await queryRunner.query('ALTER TABLE `user` DROP COLUMN `email`');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuxiliaryModule } from 'src/auxiliary/auxiliary.module';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { UserController } from './controllers/user.controller';\nimport { UserRepository } from './repositories/user.repository';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    forwardRef(() => AuthModule),\n    forwardRef(() => AuxiliaryModule),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/repositories/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseRepository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository } from 'typeorm';\nimport { BaseRepository } from 'typeorm-transactional-cls-hooked';\nimport { User } from '../entities/user.entity';\n\n@EntityRepository(User)\nexport class UserRepository extends BaseRepository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserResult.html":{"url":"interfaces/UserResult.html","title":"interface - UserResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/interfaces/user-specialized-result.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         UserType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserType } from '../enum/user-type.enum';\n\nexport interface UserResult {\n  readonly type: UserType;\n  readonly id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Private\n                                    Async\n                                createUserByType\n                            \n                            \n                                    Async\n                                findSpecializedUser\n                            \n                            \n                                findUser\n                            \n                            \n                                    Async\n                                mustFindSpecializedUser\n                            \n                            \n                                    Async\n                                mustFindUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, authService: AuthService, studentService: StudentService, professorService: ProfessorService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        studentService\n                                                  \n                                                        \n                                                                        StudentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        professorService\n                                                  \n                                                        \n                                                                        ProfessorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/user/user.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createUserByType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserByType(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findUser\n                        \n                        \n                    \n                \n            \n            \n                \nfindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindSpecializedUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindSpecializedUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            mustFindUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mustFindUser(userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(enrollment: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Transactional()\n                \n            \n\n            \n                \n                    Defined in src/user/user.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    enrollment\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthService } from 'src/auth/auth.service';\nimport { ProfessorService } from 'src/auxiliary/services/professor.service';\nimport { StudentService } from 'src/auxiliary/services/student.service';\nimport {\n  runOnTransactionComplete,\n  Transactional,\n} from 'typeorm-transactional-cls-hooked';\n\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { UpdateUserDto } from './dtos/update-user.dto';\nimport { UserDto } from './dtos/user.dto';\nimport { User } from './entities/user.entity';\nimport { UserType } from './enum/user-type.enum';\nimport { UserResult } from './interfaces/user-specialized-result.interface';\nimport { UserRepository } from './repositories/user.repository';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private readonly userRepository: UserRepository,\n    private readonly authService: AuthService,\n    private readonly studentService: StudentService,\n    private readonly professorService: ProfessorService,\n  ) {}\n\n  @Transactional()\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const user = await this.createUserByType(createUserDto);\n    await this.authService.createAuth({\n      login: createUserDto.enrollment,\n      password: createUserDto.password,\n    });\n    runOnTransactionComplete((e) => {\n      e && console.error(e);\n      console.log('create auth transaction completed');\n    });\n    return user;\n  }\n\n  private async createUserByType(createUserDto: CreateUserDto): Promise {\n    switch (createUserDto.type) {\n      case UserType.PROFESSOR:\n        return this.professorService.createStudent(createUserDto);\n      case UserType.STUDENT:\n        return this.studentService.createStudent(createUserDto);\n      default:\n        throw new UnprocessableEntityException();\n    }\n  }\n\n  findUser(userDto: UserDto): Promise {\n    return this.userRepository.findOne({ ...userDto });\n  }\n\n  async mustFindUser(userDto: UserDto): Promise {\n    const user = await this.findUser(userDto);\n    if (!user) {\n      throw new UnauthorizedException(userDto);\n    }\n    return user;\n  }\n\n  async findSpecializedUser(userDto: UserDto): Promise {\n    const partialUser: UserResult | undefined =\n      await this.userRepository.findOne({\n        select: ['type', 'id'],\n        where: { ...userDto },\n      });\n\n    if (!partialUser) {\n      throw new UnauthorizedException(userDto);\n    }\n\n    let user: User | undefined;\n\n    switch (partialUser.type) {\n      case UserType.PROFESSOR:\n        user = await this.professorService.findOne(userDto);\n        break;\n      case UserType.STUDENT:\n        user = await this.studentService.findOne(userDto);\n        break;\n      default:\n        user = await this.userRepository.findOne({ ...userDto });\n    }\n\n    return user!;\n  }\n\n  async mustFindSpecializedUser(userDto: UserDto): Promise {\n    const user = await this.findSpecializedUser(userDto);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n\n  @Transactional()\n  async updateUser(enrollment: string, updateUserDto: UpdateUserDto): Promise {\n    const user = await this.mustFindUser({ enrollment });\n\n    return this.userRepository.save(\n      this.userRepository.merge(user, updateUserDto),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/answer/answer.controller.ts\n            \n            controller\n            AnswerController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/answer/answer.service.ts\n            \n            injectable\n            AnswerService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/answer/dto/create-answer.dto.ts\n            \n            class\n            CreateAnswerDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/answer/dto/update-answer.dto.ts\n            \n            class\n            UpdateAnswerDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/entities/answer-grade.entity.ts\n            \n            class\n            AnswerGrade\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/answer/entities/answer.entity.ts\n            \n            class\n            Answer\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/answer/interfaces/batch-user.interface.ts\n            \n            interface\n            BatchUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer-grade.repository.ts\n            \n            class\n            AnswerGradeRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/answer/repositories/answer.repository.ts\n            \n            class\n            AnswerRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MAX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.constants.ts\n            \n            variable\n            PASSWORD_MIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/casl/factories/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/repositories/auth.repository.ts\n            \n            class\n            AuthRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/course.entity.ts\n            \n            class\n            Course\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/grade.entity.ts\n            \n            class\n            Grade\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/period.entity.ts\n            \n            class\n            Period\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/professor.entity.ts\n            \n            class\n            Professor\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/student.entity.ts\n            \n            class\n            Student\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auxiliary/entities/subject.entity.ts\n            \n            class\n            Subject\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/grade.repository.ts\n            \n            class\n            GradeRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/period.repository.ts\n            \n            class\n            PeriodRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/professor.repository.ts\n            \n            class\n            ProfessorRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/repositories/student.repository.ts\n            \n            class\n            StudentRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auxiliary/services/grade.service.ts\n            \n            injectable\n            GradeService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auxiliary/services/period.service.ts\n            \n            injectable\n            PeriodService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auxiliary/services/professor.service.ts\n            \n            injectable\n            ProfessorService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auxiliary/services/student.service.ts\n            \n            injectable\n            StudentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            function\n            origin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            allowedOrigins\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            isProd\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            databaseConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/firebase.config.ts\n            \n            variable\n            firebaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/index.ts\n            \n            variable\n            configs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/interfaces/swagger.interface.ts\n            \n            interface\n            SwaggerOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/jwt.config.ts\n            \n            variable\n            jwtConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/nodemailer.config.ts\n            \n            variable\n            nodemailerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/rate-limit.config.ts\n            \n            variable\n            rateLimitConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/sentry.config.ts\n            \n            variable\n            sentryConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controllers/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/core.constants.ts\n            \n            variable\n            enrollmentLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/decorators/is-enrollment.decorator.ts\n            \n            function\n            IsEnrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/entities/ff.entity.ts\n            \n            class\n            FFEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/entities/timestamp.entity.ts\n            \n            class\n            TimestampEntity\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            interface\n            IClassValidatorException\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/filters/http-exception.filter.ts\n            \n            interface\n            IException\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/interceptors/payload.interceptor.ts\n            \n            injectable\n            PayloadInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/soft-delete-result.interface.ts\n            \n            interface\n            SoftDeleteResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/utils/last.util.ts\n            \n            function\n            last\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1619445806509-Auth.ts\n            \n            class\n            Auth1619445806509\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620179231630-QuestionGroup.ts\n            \n            class\n            QuestionGroup1620179231630\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            class\n            AdminUser1620299822480\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            cpf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620299822480-AdminUser.ts\n            \n            variable\n            enrollment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477175799-Auxiliary.ts\n            \n            class\n            Auxiliary1620477175799\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620477869366-QuestionImage.ts\n            \n            class\n            QuestionImage1620477869366\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620478273991-Exam.ts\n            \n            class\n            Exam1620478273991\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620488935141-QuestionPosition.ts\n            \n            class\n            QuestionPosition1620488935141\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1620563708532-QuestionPositionIdx.ts\n            \n            class\n            QuestionPositionIdx1620563708532\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1621036457247-ExamTitle.ts\n            \n            class\n            ExamTitle1621036457247\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1621992475274-QuestionGroupTarget.ts\n            \n            class\n            QuestionGroupTarget1621992475274\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622326106015-ExamTarget.ts\n            \n            class\n            ExamTarget1622326106015\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622326106015-ExamTarget.ts\n            \n            variable\n            targets\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1622332886234-ExamAgreement.ts\n            \n            class\n            ExamAgreement1622332886234\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622334780336-ExamAgreementAnonymousDefault.ts\n            \n            class\n            ExamAgreementAnonymousDefault1622334780336\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622378888497-ExamTargetAdd.ts\n            \n            class\n            ExamTargetAdd1622378888497\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622378888497-ExamTargetAdd.ts\n            \n            variable\n            addTargets\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1622417032753-ExamAgreementObservation.ts\n            \n            class\n            ExamAgreementObservation1622417032753\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1622421768424-Answer.ts\n            \n            class\n            Answer1622421768424\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663574-Auxiliary.ts\n            \n            class\n            Auxiliary1624416663574\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            class\n            SeedAuxiliary1624412129413\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            interface\n            IEntity\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            variable\n            defaultName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1624416663575-SeedAuxiliary1.ts\n            \n            variable\n            student\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1624547816204-PeriodIndex.ts\n            \n            class\n            PeriodIndex1624547816204\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624560625346-GradeIndex.ts\n            \n            class\n            GradeIndex1624560625346\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624750140569-AnswerScoreCheck.ts\n            \n            class\n            AnswerScoreCheck1624750140568\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1624883202214-QuestionGroupGradeRemove.ts\n            \n            class\n            QuestionGroupGradeRemove1624883202213\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1625001091463-ExamAgreementUniqueCode.ts\n            \n            class\n            ExamAgreementUniqueCode1625001091462\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1625001565002-GracefulUniqueCodeOnExamAgreement.ts\n            \n            class\n            GracefulUniqueCodeOnExamAgreement1625001565001\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1625002603969-ExamAgreementUniqueCodeSendedAt.ts\n            \n            class\n            ExamAgreementUniqueCodeSendedAt1625002603968\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1625013724393-UserEmail.ts\n            \n            class\n            UserEmail1625013724392\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam-agreement.controller.ts\n            \n            controller\n            ExamAgreementController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam-target.controller.ts\n            \n            controller\n            ExamTargetController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/controllers/exam.controller.ts\n            \n            controller\n            ExamController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam-agreement.dto.ts\n            \n            class\n            CreateExamAgreementDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam.dto.ts\n            \n            class\n            CreateExamDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/dtos/exam-agreement.dto.ts\n            \n            class\n            ExamAgreementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/exam-target-manager.dto.ts\n            \n            interface\n            ExamTargetManagerDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/find-exam-by-user.dto.ts\n            \n            interface\n            FindExamByUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam-agreement.dto.ts\n            \n            class\n            UpdateExamAgreementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam-agreement.dto.ts\n            \n            class\n            UpdateExamAgreementQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam.dto.ts\n            \n            class\n            UpdateExamDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/entities/exam-agreement.entity.ts\n            \n            class\n            ExamAgreement\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/exam/entities/exam-target.entity.ts\n            \n            class\n            ExamTarget\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/exam/entities/exam.entity.ts\n            \n            class\n            Exam\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/exam/exam.constants.ts\n            \n            variable\n            EXAM_NOT_FOUND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/factories/exam-target-node.factory.ts\n            \n            injectable\n            ExamTargetNodeFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/factories/exam-target-node.factory.ts\n            \n            interface\n            ExamTargetNodeSchema\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/interfaces/exam-agreement-user.interface.ts\n            \n            interface\n            ExamAgreementUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/interfaces/exam-user.interface.ts\n            \n            interface\n            ExamUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exam/models/exam-personal-result.model.ts\n            \n            class\n            ExamPersonalResult\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/models/exam-target-node.model.ts\n            \n            class\n            ExamTargetNode\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/providers/exam-target-tree.provider.ts\n            \n            injectable\n            ExamTargetTree\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam-agreement.repository.ts\n            \n            class\n            ExamAgreementRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam-target.repository.ts\n            \n            class\n            ExamTargetRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/repositories/exam.repository.ts\n            \n            class\n            ExamRepository\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/exam/services/exam-agreement.service.ts\n            \n            injectable\n            ExamAgreementService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/exam/services/exam-target.service.ts\n            \n            injectable\n            ExamTargetService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/exam/services/exam.service.ts\n            \n            injectable\n            ExamService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/exportation/exportation.controller.ts\n            \n            controller\n            ExportationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exportation/exportation.repository.ts\n            \n            injectable\n            ExportationRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exportation/exportation.service.ts\n            \n            injectable\n            ExportationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/exportation/interfaces/csv-line-row.interface.ts\n            \n            interface\n            CsvLineRow\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/exportation/interfaces/csv-line.interface.ts\n            \n            interface\n            CsvLine\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/exportation/maps/user-type.map.ts\n            \n            variable\n            userTypeMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/dtos/firebase-storage-upload.dto.ts\n            \n            interface\n            FirebaseStorageUploadDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/firebase-admin.constants.ts\n            \n            variable\n            FIREBASE_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/firebase-admin/providers/firebase-admin.provider.ts\n            \n            injectable\n            FirebaseAdmin\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/firebase/firebase.constants.ts\n            \n            variable\n            FIREBASE_ADMIN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseAsyncModuleOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-async-module-options.interface.ts\n            \n            interface\n            FirebaseModuleOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/interfaces/firebase-auth-decoded-token.interface.ts\n            \n            interface\n            FirebaseAuthDecodedToken\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-auth.service.ts\n            \n            injectable\n            FirebaseAuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-cloud-messaging.service.ts\n            \n            injectable\n            FirebaseCloudMessagingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-firestore.service.ts\n            \n            injectable\n            FirebaseFirestoreService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/firebase/services/firebase-storage.service.ts\n            \n            injectable\n            FirebaseStorageService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/controllers/upload.controller.ts\n            \n            controller\n            UploadController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/dtos/file-send.dto.ts\n            \n            interface\n            FileSendDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infra/dtos/send-agreement-email.dto.ts\n            \n            interface\n            SendAgreementEmailDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/dtos/send-mail.dto.ts\n            \n            class\n            SendMailDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infra/infra.constants.ts\n            \n            variable\n            NODEMAILER_TRANSPORTER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/infra.constants.ts\n            \n            variable\n            UPLOAD_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infra/services/firebase-uploader.service.ts\n            \n            injectable\n            FirebaseUploader\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/services/mailer.service.ts\n            \n            class\n            MailerService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infra/services/nodemailer.service.ts\n            \n            injectable\n            NodeMailerService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/services/send-email.service.ts\n            \n            injectable\n            SendEmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infra/services/template.service.ts\n            \n            injectable\n            TemplateService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infra/services/uploader.service.ts\n            \n            class\n            UploaderService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyGlobals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applyPerfLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            applySecurityLayer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            buildSwaggerDoc\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            sentryInit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            DEFAULT_PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question-group.controller.ts\n            \n            controller\n            QuestionGroupController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/question-group/controllers/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/question-group/dtos/copy-question-group.dto.ts\n            \n            class\n            CopyQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-question-group.dto.ts\n            \n            class\n            CreateQuestionGroupDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-question.dto.ts\n            \n            class\n            CreateQuestionDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-questions.dto.ts\n            \n            class\n            CreateQuestion\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/create-questions.dto.ts\n            \n            class\n            CreateQuestionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/find-personal.dto.ts\n            \n            class\n            FindPersonalDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/question-find.dto.ts\n            \n            class\n            QuestionFindDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/dtos/question-group-grade.dto.ts\n            \n            class\n            QuestionGroupGrade\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/question-group/dtos/reorder-question-group.dto.ts\n            \n            class\n            ReorderQuestionGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/reorder-question.dto.ts\n            \n            class\n            ReorderQuestionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/dtos/update-question-group.dto.ts\n            \n            class\n            UpdateQuestionGroupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/dtos/update-question.dto.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/entities/question-group.entity.ts\n            \n            class\n            QuestionGroup\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/question-group/entities/question.entity.ts\n            \n            class\n            Question\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/question-group/interfaces/question-group-user.interface.ts\n            \n            interface\n            QuestionGroupUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/question-group/providers/personal-group.provider.ts\n            \n            injectable\n            PersonalQuestionGroup\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/question-group/question-group.constants.ts\n            \n            variable\n            questionGroupNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/question.constants.ts\n            \n            variable\n            questionGroupRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/question.constants.ts\n            \n            variable\n            questionNotFound\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/repositories/question-group.repository.ts\n            \n            class\n            QuestionGroupRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/repositories/question.repository.ts\n            \n            class\n            QuestionRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question-group/services/question-group.service.ts\n            \n            injectable\n            QuestionGroupService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/question-group/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/decoratos/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user/helpers/create-user.helper.ts\n            \n            function\n            createUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/interfaces/user-specialized-result.interface.ts\n            \n            interface\n            UserResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/repositories/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.2.2\n        \n            @nestjs/common : ^7.6.13\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.13\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.13\n        \n            @nestjs/swagger : ^4.7.15\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @sentry/node : ^6.5.1\n        \n            @sentry/tracing : ^6.5.1\n        \n            bcryptjs : ^2.4.3\n        \n            brazilian-class-validator : ^0.1.6\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            date-fns : ^2.22.1\n        \n            express-basic-auth : ^1.2.0\n        \n            express-rate-limit : ^5.2.6\n        \n            faker : ^5.5.3\n        \n            firebase-admin : ^9.7.0\n        \n            helmet : ^4.4.1\n        \n            lodash : ^4.17.21\n        \n            morgan : ^1.10.0\n        \n            mustache : ^4.2.0\n        \n            mysql2 : ^2.2.5\n        \n            nodemailer : ^6.6.2\n        \n            objects-to-csv : ^1.3.6\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.31\n        \n            typeorm-naming-strategies : ^2.0.0\n        \n            typeorm-transactional-cls-hooked : ^0.1.20\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnswerType   (src/.../answer-type.enum.ts)\n                        \n                        \n                            CaslAction   (src/.../casl-action.enum.ts)\n                        \n                        \n                            ExamAgreementStatus   (src/.../exam-agreement-status.enum.ts)\n                        \n                        \n                            ExamStatus   (src/.../exam-status.enum.ts)\n                        \n                        \n                            ExamTargetType   (src/.../exam-target-type.enum.ts)\n                        \n                        \n                            ExportationType   (src/.../exportation-type.enum.ts)\n                        \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserType   (src/.../user-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/answer/enums/answer-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AnswerType\n                    \n                \n                        \n                            \n                                 ANSWER\n                            \n                        \n                        \n                            \n                                Value : Answer\n                            \n                        \n                        \n                            \n                                 ANSWER_GRADE\n                            \n                        \n                        \n                            \n                                Value : AnswerGrade\n                            \n                        \n            \n        \n\n    src/auth/casl/enums/casl-action.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CaslAction\n                    \n                \n                        \n                            \n                                 MANAGE\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 CREATE\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 READ\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 UPDATE\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-agreement-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamAgreementStatus\n                    \n                \n                        \n                            \n                                 STARTED\n                            \n                        \n                        \n                            \n                                Value : started\n                            \n                        \n                        \n                            \n                                 FINISHED\n                            \n                        \n                        \n                            \n                                Value : finished\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-target-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExamTargetType\n                    \n                \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : Student\n                            \n                        \n                        \n                            \n                                 PROFESSOR\n                            \n                        \n                        \n                            \n                                Value : Professor\n                            \n                        \n                        \n                            \n                                 COURSE\n                            \n                        \n                        \n                            \n                                Value : Course\n                            \n                        \n                        \n                            \n                                 GRADE\n                            \n                        \n                        \n                            \n                                Value : Grade\n                            \n                        \n            \n        \n\n    src/exportation/enums/exportation-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExportationType\n                    \n                \n                        \n                            \n                                 AVALIACAO\n                            \n                        \n                        \n                            \n                                Value : Avaliacao\n                            \n                        \n                        \n                            \n                                 GRUPO\n                            \n                        \n                        \n                            \n                                Value : Grupo\n                            \n                        \n                        \n                            \n                                 PESSOAL\n                            \n                        \n                        \n                            \n                                Value : GrupoPessoal\n                            \n                        \n            \n        \n\n    src/user/enum/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 MANAGER\n                            \n                        \n                        \n                            \n                                Value : manager\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 REGULAR\n                            \n                        \n                        \n                            \n                                Value : regular\n                            \n                        \n            \n        \n\n    src/user/enum/user-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserType\n                    \n                \n                        \n                            \n                                 PROFESSOR\n                            \n                        \n                        \n                            \n                                Value : Professor\n                            \n                        \n                        \n                            \n                                 STUDENT\n                            \n                        \n                        \n                            \n                                Value : Student\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            applyGlobals   (src/.../main.ts)\n                        \n                        \n                            applyPerfLayer   (src/.../main.ts)\n                        \n                        \n                            applySecurityLayer   (src/.../main.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            buildSwaggerDoc   (src/.../main.ts)\n                        \n                        \n                            createUser   (src/.../create-user.helper.ts)\n                        \n                        \n                            IsEnrollment   (src/.../is-enrollment.decorator.ts)\n                        \n                        \n                            last   (src/.../last.util.ts)\n                        \n                        \n                            origin   (src/.../cors.config.ts)\n                        \n                        \n                            sentryInit   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            applyGlobals\n                        \n                        \n                    \n                \n            \n            \n                \napplyGlobals(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyPerfLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplyPerfLayer(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applySecurityLayer\n                        \n                        \n                    \n                \n            \n            \n                \napplySecurityLayer(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildSwaggerDoc\n                        \n                        \n                    \n                \n            \n            \n                \nbuildSwaggerDoc(app, config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sentryInit\n                        \n                        \n                    \n                \n            \n            \n                \nsentryInit(config)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/user/helpers/create-user.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/decorators/is-enrollment.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            IsEnrollment\n                        \n                        \n                    \n                \n            \n            \n                \nIsEnrollment()\n                \n            \n\n\n\n\n        \n    \n    src/core/utils/last.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            last\n                        \n                        \n                    \n                \n            \n            \n                \nlast(arr)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/config/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            origin\n                        \n                        \n                    \n                \n            \n            \n                \norigin(origin, callback)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    origin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nFast Form API\nAPI para suprir a lógica de negócio do sistema Fast Form (FF)\nInstalação\nPara rodar a API localmente (em development mode) é necessário esses programas no seu computador:\n\ndocker\ndocker-compose\n\n# fullfil all needed environment variables copying .env.example to .env\n$ cp .env.example .env\n# initialize api service and its dependencies using following command\n$ sudo docker-compose up --build\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnswerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuxiliaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExportationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseAdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InfraModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionGroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnswerModule\n\n\n\ncluster_AnswerModule_imports\n\n\n\ncluster_AnswerModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuxiliaryModule\n\n\n\ncluster_AuxiliaryModule_exports\n\n\n\ncluster_AuxiliaryModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_CoreModule_providers\n\n\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_ExportationModule\n\n\n\ncluster_ExportationModule_exports\n\n\n\ncluster_ExportationModule_providers\n\n\n\ncluster_FirebaseAdminModule\n\n\n\ncluster_FirebaseAdminModule_exports\n\n\n\ncluster_FirebaseAdminModule_providers\n\n\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_exports\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_InfraModule\n\n\n\ncluster_InfraModule_exports\n\n\n\ncluster_InfraModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_QuestionGroupModule\n\n\n\ncluster_QuestionGroupModule_exports\n\n\n\ncluster_QuestionGroupModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nExamModule\n\nExamModule\n\n\n\nQuestionGroupModule\n\nQuestionGroupModule\n\nQuestionGroupModule -->\n\nExamModule->QuestionGroupModule\n\n\n\n\n\nAnswerModule\n\nAnswerModule\n\nAnswerModule -->\n\nExamModule->AnswerModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nExamAgreementService \n\nExamAgreementService \n\nExamAgreementService  -->\n\nExamModule->ExamAgreementService \n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\nAnswerModule -->\n\nQuestionGroupModule->AnswerModule\n\n\n\nAppModule -->\n\nQuestionGroupModule->AppModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionGroupModule->QuestionService \n\n\n\nAppModule -->\n\nAnswerModule->AppModule\n\n\n\n\n\nAnswerService\n\nAnswerService\n\nAnswerModule -->\n\nAnswerService->AnswerModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslModule \n\nCaslModule \n\nCaslModule  -->\n\nAuthModule->CaslModule \n\n\n\n\n\nJwtGuard \n\nJwtGuard \n\nJwtGuard  -->\n\nAuthModule->JwtGuard \n\n\n\n\n\nAuxiliaryModule\n\nAuxiliaryModule\n\nExamModule -->\n\nAuxiliaryModule->ExamModule\n\n\n\nQuestionGroupModule -->\n\nAuxiliaryModule->QuestionGroupModule\n\n\n\nAppModule -->\n\nAuxiliaryModule->AppModule\n\n\n\n\n\nGradeService \n\nGradeService \n\nGradeService  -->\n\nAuxiliaryModule->GradeService \n\n\n\n\n\nPeriodService \n\nPeriodService \n\nPeriodService  -->\n\nAuxiliaryModule->PeriodService \n\n\n\n\n\nProfessorService \n\nProfessorService \n\nProfessorService  -->\n\nAuxiliaryModule->ProfessorService \n\n\n\n\n\nStudentService \n\nStudentService \n\nStudentService  -->\n\nAuxiliaryModule->StudentService \n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nHttpExceptionFilter \n\nHttpExceptionFilter \n\nHttpExceptionFilter  -->\n\nCoreModule->HttpExceptionFilter \n\n\n\n\n\nPayloadInterceptor \n\nPayloadInterceptor \n\nPayloadInterceptor  -->\n\nCoreModule->PayloadInterceptor \n\n\n\n\n\nExportationModule\n\nExportationModule\n\nAppModule -->\n\nExportationModule->AppModule\n\n\n\n\n\nExportationService \n\nExportationService \n\nExportationService  -->\n\nExportationModule->ExportationService \n\n\n\n\n\nInfraModule\n\nInfraModule\n\nExamModule -->\n\nInfraModule->ExamModule\n\n\n\nExportationModule -->\n\nInfraModule->ExportationModule\n\n\n\nAppModule -->\n\nInfraModule->AppModule\n\n\n\n\n\nMailerService \n\nMailerService \n\nMailerService  -->\n\nInfraModule->MailerService \n\n\n\n\n\nSendEmailService \n\nSendEmailService \n\nSendEmailService  -->\n\nInfraModule->SendEmailService \n\n\n\n\n\nTemplateService \n\nTemplateService \n\nTemplateService  -->\n\nInfraModule->TemplateService \n\n\n\n\n\nUploaderService \n\nUploaderService \n\nUploaderService  -->\n\nInfraModule->UploaderService \n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAuthModule -->\n\nCaslModule->AuthModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtGuard\n\nJwtGuard\n\nAuthModule -->\n\nJwtGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nGradeService\n\nGradeService\n\nAuxiliaryModule -->\n\nGradeService->AuxiliaryModule\n\n\n\n\n\nPeriodService\n\nPeriodService\n\nAuxiliaryModule -->\n\nPeriodService->AuxiliaryModule\n\n\n\n\n\nProfessorService\n\nProfessorService\n\nAuxiliaryModule -->\n\nProfessorService->AuxiliaryModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nAuxiliaryModule -->\n\nStudentService->AuxiliaryModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\nPayloadInterceptor\n\nPayloadInterceptor\n\nCoreModule -->\n\nPayloadInterceptor->CoreModule\n\n\n\n\n\nExamAgreementService\n\nExamAgreementService\n\nExamModule -->\n\nExamAgreementService->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nExamTargetNodeFactory\n\nExamTargetNodeFactory\n\nExamModule -->\n\nExamTargetNodeFactory->ExamModule\n\n\n\n\n\nExamTargetService\n\nExamTargetService\n\nExamModule -->\n\nExamTargetService->ExamModule\n\n\n\n\n\nExamTargetTree\n\nExamTargetTree\n\nExamModule -->\n\nExamTargetTree->ExamModule\n\n\n\n\n\nExportationRepository\n\nExportationRepository\n\nExportationModule -->\n\nExportationRepository->ExportationModule\n\n\n\n\n\nExportationService\n\nExportationService\n\nExportationModule -->\n\nExportationService->ExportationModule\n\n\n\n\n\nFirebaseAdmin \n\nFirebaseAdmin \n\n\n\nFirebaseAdminModule\n\nFirebaseAdminModule\n\nFirebaseAdmin  -->\n\nFirebaseAdminModule->FirebaseAdmin \n\n\n\n\n\nFirebaseAdmin\n\nFirebaseAdmin\n\nFirebaseAdminModule -->\n\nFirebaseAdmin->FirebaseAdminModule\n\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\n\n\nFirebaseCloudMessagingService \n\nFirebaseCloudMessagingService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nInfraModule -->\n\nFirebaseModule->InfraModule\n\n\n\nFirebaseAuthService  -->\n\nFirebaseModule->FirebaseAuthService \n\n\n\nFirebaseCloudMessagingService  -->\n\nFirebaseModule->FirebaseCloudMessagingService \n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nFirebaseModule -->\n\nFirebaseAuthService->FirebaseModule\n\n\n\n\n\nFirebaseCloudMessagingService\n\nFirebaseCloudMessagingService\n\nFirebaseModule -->\n\nFirebaseCloudMessagingService->FirebaseModule\n\n\n\n\n\nSendEmailService\n\nSendEmailService\n\nInfraModule -->\n\nSendEmailService->InfraModule\n\n\n\n\n\nTemplateService\n\nTemplateService\n\nInfraModule -->\n\nTemplateService->InfraModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nPersonalQuestionGroup\n\nPersonalQuestionGroup\n\nQuestionGroupModule -->\n\nPersonalQuestionGroup->QuestionGroupModule\n\n\n\n\n\nQuestionGroupService\n\nQuestionGroupService\n\nQuestionGroupModule -->\n\nQuestionGroupService->QuestionGroupModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionGroupModule -->\n\nQuestionService->QuestionGroupModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        14 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    31 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    88 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    22 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            Callback   (src/.../cors.config.ts)\n                        \n                        \n                            CaslSubjects   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            FirebaseFirestoreCollection   (src/.../firebase-firestore-collection.type.ts)\n                        \n                        \n                            Path   (src/.../exam-target-node.model.ts)\n                        \n                        \n                            UserToFind   (src/.../user-to-find.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/casl/factories/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CaslSubjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    src/config/cors.config.ts\n    \n    \n        \n            \n                \n                    \n                    Callback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/firebase/types/firebase-firestore-collection.type.ts\n    \n    \n        \n            \n                \n                    \n                    FirebaseFirestoreCollection\n                \n            \n            \n                \n                        firebase.firestore.CollectionReference\n\n                \n            \n        \n    \n    src/exam/models/exam-target-node.model.ts\n    \n    \n        \n            \n                \n                    \n                    Path\n                \n            \n            \n                \n                        ExamTargetNode[] | undefined\n\n                \n            \n        \n    \n    src/auxiliary/types/user-to-find.type.ts\n    \n    \n        \n            \n                \n                    \n                    UserToFind\n                \n            \n            \n                \n                        Student | Professor\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addTargets   (src/.../1622378888497-ExamTargetAdd.ts)\n                        \n                        \n                            allowedOrigins   (src/.../cors.config.ts)\n                        \n                        \n                            configs   (src/.../index.ts)\n                        \n                        \n                            corsConfig   (src/.../cors.config.ts)\n                        \n                        \n                            corsConfigKey   (src/.../cors.config.ts)\n                        \n                        \n                            cpf   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            databaseConfigKey   (src/.../database.config.ts)\n                        \n                        \n                            DEFAULT_PORT   (src/.../main.ts)\n                        \n                        \n                            defaultName   (src/.../1624416663575-SeedAuxiliary1.ts)\n                        \n                        \n                            enrollment   (src/.../1620299822480-AdminUser.ts)\n                        \n                        \n                            enrollmentLength   (src/.../core.constants.ts)\n                        \n                        \n                            EXAM_NOT_FOUND   (src/.../exam.constants.ts)\n                        \n                        \n                            FIREBASE_ADMIN   (src/.../firebase.constants.ts)\n                        \n                        \n                            FIREBASE_OPTIONS   (src/.../firebase-admin.constants.ts)\n                        \n                        \n                            firebaseConfig   (src/.../firebase.config.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            isProd   (src/.../cors.config.ts)\n                        \n                        \n                            jwtConfig   (src/.../jwt.config.ts)\n                        \n                        \n                            jwtConfigKey   (src/.../jwt.config.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            NODEMAILER_TRANSPORTER   (src/.../infra.constants.ts)\n                        \n                        \n                            nodemailerConfig   (src/.../nodemailer.config.ts)\n                        \n                        \n                            PASSWORD_MAX   (src/.../auth.constants.ts)\n                        \n                        \n                            PASSWORD_MIN   (src/.../auth.constants.ts)\n                        \n                        \n                            questionGroupNotFound   (src/.../question-group.constants.ts)\n                        \n                        \n                            questionGroupRelations   (src/.../question.constants.ts)\n                        \n                        \n                            questionNotFound   (src/.../question.constants.ts)\n                        \n                        \n                            rateLimitConfig   (src/.../rate-limit.config.ts)\n                        \n                        \n                            rateLimitConfigKey   (src/.../rate-limit.config.ts)\n                        \n                        \n                            sentryConfig   (src/.../sentry.config.ts)\n                        \n                        \n                            student   (src/.../1624416663575-SeedAuxiliary1.ts)\n                        \n                        \n                            swaggerConfig   (src/.../swagger.config.ts)\n                        \n                        \n                            swaggerConfigKey   (src/.../swagger.config.ts)\n                        \n                        \n                            targets   (src/.../1622326106015-ExamTarget.ts)\n                        \n                        \n                            UPLOAD_PATH   (src/.../infra.constants.ts)\n                        \n                        \n                            userTypeMap   (src/.../user-type.map.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/migrations/1622378888497-ExamTargetAdd.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            addTargets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['Course', 'Grade']\n                        \n                    \n\n\n            \n        \n\n    src/config/cors.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            allowedOrigins\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp[]\n\n                        \n                    \n                    \n                        \n                            Default value : isProd\n  ? [/^https:\\/\\/(.*\\.|)herokuapp.com/]\n  : [/^http:\\/\\/localhost:(3000|5000)$/, /^https:\\/\\/(.*\\.|)herokuapp.com/]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  corsConfigKey,\n  (): CorsOptions => ({\n    origin,\n    optionsSuccessStatus: 200,\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            corsConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cors'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isProd\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.NODE_ENV === 'production'\n                        \n                    \n\n\n            \n        \n\n    src/config/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  swaggerConfig,\n  databaseConfig,\n  rateLimitConfig,\n  corsConfig,\n  jwtConfig,\n  firebaseConfig,\n  sentryConfig,\n  nodemailerConfig,\n]\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1620299822480-AdminUser.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cpf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '29997856155'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enrollment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '999999'\n                        \n                    \n\n\n            \n        \n\n    src/config/database.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  databaseConfigKey,\n  (): TypeOrmModuleOptions => ({\n    type: 'mysql',\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_DATABASE,\n    port: parseInt(process.env.DB_PORT!),\n    maxQueryExecutionTime: parseInt(process.env.DB_QUERY_TIMEOUT ?? '5000'),\n    entities: [__dirname + '/../**/*.entity.{js,ts}'],\n    migrations: [__dirname + '/../database/migrations/*.{js,ts}'],\n    subscribers: [__dirname + '/../**/*.subscriber.{js,ts}'],\n    synchronize: false,\n    logging:\n      process.env.DB_LOGGING === 'true' ||\n      process.env.NODE_ENV === 'development',\n    cli: {\n      migrationsDir: 'src/database/migrations',\n    },\n    namingStrategy: new SnakeNamingStrategy(),\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            databaseConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'database'\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_PORT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3000\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('bootstrap')\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1624416663575-SeedAuxiliary1.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Gerado'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            student\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  cpf: '50172241065',\n  enrollment: '989898',\n}\n                        \n                    \n\n\n            \n        \n\n    src/core/core.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            enrollmentLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : [1, 9]\n                        \n                    \n\n\n            \n        \n\n    src/exam/exam.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EXAM_NOT_FOUND\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Exam not found'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_ADMIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_ADMIN'\n                        \n                    \n\n\n            \n        \n\n    src/firebase/firebase-admin/firebase-admin.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FIREBASE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FIREBASE_OPTIONS'\n                        \n                    \n\n\n            \n        \n\n    src/config/firebase.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            firebaseConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  'firebase',\n  (): FirebaseModuleOptions => {\n    if (!process.env.FIREBASE_ADMIN) {\n      throw new Error(\n        'Needs FIREBASE_ADMIN env (JSON Service Account as string)',\n      );\n    }\n\n    if (!process.env.FIREBASE_BUCKET) {\n      throw new Error('Needs FIREBASE_BUCKET env var');\n    }\n\n    return {\n      cert: JSON.parse(process.env.FIREBASE_ADMIN),\n      storageBucket: process.env.FIREBASE_BUCKET,\n    };\n    //return JSON.parse(process.env.FIREBASE_ADMIN);\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/user/decoratos/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (_: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/config/jwt.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  jwtConfigKey,\n  (): JwtModuleOptions => ({\n    secret: process.env.JWT_SECRET,\n    signOptions: { issuer: 'ff.uneb.br', expiresIn: '10h' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'jwt'\n                        \n                    \n\n\n            \n        \n\n    src/infra/infra.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            NODEMAILER_TRANSPORTER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'transporter'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UPLOAD_PATH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/questions'\n                        \n                    \n\n\n            \n        \n\n    src/config/nodemailer.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            nodemailerConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs('nodemailer', () => ({\n  pool: true,\n  host: 'smtp.gmail.com',\n  port: 465,\n  secure: true, // use TLS\n  auth: {\n    user: process.env.MAIL_FROM,\n    pass: process.env.MAIL_PASSWORD,\n  },\n}))\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MAX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 100\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_MIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 6\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question-group.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionGroupNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'QuestionGroup not found'\n                        \n                    \n\n\n            \n        \n\n    src/question-group/question.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            questionGroupRelations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['questions']\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionNotFound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Question not found'\n                        \n                    \n\n\n            \n        \n\n    src/config/rate-limit.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(rateLimitConfigKey, () => ({\n  timeWindow: parseInt(process.env.RATE_LIMIT_WINDOW_MS ?? '60000'),\n  max: parseInt(process.env.RATE_LIMIT_MAX ?? '20'),\n}))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rateLimitConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'rateLimit'\n                        \n                    \n\n\n            \n        \n\n    src/config/sentry.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sentryConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs('sentry', () => ({\n  dsn: process.env.SENTRY_DSN,\n}))\n                        \n                    \n\n\n            \n        \n\n    src/config/swagger.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : registerAs(\n  swaggerConfigKey,\n  (): SwaggerOptions => ({\n    title: 'Fast Form',\n    description: 'Fast Form API',\n    version: 'v0.0.1',\n    users: { ff: 'senhaforte' },\n  }),\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'swagger'\n                        \n                    \n\n\n            \n        \n\n    src/database/migrations/1622326106015-ExamTarget.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            targets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\"Student\", \"Professor\"]\n                        \n                    \n\n\n            \n        \n\n    src/exportation/maps/user-type.map.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            userTypeMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ReadonlyMap\n\n                        \n                    \n                    \n                        \n                            Default value : new Map([\n  ['User', 'Usuário'],\n  ['Professor', 'Professor'],\n  ['Student', 'Estudante'],\n])\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
